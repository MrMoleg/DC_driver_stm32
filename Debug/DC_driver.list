
DC_driver.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006a74  080001d8  080001d8  000011d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000028  08006c4c  08006c4c  00007c4c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006c74  08006c74  0000800c  2**0
                  CONTENTS
  4 .ARM          00000000  08006c74  08006c74  0000800c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08006c74  08006c74  0000800c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006c74  08006c74  00007c74  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08006c78  08006c78  00007c78  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08006c7c  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000248  2000000c  08006c88  0000800c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000254  08006c88  00008254  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000800c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00017e12  00000000  00000000  0000803c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002f5f  00000000  00000000  0001fe4e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000017b8  00000000  00000000  00022db0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000124b  00000000  00000000  00024568  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00002f37  00000000  00000000  000257b3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00019ef2  00000000  00000000  000286ea  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000da050  00000000  00000000  000425dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0011c62c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006644  00000000  00000000  0011c670  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000065  00000000  00000000  00122cb4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	@ (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	@ (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	@ (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	2000000c 	.word	0x2000000c
 80001f4:	00000000 	.word	0x00000000
 80001f8:	08006c34 	.word	0x08006c34

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	@ (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	@ (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	@ (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000010 	.word	0x20000010
 8000214:	08006c34 	.word	0x08006c34

08000218 <DC_MOTOR_Set_Speed>:


}

void DC_MOTOR_Set_Speed(uint8_t au8_MOTOR_Instance, uint16_t au16_SPEED)
{
 8000218:	b480      	push	{r7}
 800021a:	b083      	sub	sp, #12
 800021c:	af00      	add	r7, sp, #0
 800021e:	4603      	mov	r3, r0
 8000220:	460a      	mov	r2, r1
 8000222:	71fb      	strb	r3, [r7, #7]
 8000224:	4613      	mov	r3, r2
 8000226:	80bb      	strh	r3, [r7, #4]
	DC_MOTOR_CfgParam[au8_MOTOR_Instance].TIM_Instance->CCR1 = au16_SPEED;
 8000228:	79fa      	ldrb	r2, [r7, #7]
 800022a:	490c      	ldr	r1, [pc, #48]	@ (800025c <DC_MOTOR_Set_Speed+0x44>)
 800022c:	4613      	mov	r3, r2
 800022e:	005b      	lsls	r3, r3, #1
 8000230:	4413      	add	r3, r2
 8000232:	00db      	lsls	r3, r3, #3
 8000234:	440b      	add	r3, r1
 8000236:	681b      	ldr	r3, [r3, #0]
 8000238:	88ba      	ldrh	r2, [r7, #4]
 800023a:	635a      	str	r2, [r3, #52]	@ 0x34
	DC_MOTOR_CfgParam[au8_MOTOR_Instance].TIM_Instance->CCR2 = au16_SPEED;
 800023c:	79fa      	ldrb	r2, [r7, #7]
 800023e:	4907      	ldr	r1, [pc, #28]	@ (800025c <DC_MOTOR_Set_Speed+0x44>)
 8000240:	4613      	mov	r3, r2
 8000242:	005b      	lsls	r3, r3, #1
 8000244:	4413      	add	r3, r2
 8000246:	00db      	lsls	r3, r3, #3
 8000248:	440b      	add	r3, r1
 800024a:	681b      	ldr	r3, [r3, #0]
 800024c:	88ba      	ldrh	r2, [r7, #4]
 800024e:	639a      	str	r2, [r3, #56]	@ 0x38

}
 8000250:	bf00      	nop
 8000252:	370c      	adds	r7, #12
 8000254:	46bd      	mov	sp, r7
 8000256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800025a:	4770      	bx	lr
 800025c:	08006c4c 	.word	0x08006c4c

08000260 <DC_MOTOR_Set_Dir>:

void DC_MOTOR_Set_Dir(uint8_t au8_MOTOR_Instance, TIM_HandleTypeDef *htim, uint8_t au8_DIR)
{
 8000260:	b580      	push	{r7, lr}
 8000262:	b082      	sub	sp, #8
 8000264:	af00      	add	r7, sp, #0
 8000266:	4603      	mov	r3, r0
 8000268:	6039      	str	r1, [r7, #0]
 800026a:	71fb      	strb	r3, [r7, #7]
 800026c:	4613      	mov	r3, r2
 800026e:	71bb      	strb	r3, [r7, #6]

	/* Write To The 2 Direction Control Pins */
	if(au8_DIR == DIR_CW)
 8000270:	79bb      	ldrb	r3, [r7, #6]
 8000272:	2b00      	cmp	r3, #0
 8000274:	d11a      	bne.n	80002ac <DC_MOTOR_Set_Dir+0x4c>
	{
		HAL_TIM_PWM_Start(htim, DC_MOTOR_CfgParam[au8_MOTOR_Instance].PWM_TIM_CH2);
 8000276:	79fa      	ldrb	r2, [r7, #7]
 8000278:	491d      	ldr	r1, [pc, #116]	@ (80002f0 <DC_MOTOR_Set_Dir+0x90>)
 800027a:	4613      	mov	r3, r2
 800027c:	005b      	lsls	r3, r3, #1
 800027e:	4413      	add	r3, r2
 8000280:	00db      	lsls	r3, r3, #3
 8000282:	440b      	add	r3, r1
 8000284:	3308      	adds	r3, #8
 8000286:	681b      	ldr	r3, [r3, #0]
 8000288:	4619      	mov	r1, r3
 800028a:	6838      	ldr	r0, [r7, #0]
 800028c:	f005 fa64 	bl	8005758 <HAL_TIM_PWM_Start>
		HAL_TIM_PWM_Stop(htim, DC_MOTOR_CfgParam[au8_MOTOR_Instance].PWM_TIM_CH1);
 8000290:	79fa      	ldrb	r2, [r7, #7]
 8000292:	4917      	ldr	r1, [pc, #92]	@ (80002f0 <DC_MOTOR_Set_Dir+0x90>)
 8000294:	4613      	mov	r3, r2
 8000296:	005b      	lsls	r3, r3, #1
 8000298:	4413      	add	r3, r2
 800029a:	00db      	lsls	r3, r3, #3
 800029c:	440b      	add	r3, r1
 800029e:	3304      	adds	r3, #4
 80002a0:	681b      	ldr	r3, [r3, #0]
 80002a2:	4619      	mov	r1, r3
 80002a4:	6838      	ldr	r0, [r7, #0]
 80002a6:	f005 fb57 	bl	8005958 <HAL_TIM_PWM_Stop>
	{
		HAL_TIM_PWM_Stop(htim, DC_MOTOR_CfgParam[au8_MOTOR_Instance].PWM_TIM_CH2);
		HAL_TIM_PWM_Start(htim, DC_MOTOR_CfgParam[au8_MOTOR_Instance].PWM_TIM_CH1);

	}
}
 80002aa:	e01c      	b.n	80002e6 <DC_MOTOR_Set_Dir+0x86>
	else if(au8_DIR == DIR_CCW)
 80002ac:	79bb      	ldrb	r3, [r7, #6]
 80002ae:	2b01      	cmp	r3, #1
 80002b0:	d119      	bne.n	80002e6 <DC_MOTOR_Set_Dir+0x86>
		HAL_TIM_PWM_Stop(htim, DC_MOTOR_CfgParam[au8_MOTOR_Instance].PWM_TIM_CH2);
 80002b2:	79fa      	ldrb	r2, [r7, #7]
 80002b4:	490e      	ldr	r1, [pc, #56]	@ (80002f0 <DC_MOTOR_Set_Dir+0x90>)
 80002b6:	4613      	mov	r3, r2
 80002b8:	005b      	lsls	r3, r3, #1
 80002ba:	4413      	add	r3, r2
 80002bc:	00db      	lsls	r3, r3, #3
 80002be:	440b      	add	r3, r1
 80002c0:	3308      	adds	r3, #8
 80002c2:	681b      	ldr	r3, [r3, #0]
 80002c4:	4619      	mov	r1, r3
 80002c6:	6838      	ldr	r0, [r7, #0]
 80002c8:	f005 fb46 	bl	8005958 <HAL_TIM_PWM_Stop>
		HAL_TIM_PWM_Start(htim, DC_MOTOR_CfgParam[au8_MOTOR_Instance].PWM_TIM_CH1);
 80002cc:	79fa      	ldrb	r2, [r7, #7]
 80002ce:	4908      	ldr	r1, [pc, #32]	@ (80002f0 <DC_MOTOR_Set_Dir+0x90>)
 80002d0:	4613      	mov	r3, r2
 80002d2:	005b      	lsls	r3, r3, #1
 80002d4:	4413      	add	r3, r2
 80002d6:	00db      	lsls	r3, r3, #3
 80002d8:	440b      	add	r3, r1
 80002da:	3304      	adds	r3, #4
 80002dc:	681b      	ldr	r3, [r3, #0]
 80002de:	4619      	mov	r1, r3
 80002e0:	6838      	ldr	r0, [r7, #0]
 80002e2:	f005 fa39 	bl	8005758 <HAL_TIM_PWM_Start>
}
 80002e6:	bf00      	nop
 80002e8:	3708      	adds	r7, #8
 80002ea:	46bd      	mov	sp, r7
 80002ec:	bd80      	pop	{r7, pc}
 80002ee:	bf00      	nop
 80002f0:	08006c4c 	.word	0x08006c4c

080002f4 <DC_MOTOR_Stop>:

void DC_MOTOR_Stop(uint8_t au8_MOTOR_Instance,  TIM_HandleTypeDef *htim, uint8_t au8_STOP_MODE)
{
 80002f4:	b580      	push	{r7, lr}
 80002f6:	b082      	sub	sp, #8
 80002f8:	af00      	add	r7, sp, #0
 80002fa:	4603      	mov	r3, r0
 80002fc:	6039      	str	r1, [r7, #0]
 80002fe:	71fb      	strb	r3, [r7, #7]
 8000300:	4613      	mov	r3, r2
 8000302:	71bb      	strb	r3, [r7, #6]
	/* Write To The 2 Direction Control Pins */


	if (au8_STOP_MODE == COAST){
 8000304:	79bb      	ldrb	r3, [r7, #6]
 8000306:	2b00      	cmp	r3, #0
 8000308:	d12d      	bne.n	8000366 <DC_MOTOR_Stop+0x72>
		HAL_TIM_PWM_Stop(htim, DC_MOTOR_CfgParam[au8_MOTOR_Instance].PWM_TIM_CH2);
 800030a:	79fa      	ldrb	r2, [r7, #7]
 800030c:	4930      	ldr	r1, [pc, #192]	@ (80003d0 <DC_MOTOR_Stop+0xdc>)
 800030e:	4613      	mov	r3, r2
 8000310:	005b      	lsls	r3, r3, #1
 8000312:	4413      	add	r3, r2
 8000314:	00db      	lsls	r3, r3, #3
 8000316:	440b      	add	r3, r1
 8000318:	3308      	adds	r3, #8
 800031a:	681b      	ldr	r3, [r3, #0]
 800031c:	4619      	mov	r1, r3
 800031e:	6838      	ldr	r0, [r7, #0]
 8000320:	f005 fb1a 	bl	8005958 <HAL_TIM_PWM_Stop>
		HAL_TIM_PWM_Stop(htim, DC_MOTOR_CfgParam[au8_MOTOR_Instance].PWM_TIM_CH1);
 8000324:	79fa      	ldrb	r2, [r7, #7]
 8000326:	492a      	ldr	r1, [pc, #168]	@ (80003d0 <DC_MOTOR_Stop+0xdc>)
 8000328:	4613      	mov	r3, r2
 800032a:	005b      	lsls	r3, r3, #1
 800032c:	4413      	add	r3, r2
 800032e:	00db      	lsls	r3, r3, #3
 8000330:	440b      	add	r3, r1
 8000332:	3304      	adds	r3, #4
 8000334:	681b      	ldr	r3, [r3, #0]
 8000336:	4619      	mov	r1, r3
 8000338:	6838      	ldr	r0, [r7, #0]
 800033a:	f005 fb0d 	bl	8005958 <HAL_TIM_PWM_Stop>
		DC_MOTOR_CfgParam[au8_MOTOR_Instance].TIM_Instance->CCR1 = 0;
 800033e:	79fa      	ldrb	r2, [r7, #7]
 8000340:	4923      	ldr	r1, [pc, #140]	@ (80003d0 <DC_MOTOR_Stop+0xdc>)
 8000342:	4613      	mov	r3, r2
 8000344:	005b      	lsls	r3, r3, #1
 8000346:	4413      	add	r3, r2
 8000348:	00db      	lsls	r3, r3, #3
 800034a:	440b      	add	r3, r1
 800034c:	681b      	ldr	r3, [r3, #0]
 800034e:	2200      	movs	r2, #0
 8000350:	635a      	str	r2, [r3, #52]	@ 0x34
		DC_MOTOR_CfgParam[au8_MOTOR_Instance].TIM_Instance->CCR2 = 0;
 8000352:	79fa      	ldrb	r2, [r7, #7]
 8000354:	491e      	ldr	r1, [pc, #120]	@ (80003d0 <DC_MOTOR_Stop+0xdc>)
 8000356:	4613      	mov	r3, r2
 8000358:	005b      	lsls	r3, r3, #1
 800035a:	4413      	add	r3, r2
 800035c:	00db      	lsls	r3, r3, #3
 800035e:	440b      	add	r3, r1
 8000360:	681b      	ldr	r3, [r3, #0]
 8000362:	2200      	movs	r2, #0
 8000364:	639a      	str	r2, [r3, #56]	@ 0x38

	}
	if (au8_STOP_MODE == BREAK ){
 8000366:	79bb      	ldrb	r3, [r7, #6]
 8000368:	2b01      	cmp	r3, #1
 800036a:	d12d      	bne.n	80003c8 <DC_MOTOR_Stop+0xd4>
		HAL_TIM_PWM_Start(htim, DC_MOTOR_CfgParam[au8_MOTOR_Instance].PWM_TIM_CH2);
 800036c:	79fa      	ldrb	r2, [r7, #7]
 800036e:	4918      	ldr	r1, [pc, #96]	@ (80003d0 <DC_MOTOR_Stop+0xdc>)
 8000370:	4613      	mov	r3, r2
 8000372:	005b      	lsls	r3, r3, #1
 8000374:	4413      	add	r3, r2
 8000376:	00db      	lsls	r3, r3, #3
 8000378:	440b      	add	r3, r1
 800037a:	3308      	adds	r3, #8
 800037c:	681b      	ldr	r3, [r3, #0]
 800037e:	4619      	mov	r1, r3
 8000380:	6838      	ldr	r0, [r7, #0]
 8000382:	f005 f9e9 	bl	8005758 <HAL_TIM_PWM_Start>
		HAL_TIM_PWM_Start(htim, DC_MOTOR_CfgParam[au8_MOTOR_Instance].PWM_TIM_CH1);
 8000386:	79fa      	ldrb	r2, [r7, #7]
 8000388:	4911      	ldr	r1, [pc, #68]	@ (80003d0 <DC_MOTOR_Stop+0xdc>)
 800038a:	4613      	mov	r3, r2
 800038c:	005b      	lsls	r3, r3, #1
 800038e:	4413      	add	r3, r2
 8000390:	00db      	lsls	r3, r3, #3
 8000392:	440b      	add	r3, r1
 8000394:	3304      	adds	r3, #4
 8000396:	681b      	ldr	r3, [r3, #0]
 8000398:	4619      	mov	r1, r3
 800039a:	6838      	ldr	r0, [r7, #0]
 800039c:	f005 f9dc 	bl	8005758 <HAL_TIM_PWM_Start>
		DC_MOTOR_CfgParam[au8_MOTOR_Instance].TIM_Instance->CCR1 = 200;
 80003a0:	79fa      	ldrb	r2, [r7, #7]
 80003a2:	490b      	ldr	r1, [pc, #44]	@ (80003d0 <DC_MOTOR_Stop+0xdc>)
 80003a4:	4613      	mov	r3, r2
 80003a6:	005b      	lsls	r3, r3, #1
 80003a8:	4413      	add	r3, r2
 80003aa:	00db      	lsls	r3, r3, #3
 80003ac:	440b      	add	r3, r1
 80003ae:	681b      	ldr	r3, [r3, #0]
 80003b0:	22c8      	movs	r2, #200	@ 0xc8
 80003b2:	635a      	str	r2, [r3, #52]	@ 0x34
		DC_MOTOR_CfgParam[au8_MOTOR_Instance].TIM_Instance->CCR2 = 200;
 80003b4:	79fa      	ldrb	r2, [r7, #7]
 80003b6:	4906      	ldr	r1, [pc, #24]	@ (80003d0 <DC_MOTOR_Stop+0xdc>)
 80003b8:	4613      	mov	r3, r2
 80003ba:	005b      	lsls	r3, r3, #1
 80003bc:	4413      	add	r3, r2
 80003be:	00db      	lsls	r3, r3, #3
 80003c0:	440b      	add	r3, r1
 80003c2:	681b      	ldr	r3, [r3, #0]
 80003c4:	22c8      	movs	r2, #200	@ 0xc8
 80003c6:	639a      	str	r2, [r3, #56]	@ 0x38
	}
	/* Write ZERO To The PWM Ch DutyCycle Register */

}
 80003c8:	bf00      	nop
 80003ca:	3708      	adds	r7, #8
 80003cc:	46bd      	mov	sp, r7
 80003ce:	bd80      	pop	{r7, pc}
 80003d0:	08006c4c 	.word	0x08006c4c

080003d4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80003d4:	b580      	push	{r7, lr}
 80003d6:	b082      	sub	sp, #8
 80003d8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80003da:	f000 fe86 	bl	80010ea <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80003de:	f000 f883 	bl	80004e8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80003e2:	f000 fab5 	bl	8000950 <MX_GPIO_Init>
  MX_DMA_Init();
 80003e6:	f000 fa89 	bl	80008fc <MX_DMA_Init>
  MX_ADC1_Init();
 80003ea:	f000 f8c7 	bl	800057c <MX_ADC1_Init>
  MX_FDCAN1_Init();
 80003ee:	f000 f93d 	bl	800066c <MX_FDCAN1_Init>
  MX_I2C1_Init();
 80003f2:	f000 f981 	bl	80006f8 <MX_I2C1_Init>
  MX_I2C3_Init();
 80003f6:	f000 f9bf 	bl	8000778 <MX_I2C3_Init>
  MX_TIM2_Init();
 80003fa:	f000 f9fd 	bl	80007f8 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_GPIO_WritePin(nSLEEP_GPIO_Port, nSLEEP_Pin, 1);
 80003fe:	2201      	movs	r2, #1
 8000400:	2104      	movs	r1, #4
 8000402:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000406:	f003 f989 	bl	800371c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LED_R_GPIO_Port, LED_R_Pin, 1);
 800040a:	2201      	movs	r2, #1
 800040c:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000410:	4831      	ldr	r0, [pc, #196]	@ (80004d8 <main+0x104>)
 8000412:	f003 f983 	bl	800371c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LED_G_GPIO_Port, LED_G_Pin, 0);
 8000416:	2200      	movs	r2, #0
 8000418:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800041c:	482e      	ldr	r0, [pc, #184]	@ (80004d8 <main+0x104>)
 800041e:	f003 f97d 	bl	800371c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LED_B_GPIO_Port, LED_B_Pin, 0);
 8000422:	2200      	movs	r2, #0
 8000424:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000428:	482b      	ldr	r0, [pc, #172]	@ (80004d8 <main+0x104>)
 800042a:	f003 f977 	bl	800371c <HAL_GPIO_WritePin>

  uint8_t dir = DIR_CCW;
 800042e:	2301      	movs	r3, #1
 8000430:	71fb      	strb	r3, [r7, #7]
  uint16_t speed =0;
 8000432:	2300      	movs	r3, #0
 8000434:	80bb      	strh	r3, [r7, #4]
  volatile static uint16_t current_value;
  HAL_ADCEx_Calibration_Start(&hadc1, 1);
 8000436:	2101      	movs	r1, #1
 8000438:	4828      	ldr	r0, [pc, #160]	@ (80004dc <main+0x108>)
 800043a:	f002 f93f 	bl	80026bc <HAL_ADCEx_Calibration_Start>
  HAL_ADC_Start_DMA(&hadc1, (uint32_t*)current_value, 1);
 800043e:	4b28      	ldr	r3, [pc, #160]	@ (80004e0 <main+0x10c>)
 8000440:	881b      	ldrh	r3, [r3, #0]
 8000442:	b29b      	uxth	r3, r3
 8000444:	2201      	movs	r2, #1
 8000446:	4619      	mov	r1, r3
 8000448:	4824      	ldr	r0, [pc, #144]	@ (80004dc <main+0x108>)
 800044a:	f001 faa9 	bl	80019a0 <HAL_ADC_Start_DMA>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  while (1)
  {
	  DC_MOTOR_Set_Dir(DC_MOTOR1, &htim2, dir);
 800044e:	79fb      	ldrb	r3, [r7, #7]
 8000450:	461a      	mov	r2, r3
 8000452:	4924      	ldr	r1, [pc, #144]	@ (80004e4 <main+0x110>)
 8000454:	2000      	movs	r0, #0
 8000456:	f7ff ff03 	bl	8000260 <DC_MOTOR_Set_Dir>
	  DC_MOTOR_Set_Speed(DC_MOTOR1, speed);
 800045a:	88bb      	ldrh	r3, [r7, #4]
 800045c:	4619      	mov	r1, r3
 800045e:	2000      	movs	r0, #0
 8000460:	f7ff feda 	bl	8000218 <DC_MOTOR_Set_Speed>


	  while(speed < 1022)
 8000464:	e00a      	b.n	800047c <main+0xa8>
	          {
	              DC_MOTOR_Set_Speed(DC_MOTOR1, speed);
 8000466:	88bb      	ldrh	r3, [r7, #4]
 8000468:	4619      	mov	r1, r3
 800046a:	2000      	movs	r0, #0
 800046c:	f7ff fed4 	bl	8000218 <DC_MOTOR_Set_Speed>
	              speed += 1;
 8000470:	88bb      	ldrh	r3, [r7, #4]
 8000472:	3301      	adds	r3, #1
 8000474:	80bb      	strh	r3, [r7, #4]
	              HAL_Delay(1);
 8000476:	2001      	movs	r0, #1
 8000478:	f000 fea8 	bl	80011cc <HAL_Delay>
	  while(speed < 1022)
 800047c:	88bb      	ldrh	r3, [r7, #4]
 800047e:	f240 32fd 	movw	r2, #1021	@ 0x3fd
 8000482:	4293      	cmp	r3, r2
 8000484:	d9ef      	bls.n	8000466 <main+0x92>
	          }
	  while(speed > 100)
 8000486:	e00a      	b.n	800049e <main+0xca>
	  	  	  {
		  DC_MOTOR_Set_Speed(DC_MOTOR1, speed);
 8000488:	88bb      	ldrh	r3, [r7, #4]
 800048a:	4619      	mov	r1, r3
 800048c:	2000      	movs	r0, #0
 800048e:	f7ff fec3 	bl	8000218 <DC_MOTOR_Set_Speed>
		  speed -= 1;
 8000492:	88bb      	ldrh	r3, [r7, #4]
 8000494:	3b01      	subs	r3, #1
 8000496:	80bb      	strh	r3, [r7, #4]
	      HAL_Delay(1);
 8000498:	2001      	movs	r0, #1
 800049a:	f000 fe97 	bl	80011cc <HAL_Delay>
	  while(speed > 100)
 800049e:	88bb      	ldrh	r3, [r7, #4]
 80004a0:	2b64      	cmp	r3, #100	@ 0x64
 80004a2:	d8f1      	bhi.n	8000488 <main+0xb4>
	          }


	 if(dir == DIR_CW){
 80004a4:	79fb      	ldrb	r3, [r7, #7]
 80004a6:	2b00      	cmp	r3, #0
 80004a8:	d107      	bne.n	80004ba <main+0xe6>
		 dir = DIR_CCW;
 80004aa:	2301      	movs	r3, #1
 80004ac:	71fb      	strb	r3, [r7, #7]
		 DC_MOTOR_Stop(DC_MOTOR1, &htim2, BREAK);
 80004ae:	2201      	movs	r2, #1
 80004b0:	490c      	ldr	r1, [pc, #48]	@ (80004e4 <main+0x110>)
 80004b2:	2000      	movs	r0, #0
 80004b4:	f7ff ff1e 	bl	80002f4 <DC_MOTOR_Stop>
 80004b8:	e009      	b.n	80004ce <main+0xfa>
	 }else if(dir==DIR_CCW){
 80004ba:	79fb      	ldrb	r3, [r7, #7]
 80004bc:	2b01      	cmp	r3, #1
 80004be:	d106      	bne.n	80004ce <main+0xfa>
		 dir = DIR_CW;
 80004c0:	2300      	movs	r3, #0
 80004c2:	71fb      	strb	r3, [r7, #7]
		 DC_MOTOR_Stop(DC_MOTOR1, &htim2, COAST);
 80004c4:	2200      	movs	r2, #0
 80004c6:	4907      	ldr	r1, [pc, #28]	@ (80004e4 <main+0x110>)
 80004c8:	2000      	movs	r0, #0
 80004ca:	f7ff ff13 	bl	80002f4 <DC_MOTOR_Stop>
	 }
	// DC_MOTOR_Set_Dir(DC_MOTOR1, &htim2, dir);
	 HAL_Delay(2000);
 80004ce:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 80004d2:	f000 fe7b 	bl	80011cc <HAL_Delay>
	  DC_MOTOR_Set_Dir(DC_MOTOR1, &htim2, dir);
 80004d6:	e7ba      	b.n	800044e <main+0x7a>
 80004d8:	48000800 	.word	0x48000800
 80004dc:	20000028 	.word	0x20000028
 80004e0:	2000024c 	.word	0x2000024c
 80004e4:	20000200 	.word	0x20000200

080004e8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80004e8:	b580      	push	{r7, lr}
 80004ea:	b094      	sub	sp, #80	@ 0x50
 80004ec:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80004ee:	f107 0318 	add.w	r3, r7, #24
 80004f2:	2238      	movs	r2, #56	@ 0x38
 80004f4:	2100      	movs	r1, #0
 80004f6:	4618      	mov	r0, r3
 80004f8:	f006 fb70 	bl	8006bdc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80004fc:	1d3b      	adds	r3, r7, #4
 80004fe:	2200      	movs	r2, #0
 8000500:	601a      	str	r2, [r3, #0]
 8000502:	605a      	str	r2, [r3, #4]
 8000504:	609a      	str	r2, [r3, #8]
 8000506:	60da      	str	r2, [r3, #12]
 8000508:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 800050a:	f44f 7000 	mov.w	r0, #512	@ 0x200
 800050e:	f004 f877 	bl	8004600 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000512:	2301      	movs	r3, #1
 8000514:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000516:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800051a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800051c:	2302      	movs	r3, #2
 800051e:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000520:	2303      	movs	r3, #3
 8000522:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 8000524:	2304      	movs	r3, #4
 8000526:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 24;
 8000528:	2318      	movs	r3, #24
 800052a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800052c:	2302      	movs	r3, #2
 800052e:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000530:	2302      	movs	r3, #2
 8000532:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000534:	2302      	movs	r3, #2
 8000536:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000538:	f107 0318 	add.w	r3, r7, #24
 800053c:	4618      	mov	r0, r3
 800053e:	f004 f96d 	bl	800481c <HAL_RCC_OscConfig>
 8000542:	4603      	mov	r3, r0
 8000544:	2b00      	cmp	r3, #0
 8000546:	d001      	beq.n	800054c <SystemClock_Config+0x64>
  {
    Error_Handler();
 8000548:	f000 faa8 	bl	8000a9c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800054c:	230f      	movs	r3, #15
 800054e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000550:	2303      	movs	r3, #3
 8000552:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000554:	2300      	movs	r3, #0
 8000556:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000558:	2300      	movs	r3, #0
 800055a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800055c:	2300      	movs	r3, #0
 800055e:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000560:	1d3b      	adds	r3, r7, #4
 8000562:	2102      	movs	r1, #2
 8000564:	4618      	mov	r0, r3
 8000566:	f004 fc6b 	bl	8004e40 <HAL_RCC_ClockConfig>
 800056a:	4603      	mov	r3, r0
 800056c:	2b00      	cmp	r3, #0
 800056e:	d001      	beq.n	8000574 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 8000570:	f000 fa94 	bl	8000a9c <Error_Handler>
  }
}
 8000574:	bf00      	nop
 8000576:	3750      	adds	r7, #80	@ 0x50
 8000578:	46bd      	mov	sp, r7
 800057a:	bd80      	pop	{r7, pc}

0800057c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800057c:	b580      	push	{r7, lr}
 800057e:	b08c      	sub	sp, #48	@ 0x30
 8000580:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000582:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000586:	2200      	movs	r2, #0
 8000588:	601a      	str	r2, [r3, #0]
 800058a:	605a      	str	r2, [r3, #4]
 800058c:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 800058e:	1d3b      	adds	r3, r7, #4
 8000590:	2220      	movs	r2, #32
 8000592:	2100      	movs	r1, #0
 8000594:	4618      	mov	r0, r3
 8000596:	f006 fb21 	bl	8006bdc <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 800059a:	4b32      	ldr	r3, [pc, #200]	@ (8000664 <MX_ADC1_Init+0xe8>)
 800059c:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 80005a0:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 80005a2:	4b30      	ldr	r3, [pc, #192]	@ (8000664 <MX_ADC1_Init+0xe8>)
 80005a4:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80005a8:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80005aa:	4b2e      	ldr	r3, [pc, #184]	@ (8000664 <MX_ADC1_Init+0xe8>)
 80005ac:	2200      	movs	r2, #0
 80005ae:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80005b0:	4b2c      	ldr	r3, [pc, #176]	@ (8000664 <MX_ADC1_Init+0xe8>)
 80005b2:	2200      	movs	r2, #0
 80005b4:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 80005b6:	4b2b      	ldr	r3, [pc, #172]	@ (8000664 <MX_ADC1_Init+0xe8>)
 80005b8:	2200      	movs	r2, #0
 80005ba:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80005bc:	4b29      	ldr	r3, [pc, #164]	@ (8000664 <MX_ADC1_Init+0xe8>)
 80005be:	2200      	movs	r2, #0
 80005c0:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80005c2:	4b28      	ldr	r3, [pc, #160]	@ (8000664 <MX_ADC1_Init+0xe8>)
 80005c4:	2204      	movs	r2, #4
 80005c6:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80005c8:	4b26      	ldr	r3, [pc, #152]	@ (8000664 <MX_ADC1_Init+0xe8>)
 80005ca:	2200      	movs	r2, #0
 80005cc:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80005ce:	4b25      	ldr	r3, [pc, #148]	@ (8000664 <MX_ADC1_Init+0xe8>)
 80005d0:	2201      	movs	r2, #1
 80005d2:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 1;
 80005d4:	4b23      	ldr	r3, [pc, #140]	@ (8000664 <MX_ADC1_Init+0xe8>)
 80005d6:	2201      	movs	r2, #1
 80005d8:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80005da:	4b22      	ldr	r3, [pc, #136]	@ (8000664 <MX_ADC1_Init+0xe8>)
 80005dc:	2200      	movs	r2, #0
 80005de:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80005e2:	4b20      	ldr	r3, [pc, #128]	@ (8000664 <MX_ADC1_Init+0xe8>)
 80005e4:	2200      	movs	r2, #0
 80005e6:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80005e8:	4b1e      	ldr	r3, [pc, #120]	@ (8000664 <MX_ADC1_Init+0xe8>)
 80005ea:	2200      	movs	r2, #0
 80005ec:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.DMAContinuousRequests = ENABLE;
 80005ee:	4b1d      	ldr	r3, [pc, #116]	@ (8000664 <MX_ADC1_Init+0xe8>)
 80005f0:	2201      	movs	r2, #1
 80005f2:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80005f6:	4b1b      	ldr	r3, [pc, #108]	@ (8000664 <MX_ADC1_Init+0xe8>)
 80005f8:	2200      	movs	r2, #0
 80005fa:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 80005fc:	4b19      	ldr	r3, [pc, #100]	@ (8000664 <MX_ADC1_Init+0xe8>)
 80005fe:	2200      	movs	r2, #0
 8000600:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000604:	4817      	ldr	r0, [pc, #92]	@ (8000664 <MX_ADC1_Init+0xe8>)
 8000606:	f001 f847 	bl	8001698 <HAL_ADC_Init>
 800060a:	4603      	mov	r3, r0
 800060c:	2b00      	cmp	r3, #0
 800060e:	d001      	beq.n	8000614 <MX_ADC1_Init+0x98>
  {
    Error_Handler();
 8000610:	f000 fa44 	bl	8000a9c <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000614:	2300      	movs	r3, #0
 8000616:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000618:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800061c:	4619      	mov	r1, r3
 800061e:	4811      	ldr	r0, [pc, #68]	@ (8000664 <MX_ADC1_Init+0xe8>)
 8000620:	f002 f8ae 	bl	8002780 <HAL_ADCEx_MultiModeConfigChannel>
 8000624:	4603      	mov	r3, r0
 8000626:	2b00      	cmp	r3, #0
 8000628:	d001      	beq.n	800062e <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 800062a:	f000 fa37 	bl	8000a9c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_15;
 800062e:	4b0e      	ldr	r3, [pc, #56]	@ (8000668 <MX_ADC1_Init+0xec>)
 8000630:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000632:	2306      	movs	r3, #6
 8000634:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000636:	2300      	movs	r3, #0
 8000638:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800063a:	237f      	movs	r3, #127	@ 0x7f
 800063c:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800063e:	2304      	movs	r3, #4
 8000640:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000642:	2300      	movs	r3, #0
 8000644:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000646:	1d3b      	adds	r3, r7, #4
 8000648:	4619      	mov	r1, r3
 800064a:	4806      	ldr	r0, [pc, #24]	@ (8000664 <MX_ADC1_Init+0xe8>)
 800064c:	f001 fa7a 	bl	8001b44 <HAL_ADC_ConfigChannel>
 8000650:	4603      	mov	r3, r0
 8000652:	2b00      	cmp	r3, #0
 8000654:	d001      	beq.n	800065a <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 8000656:	f000 fa21 	bl	8000a9c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800065a:	bf00      	nop
 800065c:	3730      	adds	r7, #48	@ 0x30
 800065e:	46bd      	mov	sp, r7
 8000660:	bd80      	pop	{r7, pc}
 8000662:	bf00      	nop
 8000664:	20000028 	.word	0x20000028
 8000668:	3ef08000 	.word	0x3ef08000

0800066c <MX_FDCAN1_Init>:
  * @brief FDCAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN1_Init(void)
{
 800066c:	b580      	push	{r7, lr}
 800066e:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 8000670:	4b1f      	ldr	r3, [pc, #124]	@ (80006f0 <MX_FDCAN1_Init+0x84>)
 8000672:	4a20      	ldr	r2, [pc, #128]	@ (80006f4 <MX_FDCAN1_Init+0x88>)
 8000674:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.ClockDivider = FDCAN_CLOCK_DIV1;
 8000676:	4b1e      	ldr	r3, [pc, #120]	@ (80006f0 <MX_FDCAN1_Init+0x84>)
 8000678:	2200      	movs	r2, #0
 800067a:	605a      	str	r2, [r3, #4]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 800067c:	4b1c      	ldr	r3, [pc, #112]	@ (80006f0 <MX_FDCAN1_Init+0x84>)
 800067e:	2200      	movs	r2, #0
 8000680:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 8000682:	4b1b      	ldr	r3, [pc, #108]	@ (80006f0 <MX_FDCAN1_Init+0x84>)
 8000684:	2200      	movs	r2, #0
 8000686:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = DISABLE;
 8000688:	4b19      	ldr	r3, [pc, #100]	@ (80006f0 <MX_FDCAN1_Init+0x84>)
 800068a:	2200      	movs	r2, #0
 800068c:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 800068e:	4b18      	ldr	r3, [pc, #96]	@ (80006f0 <MX_FDCAN1_Init+0x84>)
 8000690:	2200      	movs	r2, #0
 8000692:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 8000694:	4b16      	ldr	r3, [pc, #88]	@ (80006f0 <MX_FDCAN1_Init+0x84>)
 8000696:	2200      	movs	r2, #0
 8000698:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 16;
 800069a:	4b15      	ldr	r3, [pc, #84]	@ (80006f0 <MX_FDCAN1_Init+0x84>)
 800069c:	2210      	movs	r2, #16
 800069e:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 1;
 80006a0:	4b13      	ldr	r3, [pc, #76]	@ (80006f0 <MX_FDCAN1_Init+0x84>)
 80006a2:	2201      	movs	r2, #1
 80006a4:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 2;
 80006a6:	4b12      	ldr	r3, [pc, #72]	@ (80006f0 <MX_FDCAN1_Init+0x84>)
 80006a8:	2202      	movs	r2, #2
 80006aa:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 2;
 80006ac:	4b10      	ldr	r3, [pc, #64]	@ (80006f0 <MX_FDCAN1_Init+0x84>)
 80006ae:	2202      	movs	r2, #2
 80006b0:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 1;
 80006b2:	4b0f      	ldr	r3, [pc, #60]	@ (80006f0 <MX_FDCAN1_Init+0x84>)
 80006b4:	2201      	movs	r2, #1
 80006b6:	625a      	str	r2, [r3, #36]	@ 0x24
  hfdcan1.Init.DataSyncJumpWidth = 1;
 80006b8:	4b0d      	ldr	r3, [pc, #52]	@ (80006f0 <MX_FDCAN1_Init+0x84>)
 80006ba:	2201      	movs	r2, #1
 80006bc:	629a      	str	r2, [r3, #40]	@ 0x28
  hfdcan1.Init.DataTimeSeg1 = 1;
 80006be:	4b0c      	ldr	r3, [pc, #48]	@ (80006f0 <MX_FDCAN1_Init+0x84>)
 80006c0:	2201      	movs	r2, #1
 80006c2:	62da      	str	r2, [r3, #44]	@ 0x2c
  hfdcan1.Init.DataTimeSeg2 = 1;
 80006c4:	4b0a      	ldr	r3, [pc, #40]	@ (80006f0 <MX_FDCAN1_Init+0x84>)
 80006c6:	2201      	movs	r2, #1
 80006c8:	631a      	str	r2, [r3, #48]	@ 0x30
  hfdcan1.Init.StdFiltersNbr = 0;
 80006ca:	4b09      	ldr	r3, [pc, #36]	@ (80006f0 <MX_FDCAN1_Init+0x84>)
 80006cc:	2200      	movs	r2, #0
 80006ce:	635a      	str	r2, [r3, #52]	@ 0x34
  hfdcan1.Init.ExtFiltersNbr = 0;
 80006d0:	4b07      	ldr	r3, [pc, #28]	@ (80006f0 <MX_FDCAN1_Init+0x84>)
 80006d2:	2200      	movs	r2, #0
 80006d4:	639a      	str	r2, [r3, #56]	@ 0x38
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 80006d6:	4b06      	ldr	r3, [pc, #24]	@ (80006f0 <MX_FDCAN1_Init+0x84>)
 80006d8:	2200      	movs	r2, #0
 80006da:	63da      	str	r2, [r3, #60]	@ 0x3c
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 80006dc:	4804      	ldr	r0, [pc, #16]	@ (80006f0 <MX_FDCAN1_Init+0x84>)
 80006de:	f002 fceb 	bl	80030b8 <HAL_FDCAN_Init>
 80006e2:	4603      	mov	r3, r0
 80006e4:	2b00      	cmp	r3, #0
 80006e6:	d001      	beq.n	80006ec <MX_FDCAN1_Init+0x80>
  {
    Error_Handler();
 80006e8:	f000 f9d8 	bl	8000a9c <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */

  /* USER CODE END FDCAN1_Init 2 */

}
 80006ec:	bf00      	nop
 80006ee:	bd80      	pop	{r7, pc}
 80006f0:	200000f4 	.word	0x200000f4
 80006f4:	40006400 	.word	0x40006400

080006f8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80006f8:	b580      	push	{r7, lr}
 80006fa:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80006fc:	4b1b      	ldr	r3, [pc, #108]	@ (800076c <MX_I2C1_Init+0x74>)
 80006fe:	4a1c      	ldr	r2, [pc, #112]	@ (8000770 <MX_I2C1_Init+0x78>)
 8000700:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10C18DCC;
 8000702:	4b1a      	ldr	r3, [pc, #104]	@ (800076c <MX_I2C1_Init+0x74>)
 8000704:	4a1b      	ldr	r2, [pc, #108]	@ (8000774 <MX_I2C1_Init+0x7c>)
 8000706:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000708:	4b18      	ldr	r3, [pc, #96]	@ (800076c <MX_I2C1_Init+0x74>)
 800070a:	2200      	movs	r2, #0
 800070c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800070e:	4b17      	ldr	r3, [pc, #92]	@ (800076c <MX_I2C1_Init+0x74>)
 8000710:	2201      	movs	r2, #1
 8000712:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000714:	4b15      	ldr	r3, [pc, #84]	@ (800076c <MX_I2C1_Init+0x74>)
 8000716:	2200      	movs	r2, #0
 8000718:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800071a:	4b14      	ldr	r3, [pc, #80]	@ (800076c <MX_I2C1_Init+0x74>)
 800071c:	2200      	movs	r2, #0
 800071e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000720:	4b12      	ldr	r3, [pc, #72]	@ (800076c <MX_I2C1_Init+0x74>)
 8000722:	2200      	movs	r2, #0
 8000724:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000726:	4b11      	ldr	r3, [pc, #68]	@ (800076c <MX_I2C1_Init+0x74>)
 8000728:	2200      	movs	r2, #0
 800072a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800072c:	4b0f      	ldr	r3, [pc, #60]	@ (800076c <MX_I2C1_Init+0x74>)
 800072e:	2200      	movs	r2, #0
 8000730:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000732:	480e      	ldr	r0, [pc, #56]	@ (800076c <MX_I2C1_Init+0x74>)
 8000734:	f003 f82d 	bl	8003792 <HAL_I2C_Init>
 8000738:	4603      	mov	r3, r0
 800073a:	2b00      	cmp	r3, #0
 800073c:	d001      	beq.n	8000742 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800073e:	f000 f9ad 	bl	8000a9c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000742:	2100      	movs	r1, #0
 8000744:	4809      	ldr	r0, [pc, #36]	@ (800076c <MX_I2C1_Init+0x74>)
 8000746:	f003 febc 	bl	80044c2 <HAL_I2CEx_ConfigAnalogFilter>
 800074a:	4603      	mov	r3, r0
 800074c:	2b00      	cmp	r3, #0
 800074e:	d001      	beq.n	8000754 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000750:	f000 f9a4 	bl	8000a9c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000754:	2100      	movs	r1, #0
 8000756:	4805      	ldr	r0, [pc, #20]	@ (800076c <MX_I2C1_Init+0x74>)
 8000758:	f003 fefe 	bl	8004558 <HAL_I2CEx_ConfigDigitalFilter>
 800075c:	4603      	mov	r3, r0
 800075e:	2b00      	cmp	r3, #0
 8000760:	d001      	beq.n	8000766 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000762:	f000 f99b 	bl	8000a9c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000766:	bf00      	nop
 8000768:	bd80      	pop	{r7, pc}
 800076a:	bf00      	nop
 800076c:	20000158 	.word	0x20000158
 8000770:	40005400 	.word	0x40005400
 8000774:	10c18dcc 	.word	0x10c18dcc

08000778 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8000778:	b580      	push	{r7, lr}
 800077a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 800077c:	4b1b      	ldr	r3, [pc, #108]	@ (80007ec <MX_I2C3_Init+0x74>)
 800077e:	4a1c      	ldr	r2, [pc, #112]	@ (80007f0 <MX_I2C3_Init+0x78>)
 8000780:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x10C18DCC;
 8000782:	4b1a      	ldr	r3, [pc, #104]	@ (80007ec <MX_I2C3_Init+0x74>)
 8000784:	4a1b      	ldr	r2, [pc, #108]	@ (80007f4 <MX_I2C3_Init+0x7c>)
 8000786:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 8000788:	4b18      	ldr	r3, [pc, #96]	@ (80007ec <MX_I2C3_Init+0x74>)
 800078a:	2200      	movs	r2, #0
 800078c:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800078e:	4b17      	ldr	r3, [pc, #92]	@ (80007ec <MX_I2C3_Init+0x74>)
 8000790:	2201      	movs	r2, #1
 8000792:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000794:	4b15      	ldr	r3, [pc, #84]	@ (80007ec <MX_I2C3_Init+0x74>)
 8000796:	2200      	movs	r2, #0
 8000798:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 800079a:	4b14      	ldr	r3, [pc, #80]	@ (80007ec <MX_I2C3_Init+0x74>)
 800079c:	2200      	movs	r2, #0
 800079e:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80007a0:	4b12      	ldr	r3, [pc, #72]	@ (80007ec <MX_I2C3_Init+0x74>)
 80007a2:	2200      	movs	r2, #0
 80007a4:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80007a6:	4b11      	ldr	r3, [pc, #68]	@ (80007ec <MX_I2C3_Init+0x74>)
 80007a8:	2200      	movs	r2, #0
 80007aa:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80007ac:	4b0f      	ldr	r3, [pc, #60]	@ (80007ec <MX_I2C3_Init+0x74>)
 80007ae:	2200      	movs	r2, #0
 80007b0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 80007b2:	480e      	ldr	r0, [pc, #56]	@ (80007ec <MX_I2C3_Init+0x74>)
 80007b4:	f002 ffed 	bl	8003792 <HAL_I2C_Init>
 80007b8:	4603      	mov	r3, r0
 80007ba:	2b00      	cmp	r3, #0
 80007bc:	d001      	beq.n	80007c2 <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
 80007be:	f000 f96d 	bl	8000a9c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80007c2:	2100      	movs	r1, #0
 80007c4:	4809      	ldr	r0, [pc, #36]	@ (80007ec <MX_I2C3_Init+0x74>)
 80007c6:	f003 fe7c 	bl	80044c2 <HAL_I2CEx_ConfigAnalogFilter>
 80007ca:	4603      	mov	r3, r0
 80007cc:	2b00      	cmp	r3, #0
 80007ce:	d001      	beq.n	80007d4 <MX_I2C3_Init+0x5c>
  {
    Error_Handler();
 80007d0:	f000 f964 	bl	8000a9c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 80007d4:	2100      	movs	r1, #0
 80007d6:	4805      	ldr	r0, [pc, #20]	@ (80007ec <MX_I2C3_Init+0x74>)
 80007d8:	f003 febe 	bl	8004558 <HAL_I2CEx_ConfigDigitalFilter>
 80007dc:	4603      	mov	r3, r0
 80007de:	2b00      	cmp	r3, #0
 80007e0:	d001      	beq.n	80007e6 <MX_I2C3_Init+0x6e>
  {
    Error_Handler();
 80007e2:	f000 f95b 	bl	8000a9c <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 80007e6:	bf00      	nop
 80007e8:	bd80      	pop	{r7, pc}
 80007ea:	bf00      	nop
 80007ec:	200001ac 	.word	0x200001ac
 80007f0:	40007800 	.word	0x40007800
 80007f4:	10c18dcc 	.word	0x10c18dcc

080007f8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80007f8:	b580      	push	{r7, lr}
 80007fa:	b08e      	sub	sp, #56	@ 0x38
 80007fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80007fe:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000802:	2200      	movs	r2, #0
 8000804:	601a      	str	r2, [r3, #0]
 8000806:	605a      	str	r2, [r3, #4]
 8000808:	609a      	str	r2, [r3, #8]
 800080a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800080c:	f107 031c 	add.w	r3, r7, #28
 8000810:	2200      	movs	r2, #0
 8000812:	601a      	str	r2, [r3, #0]
 8000814:	605a      	str	r2, [r3, #4]
 8000816:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000818:	463b      	mov	r3, r7
 800081a:	2200      	movs	r2, #0
 800081c:	601a      	str	r2, [r3, #0]
 800081e:	605a      	str	r2, [r3, #4]
 8000820:	609a      	str	r2, [r3, #8]
 8000822:	60da      	str	r2, [r3, #12]
 8000824:	611a      	str	r2, [r3, #16]
 8000826:	615a      	str	r2, [r3, #20]
 8000828:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800082a:	4b33      	ldr	r3, [pc, #204]	@ (80008f8 <MX_TIM2_Init+0x100>)
 800082c:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000830:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 139;
 8000832:	4b31      	ldr	r3, [pc, #196]	@ (80008f8 <MX_TIM2_Init+0x100>)
 8000834:	228b      	movs	r2, #139	@ 0x8b
 8000836:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000838:	4b2f      	ldr	r3, [pc, #188]	@ (80008f8 <MX_TIM2_Init+0x100>)
 800083a:	2200      	movs	r2, #0
 800083c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1022;
 800083e:	4b2e      	ldr	r3, [pc, #184]	@ (80008f8 <MX_TIM2_Init+0x100>)
 8000840:	f240 32fe 	movw	r2, #1022	@ 0x3fe
 8000844:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000846:	4b2c      	ldr	r3, [pc, #176]	@ (80008f8 <MX_TIM2_Init+0x100>)
 8000848:	2200      	movs	r2, #0
 800084a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800084c:	4b2a      	ldr	r3, [pc, #168]	@ (80008f8 <MX_TIM2_Init+0x100>)
 800084e:	2280      	movs	r2, #128	@ 0x80
 8000850:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000852:	4829      	ldr	r0, [pc, #164]	@ (80008f8 <MX_TIM2_Init+0x100>)
 8000854:	f004 fec8 	bl	80055e8 <HAL_TIM_Base_Init>
 8000858:	4603      	mov	r3, r0
 800085a:	2b00      	cmp	r3, #0
 800085c:	d001      	beq.n	8000862 <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 800085e:	f000 f91d 	bl	8000a9c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000862:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000866:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000868:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800086c:	4619      	mov	r1, r3
 800086e:	4822      	ldr	r0, [pc, #136]	@ (80008f8 <MX_TIM2_Init+0x100>)
 8000870:	f005 fb6c 	bl	8005f4c <HAL_TIM_ConfigClockSource>
 8000874:	4603      	mov	r3, r0
 8000876:	2b00      	cmp	r3, #0
 8000878:	d001      	beq.n	800087e <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 800087a:	f000 f90f 	bl	8000a9c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800087e:	481e      	ldr	r0, [pc, #120]	@ (80008f8 <MX_TIM2_Init+0x100>)
 8000880:	f004 ff09 	bl	8005696 <HAL_TIM_PWM_Init>
 8000884:	4603      	mov	r3, r0
 8000886:	2b00      	cmp	r3, #0
 8000888:	d001      	beq.n	800088e <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 800088a:	f000 f907 	bl	8000a9c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800088e:	2300      	movs	r3, #0
 8000890:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000892:	2300      	movs	r3, #0
 8000894:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000896:	f107 031c 	add.w	r3, r7, #28
 800089a:	4619      	mov	r1, r3
 800089c:	4816      	ldr	r0, [pc, #88]	@ (80008f8 <MX_TIM2_Init+0x100>)
 800089e:	f006 f8d5 	bl	8006a4c <HAL_TIMEx_MasterConfigSynchronization>
 80008a2:	4603      	mov	r3, r0
 80008a4:	2b00      	cmp	r3, #0
 80008a6:	d001      	beq.n	80008ac <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 80008a8:	f000 f8f8 	bl	8000a9c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80008ac:	2360      	movs	r3, #96	@ 0x60
 80008ae:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80008b0:	2300      	movs	r3, #0
 80008b2:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80008b4:	2300      	movs	r3, #0
 80008b6:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80008b8:	2300      	movs	r3, #0
 80008ba:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80008bc:	463b      	mov	r3, r7
 80008be:	2200      	movs	r2, #0
 80008c0:	4619      	mov	r1, r3
 80008c2:	480d      	ldr	r0, [pc, #52]	@ (80008f8 <MX_TIM2_Init+0x100>)
 80008c4:	f005 fa2e 	bl	8005d24 <HAL_TIM_PWM_ConfigChannel>
 80008c8:	4603      	mov	r3, r0
 80008ca:	2b00      	cmp	r3, #0
 80008cc:	d001      	beq.n	80008d2 <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 80008ce:	f000 f8e5 	bl	8000a9c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80008d2:	463b      	mov	r3, r7
 80008d4:	2204      	movs	r2, #4
 80008d6:	4619      	mov	r1, r3
 80008d8:	4807      	ldr	r0, [pc, #28]	@ (80008f8 <MX_TIM2_Init+0x100>)
 80008da:	f005 fa23 	bl	8005d24 <HAL_TIM_PWM_ConfigChannel>
 80008de:	4603      	mov	r3, r0
 80008e0:	2b00      	cmp	r3, #0
 80008e2:	d001      	beq.n	80008e8 <MX_TIM2_Init+0xf0>
  {
    Error_Handler();
 80008e4:	f000 f8da 	bl	8000a9c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80008e8:	4803      	ldr	r0, [pc, #12]	@ (80008f8 <MX_TIM2_Init+0x100>)
 80008ea:	f000 fb09 	bl	8000f00 <HAL_TIM_MspPostInit>

}
 80008ee:	bf00      	nop
 80008f0:	3738      	adds	r7, #56	@ 0x38
 80008f2:	46bd      	mov	sp, r7
 80008f4:	bd80      	pop	{r7, pc}
 80008f6:	bf00      	nop
 80008f8:	20000200 	.word	0x20000200

080008fc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80008fc:	b580      	push	{r7, lr}
 80008fe:	b082      	sub	sp, #8
 8000900:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8000902:	4b12      	ldr	r3, [pc, #72]	@ (800094c <MX_DMA_Init+0x50>)
 8000904:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000906:	4a11      	ldr	r2, [pc, #68]	@ (800094c <MX_DMA_Init+0x50>)
 8000908:	f043 0304 	orr.w	r3, r3, #4
 800090c:	6493      	str	r3, [r2, #72]	@ 0x48
 800090e:	4b0f      	ldr	r3, [pc, #60]	@ (800094c <MX_DMA_Init+0x50>)
 8000910:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000912:	f003 0304 	and.w	r3, r3, #4
 8000916:	607b      	str	r3, [r7, #4]
 8000918:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 800091a:	4b0c      	ldr	r3, [pc, #48]	@ (800094c <MX_DMA_Init+0x50>)
 800091c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800091e:	4a0b      	ldr	r2, [pc, #44]	@ (800094c <MX_DMA_Init+0x50>)
 8000920:	f043 0301 	orr.w	r3, r3, #1
 8000924:	6493      	str	r3, [r2, #72]	@ 0x48
 8000926:	4b09      	ldr	r3, [pc, #36]	@ (800094c <MX_DMA_Init+0x50>)
 8000928:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800092a:	f003 0301 	and.w	r3, r3, #1
 800092e:	603b      	str	r3, [r7, #0]
 8000930:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 2, 0);
 8000932:	2200      	movs	r2, #0
 8000934:	2102      	movs	r1, #2
 8000936:	200b      	movs	r0, #11
 8000938:	f002 f8a1 	bl	8002a7e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 800093c:	200b      	movs	r0, #11
 800093e:	f002 f8b8 	bl	8002ab2 <HAL_NVIC_EnableIRQ>

}
 8000942:	bf00      	nop
 8000944:	3708      	adds	r7, #8
 8000946:	46bd      	mov	sp, r7
 8000948:	bd80      	pop	{r7, pc}
 800094a:	bf00      	nop
 800094c:	40021000 	.word	0x40021000

08000950 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000950:	b580      	push	{r7, lr}
 8000952:	b08a      	sub	sp, #40	@ 0x28
 8000954:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000956:	f107 0314 	add.w	r3, r7, #20
 800095a:	2200      	movs	r2, #0
 800095c:	601a      	str	r2, [r3, #0]
 800095e:	605a      	str	r2, [r3, #4]
 8000960:	609a      	str	r2, [r3, #8]
 8000962:	60da      	str	r2, [r3, #12]
 8000964:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000966:	4b4a      	ldr	r3, [pc, #296]	@ (8000a90 <MX_GPIO_Init+0x140>)
 8000968:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800096a:	4a49      	ldr	r2, [pc, #292]	@ (8000a90 <MX_GPIO_Init+0x140>)
 800096c:	f043 0304 	orr.w	r3, r3, #4
 8000970:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000972:	4b47      	ldr	r3, [pc, #284]	@ (8000a90 <MX_GPIO_Init+0x140>)
 8000974:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000976:	f003 0304 	and.w	r3, r3, #4
 800097a:	613b      	str	r3, [r7, #16]
 800097c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800097e:	4b44      	ldr	r3, [pc, #272]	@ (8000a90 <MX_GPIO_Init+0x140>)
 8000980:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000982:	4a43      	ldr	r2, [pc, #268]	@ (8000a90 <MX_GPIO_Init+0x140>)
 8000984:	f043 0320 	orr.w	r3, r3, #32
 8000988:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800098a:	4b41      	ldr	r3, [pc, #260]	@ (8000a90 <MX_GPIO_Init+0x140>)
 800098c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800098e:	f003 0320 	and.w	r3, r3, #32
 8000992:	60fb      	str	r3, [r7, #12]
 8000994:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000996:	4b3e      	ldr	r3, [pc, #248]	@ (8000a90 <MX_GPIO_Init+0x140>)
 8000998:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800099a:	4a3d      	ldr	r2, [pc, #244]	@ (8000a90 <MX_GPIO_Init+0x140>)
 800099c:	f043 0301 	orr.w	r3, r3, #1
 80009a0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80009a2:	4b3b      	ldr	r3, [pc, #236]	@ (8000a90 <MX_GPIO_Init+0x140>)
 80009a4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80009a6:	f003 0301 	and.w	r3, r3, #1
 80009aa:	60bb      	str	r3, [r7, #8]
 80009ac:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80009ae:	4b38      	ldr	r3, [pc, #224]	@ (8000a90 <MX_GPIO_Init+0x140>)
 80009b0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80009b2:	4a37      	ldr	r2, [pc, #220]	@ (8000a90 <MX_GPIO_Init+0x140>)
 80009b4:	f043 0302 	orr.w	r3, r3, #2
 80009b8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80009ba:	4b35      	ldr	r3, [pc, #212]	@ (8000a90 <MX_GPIO_Init+0x140>)
 80009bc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80009be:	f003 0302 	and.w	r3, r3, #2
 80009c2:	607b      	str	r3, [r7, #4]
 80009c4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LED_R_Pin|LED_G_Pin|LED_B_Pin, GPIO_PIN_RESET);
 80009c6:	2200      	movs	r2, #0
 80009c8:	f44f 4160 	mov.w	r1, #57344	@ 0xe000
 80009cc:	4831      	ldr	r0, [pc, #196]	@ (8000a94 <MX_GPIO_Init+0x144>)
 80009ce:	f002 fea5 	bl	800371c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(nSLEEP_GPIO_Port, nSLEEP_Pin, GPIO_PIN_RESET);
 80009d2:	2200      	movs	r2, #0
 80009d4:	2104      	movs	r1, #4
 80009d6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80009da:	f002 fe9f 	bl	800371c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LED_R_Pin LED_G_Pin LED_B_Pin */
  GPIO_InitStruct.Pin = LED_R_Pin|LED_G_Pin|LED_B_Pin;
 80009de:	f44f 4360 	mov.w	r3, #57344	@ 0xe000
 80009e2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009e4:	2301      	movs	r3, #1
 80009e6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009e8:	2300      	movs	r3, #0
 80009ea:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009ec:	2300      	movs	r3, #0
 80009ee:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80009f0:	f107 0314 	add.w	r3, r7, #20
 80009f4:	4619      	mov	r1, r3
 80009f6:	4827      	ldr	r0, [pc, #156]	@ (8000a94 <MX_GPIO_Init+0x144>)
 80009f8:	f002 fd0e 	bl	8003418 <HAL_GPIO_Init>

  /*Configure GPIO pin : nSLEEP_Pin */
  GPIO_InitStruct.Pin = nSLEEP_Pin;
 80009fc:	2304      	movs	r3, #4
 80009fe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a00:	2301      	movs	r3, #1
 8000a02:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a04:	2300      	movs	r3, #0
 8000a06:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a08:	2300      	movs	r3, #0
 8000a0a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(nSLEEP_GPIO_Port, &GPIO_InitStruct);
 8000a0c:	f107 0314 	add.w	r3, r7, #20
 8000a10:	4619      	mov	r1, r3
 8000a12:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000a16:	f002 fcff 	bl	8003418 <HAL_GPIO_Init>

  /*Configure GPIO pins : SNOUT_Pin NFAULT_Pin */
  GPIO_InitStruct.Pin = SNOUT_Pin|NFAULT_Pin;
 8000a1a:	2318      	movs	r3, #24
 8000a1c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000a1e:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000a22:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000a24:	2301      	movs	r3, #1
 8000a26:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a28:	f107 0314 	add.w	r3, r7, #20
 8000a2c:	4619      	mov	r1, r3
 8000a2e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000a32:	f002 fcf1 	bl	8003418 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000a36:	2320      	movs	r3, #32
 8000a38:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000a3a:	2303      	movs	r3, #3
 8000a3c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a3e:	2300      	movs	r3, #0
 8000a40:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a42:	f107 0314 	add.w	r3, r7, #20
 8000a46:	4619      	mov	r1, r3
 8000a48:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000a4c:	f002 fce4 	bl	8003418 <HAL_GPIO_Init>

  /*Configure GPIO pins : SW1_Pin SW2_Pin */
  GPIO_InitStruct.Pin = SW1_Pin|SW2_Pin;
 8000a50:	2350      	movs	r3, #80	@ 0x50
 8000a52:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a54:	2300      	movs	r3, #0
 8000a56:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a58:	2300      	movs	r3, #0
 8000a5a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a5c:	f107 0314 	add.w	r3, r7, #20
 8000a60:	4619      	mov	r1, r3
 8000a62:	480d      	ldr	r0, [pc, #52]	@ (8000a98 <MX_GPIO_Init+0x148>)
 8000a64:	f002 fcd8 	bl	8003418 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI3_IRQn, 8, 0);
 8000a68:	2200      	movs	r2, #0
 8000a6a:	2108      	movs	r1, #8
 8000a6c:	2009      	movs	r0, #9
 8000a6e:	f002 f806 	bl	8002a7e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8000a72:	2009      	movs	r0, #9
 8000a74:	f002 f81d 	bl	8002ab2 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_IRQn, 8, 0);
 8000a78:	2200      	movs	r2, #0
 8000a7a:	2108      	movs	r1, #8
 8000a7c:	200a      	movs	r0, #10
 8000a7e:	f001 fffe 	bl	8002a7e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8000a82:	200a      	movs	r0, #10
 8000a84:	f002 f815 	bl	8002ab2 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000a88:	bf00      	nop
 8000a8a:	3728      	adds	r7, #40	@ 0x28
 8000a8c:	46bd      	mov	sp, r7
 8000a8e:	bd80      	pop	{r7, pc}
 8000a90:	40021000 	.word	0x40021000
 8000a94:	48000800 	.word	0x48000800
 8000a98:	48000400 	.word	0x48000400

08000a9c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a9c:	b480      	push	{r7}
 8000a9e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000aa0:	b672      	cpsid	i
}
 8000aa2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000aa4:	bf00      	nop
 8000aa6:	e7fd      	b.n	8000aa4 <Error_Handler+0x8>

08000aa8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000aa8:	b580      	push	{r7, lr}
 8000aaa:	b082      	sub	sp, #8
 8000aac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000aae:	4b17      	ldr	r3, [pc, #92]	@ (8000b0c <HAL_MspInit+0x64>)
 8000ab0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000ab2:	4a16      	ldr	r2, [pc, #88]	@ (8000b0c <HAL_MspInit+0x64>)
 8000ab4:	f043 0301 	orr.w	r3, r3, #1
 8000ab8:	6613      	str	r3, [r2, #96]	@ 0x60
 8000aba:	4b14      	ldr	r3, [pc, #80]	@ (8000b0c <HAL_MspInit+0x64>)
 8000abc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000abe:	f003 0301 	and.w	r3, r3, #1
 8000ac2:	607b      	str	r3, [r7, #4]
 8000ac4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ac6:	4b11      	ldr	r3, [pc, #68]	@ (8000b0c <HAL_MspInit+0x64>)
 8000ac8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000aca:	4a10      	ldr	r2, [pc, #64]	@ (8000b0c <HAL_MspInit+0x64>)
 8000acc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000ad0:	6593      	str	r3, [r2, #88]	@ 0x58
 8000ad2:	4b0e      	ldr	r3, [pc, #56]	@ (8000b0c <HAL_MspInit+0x64>)
 8000ad4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000ad6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000ada:	603b      	str	r3, [r7, #0]
 8000adc:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* PVD_PVM_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PVD_PVM_IRQn, 10, 0);
 8000ade:	2200      	movs	r2, #0
 8000ae0:	210a      	movs	r1, #10
 8000ae2:	2001      	movs	r0, #1
 8000ae4:	f001 ffcb 	bl	8002a7e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(PVD_PVM_IRQn);
 8000ae8:	2001      	movs	r0, #1
 8000aea:	f001 ffe2 	bl	8002ab2 <HAL_NVIC_EnableIRQ>
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 1, 0);
 8000aee:	2200      	movs	r2, #0
 8000af0:	2101      	movs	r1, #1
 8000af2:	2005      	movs	r0, #5
 8000af4:	f001 ffc3 	bl	8002a7e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 8000af8:	2005      	movs	r0, #5
 8000afa:	f001 ffda 	bl	8002ab2 <HAL_NVIC_EnableIRQ>

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8000afe:	f003 fe7d 	bl	80047fc <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b02:	bf00      	nop
 8000b04:	3708      	adds	r7, #8
 8000b06:	46bd      	mov	sp, r7
 8000b08:	bd80      	pop	{r7, pc}
 8000b0a:	bf00      	nop
 8000b0c:	40021000 	.word	0x40021000

08000b10 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000b10:	b580      	push	{r7, lr}
 8000b12:	b09a      	sub	sp, #104	@ 0x68
 8000b14:	af00      	add	r7, sp, #0
 8000b16:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b18:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8000b1c:	2200      	movs	r2, #0
 8000b1e:	601a      	str	r2, [r3, #0]
 8000b20:	605a      	str	r2, [r3, #4]
 8000b22:	609a      	str	r2, [r3, #8]
 8000b24:	60da      	str	r2, [r3, #12]
 8000b26:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000b28:	f107 0310 	add.w	r3, r7, #16
 8000b2c:	2244      	movs	r2, #68	@ 0x44
 8000b2e:	2100      	movs	r1, #0
 8000b30:	4618      	mov	r0, r3
 8000b32:	f006 f853 	bl	8006bdc <memset>
  if(hadc->Instance==ADC1)
 8000b36:	687b      	ldr	r3, [r7, #4]
 8000b38:	681b      	ldr	r3, [r3, #0]
 8000b3a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8000b3e:	d15e      	bne.n	8000bfe <HAL_ADC_MspInit+0xee>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8000b40:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000b44:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8000b46:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 8000b4a:	64fb      	str	r3, [r7, #76]	@ 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000b4c:	f107 0310 	add.w	r3, r7, #16
 8000b50:	4618      	mov	r0, r3
 8000b52:	f004 fb59 	bl	8005208 <HAL_RCCEx_PeriphCLKConfig>
 8000b56:	4603      	mov	r3, r0
 8000b58:	2b00      	cmp	r3, #0
 8000b5a:	d001      	beq.n	8000b60 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 8000b5c:	f7ff ff9e 	bl	8000a9c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8000b60:	4b29      	ldr	r3, [pc, #164]	@ (8000c08 <HAL_ADC_MspInit+0xf8>)
 8000b62:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b64:	4a28      	ldr	r2, [pc, #160]	@ (8000c08 <HAL_ADC_MspInit+0xf8>)
 8000b66:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8000b6a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000b6c:	4b26      	ldr	r3, [pc, #152]	@ (8000c08 <HAL_ADC_MspInit+0xf8>)
 8000b6e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b70:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000b74:	60fb      	str	r3, [r7, #12]
 8000b76:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b78:	4b23      	ldr	r3, [pc, #140]	@ (8000c08 <HAL_ADC_MspInit+0xf8>)
 8000b7a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b7c:	4a22      	ldr	r2, [pc, #136]	@ (8000c08 <HAL_ADC_MspInit+0xf8>)
 8000b7e:	f043 0302 	orr.w	r3, r3, #2
 8000b82:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000b84:	4b20      	ldr	r3, [pc, #128]	@ (8000c08 <HAL_ADC_MspInit+0xf8>)
 8000b86:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b88:	f003 0302 	and.w	r3, r3, #2
 8000b8c:	60bb      	str	r3, [r7, #8]
 8000b8e:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PB0     ------> ADC1_IN15
    */
    GPIO_InitStruct.Pin = current_measurement_Pin;
 8000b90:	2301      	movs	r3, #1
 8000b92:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000b94:	2303      	movs	r3, #3
 8000b96:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b98:	2300      	movs	r3, #0
 8000b9a:	65fb      	str	r3, [r7, #92]	@ 0x5c
    HAL_GPIO_Init(current_measurement_GPIO_Port, &GPIO_InitStruct);
 8000b9c:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8000ba0:	4619      	mov	r1, r3
 8000ba2:	481a      	ldr	r0, [pc, #104]	@ (8000c0c <HAL_ADC_MspInit+0xfc>)
 8000ba4:	f002 fc38 	bl	8003418 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8000ba8:	4b19      	ldr	r3, [pc, #100]	@ (8000c10 <HAL_ADC_MspInit+0x100>)
 8000baa:	4a1a      	ldr	r2, [pc, #104]	@ (8000c14 <HAL_ADC_MspInit+0x104>)
 8000bac:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8000bae:	4b18      	ldr	r3, [pc, #96]	@ (8000c10 <HAL_ADC_MspInit+0x100>)
 8000bb0:	2205      	movs	r2, #5
 8000bb2:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000bb4:	4b16      	ldr	r3, [pc, #88]	@ (8000c10 <HAL_ADC_MspInit+0x100>)
 8000bb6:	2200      	movs	r2, #0
 8000bb8:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000bba:	4b15      	ldr	r3, [pc, #84]	@ (8000c10 <HAL_ADC_MspInit+0x100>)
 8000bbc:	2200      	movs	r2, #0
 8000bbe:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000bc0:	4b13      	ldr	r3, [pc, #76]	@ (8000c10 <HAL_ADC_MspInit+0x100>)
 8000bc2:	2280      	movs	r2, #128	@ 0x80
 8000bc4:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000bc6:	4b12      	ldr	r3, [pc, #72]	@ (8000c10 <HAL_ADC_MspInit+0x100>)
 8000bc8:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000bcc:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000bce:	4b10      	ldr	r3, [pc, #64]	@ (8000c10 <HAL_ADC_MspInit+0x100>)
 8000bd0:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000bd4:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000bd6:	4b0e      	ldr	r3, [pc, #56]	@ (8000c10 <HAL_ADC_MspInit+0x100>)
 8000bd8:	2220      	movs	r2, #32
 8000bda:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000bdc:	4b0c      	ldr	r3, [pc, #48]	@ (8000c10 <HAL_ADC_MspInit+0x100>)
 8000bde:	2200      	movs	r2, #0
 8000be0:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000be2:	480b      	ldr	r0, [pc, #44]	@ (8000c10 <HAL_ADC_MspInit+0x100>)
 8000be4:	f001 ff80 	bl	8002ae8 <HAL_DMA_Init>
 8000be8:	4603      	mov	r3, r0
 8000bea:	2b00      	cmp	r3, #0
 8000bec:	d001      	beq.n	8000bf2 <HAL_ADC_MspInit+0xe2>
    {
      Error_Handler();
 8000bee:	f7ff ff55 	bl	8000a9c <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8000bf2:	687b      	ldr	r3, [r7, #4]
 8000bf4:	4a06      	ldr	r2, [pc, #24]	@ (8000c10 <HAL_ADC_MspInit+0x100>)
 8000bf6:	655a      	str	r2, [r3, #84]	@ 0x54
 8000bf8:	4a05      	ldr	r2, [pc, #20]	@ (8000c10 <HAL_ADC_MspInit+0x100>)
 8000bfa:	687b      	ldr	r3, [r7, #4]
 8000bfc:	6293      	str	r3, [r2, #40]	@ 0x28

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 8000bfe:	bf00      	nop
 8000c00:	3768      	adds	r7, #104	@ 0x68
 8000c02:	46bd      	mov	sp, r7
 8000c04:	bd80      	pop	{r7, pc}
 8000c06:	bf00      	nop
 8000c08:	40021000 	.word	0x40021000
 8000c0c:	48000400 	.word	0x48000400
 8000c10:	20000094 	.word	0x20000094
 8000c14:	40020008 	.word	0x40020008

08000c18 <HAL_FDCAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hfdcan: FDCAN handle pointer
* @retval None
*/
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 8000c18:	b580      	push	{r7, lr}
 8000c1a:	b09c      	sub	sp, #112	@ 0x70
 8000c1c:	af00      	add	r7, sp, #0
 8000c1e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c20:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8000c24:	2200      	movs	r2, #0
 8000c26:	601a      	str	r2, [r3, #0]
 8000c28:	605a      	str	r2, [r3, #4]
 8000c2a:	609a      	str	r2, [r3, #8]
 8000c2c:	60da      	str	r2, [r3, #12]
 8000c2e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000c30:	f107 0318 	add.w	r3, r7, #24
 8000c34:	2244      	movs	r2, #68	@ 0x44
 8000c36:	2100      	movs	r1, #0
 8000c38:	4618      	mov	r0, r3
 8000c3a:	f005 ffcf 	bl	8006bdc <memset>
  if(hfdcan->Instance==FDCAN1)
 8000c3e:	687b      	ldr	r3, [r7, #4]
 8000c40:	681b      	ldr	r3, [r3, #0]
 8000c42:	4a2f      	ldr	r2, [pc, #188]	@ (8000d00 <HAL_FDCAN_MspInit+0xe8>)
 8000c44:	4293      	cmp	r3, r2
 8000c46:	d156      	bne.n	8000cf6 <HAL_FDCAN_MspInit+0xde>

  /* USER CODE END FDCAN1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8000c48:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000c4c:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.FdcanClockSelection = RCC_FDCANCLKSOURCE_PCLK1;
 8000c4e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8000c52:	64bb      	str	r3, [r7, #72]	@ 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000c54:	f107 0318 	add.w	r3, r7, #24
 8000c58:	4618      	mov	r0, r3
 8000c5a:	f004 fad5 	bl	8005208 <HAL_RCCEx_PeriphCLKConfig>
 8000c5e:	4603      	mov	r3, r0
 8000c60:	2b00      	cmp	r3, #0
 8000c62:	d001      	beq.n	8000c68 <HAL_FDCAN_MspInit+0x50>
    {
      Error_Handler();
 8000c64:	f7ff ff1a 	bl	8000a9c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 8000c68:	4b26      	ldr	r3, [pc, #152]	@ (8000d04 <HAL_FDCAN_MspInit+0xec>)
 8000c6a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000c6c:	4a25      	ldr	r2, [pc, #148]	@ (8000d04 <HAL_FDCAN_MspInit+0xec>)
 8000c6e:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000c72:	6593      	str	r3, [r2, #88]	@ 0x58
 8000c74:	4b23      	ldr	r3, [pc, #140]	@ (8000d04 <HAL_FDCAN_MspInit+0xec>)
 8000c76:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000c78:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000c7c:	617b      	str	r3, [r7, #20]
 8000c7e:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c80:	4b20      	ldr	r3, [pc, #128]	@ (8000d04 <HAL_FDCAN_MspInit+0xec>)
 8000c82:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c84:	4a1f      	ldr	r2, [pc, #124]	@ (8000d04 <HAL_FDCAN_MspInit+0xec>)
 8000c86:	f043 0301 	orr.w	r3, r3, #1
 8000c8a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000c8c:	4b1d      	ldr	r3, [pc, #116]	@ (8000d04 <HAL_FDCAN_MspInit+0xec>)
 8000c8e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c90:	f003 0301 	and.w	r3, r3, #1
 8000c94:	613b      	str	r3, [r7, #16]
 8000c96:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c98:	4b1a      	ldr	r3, [pc, #104]	@ (8000d04 <HAL_FDCAN_MspInit+0xec>)
 8000c9a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c9c:	4a19      	ldr	r2, [pc, #100]	@ (8000d04 <HAL_FDCAN_MspInit+0xec>)
 8000c9e:	f043 0302 	orr.w	r3, r3, #2
 8000ca2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000ca4:	4b17      	ldr	r3, [pc, #92]	@ (8000d04 <HAL_FDCAN_MspInit+0xec>)
 8000ca6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ca8:	f003 0302 	and.w	r3, r3, #2
 8000cac:	60fb      	str	r3, [r7, #12]
 8000cae:	68fb      	ldr	r3, [r7, #12]
    /**FDCAN1 GPIO Configuration
    PA11     ------> FDCAN1_RX
    PB9     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8000cb0:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8000cb4:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cb6:	2302      	movs	r3, #2
 8000cb8:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cba:	2300      	movs	r3, #0
 8000cbc:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cbe:	2300      	movs	r3, #0
 8000cc0:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 8000cc2:	2309      	movs	r3, #9
 8000cc4:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cc6:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8000cca:	4619      	mov	r1, r3
 8000ccc:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000cd0:	f002 fba2 	bl	8003418 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000cd4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000cd8:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cda:	2302      	movs	r3, #2
 8000cdc:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cde:	2300      	movs	r3, #0
 8000ce0:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ce2:	2300      	movs	r3, #0
 8000ce4:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 8000ce6:	2309      	movs	r3, #9
 8000ce8:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000cea:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8000cee:	4619      	mov	r1, r3
 8000cf0:	4805      	ldr	r0, [pc, #20]	@ (8000d08 <HAL_FDCAN_MspInit+0xf0>)
 8000cf2:	f002 fb91 	bl	8003418 <HAL_GPIO_Init>

  /* USER CODE END FDCAN1_MspInit 1 */

  }

}
 8000cf6:	bf00      	nop
 8000cf8:	3770      	adds	r7, #112	@ 0x70
 8000cfa:	46bd      	mov	sp, r7
 8000cfc:	bd80      	pop	{r7, pc}
 8000cfe:	bf00      	nop
 8000d00:	40006400 	.word	0x40006400
 8000d04:	40021000 	.word	0x40021000
 8000d08:	48000400 	.word	0x48000400

08000d0c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000d0c:	b580      	push	{r7, lr}
 8000d0e:	b09e      	sub	sp, #120	@ 0x78
 8000d10:	af00      	add	r7, sp, #0
 8000d12:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d14:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8000d18:	2200      	movs	r2, #0
 8000d1a:	601a      	str	r2, [r3, #0]
 8000d1c:	605a      	str	r2, [r3, #4]
 8000d1e:	609a      	str	r2, [r3, #8]
 8000d20:	60da      	str	r2, [r3, #12]
 8000d22:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000d24:	f107 0320 	add.w	r3, r7, #32
 8000d28:	2244      	movs	r2, #68	@ 0x44
 8000d2a:	2100      	movs	r1, #0
 8000d2c:	4618      	mov	r0, r3
 8000d2e:	f005 ff55 	bl	8006bdc <memset>
  if(hi2c->Instance==I2C1)
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	681b      	ldr	r3, [r3, #0]
 8000d36:	4a5c      	ldr	r2, [pc, #368]	@ (8000ea8 <HAL_I2C_MspInit+0x19c>)
 8000d38:	4293      	cmp	r3, r2
 8000d3a:	d147      	bne.n	8000dcc <HAL_I2C_MspInit+0xc0>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000d3c:	2340      	movs	r3, #64	@ 0x40
 8000d3e:	623b      	str	r3, [r7, #32]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000d40:	2300      	movs	r3, #0
 8000d42:	63bb      	str	r3, [r7, #56]	@ 0x38
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000d44:	f107 0320 	add.w	r3, r7, #32
 8000d48:	4618      	mov	r0, r3
 8000d4a:	f004 fa5d 	bl	8005208 <HAL_RCCEx_PeriphCLKConfig>
 8000d4e:	4603      	mov	r3, r0
 8000d50:	2b00      	cmp	r3, #0
 8000d52:	d001      	beq.n	8000d58 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8000d54:	f7ff fea2 	bl	8000a9c <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d58:	4b54      	ldr	r3, [pc, #336]	@ (8000eac <HAL_I2C_MspInit+0x1a0>)
 8000d5a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d5c:	4a53      	ldr	r2, [pc, #332]	@ (8000eac <HAL_I2C_MspInit+0x1a0>)
 8000d5e:	f043 0302 	orr.w	r3, r3, #2
 8000d62:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000d64:	4b51      	ldr	r3, [pc, #324]	@ (8000eac <HAL_I2C_MspInit+0x1a0>)
 8000d66:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d68:	f003 0302 	and.w	r3, r3, #2
 8000d6c:	61fb      	str	r3, [r7, #28]
 8000d6e:	69fb      	ldr	r3, [r7, #28]
    /**I2C1 GPIO Configuration
    PB7     ------> I2C1_SDA
    PB8-BOOT0     ------> I2C1_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 8000d70:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 8000d74:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000d76:	2312      	movs	r3, #18
 8000d78:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d7a:	2300      	movs	r3, #0
 8000d7c:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d7e:	2300      	movs	r3, #0
 8000d80:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000d82:	2304      	movs	r3, #4
 8000d84:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d86:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8000d8a:	4619      	mov	r1, r3
 8000d8c:	4848      	ldr	r0, [pc, #288]	@ (8000eb0 <HAL_I2C_MspInit+0x1a4>)
 8000d8e:	f002 fb43 	bl	8003418 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000d92:	4b46      	ldr	r3, [pc, #280]	@ (8000eac <HAL_I2C_MspInit+0x1a0>)
 8000d94:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000d96:	4a45      	ldr	r2, [pc, #276]	@ (8000eac <HAL_I2C_MspInit+0x1a0>)
 8000d98:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000d9c:	6593      	str	r3, [r2, #88]	@ 0x58
 8000d9e:	4b43      	ldr	r3, [pc, #268]	@ (8000eac <HAL_I2C_MspInit+0x1a0>)
 8000da0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000da2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000da6:	61bb      	str	r3, [r7, #24]
 8000da8:	69bb      	ldr	r3, [r7, #24]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 4, 0);
 8000daa:	2200      	movs	r2, #0
 8000dac:	2104      	movs	r1, #4
 8000dae:	201f      	movs	r0, #31
 8000db0:	f001 fe65 	bl	8002a7e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8000db4:	201f      	movs	r0, #31
 8000db6:	f001 fe7c 	bl	8002ab2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 8000dba:	2200      	movs	r2, #0
 8000dbc:	2100      	movs	r1, #0
 8000dbe:	2020      	movs	r0, #32
 8000dc0:	f001 fe5d 	bl	8002a7e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8000dc4:	2020      	movs	r0, #32
 8000dc6:	f001 fe74 	bl	8002ab2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8000dca:	e069      	b.n	8000ea0 <HAL_I2C_MspInit+0x194>
  else if(hi2c->Instance==I2C3)
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	681b      	ldr	r3, [r3, #0]
 8000dd0:	4a38      	ldr	r2, [pc, #224]	@ (8000eb4 <HAL_I2C_MspInit+0x1a8>)
 8000dd2:	4293      	cmp	r3, r2
 8000dd4:	d164      	bne.n	8000ea0 <HAL_I2C_MspInit+0x194>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C3;
 8000dd6:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000dda:	623b      	str	r3, [r7, #32]
    PeriphClkInit.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 8000ddc:	2300      	movs	r3, #0
 8000dde:	643b      	str	r3, [r7, #64]	@ 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000de0:	f107 0320 	add.w	r3, r7, #32
 8000de4:	4618      	mov	r0, r3
 8000de6:	f004 fa0f 	bl	8005208 <HAL_RCCEx_PeriphCLKConfig>
 8000dea:	4603      	mov	r3, r0
 8000dec:	2b00      	cmp	r3, #0
 8000dee:	d001      	beq.n	8000df4 <HAL_I2C_MspInit+0xe8>
      Error_Handler();
 8000df0:	f7ff fe54 	bl	8000a9c <Error_Handler>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000df4:	4b2d      	ldr	r3, [pc, #180]	@ (8000eac <HAL_I2C_MspInit+0x1a0>)
 8000df6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000df8:	4a2c      	ldr	r2, [pc, #176]	@ (8000eac <HAL_I2C_MspInit+0x1a0>)
 8000dfa:	f043 0301 	orr.w	r3, r3, #1
 8000dfe:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000e00:	4b2a      	ldr	r3, [pc, #168]	@ (8000eac <HAL_I2C_MspInit+0x1a0>)
 8000e02:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e04:	f003 0301 	and.w	r3, r3, #1
 8000e08:	617b      	str	r3, [r7, #20]
 8000e0a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e0c:	4b27      	ldr	r3, [pc, #156]	@ (8000eac <HAL_I2C_MspInit+0x1a0>)
 8000e0e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e10:	4a26      	ldr	r2, [pc, #152]	@ (8000eac <HAL_I2C_MspInit+0x1a0>)
 8000e12:	f043 0302 	orr.w	r3, r3, #2
 8000e16:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000e18:	4b24      	ldr	r3, [pc, #144]	@ (8000eac <HAL_I2C_MspInit+0x1a0>)
 8000e1a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e1c:	f003 0302 	and.w	r3, r3, #2
 8000e20:	613b      	str	r3, [r7, #16]
 8000e22:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000e24:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000e28:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000e2a:	2312      	movs	r3, #18
 8000e2c:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e2e:	2300      	movs	r3, #0
 8000e30:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e32:	2300      	movs	r3, #0
 8000e34:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF2_I2C3;
 8000e36:	2302      	movs	r3, #2
 8000e38:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e3a:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8000e3e:	4619      	mov	r1, r3
 8000e40:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000e44:	f002 fae8 	bl	8003418 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000e48:	2320      	movs	r3, #32
 8000e4a:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000e4c:	2312      	movs	r3, #18
 8000e4e:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e50:	2300      	movs	r3, #0
 8000e52:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e54:	2300      	movs	r3, #0
 8000e56:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF8_I2C3;
 8000e58:	2308      	movs	r3, #8
 8000e5a:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e5c:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8000e60:	4619      	mov	r1, r3
 8000e62:	4813      	ldr	r0, [pc, #76]	@ (8000eb0 <HAL_I2C_MspInit+0x1a4>)
 8000e64:	f002 fad8 	bl	8003418 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8000e68:	4b10      	ldr	r3, [pc, #64]	@ (8000eac <HAL_I2C_MspInit+0x1a0>)
 8000e6a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000e6c:	4a0f      	ldr	r2, [pc, #60]	@ (8000eac <HAL_I2C_MspInit+0x1a0>)
 8000e6e:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8000e72:	6593      	str	r3, [r2, #88]	@ 0x58
 8000e74:	4b0d      	ldr	r3, [pc, #52]	@ (8000eac <HAL_I2C_MspInit+0x1a0>)
 8000e76:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000e78:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8000e7c:	60fb      	str	r3, [r7, #12]
 8000e7e:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(I2C3_EV_IRQn, 4, 0);
 8000e80:	2200      	movs	r2, #0
 8000e82:	2104      	movs	r1, #4
 8000e84:	205c      	movs	r0, #92	@ 0x5c
 8000e86:	f001 fdfa 	bl	8002a7e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C3_EV_IRQn);
 8000e8a:	205c      	movs	r0, #92	@ 0x5c
 8000e8c:	f001 fe11 	bl	8002ab2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C3_ER_IRQn, 0, 0);
 8000e90:	2200      	movs	r2, #0
 8000e92:	2100      	movs	r1, #0
 8000e94:	205d      	movs	r0, #93	@ 0x5d
 8000e96:	f001 fdf2 	bl	8002a7e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C3_ER_IRQn);
 8000e9a:	205d      	movs	r0, #93	@ 0x5d
 8000e9c:	f001 fe09 	bl	8002ab2 <HAL_NVIC_EnableIRQ>
}
 8000ea0:	bf00      	nop
 8000ea2:	3778      	adds	r7, #120	@ 0x78
 8000ea4:	46bd      	mov	sp, r7
 8000ea6:	bd80      	pop	{r7, pc}
 8000ea8:	40005400 	.word	0x40005400
 8000eac:	40021000 	.word	0x40021000
 8000eb0:	48000400 	.word	0x48000400
 8000eb4:	40007800 	.word	0x40007800

08000eb8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000eb8:	b580      	push	{r7, lr}
 8000eba:	b084      	sub	sp, #16
 8000ebc:	af00      	add	r7, sp, #0
 8000ebe:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	681b      	ldr	r3, [r3, #0]
 8000ec4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000ec8:	d113      	bne.n	8000ef2 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000eca:	4b0c      	ldr	r3, [pc, #48]	@ (8000efc <HAL_TIM_Base_MspInit+0x44>)
 8000ecc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000ece:	4a0b      	ldr	r2, [pc, #44]	@ (8000efc <HAL_TIM_Base_MspInit+0x44>)
 8000ed0:	f043 0301 	orr.w	r3, r3, #1
 8000ed4:	6593      	str	r3, [r2, #88]	@ 0x58
 8000ed6:	4b09      	ldr	r3, [pc, #36]	@ (8000efc <HAL_TIM_Base_MspInit+0x44>)
 8000ed8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000eda:	f003 0301 	and.w	r3, r3, #1
 8000ede:	60fb      	str	r3, [r7, #12]
 8000ee0:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 2, 0);
 8000ee2:	2200      	movs	r2, #0
 8000ee4:	2102      	movs	r1, #2
 8000ee6:	201c      	movs	r0, #28
 8000ee8:	f001 fdc9 	bl	8002a7e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000eec:	201c      	movs	r0, #28
 8000eee:	f001 fde0 	bl	8002ab2 <HAL_NVIC_EnableIRQ>

  /* USER CODE END TIM2_MspInit 1 */

  }

}
 8000ef2:	bf00      	nop
 8000ef4:	3710      	adds	r7, #16
 8000ef6:	46bd      	mov	sp, r7
 8000ef8:	bd80      	pop	{r7, pc}
 8000efa:	bf00      	nop
 8000efc:	40021000 	.word	0x40021000

08000f00 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000f00:	b580      	push	{r7, lr}
 8000f02:	b088      	sub	sp, #32
 8000f04:	af00      	add	r7, sp, #0
 8000f06:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f08:	f107 030c 	add.w	r3, r7, #12
 8000f0c:	2200      	movs	r2, #0
 8000f0e:	601a      	str	r2, [r3, #0]
 8000f10:	605a      	str	r2, [r3, #4]
 8000f12:	609a      	str	r2, [r3, #8]
 8000f14:	60da      	str	r2, [r3, #12]
 8000f16:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	681b      	ldr	r3, [r3, #0]
 8000f1c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000f20:	d11c      	bne.n	8000f5c <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f22:	4b10      	ldr	r3, [pc, #64]	@ (8000f64 <HAL_TIM_MspPostInit+0x64>)
 8000f24:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f26:	4a0f      	ldr	r2, [pc, #60]	@ (8000f64 <HAL_TIM_MspPostInit+0x64>)
 8000f28:	f043 0301 	orr.w	r3, r3, #1
 8000f2c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000f2e:	4b0d      	ldr	r3, [pc, #52]	@ (8000f64 <HAL_TIM_MspPostInit+0x64>)
 8000f30:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f32:	f003 0301 	and.w	r3, r3, #1
 8000f36:	60bb      	str	r3, [r7, #8]
 8000f38:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = PWM2_Pin|PWM1_Pin;
 8000f3a:	2303      	movs	r3, #3
 8000f3c:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f3e:	2302      	movs	r3, #2
 8000f40:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f42:	2300      	movs	r3, #0
 8000f44:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f46:	2300      	movs	r3, #0
 8000f48:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000f4a:	2301      	movs	r3, #1
 8000f4c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f4e:	f107 030c 	add.w	r3, r7, #12
 8000f52:	4619      	mov	r1, r3
 8000f54:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000f58:	f002 fa5e 	bl	8003418 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8000f5c:	bf00      	nop
 8000f5e:	3720      	adds	r7, #32
 8000f60:	46bd      	mov	sp, r7
 8000f62:	bd80      	pop	{r7, pc}
 8000f64:	40021000 	.word	0x40021000

08000f68 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f68:	b480      	push	{r7}
 8000f6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000f6c:	bf00      	nop
 8000f6e:	e7fd      	b.n	8000f6c <NMI_Handler+0x4>

08000f70 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f70:	b480      	push	{r7}
 8000f72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f74:	bf00      	nop
 8000f76:	e7fd      	b.n	8000f74 <HardFault_Handler+0x4>

08000f78 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f78:	b480      	push	{r7}
 8000f7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f7c:	bf00      	nop
 8000f7e:	e7fd      	b.n	8000f7c <MemManage_Handler+0x4>

08000f80 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f80:	b480      	push	{r7}
 8000f82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f84:	bf00      	nop
 8000f86:	e7fd      	b.n	8000f84 <BusFault_Handler+0x4>

08000f88 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f88:	b480      	push	{r7}
 8000f8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f8c:	bf00      	nop
 8000f8e:	e7fd      	b.n	8000f8c <UsageFault_Handler+0x4>

08000f90 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000f90:	b480      	push	{r7}
 8000f92:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000f94:	bf00      	nop
 8000f96:	46bd      	mov	sp, r7
 8000f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f9c:	4770      	bx	lr

08000f9e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f9e:	b480      	push	{r7}
 8000fa0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000fa2:	bf00      	nop
 8000fa4:	46bd      	mov	sp, r7
 8000fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000faa:	4770      	bx	lr

08000fac <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000fac:	b480      	push	{r7}
 8000fae:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000fb0:	bf00      	nop
 8000fb2:	46bd      	mov	sp, r7
 8000fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb8:	4770      	bx	lr

08000fba <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000fba:	b580      	push	{r7, lr}
 8000fbc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000fbe:	f000 f8e7 	bl	8001190 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000fc2:	bf00      	nop
 8000fc4:	bd80      	pop	{r7, pc}

08000fc6 <PVD_PVM_IRQHandler>:

/**
  * @brief This function handles PVD/PVM1/PVM2/PVM3/PVM4 interrupts through EXTI lines 16/38/39/40/41.
  */
void PVD_PVM_IRQHandler(void)
{
 8000fc6:	b580      	push	{r7, lr}
 8000fc8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN PVD_PVM_IRQn 0 */

  /* USER CODE END PVD_PVM_IRQn 0 */
  HAL_PWREx_PVD_PVM_IRQHandler();
 8000fca:	f003 fbbd 	bl	8004748 <HAL_PWREx_PVD_PVM_IRQHandler>
  /* USER CODE BEGIN PVD_PVM_IRQn 1 */

  /* USER CODE END PVD_PVM_IRQn 1 */
}
 8000fce:	bf00      	nop
 8000fd0:	bd80      	pop	{r7, pc}

08000fd2 <RCC_IRQHandler>:

/**
  * @brief This function handles RCC global interrupt.
  */
void RCC_IRQHandler(void)
{
 8000fd2:	b480      	push	{r7}
 8000fd4:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 8000fd6:	bf00      	nop
 8000fd8:	46bd      	mov	sp, r7
 8000fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fde:	4770      	bx	lr

08000fe0 <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 8000fe0:	b580      	push	{r7, lr}
 8000fe2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(SNOUT_Pin);
 8000fe4:	2008      	movs	r0, #8
 8000fe6:	f002 fbb1 	bl	800374c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 8000fea:	bf00      	nop
 8000fec:	bd80      	pop	{r7, pc}

08000fee <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8000fee:	b580      	push	{r7, lr}
 8000ff0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(NFAULT_Pin);
 8000ff2:	2010      	movs	r0, #16
 8000ff4:	f002 fbaa 	bl	800374c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8000ff8:	bf00      	nop
 8000ffa:	bd80      	pop	{r7, pc}

08000ffc <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8000ffc:	b580      	push	{r7, lr}
 8000ffe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001000:	4802      	ldr	r0, [pc, #8]	@ (800100c <DMA1_Channel1_IRQHandler+0x10>)
 8001002:	f001 fefb 	bl	8002dfc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8001006:	bf00      	nop
 8001008:	bd80      	pop	{r7, pc}
 800100a:	bf00      	nop
 800100c:	20000094 	.word	0x20000094

08001010 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001010:	b580      	push	{r7, lr}
 8001012:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001014:	4802      	ldr	r0, [pc, #8]	@ (8001020 <TIM2_IRQHandler+0x10>)
 8001016:	f004 fd35 	bl	8005a84 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800101a:	bf00      	nop
 800101c:	bd80      	pop	{r7, pc}
 800101e:	bf00      	nop
 8001020:	20000200 	.word	0x20000200

08001024 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt / I2C1 wake-up interrupt through EXTI line 23.
  */
void I2C1_EV_IRQHandler(void)
{
 8001024:	b580      	push	{r7, lr}
 8001026:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8001028:	4802      	ldr	r0, [pc, #8]	@ (8001034 <I2C1_EV_IRQHandler+0x10>)
 800102a:	f002 fc4d 	bl	80038c8 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 800102e:	bf00      	nop
 8001030:	bd80      	pop	{r7, pc}
 8001032:	bf00      	nop
 8001034:	20000158 	.word	0x20000158

08001038 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8001038:	b580      	push	{r7, lr}
 800103a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 800103c:	4802      	ldr	r0, [pc, #8]	@ (8001048 <I2C1_ER_IRQHandler+0x10>)
 800103e:	f002 fc5d 	bl	80038fc <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8001042:	bf00      	nop
 8001044:	bd80      	pop	{r7, pc}
 8001046:	bf00      	nop
 8001048:	20000158 	.word	0x20000158

0800104c <I2C3_EV_IRQHandler>:

/**
  * @brief This function handles I2C3 event interrupt / I2C3 wake-up interrupt through EXTI line 27.
  */
void I2C3_EV_IRQHandler(void)
{
 800104c:	b580      	push	{r7, lr}
 800104e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C3_EV_IRQn 0 */

  /* USER CODE END I2C3_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c3);
 8001050:	4802      	ldr	r0, [pc, #8]	@ (800105c <I2C3_EV_IRQHandler+0x10>)
 8001052:	f002 fc39 	bl	80038c8 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C3_EV_IRQn 1 */

  /* USER CODE END I2C3_EV_IRQn 1 */
}
 8001056:	bf00      	nop
 8001058:	bd80      	pop	{r7, pc}
 800105a:	bf00      	nop
 800105c:	200001ac 	.word	0x200001ac

08001060 <I2C3_ER_IRQHandler>:

/**
  * @brief This function handles I2C3 error interrupt.
  */
void I2C3_ER_IRQHandler(void)
{
 8001060:	b580      	push	{r7, lr}
 8001062:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C3_ER_IRQn 0 */

  /* USER CODE END I2C3_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c3);
 8001064:	4802      	ldr	r0, [pc, #8]	@ (8001070 <I2C3_ER_IRQHandler+0x10>)
 8001066:	f002 fc49 	bl	80038fc <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C3_ER_IRQn 1 */

  /* USER CODE END I2C3_ER_IRQn 1 */
}
 800106a:	bf00      	nop
 800106c:	bd80      	pop	{r7, pc}
 800106e:	bf00      	nop
 8001070:	200001ac 	.word	0x200001ac

08001074 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001074:	b480      	push	{r7}
 8001076:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001078:	4b06      	ldr	r3, [pc, #24]	@ (8001094 <SystemInit+0x20>)
 800107a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800107e:	4a05      	ldr	r2, [pc, #20]	@ (8001094 <SystemInit+0x20>)
 8001080:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001084:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001088:	bf00      	nop
 800108a:	46bd      	mov	sp, r7
 800108c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001090:	4770      	bx	lr
 8001092:	bf00      	nop
 8001094:	e000ed00 	.word	0xe000ed00

08001098 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001098:	480d      	ldr	r0, [pc, #52]	@ (80010d0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800109a:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 800109c:	f7ff ffea 	bl	8001074 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80010a0:	480c      	ldr	r0, [pc, #48]	@ (80010d4 <LoopForever+0x6>)
  ldr r1, =_edata
 80010a2:	490d      	ldr	r1, [pc, #52]	@ (80010d8 <LoopForever+0xa>)
  ldr r2, =_sidata
 80010a4:	4a0d      	ldr	r2, [pc, #52]	@ (80010dc <LoopForever+0xe>)
  movs r3, #0
 80010a6:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 80010a8:	e002      	b.n	80010b0 <LoopCopyDataInit>

080010aa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80010aa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80010ac:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80010ae:	3304      	adds	r3, #4

080010b0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80010b0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80010b2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80010b4:	d3f9      	bcc.n	80010aa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80010b6:	4a0a      	ldr	r2, [pc, #40]	@ (80010e0 <LoopForever+0x12>)
  ldr r4, =_ebss
 80010b8:	4c0a      	ldr	r4, [pc, #40]	@ (80010e4 <LoopForever+0x16>)
  movs r3, #0
 80010ba:	2300      	movs	r3, #0
  b LoopFillZerobss
 80010bc:	e001      	b.n	80010c2 <LoopFillZerobss>

080010be <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80010be:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80010c0:	3204      	adds	r2, #4

080010c2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80010c2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80010c4:	d3fb      	bcc.n	80010be <FillZerobss>
/* Call static constructors */
    bl __libc_init_array
 80010c6:	f005 fd91 	bl	8006bec <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80010ca:	f7ff f983 	bl	80003d4 <main>

080010ce <LoopForever>:

LoopForever:
    b LoopForever
 80010ce:	e7fe      	b.n	80010ce <LoopForever>
  ldr   r0, =_estack
 80010d0:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 80010d4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80010d8:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80010dc:	08006c7c 	.word	0x08006c7c
  ldr r2, =_sbss
 80010e0:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80010e4:	20000254 	.word	0x20000254

080010e8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80010e8:	e7fe      	b.n	80010e8 <ADC1_2_IRQHandler>

080010ea <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80010ea:	b580      	push	{r7, lr}
 80010ec:	b082      	sub	sp, #8
 80010ee:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80010f0:	2300      	movs	r3, #0
 80010f2:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80010f4:	2003      	movs	r0, #3
 80010f6:	f001 fcb7 	bl	8002a68 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80010fa:	200f      	movs	r0, #15
 80010fc:	f000 f80e 	bl	800111c <HAL_InitTick>
 8001100:	4603      	mov	r3, r0
 8001102:	2b00      	cmp	r3, #0
 8001104:	d002      	beq.n	800110c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001106:	2301      	movs	r3, #1
 8001108:	71fb      	strb	r3, [r7, #7]
 800110a:	e001      	b.n	8001110 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800110c:	f7ff fccc 	bl	8000aa8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001110:	79fb      	ldrb	r3, [r7, #7]

}
 8001112:	4618      	mov	r0, r3
 8001114:	3708      	adds	r7, #8
 8001116:	46bd      	mov	sp, r7
 8001118:	bd80      	pop	{r7, pc}
	...

0800111c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800111c:	b580      	push	{r7, lr}
 800111e:	b084      	sub	sp, #16
 8001120:	af00      	add	r7, sp, #0
 8001122:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001124:	2300      	movs	r3, #0
 8001126:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8001128:	4b16      	ldr	r3, [pc, #88]	@ (8001184 <HAL_InitTick+0x68>)
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	2b00      	cmp	r3, #0
 800112e:	d022      	beq.n	8001176 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8001130:	4b15      	ldr	r3, [pc, #84]	@ (8001188 <HAL_InitTick+0x6c>)
 8001132:	681a      	ldr	r2, [r3, #0]
 8001134:	4b13      	ldr	r3, [pc, #76]	@ (8001184 <HAL_InitTick+0x68>)
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 800113c:	fbb1 f3f3 	udiv	r3, r1, r3
 8001140:	fbb2 f3f3 	udiv	r3, r2, r3
 8001144:	4618      	mov	r0, r3
 8001146:	f001 fcc2 	bl	8002ace <HAL_SYSTICK_Config>
 800114a:	4603      	mov	r3, r0
 800114c:	2b00      	cmp	r3, #0
 800114e:	d10f      	bne.n	8001170 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	2b0f      	cmp	r3, #15
 8001154:	d809      	bhi.n	800116a <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001156:	2200      	movs	r2, #0
 8001158:	6879      	ldr	r1, [r7, #4]
 800115a:	f04f 30ff 	mov.w	r0, #4294967295
 800115e:	f001 fc8e 	bl	8002a7e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001162:	4a0a      	ldr	r2, [pc, #40]	@ (800118c <HAL_InitTick+0x70>)
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	6013      	str	r3, [r2, #0]
 8001168:	e007      	b.n	800117a <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 800116a:	2301      	movs	r3, #1
 800116c:	73fb      	strb	r3, [r7, #15]
 800116e:	e004      	b.n	800117a <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001170:	2301      	movs	r3, #1
 8001172:	73fb      	strb	r3, [r7, #15]
 8001174:	e001      	b.n	800117a <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001176:	2301      	movs	r3, #1
 8001178:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800117a:	7bfb      	ldrb	r3, [r7, #15]
}
 800117c:	4618      	mov	r0, r3
 800117e:	3710      	adds	r7, #16
 8001180:	46bd      	mov	sp, r7
 8001182:	bd80      	pop	{r7, pc}
 8001184:	20000008 	.word	0x20000008
 8001188:	20000000 	.word	0x20000000
 800118c:	20000004 	.word	0x20000004

08001190 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001190:	b480      	push	{r7}
 8001192:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001194:	4b05      	ldr	r3, [pc, #20]	@ (80011ac <HAL_IncTick+0x1c>)
 8001196:	681a      	ldr	r2, [r3, #0]
 8001198:	4b05      	ldr	r3, [pc, #20]	@ (80011b0 <HAL_IncTick+0x20>)
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	4413      	add	r3, r2
 800119e:	4a03      	ldr	r2, [pc, #12]	@ (80011ac <HAL_IncTick+0x1c>)
 80011a0:	6013      	str	r3, [r2, #0]
}
 80011a2:	bf00      	nop
 80011a4:	46bd      	mov	sp, r7
 80011a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011aa:	4770      	bx	lr
 80011ac:	20000250 	.word	0x20000250
 80011b0:	20000008 	.word	0x20000008

080011b4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80011b4:	b480      	push	{r7}
 80011b6:	af00      	add	r7, sp, #0
  return uwTick;
 80011b8:	4b03      	ldr	r3, [pc, #12]	@ (80011c8 <HAL_GetTick+0x14>)
 80011ba:	681b      	ldr	r3, [r3, #0]
}
 80011bc:	4618      	mov	r0, r3
 80011be:	46bd      	mov	sp, r7
 80011c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c4:	4770      	bx	lr
 80011c6:	bf00      	nop
 80011c8:	20000250 	.word	0x20000250

080011cc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80011cc:	b580      	push	{r7, lr}
 80011ce:	b084      	sub	sp, #16
 80011d0:	af00      	add	r7, sp, #0
 80011d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80011d4:	f7ff ffee 	bl	80011b4 <HAL_GetTick>
 80011d8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80011de:	68fb      	ldr	r3, [r7, #12]
 80011e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80011e4:	d004      	beq.n	80011f0 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 80011e6:	4b09      	ldr	r3, [pc, #36]	@ (800120c <HAL_Delay+0x40>)
 80011e8:	681b      	ldr	r3, [r3, #0]
 80011ea:	68fa      	ldr	r2, [r7, #12]
 80011ec:	4413      	add	r3, r2
 80011ee:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80011f0:	bf00      	nop
 80011f2:	f7ff ffdf 	bl	80011b4 <HAL_GetTick>
 80011f6:	4602      	mov	r2, r0
 80011f8:	68bb      	ldr	r3, [r7, #8]
 80011fa:	1ad3      	subs	r3, r2, r3
 80011fc:	68fa      	ldr	r2, [r7, #12]
 80011fe:	429a      	cmp	r2, r3
 8001200:	d8f7      	bhi.n	80011f2 <HAL_Delay+0x26>
  {
  }
}
 8001202:	bf00      	nop
 8001204:	bf00      	nop
 8001206:	3710      	adds	r7, #16
 8001208:	46bd      	mov	sp, r7
 800120a:	bd80      	pop	{r7, pc}
 800120c:	20000008 	.word	0x20000008

08001210 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001210:	b480      	push	{r7}
 8001212:	b083      	sub	sp, #12
 8001214:	af00      	add	r7, sp, #0
 8001216:	6078      	str	r0, [r7, #4]
 8001218:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	689b      	ldr	r3, [r3, #8]
 800121e:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8001222:	683b      	ldr	r3, [r7, #0]
 8001224:	431a      	orrs	r2, r3
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	609a      	str	r2, [r3, #8]
}
 800122a:	bf00      	nop
 800122c:	370c      	adds	r7, #12
 800122e:	46bd      	mov	sp, r7
 8001230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001234:	4770      	bx	lr

08001236 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001236:	b480      	push	{r7}
 8001238:	b083      	sub	sp, #12
 800123a:	af00      	add	r7, sp, #0
 800123c:	6078      	str	r0, [r7, #4]
 800123e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	689b      	ldr	r3, [r3, #8]
 8001244:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8001248:	683b      	ldr	r3, [r7, #0]
 800124a:	431a      	orrs	r2, r3
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	609a      	str	r2, [r3, #8]
}
 8001250:	bf00      	nop
 8001252:	370c      	adds	r7, #12
 8001254:	46bd      	mov	sp, r7
 8001256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800125a:	4770      	bx	lr

0800125c <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 800125c:	b480      	push	{r7}
 800125e:	b083      	sub	sp, #12
 8001260:	af00      	add	r7, sp, #0
 8001262:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	689b      	ldr	r3, [r3, #8]
 8001268:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 800126c:	4618      	mov	r0, r3
 800126e:	370c      	adds	r7, #12
 8001270:	46bd      	mov	sp, r7
 8001272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001276:	4770      	bx	lr

08001278 <LL_ADC_SetOffset>:
  *             (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001278:	b480      	push	{r7}
 800127a:	b087      	sub	sp, #28
 800127c:	af00      	add	r7, sp, #0
 800127e:	60f8      	str	r0, [r7, #12]
 8001280:	60b9      	str	r1, [r7, #8]
 8001282:	607a      	str	r2, [r7, #4]
 8001284:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001286:	68fb      	ldr	r3, [r7, #12]
 8001288:	3360      	adds	r3, #96	@ 0x60
 800128a:	461a      	mov	r2, r3
 800128c:	68bb      	ldr	r3, [r7, #8]
 800128e:	009b      	lsls	r3, r3, #2
 8001290:	4413      	add	r3, r2
 8001292:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001294:	697b      	ldr	r3, [r7, #20]
 8001296:	681a      	ldr	r2, [r3, #0]
 8001298:	4b08      	ldr	r3, [pc, #32]	@ (80012bc <LL_ADC_SetOffset+0x44>)
 800129a:	4013      	ands	r3, r2
 800129c:	687a      	ldr	r2, [r7, #4]
 800129e:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 80012a2:	683a      	ldr	r2, [r7, #0]
 80012a4:	430a      	orrs	r2, r1
 80012a6:	4313      	orrs	r3, r2
 80012a8:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 80012ac:	697b      	ldr	r3, [r7, #20]
 80012ae:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 80012b0:	bf00      	nop
 80012b2:	371c      	adds	r7, #28
 80012b4:	46bd      	mov	sp, r7
 80012b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ba:	4770      	bx	lr
 80012bc:	03fff000 	.word	0x03fff000

080012c0 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 80012c0:	b480      	push	{r7}
 80012c2:	b085      	sub	sp, #20
 80012c4:	af00      	add	r7, sp, #0
 80012c6:	6078      	str	r0, [r7, #4]
 80012c8:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	3360      	adds	r3, #96	@ 0x60
 80012ce:	461a      	mov	r2, r3
 80012d0:	683b      	ldr	r3, [r7, #0]
 80012d2:	009b      	lsls	r3, r3, #2
 80012d4:	4413      	add	r3, r2
 80012d6:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80012d8:	68fb      	ldr	r3, [r7, #12]
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 80012e0:	4618      	mov	r0, r3
 80012e2:	3714      	adds	r7, #20
 80012e4:	46bd      	mov	sp, r7
 80012e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ea:	4770      	bx	lr

080012ec <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 80012ec:	b480      	push	{r7}
 80012ee:	b087      	sub	sp, #28
 80012f0:	af00      	add	r7, sp, #0
 80012f2:	60f8      	str	r0, [r7, #12]
 80012f4:	60b9      	str	r1, [r7, #8]
 80012f6:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80012f8:	68fb      	ldr	r3, [r7, #12]
 80012fa:	3360      	adds	r3, #96	@ 0x60
 80012fc:	461a      	mov	r2, r3
 80012fe:	68bb      	ldr	r3, [r7, #8]
 8001300:	009b      	lsls	r3, r3, #2
 8001302:	4413      	add	r3, r2
 8001304:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001306:	697b      	ldr	r3, [r7, #20]
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	431a      	orrs	r2, r3
 8001312:	697b      	ldr	r3, [r7, #20]
 8001314:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8001316:	bf00      	nop
 8001318:	371c      	adds	r7, #28
 800131a:	46bd      	mov	sp, r7
 800131c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001320:	4770      	bx	lr

08001322 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8001322:	b480      	push	{r7}
 8001324:	b087      	sub	sp, #28
 8001326:	af00      	add	r7, sp, #0
 8001328:	60f8      	str	r0, [r7, #12]
 800132a:	60b9      	str	r1, [r7, #8]
 800132c:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800132e:	68fb      	ldr	r3, [r7, #12]
 8001330:	3360      	adds	r3, #96	@ 0x60
 8001332:	461a      	mov	r2, r3
 8001334:	68bb      	ldr	r3, [r7, #8]
 8001336:	009b      	lsls	r3, r3, #2
 8001338:	4413      	add	r3, r2
 800133a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800133c:	697b      	ldr	r3, [r7, #20]
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	431a      	orrs	r2, r3
 8001348:	697b      	ldr	r3, [r7, #20]
 800134a:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 800134c:	bf00      	nop
 800134e:	371c      	adds	r7, #28
 8001350:	46bd      	mov	sp, r7
 8001352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001356:	4770      	bx	lr

08001358 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8001358:	b480      	push	{r7}
 800135a:	b087      	sub	sp, #28
 800135c:	af00      	add	r7, sp, #0
 800135e:	60f8      	str	r0, [r7, #12]
 8001360:	60b9      	str	r1, [r7, #8]
 8001362:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001364:	68fb      	ldr	r3, [r7, #12]
 8001366:	3360      	adds	r3, #96	@ 0x60
 8001368:	461a      	mov	r2, r3
 800136a:	68bb      	ldr	r3, [r7, #8]
 800136c:	009b      	lsls	r3, r3, #2
 800136e:	4413      	add	r3, r2
 8001370:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001372:	697b      	ldr	r3, [r7, #20]
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	431a      	orrs	r2, r3
 800137e:	697b      	ldr	r3, [r7, #20]
 8001380:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 8001382:	bf00      	nop
 8001384:	371c      	adds	r7, #28
 8001386:	46bd      	mov	sp, r7
 8001388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800138c:	4770      	bx	lr

0800138e <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 800138e:	b480      	push	{r7}
 8001390:	b083      	sub	sp, #12
 8001392:	af00      	add	r7, sp, #0
 8001394:	6078      	str	r0, [r7, #4]
 8001396:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	695b      	ldr	r3, [r3, #20]
 800139c:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80013a0:	683b      	ldr	r3, [r7, #0]
 80013a2:	431a      	orrs	r2, r3
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	615a      	str	r2, [r3, #20]
}
 80013a8:	bf00      	nop
 80013aa:	370c      	adds	r7, #12
 80013ac:	46bd      	mov	sp, r7
 80013ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b2:	4770      	bx	lr

080013b4 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 80013b4:	b480      	push	{r7}
 80013b6:	b083      	sub	sp, #12
 80013b8:	af00      	add	r7, sp, #0
 80013ba:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	68db      	ldr	r3, [r3, #12]
 80013c0:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	d101      	bne.n	80013cc <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 80013c8:	2301      	movs	r3, #1
 80013ca:	e000      	b.n	80013ce <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 80013cc:	2300      	movs	r3, #0
}
 80013ce:	4618      	mov	r0, r3
 80013d0:	370c      	adds	r7, #12
 80013d2:	46bd      	mov	sp, r7
 80013d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d8:	4770      	bx	lr

080013da <LL_ADC_REG_SetSequencerRanks>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles
  *             (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80013da:	b480      	push	{r7}
 80013dc:	b087      	sub	sp, #28
 80013de:	af00      	add	r7, sp, #0
 80013e0:	60f8      	str	r0, [r7, #12]
 80013e2:	60b9      	str	r1, [r7, #8]
 80013e4:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 80013e6:	68fb      	ldr	r3, [r7, #12]
 80013e8:	3330      	adds	r3, #48	@ 0x30
 80013ea:	461a      	mov	r2, r3
 80013ec:	68bb      	ldr	r3, [r7, #8]
 80013ee:	0a1b      	lsrs	r3, r3, #8
 80013f0:	009b      	lsls	r3, r3, #2
 80013f2:	f003 030c 	and.w	r3, r3, #12
 80013f6:	4413      	add	r3, r2
 80013f8:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 80013fa:	697b      	ldr	r3, [r7, #20]
 80013fc:	681a      	ldr	r2, [r3, #0]
 80013fe:	68bb      	ldr	r3, [r7, #8]
 8001400:	f003 031f 	and.w	r3, r3, #31
 8001404:	211f      	movs	r1, #31
 8001406:	fa01 f303 	lsl.w	r3, r1, r3
 800140a:	43db      	mvns	r3, r3
 800140c:	401a      	ands	r2, r3
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	0e9b      	lsrs	r3, r3, #26
 8001412:	f003 011f 	and.w	r1, r3, #31
 8001416:	68bb      	ldr	r3, [r7, #8]
 8001418:	f003 031f 	and.w	r3, r3, #31
 800141c:	fa01 f303 	lsl.w	r3, r1, r3
 8001420:	431a      	orrs	r2, r3
 8001422:	697b      	ldr	r3, [r7, #20]
 8001424:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001426:	bf00      	nop
 8001428:	371c      	adds	r7, #28
 800142a:	46bd      	mov	sp, r7
 800142c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001430:	4770      	bx	lr

08001432 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001432:	b480      	push	{r7}
 8001434:	b087      	sub	sp, #28
 8001436:	af00      	add	r7, sp, #0
 8001438:	60f8      	str	r0, [r7, #12]
 800143a:	60b9      	str	r1, [r7, #8]
 800143c:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 800143e:	68fb      	ldr	r3, [r7, #12]
 8001440:	3314      	adds	r3, #20
 8001442:	461a      	mov	r2, r3
 8001444:	68bb      	ldr	r3, [r7, #8]
 8001446:	0e5b      	lsrs	r3, r3, #25
 8001448:	009b      	lsls	r3, r3, #2
 800144a:	f003 0304 	and.w	r3, r3, #4
 800144e:	4413      	add	r3, r2
 8001450:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8001452:	697b      	ldr	r3, [r7, #20]
 8001454:	681a      	ldr	r2, [r3, #0]
 8001456:	68bb      	ldr	r3, [r7, #8]
 8001458:	0d1b      	lsrs	r3, r3, #20
 800145a:	f003 031f 	and.w	r3, r3, #31
 800145e:	2107      	movs	r1, #7
 8001460:	fa01 f303 	lsl.w	r3, r1, r3
 8001464:	43db      	mvns	r3, r3
 8001466:	401a      	ands	r2, r3
 8001468:	68bb      	ldr	r3, [r7, #8]
 800146a:	0d1b      	lsrs	r3, r3, #20
 800146c:	f003 031f 	and.w	r3, r3, #31
 8001470:	6879      	ldr	r1, [r7, #4]
 8001472:	fa01 f303 	lsl.w	r3, r1, r3
 8001476:	431a      	orrs	r2, r3
 8001478:	697b      	ldr	r3, [r7, #20]
 800147a:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 800147c:	bf00      	nop
 800147e:	371c      	adds	r7, #28
 8001480:	46bd      	mov	sp, r7
 8001482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001486:	4770      	bx	lr

08001488 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001488:	b480      	push	{r7}
 800148a:	b085      	sub	sp, #20
 800148c:	af00      	add	r7, sp, #0
 800148e:	60f8      	str	r0, [r7, #12]
 8001490:	60b9      	str	r1, [r7, #8]
 8001492:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001494:	68fb      	ldr	r3, [r7, #12]
 8001496:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 800149a:	68bb      	ldr	r3, [r7, #8]
 800149c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80014a0:	43db      	mvns	r3, r3
 80014a2:	401a      	ands	r2, r3
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	f003 0318 	and.w	r3, r3, #24
 80014aa:	4908      	ldr	r1, [pc, #32]	@ (80014cc <LL_ADC_SetChannelSingleDiff+0x44>)
 80014ac:	40d9      	lsrs	r1, r3
 80014ae:	68bb      	ldr	r3, [r7, #8]
 80014b0:	400b      	ands	r3, r1
 80014b2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80014b6:	431a      	orrs	r2, r3
 80014b8:	68fb      	ldr	r3, [r7, #12]
 80014ba:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 80014be:	bf00      	nop
 80014c0:	3714      	adds	r7, #20
 80014c2:	46bd      	mov	sp, r7
 80014c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c8:	4770      	bx	lr
 80014ca:	bf00      	nop
 80014cc:	0007ffff 	.word	0x0007ffff

080014d0 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80014d0:	b480      	push	{r7}
 80014d2:	b083      	sub	sp, #12
 80014d4:	af00      	add	r7, sp, #0
 80014d6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	689b      	ldr	r3, [r3, #8]
 80014dc:	f003 031f 	and.w	r3, r3, #31
}
 80014e0:	4618      	mov	r0, r3
 80014e2:	370c      	adds	r7, #12
 80014e4:	46bd      	mov	sp, r7
 80014e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ea:	4770      	bx	lr

080014ec <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80014ec:	b480      	push	{r7}
 80014ee:	b083      	sub	sp, #12
 80014f0:	af00      	add	r7, sp, #0
 80014f2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	689b      	ldr	r3, [r3, #8]
 80014f8:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 80014fc:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001500:	687a      	ldr	r2, [r7, #4]
 8001502:	6093      	str	r3, [r2, #8]
}
 8001504:	bf00      	nop
 8001506:	370c      	adds	r7, #12
 8001508:	46bd      	mov	sp, r7
 800150a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800150e:	4770      	bx	lr

08001510 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8001510:	b480      	push	{r7}
 8001512:	b083      	sub	sp, #12
 8001514:	af00      	add	r7, sp, #0
 8001516:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	689b      	ldr	r3, [r3, #8]
 800151c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8001520:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8001524:	d101      	bne.n	800152a <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001526:	2301      	movs	r3, #1
 8001528:	e000      	b.n	800152c <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800152a:	2300      	movs	r3, #0
}
 800152c:	4618      	mov	r0, r3
 800152e:	370c      	adds	r7, #12
 8001530:	46bd      	mov	sp, r7
 8001532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001536:	4770      	bx	lr

08001538 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001538:	b480      	push	{r7}
 800153a:	b083      	sub	sp, #12
 800153c:	af00      	add	r7, sp, #0
 800153e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	689b      	ldr	r3, [r3, #8]
 8001544:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8001548:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800154c:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001554:	bf00      	nop
 8001556:	370c      	adds	r7, #12
 8001558:	46bd      	mov	sp, r7
 800155a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800155e:	4770      	bx	lr

08001560 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8001560:	b480      	push	{r7}
 8001562:	b083      	sub	sp, #12
 8001564:	af00      	add	r7, sp, #0
 8001566:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	689b      	ldr	r3, [r3, #8]
 800156c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001570:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8001574:	d101      	bne.n	800157a <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001576:	2301      	movs	r3, #1
 8001578:	e000      	b.n	800157c <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800157a:	2300      	movs	r3, #0
}
 800157c:	4618      	mov	r0, r3
 800157e:	370c      	adds	r7, #12
 8001580:	46bd      	mov	sp, r7
 8001582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001586:	4770      	bx	lr

08001588 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8001588:	b480      	push	{r7}
 800158a:	b083      	sub	sp, #12
 800158c:	af00      	add	r7, sp, #0
 800158e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	689b      	ldr	r3, [r3, #8]
 8001594:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8001598:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800159c:	f043 0201 	orr.w	r2, r3, #1
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 80015a4:	bf00      	nop
 80015a6:	370c      	adds	r7, #12
 80015a8:	46bd      	mov	sp, r7
 80015aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ae:	4770      	bx	lr

080015b0 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 80015b0:	b480      	push	{r7}
 80015b2:	b083      	sub	sp, #12
 80015b4:	af00      	add	r7, sp, #0
 80015b6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	689b      	ldr	r3, [r3, #8]
 80015bc:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80015c0:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80015c4:	f043 0202 	orr.w	r2, r3, #2
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 80015cc:	bf00      	nop
 80015ce:	370c      	adds	r7, #12
 80015d0:	46bd      	mov	sp, r7
 80015d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d6:	4770      	bx	lr

080015d8 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 80015d8:	b480      	push	{r7}
 80015da:	b083      	sub	sp, #12
 80015dc:	af00      	add	r7, sp, #0
 80015de:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	689b      	ldr	r3, [r3, #8]
 80015e4:	f003 0301 	and.w	r3, r3, #1
 80015e8:	2b01      	cmp	r3, #1
 80015ea:	d101      	bne.n	80015f0 <LL_ADC_IsEnabled+0x18>
 80015ec:	2301      	movs	r3, #1
 80015ee:	e000      	b.n	80015f2 <LL_ADC_IsEnabled+0x1a>
 80015f0:	2300      	movs	r3, #0
}
 80015f2:	4618      	mov	r0, r3
 80015f4:	370c      	adds	r7, #12
 80015f6:	46bd      	mov	sp, r7
 80015f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015fc:	4770      	bx	lr

080015fe <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(const ADC_TypeDef *ADCx)
{
 80015fe:	b480      	push	{r7}
 8001600:	b083      	sub	sp, #12
 8001602:	af00      	add	r7, sp, #0
 8001604:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	689b      	ldr	r3, [r3, #8]
 800160a:	f003 0302 	and.w	r3, r3, #2
 800160e:	2b02      	cmp	r3, #2
 8001610:	d101      	bne.n	8001616 <LL_ADC_IsDisableOngoing+0x18>
 8001612:	2301      	movs	r3, #1
 8001614:	e000      	b.n	8001618 <LL_ADC_IsDisableOngoing+0x1a>
 8001616:	2300      	movs	r3, #0
}
 8001618:	4618      	mov	r0, r3
 800161a:	370c      	adds	r7, #12
 800161c:	46bd      	mov	sp, r7
 800161e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001622:	4770      	bx	lr

08001624 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8001624:	b480      	push	{r7}
 8001626:	b083      	sub	sp, #12
 8001628:	af00      	add	r7, sp, #0
 800162a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	689b      	ldr	r3, [r3, #8]
 8001630:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8001634:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001638:	f043 0204 	orr.w	r2, r3, #4
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8001640:	bf00      	nop
 8001642:	370c      	adds	r7, #12
 8001644:	46bd      	mov	sp, r7
 8001646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800164a:	4770      	bx	lr

0800164c <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 800164c:	b480      	push	{r7}
 800164e:	b083      	sub	sp, #12
 8001650:	af00      	add	r7, sp, #0
 8001652:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	689b      	ldr	r3, [r3, #8]
 8001658:	f003 0304 	and.w	r3, r3, #4
 800165c:	2b04      	cmp	r3, #4
 800165e:	d101      	bne.n	8001664 <LL_ADC_REG_IsConversionOngoing+0x18>
 8001660:	2301      	movs	r3, #1
 8001662:	e000      	b.n	8001666 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001664:	2300      	movs	r3, #0
}
 8001666:	4618      	mov	r0, r3
 8001668:	370c      	adds	r7, #12
 800166a:	46bd      	mov	sp, r7
 800166c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001670:	4770      	bx	lr

08001672 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001672:	b480      	push	{r7}
 8001674:	b083      	sub	sp, #12
 8001676:	af00      	add	r7, sp, #0
 8001678:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	689b      	ldr	r3, [r3, #8]
 800167e:	f003 0308 	and.w	r3, r3, #8
 8001682:	2b08      	cmp	r3, #8
 8001684:	d101      	bne.n	800168a <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001686:	2301      	movs	r3, #1
 8001688:	e000      	b.n	800168c <LL_ADC_INJ_IsConversionOngoing+0x1a>
 800168a:	2300      	movs	r3, #0
}
 800168c:	4618      	mov	r0, r3
 800168e:	370c      	adds	r7, #12
 8001690:	46bd      	mov	sp, r7
 8001692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001696:	4770      	bx	lr

08001698 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001698:	b590      	push	{r4, r7, lr}
 800169a:	b089      	sub	sp, #36	@ 0x24
 800169c:	af00      	add	r7, sp, #0
 800169e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80016a0:	2300      	movs	r3, #0
 80016a2:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 80016a4:	2300      	movs	r3, #0
 80016a6:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	d101      	bne.n	80016b2 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80016ae:	2301      	movs	r3, #1
 80016b0:	e167      	b.n	8001982 <HAL_ADC_Init+0x2ea>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	695b      	ldr	r3, [r3, #20]
 80016b6:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80016bc:	2b00      	cmp	r3, #0
 80016be:	d109      	bne.n	80016d4 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80016c0:	6878      	ldr	r0, [r7, #4]
 80016c2:	f7ff fa25 	bl	8000b10 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	2200      	movs	r2, #0
 80016ca:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	2200      	movs	r2, #0
 80016d0:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	4618      	mov	r0, r3
 80016da:	f7ff ff19 	bl	8001510 <LL_ADC_IsDeepPowerDownEnabled>
 80016de:	4603      	mov	r3, r0
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	d004      	beq.n	80016ee <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	4618      	mov	r0, r3
 80016ea:	f7ff feff 	bl	80014ec <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	4618      	mov	r0, r3
 80016f4:	f7ff ff34 	bl	8001560 <LL_ADC_IsInternalRegulatorEnabled>
 80016f8:	4603      	mov	r3, r0
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d115      	bne.n	800172a <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	4618      	mov	r0, r3
 8001704:	f7ff ff18 	bl	8001538 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001708:	4ba0      	ldr	r3, [pc, #640]	@ (800198c <HAL_ADC_Init+0x2f4>)
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	099b      	lsrs	r3, r3, #6
 800170e:	4aa0      	ldr	r2, [pc, #640]	@ (8001990 <HAL_ADC_Init+0x2f8>)
 8001710:	fba2 2303 	umull	r2, r3, r2, r3
 8001714:	099b      	lsrs	r3, r3, #6
 8001716:	3301      	adds	r3, #1
 8001718:	005b      	lsls	r3, r3, #1
 800171a:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 800171c:	e002      	b.n	8001724 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 800171e:	68fb      	ldr	r3, [r7, #12]
 8001720:	3b01      	subs	r3, #1
 8001722:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001724:	68fb      	ldr	r3, [r7, #12]
 8001726:	2b00      	cmp	r3, #0
 8001728:	d1f9      	bne.n	800171e <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	4618      	mov	r0, r3
 8001730:	f7ff ff16 	bl	8001560 <LL_ADC_IsInternalRegulatorEnabled>
 8001734:	4603      	mov	r3, r0
 8001736:	2b00      	cmp	r3, #0
 8001738:	d10d      	bne.n	8001756 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800173e:	f043 0210 	orr.w	r2, r3, #16
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800174a:	f043 0201 	orr.w	r2, r3, #1
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 8001752:	2301      	movs	r3, #1
 8001754:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	4618      	mov	r0, r3
 800175c:	f7ff ff76 	bl	800164c <LL_ADC_REG_IsConversionOngoing>
 8001760:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001766:	f003 0310 	and.w	r3, r3, #16
 800176a:	2b00      	cmp	r3, #0
 800176c:	f040 8100 	bne.w	8001970 <HAL_ADC_Init+0x2d8>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8001770:	697b      	ldr	r3, [r7, #20]
 8001772:	2b00      	cmp	r3, #0
 8001774:	f040 80fc 	bne.w	8001970 <HAL_ADC_Init+0x2d8>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800177c:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8001780:	f043 0202 	orr.w	r2, r3, #2
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	4618      	mov	r0, r3
 800178e:	f7ff ff23 	bl	80015d8 <LL_ADC_IsEnabled>
 8001792:	4603      	mov	r3, r0
 8001794:	2b00      	cmp	r3, #0
 8001796:	d111      	bne.n	80017bc <HAL_ADC_Init+0x124>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001798:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 800179c:	f7ff ff1c 	bl	80015d8 <LL_ADC_IsEnabled>
 80017a0:	4604      	mov	r4, r0
 80017a2:	487c      	ldr	r0, [pc, #496]	@ (8001994 <HAL_ADC_Init+0x2fc>)
 80017a4:	f7ff ff18 	bl	80015d8 <LL_ADC_IsEnabled>
 80017a8:	4603      	mov	r3, r0
 80017aa:	4323      	orrs	r3, r4
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	d105      	bne.n	80017bc <HAL_ADC_Init+0x124>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	685b      	ldr	r3, [r3, #4]
 80017b4:	4619      	mov	r1, r3
 80017b6:	4878      	ldr	r0, [pc, #480]	@ (8001998 <HAL_ADC_Init+0x300>)
 80017b8:	f7ff fd2a 	bl	8001210 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	7f5b      	ldrb	r3, [r3, #29]
 80017c0:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80017c6:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 80017cc:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 80017d2:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80017da:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80017dc:	4313      	orrs	r3, r2
 80017de:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80017e6:	2b01      	cmp	r3, #1
 80017e8:	d106      	bne.n	80017f8 <HAL_ADC_Init+0x160>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80017ee:	3b01      	subs	r3, #1
 80017f0:	045b      	lsls	r3, r3, #17
 80017f2:	69ba      	ldr	r2, [r7, #24]
 80017f4:	4313      	orrs	r3, r2
 80017f6:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	d009      	beq.n	8001814 <HAL_ADC_Init+0x17c>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001804:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800180c:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800180e:	69ba      	ldr	r2, [r7, #24]
 8001810:	4313      	orrs	r3, r2
 8001812:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	68da      	ldr	r2, [r3, #12]
 800181a:	4b60      	ldr	r3, [pc, #384]	@ (800199c <HAL_ADC_Init+0x304>)
 800181c:	4013      	ands	r3, r2
 800181e:	687a      	ldr	r2, [r7, #4]
 8001820:	6812      	ldr	r2, [r2, #0]
 8001822:	69b9      	ldr	r1, [r7, #24]
 8001824:	430b      	orrs	r3, r1
 8001826:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	691b      	ldr	r3, [r3, #16]
 800182e:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	430a      	orrs	r2, r1
 800183c:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	4618      	mov	r0, r3
 8001844:	f7ff ff15 	bl	8001672 <LL_ADC_INJ_IsConversionOngoing>
 8001848:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800184a:	697b      	ldr	r3, [r7, #20]
 800184c:	2b00      	cmp	r3, #0
 800184e:	d16d      	bne.n	800192c <HAL_ADC_Init+0x294>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001850:	693b      	ldr	r3, [r7, #16]
 8001852:	2b00      	cmp	r3, #0
 8001854:	d16a      	bne.n	800192c <HAL_ADC_Init+0x294>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	7f1b      	ldrb	r3, [r3, #28]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 800185a:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8001862:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8001864:	4313      	orrs	r3, r2
 8001866:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	68db      	ldr	r3, [r3, #12]
 800186e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8001872:	f023 0302 	bic.w	r3, r3, #2
 8001876:	687a      	ldr	r2, [r7, #4]
 8001878:	6812      	ldr	r2, [r2, #0]
 800187a:	69b9      	ldr	r1, [r7, #24]
 800187c:	430b      	orrs	r3, r1
 800187e:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	691b      	ldr	r3, [r3, #16]
 8001884:	2b00      	cmp	r3, #0
 8001886:	d017      	beq.n	80018b8 <HAL_ADC_Init+0x220>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	691a      	ldr	r2, [r3, #16]
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8001896:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 80018a0:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 80018a4:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80018a8:	687a      	ldr	r2, [r7, #4]
 80018aa:	6911      	ldr	r1, [r2, #16]
 80018ac:	687a      	ldr	r2, [r7, #4]
 80018ae:	6812      	ldr	r2, [r2, #0]
 80018b0:	430b      	orrs	r3, r1
 80018b2:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
 80018b6:	e013      	b.n	80018e0 <HAL_ADC_Init+0x248>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	691a      	ldr	r2, [r3, #16]
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 80018c6:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 80018d0:	687a      	ldr	r2, [r7, #4]
 80018d2:	6812      	ldr	r2, [r2, #0]
 80018d4:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 80018d8:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80018dc:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80018e6:	2b01      	cmp	r3, #1
 80018e8:	d118      	bne.n	800191c <HAL_ADC_Init+0x284>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	691b      	ldr	r3, [r3, #16]
 80018f0:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 80018f4:	f023 0304 	bic.w	r3, r3, #4
 80018f8:	687a      	ldr	r2, [r7, #4]
 80018fa:	6c51      	ldr	r1, [r2, #68]	@ 0x44
 80018fc:	687a      	ldr	r2, [r7, #4]
 80018fe:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8001900:	4311      	orrs	r1, r2
 8001902:	687a      	ldr	r2, [r7, #4]
 8001904:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8001906:	4311      	orrs	r1, r2
 8001908:	687a      	ldr	r2, [r7, #4]
 800190a:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800190c:	430a      	orrs	r2, r1
 800190e:	431a      	orrs	r2, r3
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	f042 0201 	orr.w	r2, r2, #1
 8001918:	611a      	str	r2, [r3, #16]
 800191a:	e007      	b.n	800192c <HAL_ADC_Init+0x294>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	691a      	ldr	r2, [r3, #16]
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	f022 0201 	bic.w	r2, r2, #1
 800192a:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	695b      	ldr	r3, [r3, #20]
 8001930:	2b01      	cmp	r3, #1
 8001932:	d10c      	bne.n	800194e <HAL_ADC_Init+0x2b6>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800193a:	f023 010f 	bic.w	r1, r3, #15
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	6a1b      	ldr	r3, [r3, #32]
 8001942:	1e5a      	subs	r2, r3, #1
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	430a      	orrs	r2, r1
 800194a:	631a      	str	r2, [r3, #48]	@ 0x30
 800194c:	e007      	b.n	800195e <HAL_ADC_Init+0x2c6>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	f022 020f 	bic.w	r2, r2, #15
 800195c:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001962:	f023 0303 	bic.w	r3, r3, #3
 8001966:	f043 0201 	orr.w	r2, r3, #1
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	65da      	str	r2, [r3, #92]	@ 0x5c
 800196e:	e007      	b.n	8001980 <HAL_ADC_Init+0x2e8>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001974:	f043 0210 	orr.w	r2, r3, #16
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 800197c:	2301      	movs	r3, #1
 800197e:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8001980:	7ffb      	ldrb	r3, [r7, #31]
}
 8001982:	4618      	mov	r0, r3
 8001984:	3724      	adds	r7, #36	@ 0x24
 8001986:	46bd      	mov	sp, r7
 8001988:	bd90      	pop	{r4, r7, pc}
 800198a:	bf00      	nop
 800198c:	20000000 	.word	0x20000000
 8001990:	053e2d63 	.word	0x053e2d63
 8001994:	50000100 	.word	0x50000100
 8001998:	50000300 	.word	0x50000300
 800199c:	fff04007 	.word	0xfff04007

080019a0 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 80019a0:	b580      	push	{r7, lr}
 80019a2:	b086      	sub	sp, #24
 80019a4:	af00      	add	r7, sp, #0
 80019a6:	60f8      	str	r0, [r7, #12]
 80019a8:	60b9      	str	r1, [r7, #8]
 80019aa:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80019ac:	4851      	ldr	r0, [pc, #324]	@ (8001af4 <HAL_ADC_Start_DMA+0x154>)
 80019ae:	f7ff fd8f 	bl	80014d0 <LL_ADC_GetMultimode>
 80019b2:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80019b4:	68fb      	ldr	r3, [r7, #12]
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	4618      	mov	r0, r3
 80019ba:	f7ff fe47 	bl	800164c <LL_ADC_REG_IsConversionOngoing>
 80019be:	4603      	mov	r3, r0
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	f040 808f 	bne.w	8001ae4 <HAL_ADC_Start_DMA+0x144>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80019c6:	68fb      	ldr	r3, [r7, #12]
 80019c8:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 80019cc:	2b01      	cmp	r3, #1
 80019ce:	d101      	bne.n	80019d4 <HAL_ADC_Start_DMA+0x34>
 80019d0:	2302      	movs	r3, #2
 80019d2:	e08a      	b.n	8001aea <HAL_ADC_Start_DMA+0x14a>
 80019d4:	68fb      	ldr	r3, [r7, #12]
 80019d6:	2201      	movs	r2, #1
 80019d8:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 80019dc:	693b      	ldr	r3, [r7, #16]
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d005      	beq.n	80019ee <HAL_ADC_Start_DMA+0x4e>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80019e2:	693b      	ldr	r3, [r7, #16]
 80019e4:	2b05      	cmp	r3, #5
 80019e6:	d002      	beq.n	80019ee <HAL_ADC_Start_DMA+0x4e>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80019e8:	693b      	ldr	r3, [r7, #16]
 80019ea:	2b09      	cmp	r3, #9
 80019ec:	d173      	bne.n	8001ad6 <HAL_ADC_Start_DMA+0x136>
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 80019ee:	68f8      	ldr	r0, [r7, #12]
 80019f0:	f000 fc98 	bl	8002324 <ADC_Enable>
 80019f4:	4603      	mov	r3, r0
 80019f6:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 80019f8:	7dfb      	ldrb	r3, [r7, #23]
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d166      	bne.n	8001acc <HAL_ADC_Start_DMA+0x12c>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 80019fe:	68fb      	ldr	r3, [r7, #12]
 8001a00:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001a02:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8001a06:	f023 0301 	bic.w	r3, r3, #1
 8001a0a:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8001a0e:	68fb      	ldr	r3, [r7, #12]
 8001a10:	65da      	str	r2, [r3, #92]	@ 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001a12:	68fb      	ldr	r3, [r7, #12]
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	4a38      	ldr	r2, [pc, #224]	@ (8001af8 <HAL_ADC_Start_DMA+0x158>)
 8001a18:	4293      	cmp	r3, r2
 8001a1a:	d002      	beq.n	8001a22 <HAL_ADC_Start_DMA+0x82>
 8001a1c:	68fb      	ldr	r3, [r7, #12]
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	e001      	b.n	8001a26 <HAL_ADC_Start_DMA+0x86>
 8001a22:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8001a26:	68fa      	ldr	r2, [r7, #12]
 8001a28:	6812      	ldr	r2, [r2, #0]
 8001a2a:	4293      	cmp	r3, r2
 8001a2c:	d002      	beq.n	8001a34 <HAL_ADC_Start_DMA+0x94>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001a2e:	693b      	ldr	r3, [r7, #16]
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	d105      	bne.n	8001a40 <HAL_ADC_Start_DMA+0xa0>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001a34:	68fb      	ldr	r3, [r7, #12]
 8001a36:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001a38:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8001a3c:	68fb      	ldr	r3, [r7, #12]
 8001a3e:	65da      	str	r2, [r3, #92]	@ 0x5c
        }
#endif /* ADC_MULTIMODE_SUPPORT */

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8001a40:	68fb      	ldr	r3, [r7, #12]
 8001a42:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001a44:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	d006      	beq.n	8001a5a <HAL_ADC_Start_DMA+0xba>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8001a4c:	68fb      	ldr	r3, [r7, #12]
 8001a4e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001a50:	f023 0206 	bic.w	r2, r3, #6
 8001a54:	68fb      	ldr	r3, [r7, #12]
 8001a56:	661a      	str	r2, [r3, #96]	@ 0x60
 8001a58:	e002      	b.n	8001a60 <HAL_ADC_Start_DMA+0xc0>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8001a5a:	68fb      	ldr	r3, [r7, #12]
 8001a5c:	2200      	movs	r2, #0
 8001a5e:	661a      	str	r2, [r3, #96]	@ 0x60
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001a60:	68fb      	ldr	r3, [r7, #12]
 8001a62:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001a64:	4a25      	ldr	r2, [pc, #148]	@ (8001afc <HAL_ADC_Start_DMA+0x15c>)
 8001a66:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001a68:	68fb      	ldr	r3, [r7, #12]
 8001a6a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001a6c:	4a24      	ldr	r2, [pc, #144]	@ (8001b00 <HAL_ADC_Start_DMA+0x160>)
 8001a6e:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001a70:	68fb      	ldr	r3, [r7, #12]
 8001a72:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001a74:	4a23      	ldr	r2, [pc, #140]	@ (8001b04 <HAL_ADC_Start_DMA+0x164>)
 8001a76:	635a      	str	r2, [r3, #52]	@ 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001a78:	68fb      	ldr	r3, [r7, #12]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	221c      	movs	r2, #28
 8001a7e:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8001a80:	68fb      	ldr	r3, [r7, #12]
 8001a82:	2200      	movs	r2, #0
 8001a84:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001a88:	68fb      	ldr	r3, [r7, #12]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	685a      	ldr	r2, [r3, #4]
 8001a8e:	68fb      	ldr	r3, [r7, #12]
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	f042 0210 	orr.w	r2, r2, #16
 8001a96:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8001a98:	68fb      	ldr	r3, [r7, #12]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	68da      	ldr	r2, [r3, #12]
 8001a9e:	68fb      	ldr	r3, [r7, #12]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	f042 0201 	orr.w	r2, r2, #1
 8001aa6:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001aa8:	68fb      	ldr	r3, [r7, #12]
 8001aaa:	6d58      	ldr	r0, [r3, #84]	@ 0x54
 8001aac:	68fb      	ldr	r3, [r7, #12]
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	3340      	adds	r3, #64	@ 0x40
 8001ab2:	4619      	mov	r1, r3
 8001ab4:	68ba      	ldr	r2, [r7, #8]
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	f001 f8be 	bl	8002c38 <HAL_DMA_Start_IT>
 8001abc:	4603      	mov	r3, r0
 8001abe:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8001ac0:	68fb      	ldr	r3, [r7, #12]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	4618      	mov	r0, r3
 8001ac6:	f7ff fdad 	bl	8001624 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 8001aca:	e00d      	b.n	8001ae8 <HAL_ADC_Start_DMA+0x148>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8001acc:	68fb      	ldr	r3, [r7, #12]
 8001ace:	2200      	movs	r2, #0
 8001ad0:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
      if (tmp_hal_status == HAL_OK)
 8001ad4:	e008      	b.n	8001ae8 <HAL_ADC_Start_DMA+0x148>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 8001ad6:	2301      	movs	r3, #1
 8001ad8:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8001ada:	68fb      	ldr	r3, [r7, #12]
 8001adc:	2200      	movs	r2, #0
 8001ade:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
 8001ae2:	e001      	b.n	8001ae8 <HAL_ADC_Start_DMA+0x148>
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8001ae4:	2302      	movs	r3, #2
 8001ae6:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8001ae8:	7dfb      	ldrb	r3, [r7, #23]
}
 8001aea:	4618      	mov	r0, r3
 8001aec:	3718      	adds	r7, #24
 8001aee:	46bd      	mov	sp, r7
 8001af0:	bd80      	pop	{r7, pc}
 8001af2:	bf00      	nop
 8001af4:	50000300 	.word	0x50000300
 8001af8:	50000100 	.word	0x50000100
 8001afc:	080024ef 	.word	0x080024ef
 8001b00:	080025c7 	.word	0x080025c7
 8001b04:	080025e3 	.word	0x080025e3

08001b08 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8001b08:	b480      	push	{r7}
 8001b0a:	b083      	sub	sp, #12
 8001b0c:	af00      	add	r7, sp, #0
 8001b0e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8001b10:	bf00      	nop
 8001b12:	370c      	adds	r7, #12
 8001b14:	46bd      	mov	sp, r7
 8001b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b1a:	4770      	bx	lr

08001b1c <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8001b1c:	b480      	push	{r7}
 8001b1e:	b083      	sub	sp, #12
 8001b20:	af00      	add	r7, sp, #0
 8001b22:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8001b24:	bf00      	nop
 8001b26:	370c      	adds	r7, #12
 8001b28:	46bd      	mov	sp, r7
 8001b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b2e:	4770      	bx	lr

08001b30 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001b30:	b480      	push	{r7}
 8001b32:	b083      	sub	sp, #12
 8001b34:	af00      	add	r7, sp, #0
 8001b36:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8001b38:	bf00      	nop
 8001b3a:	370c      	adds	r7, #12
 8001b3c:	46bd      	mov	sp, r7
 8001b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b42:	4770      	bx	lr

08001b44 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8001b44:	b580      	push	{r7, lr}
 8001b46:	b0b6      	sub	sp, #216	@ 0xd8
 8001b48:	af00      	add	r7, sp, #0
 8001b4a:	6078      	str	r0, [r7, #4]
 8001b4c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001b4e:	2300      	movs	r3, #0
 8001b50:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8001b54:	2300      	movs	r3, #0
 8001b56:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8001b5e:	2b01      	cmp	r3, #1
 8001b60:	d101      	bne.n	8001b66 <HAL_ADC_ConfigChannel+0x22>
 8001b62:	2302      	movs	r3, #2
 8001b64:	e3c8      	b.n	80022f8 <HAL_ADC_ConfigChannel+0x7b4>
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	2201      	movs	r2, #1
 8001b6a:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	4618      	mov	r0, r3
 8001b74:	f7ff fd6a 	bl	800164c <LL_ADC_REG_IsConversionOngoing>
 8001b78:	4603      	mov	r3, r0
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	f040 83ad 	bne.w	80022da <HAL_ADC_ConfigChannel+0x796>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	6818      	ldr	r0, [r3, #0]
 8001b84:	683b      	ldr	r3, [r7, #0]
 8001b86:	6859      	ldr	r1, [r3, #4]
 8001b88:	683b      	ldr	r3, [r7, #0]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	461a      	mov	r2, r3
 8001b8e:	f7ff fc24 	bl	80013da <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	4618      	mov	r0, r3
 8001b98:	f7ff fd58 	bl	800164c <LL_ADC_REG_IsConversionOngoing>
 8001b9c:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	4618      	mov	r0, r3
 8001ba6:	f7ff fd64 	bl	8001672 <LL_ADC_INJ_IsConversionOngoing>
 8001baa:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001bae:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	f040 81d9 	bne.w	8001f6a <HAL_ADC_ConfigChannel+0x426>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001bb8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	f040 81d4 	bne.w	8001f6a <HAL_ADC_ConfigChannel+0x426>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8001bc2:	683b      	ldr	r3, [r7, #0]
 8001bc4:	689b      	ldr	r3, [r3, #8]
 8001bc6:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8001bca:	d10f      	bne.n	8001bec <HAL_ADC_ConfigChannel+0xa8>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	6818      	ldr	r0, [r3, #0]
 8001bd0:	683b      	ldr	r3, [r7, #0]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	2200      	movs	r2, #0
 8001bd6:	4619      	mov	r1, r3
 8001bd8:	f7ff fc2b 	bl	8001432 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 8001be4:	4618      	mov	r0, r3
 8001be6:	f7ff fbd2 	bl	800138e <LL_ADC_SetSamplingTimeCommonConfig>
 8001bea:	e00e      	b.n	8001c0a <HAL_ADC_ConfigChannel+0xc6>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	6818      	ldr	r0, [r3, #0]
 8001bf0:	683b      	ldr	r3, [r7, #0]
 8001bf2:	6819      	ldr	r1, [r3, #0]
 8001bf4:	683b      	ldr	r3, [r7, #0]
 8001bf6:	689b      	ldr	r3, [r3, #8]
 8001bf8:	461a      	mov	r2, r3
 8001bfa:	f7ff fc1a 	bl	8001432 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	2100      	movs	r1, #0
 8001c04:	4618      	mov	r0, r3
 8001c06:	f7ff fbc2 	bl	800138e <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8001c0a:	683b      	ldr	r3, [r7, #0]
 8001c0c:	695a      	ldr	r2, [r3, #20]
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	68db      	ldr	r3, [r3, #12]
 8001c14:	08db      	lsrs	r3, r3, #3
 8001c16:	f003 0303 	and.w	r3, r3, #3
 8001c1a:	005b      	lsls	r3, r3, #1
 8001c1c:	fa02 f303 	lsl.w	r3, r2, r3
 8001c20:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8001c24:	683b      	ldr	r3, [r7, #0]
 8001c26:	691b      	ldr	r3, [r3, #16]
 8001c28:	2b04      	cmp	r3, #4
 8001c2a:	d022      	beq.n	8001c72 <HAL_ADC_ConfigChannel+0x12e>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	6818      	ldr	r0, [r3, #0]
 8001c30:	683b      	ldr	r3, [r7, #0]
 8001c32:	6919      	ldr	r1, [r3, #16]
 8001c34:	683b      	ldr	r3, [r7, #0]
 8001c36:	681a      	ldr	r2, [r3, #0]
 8001c38:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8001c3c:	f7ff fb1c 	bl	8001278 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	6818      	ldr	r0, [r3, #0]
 8001c44:	683b      	ldr	r3, [r7, #0]
 8001c46:	6919      	ldr	r1, [r3, #16]
 8001c48:	683b      	ldr	r3, [r7, #0]
 8001c4a:	699b      	ldr	r3, [r3, #24]
 8001c4c:	461a      	mov	r2, r3
 8001c4e:	f7ff fb68 	bl	8001322 <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	6818      	ldr	r0, [r3, #0]
 8001c56:	683b      	ldr	r3, [r7, #0]
 8001c58:	6919      	ldr	r1, [r3, #16]
                                   (pConfig->OffsetSaturation == ENABLE) ?
 8001c5a:	683b      	ldr	r3, [r7, #0]
 8001c5c:	7f1b      	ldrb	r3, [r3, #28]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8001c5e:	2b01      	cmp	r3, #1
 8001c60:	d102      	bne.n	8001c68 <HAL_ADC_ConfigChannel+0x124>
 8001c62:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001c66:	e000      	b.n	8001c6a <HAL_ADC_ConfigChannel+0x126>
 8001c68:	2300      	movs	r3, #0
 8001c6a:	461a      	mov	r2, r3
 8001c6c:	f7ff fb74 	bl	8001358 <LL_ADC_SetOffsetSaturation>
 8001c70:	e17b      	b.n	8001f6a <HAL_ADC_ConfigChannel+0x426>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	2100      	movs	r1, #0
 8001c78:	4618      	mov	r0, r3
 8001c7a:	f7ff fb21 	bl	80012c0 <LL_ADC_GetOffsetChannel>
 8001c7e:	4603      	mov	r3, r0
 8001c80:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	d10a      	bne.n	8001c9e <HAL_ADC_ConfigChannel+0x15a>
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	2100      	movs	r1, #0
 8001c8e:	4618      	mov	r0, r3
 8001c90:	f7ff fb16 	bl	80012c0 <LL_ADC_GetOffsetChannel>
 8001c94:	4603      	mov	r3, r0
 8001c96:	0e9b      	lsrs	r3, r3, #26
 8001c98:	f003 021f 	and.w	r2, r3, #31
 8001c9c:	e01e      	b.n	8001cdc <HAL_ADC_ConfigChannel+0x198>
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	2100      	movs	r1, #0
 8001ca4:	4618      	mov	r0, r3
 8001ca6:	f7ff fb0b 	bl	80012c0 <LL_ADC_GetOffsetChannel>
 8001caa:	4603      	mov	r3, r0
 8001cac:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cb0:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8001cb4:	fa93 f3a3 	rbit	r3, r3
 8001cb8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001cbc:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8001cc0:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8001cc4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d101      	bne.n	8001cd0 <HAL_ADC_ConfigChannel+0x18c>
  {
    return 32U;
 8001ccc:	2320      	movs	r3, #32
 8001cce:	e004      	b.n	8001cda <HAL_ADC_ConfigChannel+0x196>
  }
  return __builtin_clz(value);
 8001cd0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8001cd4:	fab3 f383 	clz	r3, r3
 8001cd8:	b2db      	uxtb	r3, r3
 8001cda:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001cdc:	683b      	ldr	r3, [r7, #0]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	d105      	bne.n	8001cf4 <HAL_ADC_ConfigChannel+0x1b0>
 8001ce8:	683b      	ldr	r3, [r7, #0]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	0e9b      	lsrs	r3, r3, #26
 8001cee:	f003 031f 	and.w	r3, r3, #31
 8001cf2:	e018      	b.n	8001d26 <HAL_ADC_ConfigChannel+0x1e2>
 8001cf4:	683b      	ldr	r3, [r7, #0]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cfc:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8001d00:	fa93 f3a3 	rbit	r3, r3
 8001d04:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  return result;
 8001d08:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8001d0c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  if (value == 0U)
 8001d10:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	d101      	bne.n	8001d1c <HAL_ADC_ConfigChannel+0x1d8>
    return 32U;
 8001d18:	2320      	movs	r3, #32
 8001d1a:	e004      	b.n	8001d26 <HAL_ADC_ConfigChannel+0x1e2>
  return __builtin_clz(value);
 8001d1c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8001d20:	fab3 f383 	clz	r3, r3
 8001d24:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001d26:	429a      	cmp	r2, r3
 8001d28:	d106      	bne.n	8001d38 <HAL_ADC_ConfigChannel+0x1f4>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	2200      	movs	r2, #0
 8001d30:	2100      	movs	r1, #0
 8001d32:	4618      	mov	r0, r3
 8001d34:	f7ff fada 	bl	80012ec <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	2101      	movs	r1, #1
 8001d3e:	4618      	mov	r0, r3
 8001d40:	f7ff fabe 	bl	80012c0 <LL_ADC_GetOffsetChannel>
 8001d44:	4603      	mov	r3, r0
 8001d46:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d10a      	bne.n	8001d64 <HAL_ADC_ConfigChannel+0x220>
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	2101      	movs	r1, #1
 8001d54:	4618      	mov	r0, r3
 8001d56:	f7ff fab3 	bl	80012c0 <LL_ADC_GetOffsetChannel>
 8001d5a:	4603      	mov	r3, r0
 8001d5c:	0e9b      	lsrs	r3, r3, #26
 8001d5e:	f003 021f 	and.w	r2, r3, #31
 8001d62:	e01e      	b.n	8001da2 <HAL_ADC_ConfigChannel+0x25e>
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	2101      	movs	r1, #1
 8001d6a:	4618      	mov	r0, r3
 8001d6c:	f7ff faa8 	bl	80012c0 <LL_ADC_GetOffsetChannel>
 8001d70:	4603      	mov	r3, r0
 8001d72:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d76:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8001d7a:	fa93 f3a3 	rbit	r3, r3
 8001d7e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  return result;
 8001d82:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8001d86:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (value == 0U)
 8001d8a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d101      	bne.n	8001d96 <HAL_ADC_ConfigChannel+0x252>
    return 32U;
 8001d92:	2320      	movs	r3, #32
 8001d94:	e004      	b.n	8001da0 <HAL_ADC_ConfigChannel+0x25c>
  return __builtin_clz(value);
 8001d96:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8001d9a:	fab3 f383 	clz	r3, r3
 8001d9e:	b2db      	uxtb	r3, r3
 8001da0:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001da2:	683b      	ldr	r3, [r7, #0]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d105      	bne.n	8001dba <HAL_ADC_ConfigChannel+0x276>
 8001dae:	683b      	ldr	r3, [r7, #0]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	0e9b      	lsrs	r3, r3, #26
 8001db4:	f003 031f 	and.w	r3, r3, #31
 8001db8:	e018      	b.n	8001dec <HAL_ADC_ConfigChannel+0x2a8>
 8001dba:	683b      	ldr	r3, [r7, #0]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001dc2:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8001dc6:	fa93 f3a3 	rbit	r3, r3
 8001dca:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  return result;
 8001dce:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8001dd2:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  if (value == 0U)
 8001dd6:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d101      	bne.n	8001de2 <HAL_ADC_ConfigChannel+0x29e>
    return 32U;
 8001dde:	2320      	movs	r3, #32
 8001de0:	e004      	b.n	8001dec <HAL_ADC_ConfigChannel+0x2a8>
  return __builtin_clz(value);
 8001de2:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8001de6:	fab3 f383 	clz	r3, r3
 8001dea:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001dec:	429a      	cmp	r2, r3
 8001dee:	d106      	bne.n	8001dfe <HAL_ADC_ConfigChannel+0x2ba>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	2200      	movs	r2, #0
 8001df6:	2101      	movs	r1, #1
 8001df8:	4618      	mov	r0, r3
 8001dfa:	f7ff fa77 	bl	80012ec <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	2102      	movs	r1, #2
 8001e04:	4618      	mov	r0, r3
 8001e06:	f7ff fa5b 	bl	80012c0 <LL_ADC_GetOffsetChannel>
 8001e0a:	4603      	mov	r3, r0
 8001e0c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	d10a      	bne.n	8001e2a <HAL_ADC_ConfigChannel+0x2e6>
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	2102      	movs	r1, #2
 8001e1a:	4618      	mov	r0, r3
 8001e1c:	f7ff fa50 	bl	80012c0 <LL_ADC_GetOffsetChannel>
 8001e20:	4603      	mov	r3, r0
 8001e22:	0e9b      	lsrs	r3, r3, #26
 8001e24:	f003 021f 	and.w	r2, r3, #31
 8001e28:	e01e      	b.n	8001e68 <HAL_ADC_ConfigChannel+0x324>
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	2102      	movs	r1, #2
 8001e30:	4618      	mov	r0, r3
 8001e32:	f7ff fa45 	bl	80012c0 <LL_ADC_GetOffsetChannel>
 8001e36:	4603      	mov	r3, r0
 8001e38:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e3c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001e40:	fa93 f3a3 	rbit	r3, r3
 8001e44:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  return result;
 8001e48:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8001e4c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  if (value == 0U)
 8001e50:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d101      	bne.n	8001e5c <HAL_ADC_ConfigChannel+0x318>
    return 32U;
 8001e58:	2320      	movs	r3, #32
 8001e5a:	e004      	b.n	8001e66 <HAL_ADC_ConfigChannel+0x322>
  return __builtin_clz(value);
 8001e5c:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8001e60:	fab3 f383 	clz	r3, r3
 8001e64:	b2db      	uxtb	r3, r3
 8001e66:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001e68:	683b      	ldr	r3, [r7, #0]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	d105      	bne.n	8001e80 <HAL_ADC_ConfigChannel+0x33c>
 8001e74:	683b      	ldr	r3, [r7, #0]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	0e9b      	lsrs	r3, r3, #26
 8001e7a:	f003 031f 	and.w	r3, r3, #31
 8001e7e:	e016      	b.n	8001eae <HAL_ADC_ConfigChannel+0x36a>
 8001e80:	683b      	ldr	r3, [r7, #0]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e88:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8001e8c:	fa93 f3a3 	rbit	r3, r3
 8001e90:	67fb      	str	r3, [r7, #124]	@ 0x7c
  return result;
 8001e92:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8001e94:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  if (value == 0U)
 8001e98:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	d101      	bne.n	8001ea4 <HAL_ADC_ConfigChannel+0x360>
    return 32U;
 8001ea0:	2320      	movs	r3, #32
 8001ea2:	e004      	b.n	8001eae <HAL_ADC_ConfigChannel+0x36a>
  return __builtin_clz(value);
 8001ea4:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8001ea8:	fab3 f383 	clz	r3, r3
 8001eac:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8001eae:	429a      	cmp	r2, r3
 8001eb0:	d106      	bne.n	8001ec0 <HAL_ADC_ConfigChannel+0x37c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	2200      	movs	r2, #0
 8001eb8:	2102      	movs	r1, #2
 8001eba:	4618      	mov	r0, r3
 8001ebc:	f7ff fa16 	bl	80012ec <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	2103      	movs	r1, #3
 8001ec6:	4618      	mov	r0, r3
 8001ec8:	f7ff f9fa 	bl	80012c0 <LL_ADC_GetOffsetChannel>
 8001ecc:	4603      	mov	r3, r0
 8001ece:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d10a      	bne.n	8001eec <HAL_ADC_ConfigChannel+0x3a8>
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	2103      	movs	r1, #3
 8001edc:	4618      	mov	r0, r3
 8001ede:	f7ff f9ef 	bl	80012c0 <LL_ADC_GetOffsetChannel>
 8001ee2:	4603      	mov	r3, r0
 8001ee4:	0e9b      	lsrs	r3, r3, #26
 8001ee6:	f003 021f 	and.w	r2, r3, #31
 8001eea:	e017      	b.n	8001f1c <HAL_ADC_ConfigChannel+0x3d8>
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	2103      	movs	r1, #3
 8001ef2:	4618      	mov	r0, r3
 8001ef4:	f7ff f9e4 	bl	80012c0 <LL_ADC_GetOffsetChannel>
 8001ef8:	4603      	mov	r3, r0
 8001efa:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001efc:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8001efe:	fa93 f3a3 	rbit	r3, r3
 8001f02:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 8001f04:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8001f06:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (value == 0U)
 8001f08:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d101      	bne.n	8001f12 <HAL_ADC_ConfigChannel+0x3ce>
    return 32U;
 8001f0e:	2320      	movs	r3, #32
 8001f10:	e003      	b.n	8001f1a <HAL_ADC_ConfigChannel+0x3d6>
  return __builtin_clz(value);
 8001f12:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8001f14:	fab3 f383 	clz	r3, r3
 8001f18:	b2db      	uxtb	r3, r3
 8001f1a:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001f1c:	683b      	ldr	r3, [r7, #0]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d105      	bne.n	8001f34 <HAL_ADC_ConfigChannel+0x3f0>
 8001f28:	683b      	ldr	r3, [r7, #0]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	0e9b      	lsrs	r3, r3, #26
 8001f2e:	f003 031f 	and.w	r3, r3, #31
 8001f32:	e011      	b.n	8001f58 <HAL_ADC_ConfigChannel+0x414>
 8001f34:	683b      	ldr	r3, [r7, #0]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f3a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8001f3c:	fa93 f3a3 	rbit	r3, r3
 8001f40:	667b      	str	r3, [r7, #100]	@ 0x64
  return result;
 8001f42:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8001f44:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (value == 0U)
 8001f46:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	d101      	bne.n	8001f50 <HAL_ADC_ConfigChannel+0x40c>
    return 32U;
 8001f4c:	2320      	movs	r3, #32
 8001f4e:	e003      	b.n	8001f58 <HAL_ADC_ConfigChannel+0x414>
  return __builtin_clz(value);
 8001f50:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8001f52:	fab3 f383 	clz	r3, r3
 8001f56:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8001f58:	429a      	cmp	r2, r3
 8001f5a:	d106      	bne.n	8001f6a <HAL_ADC_ConfigChannel+0x426>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	2200      	movs	r2, #0
 8001f62:	2103      	movs	r1, #3
 8001f64:	4618      	mov	r0, r3
 8001f66:	f7ff f9c1 	bl	80012ec <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	4618      	mov	r0, r3
 8001f70:	f7ff fb32 	bl	80015d8 <LL_ADC_IsEnabled>
 8001f74:	4603      	mov	r3, r0
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	f040 8140 	bne.w	80021fc <HAL_ADC_ConfigChannel+0x6b8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	6818      	ldr	r0, [r3, #0]
 8001f80:	683b      	ldr	r3, [r7, #0]
 8001f82:	6819      	ldr	r1, [r3, #0]
 8001f84:	683b      	ldr	r3, [r7, #0]
 8001f86:	68db      	ldr	r3, [r3, #12]
 8001f88:	461a      	mov	r2, r3
 8001f8a:	f7ff fa7d 	bl	8001488 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8001f8e:	683b      	ldr	r3, [r7, #0]
 8001f90:	68db      	ldr	r3, [r3, #12]
 8001f92:	4a8f      	ldr	r2, [pc, #572]	@ (80021d0 <HAL_ADC_ConfigChannel+0x68c>)
 8001f94:	4293      	cmp	r3, r2
 8001f96:	f040 8131 	bne.w	80021fc <HAL_ADC_ConfigChannel+0x6b8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8001f9e:	683b      	ldr	r3, [r7, #0]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d10b      	bne.n	8001fc2 <HAL_ADC_ConfigChannel+0x47e>
 8001faa:	683b      	ldr	r3, [r7, #0]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	0e9b      	lsrs	r3, r3, #26
 8001fb0:	3301      	adds	r3, #1
 8001fb2:	f003 031f 	and.w	r3, r3, #31
 8001fb6:	2b09      	cmp	r3, #9
 8001fb8:	bf94      	ite	ls
 8001fba:	2301      	movls	r3, #1
 8001fbc:	2300      	movhi	r3, #0
 8001fbe:	b2db      	uxtb	r3, r3
 8001fc0:	e019      	b.n	8001ff6 <HAL_ADC_ConfigChannel+0x4b2>
 8001fc2:	683b      	ldr	r3, [r7, #0]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fc8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001fca:	fa93 f3a3 	rbit	r3, r3
 8001fce:	65bb      	str	r3, [r7, #88]	@ 0x58
  return result;
 8001fd0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8001fd2:	663b      	str	r3, [r7, #96]	@ 0x60
  if (value == 0U)
 8001fd4:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d101      	bne.n	8001fde <HAL_ADC_ConfigChannel+0x49a>
    return 32U;
 8001fda:	2320      	movs	r3, #32
 8001fdc:	e003      	b.n	8001fe6 <HAL_ADC_ConfigChannel+0x4a2>
  return __builtin_clz(value);
 8001fde:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8001fe0:	fab3 f383 	clz	r3, r3
 8001fe4:	b2db      	uxtb	r3, r3
 8001fe6:	3301      	adds	r3, #1
 8001fe8:	f003 031f 	and.w	r3, r3, #31
 8001fec:	2b09      	cmp	r3, #9
 8001fee:	bf94      	ite	ls
 8001ff0:	2301      	movls	r3, #1
 8001ff2:	2300      	movhi	r3, #0
 8001ff4:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d079      	beq.n	80020ee <HAL_ADC_ConfigChannel+0x5aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8001ffa:	683b      	ldr	r3, [r7, #0]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002002:	2b00      	cmp	r3, #0
 8002004:	d107      	bne.n	8002016 <HAL_ADC_ConfigChannel+0x4d2>
 8002006:	683b      	ldr	r3, [r7, #0]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	0e9b      	lsrs	r3, r3, #26
 800200c:	3301      	adds	r3, #1
 800200e:	069b      	lsls	r3, r3, #26
 8002010:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002014:	e015      	b.n	8002042 <HAL_ADC_ConfigChannel+0x4fe>
 8002016:	683b      	ldr	r3, [r7, #0]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800201c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800201e:	fa93 f3a3 	rbit	r3, r3
 8002022:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8002024:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002026:	657b      	str	r3, [r7, #84]	@ 0x54
  if (value == 0U)
 8002028:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800202a:	2b00      	cmp	r3, #0
 800202c:	d101      	bne.n	8002032 <HAL_ADC_ConfigChannel+0x4ee>
    return 32U;
 800202e:	2320      	movs	r3, #32
 8002030:	e003      	b.n	800203a <HAL_ADC_ConfigChannel+0x4f6>
  return __builtin_clz(value);
 8002032:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002034:	fab3 f383 	clz	r3, r3
 8002038:	b2db      	uxtb	r3, r3
 800203a:	3301      	adds	r3, #1
 800203c:	069b      	lsls	r3, r3, #26
 800203e:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002042:	683b      	ldr	r3, [r7, #0]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800204a:	2b00      	cmp	r3, #0
 800204c:	d109      	bne.n	8002062 <HAL_ADC_ConfigChannel+0x51e>
 800204e:	683b      	ldr	r3, [r7, #0]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	0e9b      	lsrs	r3, r3, #26
 8002054:	3301      	adds	r3, #1
 8002056:	f003 031f 	and.w	r3, r3, #31
 800205a:	2101      	movs	r1, #1
 800205c:	fa01 f303 	lsl.w	r3, r1, r3
 8002060:	e017      	b.n	8002092 <HAL_ADC_ConfigChannel+0x54e>
 8002062:	683b      	ldr	r3, [r7, #0]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002068:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800206a:	fa93 f3a3 	rbit	r3, r3
 800206e:	643b      	str	r3, [r7, #64]	@ 0x40
  return result;
 8002070:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002072:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (value == 0U)
 8002074:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002076:	2b00      	cmp	r3, #0
 8002078:	d101      	bne.n	800207e <HAL_ADC_ConfigChannel+0x53a>
    return 32U;
 800207a:	2320      	movs	r3, #32
 800207c:	e003      	b.n	8002086 <HAL_ADC_ConfigChannel+0x542>
  return __builtin_clz(value);
 800207e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002080:	fab3 f383 	clz	r3, r3
 8002084:	b2db      	uxtb	r3, r3
 8002086:	3301      	adds	r3, #1
 8002088:	f003 031f 	and.w	r3, r3, #31
 800208c:	2101      	movs	r1, #1
 800208e:	fa01 f303 	lsl.w	r3, r1, r3
 8002092:	ea42 0103 	orr.w	r1, r2, r3
 8002096:	683b      	ldr	r3, [r7, #0]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d10a      	bne.n	80020b8 <HAL_ADC_ConfigChannel+0x574>
 80020a2:	683b      	ldr	r3, [r7, #0]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	0e9b      	lsrs	r3, r3, #26
 80020a8:	3301      	adds	r3, #1
 80020aa:	f003 021f 	and.w	r2, r3, #31
 80020ae:	4613      	mov	r3, r2
 80020b0:	005b      	lsls	r3, r3, #1
 80020b2:	4413      	add	r3, r2
 80020b4:	051b      	lsls	r3, r3, #20
 80020b6:	e018      	b.n	80020ea <HAL_ADC_ConfigChannel+0x5a6>
 80020b8:	683b      	ldr	r3, [r7, #0]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80020c0:	fa93 f3a3 	rbit	r3, r3
 80020c4:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 80020c6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80020c8:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (value == 0U)
 80020ca:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d101      	bne.n	80020d4 <HAL_ADC_ConfigChannel+0x590>
    return 32U;
 80020d0:	2320      	movs	r3, #32
 80020d2:	e003      	b.n	80020dc <HAL_ADC_ConfigChannel+0x598>
  return __builtin_clz(value);
 80020d4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80020d6:	fab3 f383 	clz	r3, r3
 80020da:	b2db      	uxtb	r3, r3
 80020dc:	3301      	adds	r3, #1
 80020de:	f003 021f 	and.w	r2, r3, #31
 80020e2:	4613      	mov	r3, r2
 80020e4:	005b      	lsls	r3, r3, #1
 80020e6:	4413      	add	r3, r2
 80020e8:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80020ea:	430b      	orrs	r3, r1
 80020ec:	e081      	b.n	80021f2 <HAL_ADC_ConfigChannel+0x6ae>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80020ee:	683b      	ldr	r3, [r7, #0]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d107      	bne.n	800210a <HAL_ADC_ConfigChannel+0x5c6>
 80020fa:	683b      	ldr	r3, [r7, #0]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	0e9b      	lsrs	r3, r3, #26
 8002100:	3301      	adds	r3, #1
 8002102:	069b      	lsls	r3, r3, #26
 8002104:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002108:	e015      	b.n	8002136 <HAL_ADC_ConfigChannel+0x5f2>
 800210a:	683b      	ldr	r3, [r7, #0]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002110:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002112:	fa93 f3a3 	rbit	r3, r3
 8002116:	62bb      	str	r3, [r7, #40]	@ 0x28
  return result;
 8002118:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800211a:	633b      	str	r3, [r7, #48]	@ 0x30
  if (value == 0U)
 800211c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800211e:	2b00      	cmp	r3, #0
 8002120:	d101      	bne.n	8002126 <HAL_ADC_ConfigChannel+0x5e2>
    return 32U;
 8002122:	2320      	movs	r3, #32
 8002124:	e003      	b.n	800212e <HAL_ADC_ConfigChannel+0x5ea>
  return __builtin_clz(value);
 8002126:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002128:	fab3 f383 	clz	r3, r3
 800212c:	b2db      	uxtb	r3, r3
 800212e:	3301      	adds	r3, #1
 8002130:	069b      	lsls	r3, r3, #26
 8002132:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002136:	683b      	ldr	r3, [r7, #0]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800213e:	2b00      	cmp	r3, #0
 8002140:	d109      	bne.n	8002156 <HAL_ADC_ConfigChannel+0x612>
 8002142:	683b      	ldr	r3, [r7, #0]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	0e9b      	lsrs	r3, r3, #26
 8002148:	3301      	adds	r3, #1
 800214a:	f003 031f 	and.w	r3, r3, #31
 800214e:	2101      	movs	r1, #1
 8002150:	fa01 f303 	lsl.w	r3, r1, r3
 8002154:	e017      	b.n	8002186 <HAL_ADC_ConfigChannel+0x642>
 8002156:	683b      	ldr	r3, [r7, #0]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800215c:	6a3b      	ldr	r3, [r7, #32]
 800215e:	fa93 f3a3 	rbit	r3, r3
 8002162:	61fb      	str	r3, [r7, #28]
  return result;
 8002164:	69fb      	ldr	r3, [r7, #28]
 8002166:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8002168:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800216a:	2b00      	cmp	r3, #0
 800216c:	d101      	bne.n	8002172 <HAL_ADC_ConfigChannel+0x62e>
    return 32U;
 800216e:	2320      	movs	r3, #32
 8002170:	e003      	b.n	800217a <HAL_ADC_ConfigChannel+0x636>
  return __builtin_clz(value);
 8002172:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002174:	fab3 f383 	clz	r3, r3
 8002178:	b2db      	uxtb	r3, r3
 800217a:	3301      	adds	r3, #1
 800217c:	f003 031f 	and.w	r3, r3, #31
 8002180:	2101      	movs	r1, #1
 8002182:	fa01 f303 	lsl.w	r3, r1, r3
 8002186:	ea42 0103 	orr.w	r1, r2, r3
 800218a:	683b      	ldr	r3, [r7, #0]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002192:	2b00      	cmp	r3, #0
 8002194:	d10d      	bne.n	80021b2 <HAL_ADC_ConfigChannel+0x66e>
 8002196:	683b      	ldr	r3, [r7, #0]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	0e9b      	lsrs	r3, r3, #26
 800219c:	3301      	adds	r3, #1
 800219e:	f003 021f 	and.w	r2, r3, #31
 80021a2:	4613      	mov	r3, r2
 80021a4:	005b      	lsls	r3, r3, #1
 80021a6:	4413      	add	r3, r2
 80021a8:	3b1e      	subs	r3, #30
 80021aa:	051b      	lsls	r3, r3, #20
 80021ac:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80021b0:	e01e      	b.n	80021f0 <HAL_ADC_ConfigChannel+0x6ac>
 80021b2:	683b      	ldr	r3, [r7, #0]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021b8:	697b      	ldr	r3, [r7, #20]
 80021ba:	fa93 f3a3 	rbit	r3, r3
 80021be:	613b      	str	r3, [r7, #16]
  return result;
 80021c0:	693b      	ldr	r3, [r7, #16]
 80021c2:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80021c4:	69bb      	ldr	r3, [r7, #24]
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d104      	bne.n	80021d4 <HAL_ADC_ConfigChannel+0x690>
    return 32U;
 80021ca:	2320      	movs	r3, #32
 80021cc:	e006      	b.n	80021dc <HAL_ADC_ConfigChannel+0x698>
 80021ce:	bf00      	nop
 80021d0:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 80021d4:	69bb      	ldr	r3, [r7, #24]
 80021d6:	fab3 f383 	clz	r3, r3
 80021da:	b2db      	uxtb	r3, r3
 80021dc:	3301      	adds	r3, #1
 80021de:	f003 021f 	and.w	r2, r3, #31
 80021e2:	4613      	mov	r3, r2
 80021e4:	005b      	lsls	r3, r3, #1
 80021e6:	4413      	add	r3, r2
 80021e8:	3b1e      	subs	r3, #30
 80021ea:	051b      	lsls	r3, r3, #20
 80021ec:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80021f0:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 80021f2:	683a      	ldr	r2, [r7, #0]
 80021f4:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80021f6:	4619      	mov	r1, r3
 80021f8:	f7ff f91b 	bl	8001432 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 80021fc:	683b      	ldr	r3, [r7, #0]
 80021fe:	681a      	ldr	r2, [r3, #0]
 8002200:	4b3f      	ldr	r3, [pc, #252]	@ (8002300 <HAL_ADC_ConfigChannel+0x7bc>)
 8002202:	4013      	ands	r3, r2
 8002204:	2b00      	cmp	r3, #0
 8002206:	d071      	beq.n	80022ec <HAL_ADC_ConfigChannel+0x7a8>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002208:	483e      	ldr	r0, [pc, #248]	@ (8002304 <HAL_ADC_ConfigChannel+0x7c0>)
 800220a:	f7ff f827 	bl	800125c <LL_ADC_GetCommonPathInternalCh>
 800220e:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8002212:	683b      	ldr	r3, [r7, #0]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	4a3c      	ldr	r2, [pc, #240]	@ (8002308 <HAL_ADC_ConfigChannel+0x7c4>)
 8002218:	4293      	cmp	r3, r2
 800221a:	d004      	beq.n	8002226 <HAL_ADC_ConfigChannel+0x6e2>
 800221c:	683b      	ldr	r3, [r7, #0]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	4a3a      	ldr	r2, [pc, #232]	@ (800230c <HAL_ADC_ConfigChannel+0x7c8>)
 8002222:	4293      	cmp	r3, r2
 8002224:	d127      	bne.n	8002276 <HAL_ADC_ConfigChannel+0x732>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002226:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800222a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800222e:	2b00      	cmp	r3, #0
 8002230:	d121      	bne.n	8002276 <HAL_ADC_ConfigChannel+0x732>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800223a:	d157      	bne.n	80022ec <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800223c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002240:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8002244:	4619      	mov	r1, r3
 8002246:	482f      	ldr	r0, [pc, #188]	@ (8002304 <HAL_ADC_ConfigChannel+0x7c0>)
 8002248:	f7fe fff5 	bl	8001236 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800224c:	4b30      	ldr	r3, [pc, #192]	@ (8002310 <HAL_ADC_ConfigChannel+0x7cc>)
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	099b      	lsrs	r3, r3, #6
 8002252:	4a30      	ldr	r2, [pc, #192]	@ (8002314 <HAL_ADC_ConfigChannel+0x7d0>)
 8002254:	fba2 2303 	umull	r2, r3, r2, r3
 8002258:	099b      	lsrs	r3, r3, #6
 800225a:	1c5a      	adds	r2, r3, #1
 800225c:	4613      	mov	r3, r2
 800225e:	005b      	lsls	r3, r3, #1
 8002260:	4413      	add	r3, r2
 8002262:	009b      	lsls	r3, r3, #2
 8002264:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002266:	e002      	b.n	800226e <HAL_ADC_ConfigChannel+0x72a>
          {
            wait_loop_index--;
 8002268:	68fb      	ldr	r3, [r7, #12]
 800226a:	3b01      	subs	r3, #1
 800226c:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	2b00      	cmp	r3, #0
 8002272:	d1f9      	bne.n	8002268 <HAL_ADC_ConfigChannel+0x724>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002274:	e03a      	b.n	80022ec <HAL_ADC_ConfigChannel+0x7a8>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8002276:	683b      	ldr	r3, [r7, #0]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	4a27      	ldr	r2, [pc, #156]	@ (8002318 <HAL_ADC_ConfigChannel+0x7d4>)
 800227c:	4293      	cmp	r3, r2
 800227e:	d113      	bne.n	80022a8 <HAL_ADC_ConfigChannel+0x764>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002280:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002284:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002288:	2b00      	cmp	r3, #0
 800228a:	d10d      	bne.n	80022a8 <HAL_ADC_ConfigChannel+0x764>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	4a22      	ldr	r2, [pc, #136]	@ (800231c <HAL_ADC_ConfigChannel+0x7d8>)
 8002292:	4293      	cmp	r3, r2
 8002294:	d02a      	beq.n	80022ec <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002296:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800229a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800229e:	4619      	mov	r1, r3
 80022a0:	4818      	ldr	r0, [pc, #96]	@ (8002304 <HAL_ADC_ConfigChannel+0x7c0>)
 80022a2:	f7fe ffc8 	bl	8001236 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80022a6:	e021      	b.n	80022ec <HAL_ADC_ConfigChannel+0x7a8>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 80022a8:	683b      	ldr	r3, [r7, #0]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	4a1c      	ldr	r2, [pc, #112]	@ (8002320 <HAL_ADC_ConfigChannel+0x7dc>)
 80022ae:	4293      	cmp	r3, r2
 80022b0:	d11c      	bne.n	80022ec <HAL_ADC_ConfigChannel+0x7a8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80022b2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80022b6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d116      	bne.n	80022ec <HAL_ADC_ConfigChannel+0x7a8>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	4a16      	ldr	r2, [pc, #88]	@ (800231c <HAL_ADC_ConfigChannel+0x7d8>)
 80022c4:	4293      	cmp	r3, r2
 80022c6:	d011      	beq.n	80022ec <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80022c8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80022cc:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80022d0:	4619      	mov	r1, r3
 80022d2:	480c      	ldr	r0, [pc, #48]	@ (8002304 <HAL_ADC_ConfigChannel+0x7c0>)
 80022d4:	f7fe ffaf 	bl	8001236 <LL_ADC_SetCommonPathInternalCh>
 80022d8:	e008      	b.n	80022ec <HAL_ADC_ConfigChannel+0x7a8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80022de:	f043 0220 	orr.w	r2, r3, #32
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 80022e6:	2301      	movs	r3, #1
 80022e8:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	2200      	movs	r2, #0
 80022f0:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 80022f4:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 80022f8:	4618      	mov	r0, r3
 80022fa:	37d8      	adds	r7, #216	@ 0xd8
 80022fc:	46bd      	mov	sp, r7
 80022fe:	bd80      	pop	{r7, pc}
 8002300:	80080000 	.word	0x80080000
 8002304:	50000300 	.word	0x50000300
 8002308:	c3210000 	.word	0xc3210000
 800230c:	90c00010 	.word	0x90c00010
 8002310:	20000000 	.word	0x20000000
 8002314:	053e2d63 	.word	0x053e2d63
 8002318:	c7520000 	.word	0xc7520000
 800231c:	50000100 	.word	0x50000100
 8002320:	cb840000 	.word	0xcb840000

08002324 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8002324:	b580      	push	{r7, lr}
 8002326:	b084      	sub	sp, #16
 8002328:	af00      	add	r7, sp, #0
 800232a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 800232c:	2300      	movs	r3, #0
 800232e:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	4618      	mov	r0, r3
 8002336:	f7ff f94f 	bl	80015d8 <LL_ADC_IsEnabled>
 800233a:	4603      	mov	r3, r0
 800233c:	2b00      	cmp	r3, #0
 800233e:	d169      	bne.n	8002414 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	689a      	ldr	r2, [r3, #8]
 8002346:	4b36      	ldr	r3, [pc, #216]	@ (8002420 <ADC_Enable+0xfc>)
 8002348:	4013      	ands	r3, r2
 800234a:	2b00      	cmp	r3, #0
 800234c:	d00d      	beq.n	800236a <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002352:	f043 0210 	orr.w	r2, r3, #16
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800235e:	f043 0201 	orr.w	r2, r3, #1
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	661a      	str	r2, [r3, #96]	@ 0x60

      return HAL_ERROR;
 8002366:	2301      	movs	r3, #1
 8002368:	e055      	b.n	8002416 <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	4618      	mov	r0, r3
 8002370:	f7ff f90a 	bl	8001588 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8002374:	482b      	ldr	r0, [pc, #172]	@ (8002424 <ADC_Enable+0x100>)
 8002376:	f7fe ff71 	bl	800125c <LL_ADC_GetCommonPathInternalCh>
 800237a:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 800237c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8002380:	2b00      	cmp	r3, #0
 8002382:	d013      	beq.n	80023ac <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002384:	4b28      	ldr	r3, [pc, #160]	@ (8002428 <ADC_Enable+0x104>)
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	099b      	lsrs	r3, r3, #6
 800238a:	4a28      	ldr	r2, [pc, #160]	@ (800242c <ADC_Enable+0x108>)
 800238c:	fba2 2303 	umull	r2, r3, r2, r3
 8002390:	099b      	lsrs	r3, r3, #6
 8002392:	1c5a      	adds	r2, r3, #1
 8002394:	4613      	mov	r3, r2
 8002396:	005b      	lsls	r3, r3, #1
 8002398:	4413      	add	r3, r2
 800239a:	009b      	lsls	r3, r3, #2
 800239c:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 800239e:	e002      	b.n	80023a6 <ADC_Enable+0x82>
      {
        wait_loop_index--;
 80023a0:	68bb      	ldr	r3, [r7, #8]
 80023a2:	3b01      	subs	r3, #1
 80023a4:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 80023a6:	68bb      	ldr	r3, [r7, #8]
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d1f9      	bne.n	80023a0 <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 80023ac:	f7fe ff02 	bl	80011b4 <HAL_GetTick>
 80023b0:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80023b2:	e028      	b.n	8002406 <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	4618      	mov	r0, r3
 80023ba:	f7ff f90d 	bl	80015d8 <LL_ADC_IsEnabled>
 80023be:	4603      	mov	r3, r0
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d104      	bne.n	80023ce <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	4618      	mov	r0, r3
 80023ca:	f7ff f8dd 	bl	8001588 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80023ce:	f7fe fef1 	bl	80011b4 <HAL_GetTick>
 80023d2:	4602      	mov	r2, r0
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	1ad3      	subs	r3, r2, r3
 80023d8:	2b02      	cmp	r3, #2
 80023da:	d914      	bls.n	8002406 <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	f003 0301 	and.w	r3, r3, #1
 80023e6:	2b01      	cmp	r3, #1
 80023e8:	d00d      	beq.n	8002406 <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80023ee:	f043 0210 	orr.w	r2, r3, #16
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80023fa:	f043 0201 	orr.w	r2, r3, #1
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	661a      	str	r2, [r3, #96]	@ 0x60

          return HAL_ERROR;
 8002402:	2301      	movs	r3, #1
 8002404:	e007      	b.n	8002416 <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	f003 0301 	and.w	r3, r3, #1
 8002410:	2b01      	cmp	r3, #1
 8002412:	d1cf      	bne.n	80023b4 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002414:	2300      	movs	r3, #0
}
 8002416:	4618      	mov	r0, r3
 8002418:	3710      	adds	r7, #16
 800241a:	46bd      	mov	sp, r7
 800241c:	bd80      	pop	{r7, pc}
 800241e:	bf00      	nop
 8002420:	8000003f 	.word	0x8000003f
 8002424:	50000300 	.word	0x50000300
 8002428:	20000000 	.word	0x20000000
 800242c:	053e2d63 	.word	0x053e2d63

08002430 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8002430:	b580      	push	{r7, lr}
 8002432:	b084      	sub	sp, #16
 8002434:	af00      	add	r7, sp, #0
 8002436:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	4618      	mov	r0, r3
 800243e:	f7ff f8de 	bl	80015fe <LL_ADC_IsDisableOngoing>
 8002442:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	4618      	mov	r0, r3
 800244a:	f7ff f8c5 	bl	80015d8 <LL_ADC_IsEnabled>
 800244e:	4603      	mov	r3, r0
 8002450:	2b00      	cmp	r3, #0
 8002452:	d047      	beq.n	80024e4 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	2b00      	cmp	r3, #0
 8002458:	d144      	bne.n	80024e4 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	689b      	ldr	r3, [r3, #8]
 8002460:	f003 030d 	and.w	r3, r3, #13
 8002464:	2b01      	cmp	r3, #1
 8002466:	d10c      	bne.n	8002482 <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	4618      	mov	r0, r3
 800246e:	f7ff f89f 	bl	80015b0 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	2203      	movs	r2, #3
 8002478:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 800247a:	f7fe fe9b 	bl	80011b4 <HAL_GetTick>
 800247e:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002480:	e029      	b.n	80024d6 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002486:	f043 0210 	orr.w	r2, r3, #16
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	65da      	str	r2, [r3, #92]	@ 0x5c
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002492:	f043 0201 	orr.w	r2, r3, #1
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_ERROR;
 800249a:	2301      	movs	r3, #1
 800249c:	e023      	b.n	80024e6 <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800249e:	f7fe fe89 	bl	80011b4 <HAL_GetTick>
 80024a2:	4602      	mov	r2, r0
 80024a4:	68bb      	ldr	r3, [r7, #8]
 80024a6:	1ad3      	subs	r3, r2, r3
 80024a8:	2b02      	cmp	r3, #2
 80024aa:	d914      	bls.n	80024d6 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	689b      	ldr	r3, [r3, #8]
 80024b2:	f003 0301 	and.w	r3, r3, #1
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d00d      	beq.n	80024d6 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80024be:	f043 0210 	orr.w	r2, r3, #16
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80024ca:	f043 0201 	orr.w	r2, r3, #1
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	661a      	str	r2, [r3, #96]	@ 0x60

          return HAL_ERROR;
 80024d2:	2301      	movs	r3, #1
 80024d4:	e007      	b.n	80024e6 <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	689b      	ldr	r3, [r3, #8]
 80024dc:	f003 0301 	and.w	r3, r3, #1
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d1dc      	bne.n	800249e <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80024e4:	2300      	movs	r3, #0
}
 80024e6:	4618      	mov	r0, r3
 80024e8:	3710      	adds	r7, #16
 80024ea:	46bd      	mov	sp, r7
 80024ec:	bd80      	pop	{r7, pc}

080024ee <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 80024ee:	b580      	push	{r7, lr}
 80024f0:	b084      	sub	sp, #16
 80024f2:	af00      	add	r7, sp, #0
 80024f4:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80024fa:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002500:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8002504:	2b00      	cmp	r3, #0
 8002506:	d14b      	bne.n	80025a0 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800250c:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	f003 0308 	and.w	r3, r3, #8
 800251e:	2b00      	cmp	r3, #0
 8002520:	d021      	beq.n	8002566 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	4618      	mov	r0, r3
 8002528:	f7fe ff44 	bl	80013b4 <LL_ADC_REG_IsTriggerSourceSWStart>
 800252c:	4603      	mov	r3, r0
 800252e:	2b00      	cmp	r3, #0
 8002530:	d032      	beq.n	8002598 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	68db      	ldr	r3, [r3, #12]
 8002538:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800253c:	2b00      	cmp	r3, #0
 800253e:	d12b      	bne.n	8002598 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002544:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	65da      	str	r2, [r3, #92]	@ 0x5c
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002550:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002554:	2b00      	cmp	r3, #0
 8002556:	d11f      	bne.n	8002598 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800255c:	f043 0201 	orr.w	r2, r3, #1
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	65da      	str	r2, [r3, #92]	@ 0x5c
 8002564:	e018      	b.n	8002598 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	68db      	ldr	r3, [r3, #12]
 800256c:	f003 0302 	and.w	r3, r3, #2
 8002570:	2b00      	cmp	r3, #0
 8002572:	d111      	bne.n	8002598 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002578:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	65da      	str	r2, [r3, #92]	@ 0x5c
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002584:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002588:	2b00      	cmp	r3, #0
 800258a:	d105      	bne.n	8002598 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002590:	f043 0201 	orr.w	r2, r3, #1
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002598:	68f8      	ldr	r0, [r7, #12]
 800259a:	f7ff fab5 	bl	8001b08 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 800259e:	e00e      	b.n	80025be <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80025a4:	f003 0310 	and.w	r3, r3, #16
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d003      	beq.n	80025b4 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 80025ac:	68f8      	ldr	r0, [r7, #12]
 80025ae:	f7ff fabf 	bl	8001b30 <HAL_ADC_ErrorCallback>
}
 80025b2:	e004      	b.n	80025be <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80025b8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80025ba:	6878      	ldr	r0, [r7, #4]
 80025bc:	4798      	blx	r3
}
 80025be:	bf00      	nop
 80025c0:	3710      	adds	r7, #16
 80025c2:	46bd      	mov	sp, r7
 80025c4:	bd80      	pop	{r7, pc}

080025c6 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 80025c6:	b580      	push	{r7, lr}
 80025c8:	b084      	sub	sp, #16
 80025ca:	af00      	add	r7, sp, #0
 80025cc:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80025d2:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80025d4:	68f8      	ldr	r0, [r7, #12]
 80025d6:	f7ff faa1 	bl	8001b1c <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80025da:	bf00      	nop
 80025dc:	3710      	adds	r7, #16
 80025de:	46bd      	mov	sp, r7
 80025e0:	bd80      	pop	{r7, pc}

080025e2 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 80025e2:	b580      	push	{r7, lr}
 80025e4:	b084      	sub	sp, #16
 80025e6:	af00      	add	r7, sp, #0
 80025e8:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80025ee:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80025f4:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002600:	f043 0204 	orr.w	r2, r3, #4
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8002608:	68f8      	ldr	r0, [r7, #12]
 800260a:	f7ff fa91 	bl	8001b30 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800260e:	bf00      	nop
 8002610:	3710      	adds	r7, #16
 8002612:	46bd      	mov	sp, r7
 8002614:	bd80      	pop	{r7, pc}

08002616 <LL_ADC_IsEnabled>:
{
 8002616:	b480      	push	{r7}
 8002618:	b083      	sub	sp, #12
 800261a:	af00      	add	r7, sp, #0
 800261c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	689b      	ldr	r3, [r3, #8]
 8002622:	f003 0301 	and.w	r3, r3, #1
 8002626:	2b01      	cmp	r3, #1
 8002628:	d101      	bne.n	800262e <LL_ADC_IsEnabled+0x18>
 800262a:	2301      	movs	r3, #1
 800262c:	e000      	b.n	8002630 <LL_ADC_IsEnabled+0x1a>
 800262e:	2300      	movs	r3, #0
}
 8002630:	4618      	mov	r0, r3
 8002632:	370c      	adds	r7, #12
 8002634:	46bd      	mov	sp, r7
 8002636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800263a:	4770      	bx	lr

0800263c <LL_ADC_StartCalibration>:
{
 800263c:	b480      	push	{r7}
 800263e:	b083      	sub	sp, #12
 8002640:	af00      	add	r7, sp, #0
 8002642:	6078      	str	r0, [r7, #4]
 8002644:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR,
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	689b      	ldr	r3, [r3, #8]
 800264a:	f023 4340 	bic.w	r3, r3, #3221225472	@ 0xc0000000
 800264e:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002652:	683a      	ldr	r2, [r7, #0]
 8002654:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8002658:	4313      	orrs	r3, r2
 800265a:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	609a      	str	r2, [r3, #8]
}
 8002662:	bf00      	nop
 8002664:	370c      	adds	r7, #12
 8002666:	46bd      	mov	sp, r7
 8002668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800266c:	4770      	bx	lr

0800266e <LL_ADC_IsCalibrationOnGoing>:
{
 800266e:	b480      	push	{r7}
 8002670:	b083      	sub	sp, #12
 8002672:	af00      	add	r7, sp, #0
 8002674:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	689b      	ldr	r3, [r3, #8]
 800267a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800267e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8002682:	d101      	bne.n	8002688 <LL_ADC_IsCalibrationOnGoing+0x1a>
 8002684:	2301      	movs	r3, #1
 8002686:	e000      	b.n	800268a <LL_ADC_IsCalibrationOnGoing+0x1c>
 8002688:	2300      	movs	r3, #0
}
 800268a:	4618      	mov	r0, r3
 800268c:	370c      	adds	r7, #12
 800268e:	46bd      	mov	sp, r7
 8002690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002694:	4770      	bx	lr

08002696 <LL_ADC_REG_IsConversionOngoing>:
{
 8002696:	b480      	push	{r7}
 8002698:	b083      	sub	sp, #12
 800269a:	af00      	add	r7, sp, #0
 800269c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	689b      	ldr	r3, [r3, #8]
 80026a2:	f003 0304 	and.w	r3, r3, #4
 80026a6:	2b04      	cmp	r3, #4
 80026a8:	d101      	bne.n	80026ae <LL_ADC_REG_IsConversionOngoing+0x18>
 80026aa:	2301      	movs	r3, #1
 80026ac:	e000      	b.n	80026b0 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80026ae:	2300      	movs	r3, #0
}
 80026b0:	4618      	mov	r0, r3
 80026b2:	370c      	adds	r7, #12
 80026b4:	46bd      	mov	sp, r7
 80026b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ba:	4770      	bx	lr

080026bc <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 80026bc:	b580      	push	{r7, lr}
 80026be:	b084      	sub	sp, #16
 80026c0:	af00      	add	r7, sp, #0
 80026c2:	6078      	str	r0, [r7, #4]
 80026c4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 80026c6:	2300      	movs	r3, #0
 80026c8:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 80026d0:	2b01      	cmp	r3, #1
 80026d2:	d101      	bne.n	80026d8 <HAL_ADCEx_Calibration_Start+0x1c>
 80026d4:	2302      	movs	r3, #2
 80026d6:	e04d      	b.n	8002774 <HAL_ADCEx_Calibration_Start+0xb8>
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	2201      	movs	r2, #1
 80026dc:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 80026e0:	6878      	ldr	r0, [r7, #4]
 80026e2:	f7ff fea5 	bl	8002430 <ADC_Disable>
 80026e6:	4603      	mov	r3, r0
 80026e8:	73fb      	strb	r3, [r7, #15]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 80026ea:	7bfb      	ldrb	r3, [r7, #15]
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d136      	bne.n	800275e <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80026f4:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 80026f8:	f023 0302 	bic.w	r3, r3, #2
 80026fc:	f043 0202 	orr.w	r2, r3, #2
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	65da      	str	r2, [r3, #92]	@ 0x5c
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, SingleDiff);
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	6839      	ldr	r1, [r7, #0]
 800270a:	4618      	mov	r0, r3
 800270c:	f7ff ff96 	bl	800263c <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8002710:	e014      	b.n	800273c <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 8002712:	68bb      	ldr	r3, [r7, #8]
 8002714:	3301      	adds	r3, #1
 8002716:	60bb      	str	r3, [r7, #8]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8002718:	68bb      	ldr	r3, [r7, #8]
 800271a:	4a18      	ldr	r2, [pc, #96]	@ (800277c <HAL_ADCEx_Calibration_Start+0xc0>)
 800271c:	4293      	cmp	r3, r2
 800271e:	d90d      	bls.n	800273c <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002724:	f023 0312 	bic.w	r3, r3, #18
 8002728:	f043 0210 	orr.w	r2, r3, #16
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	65da      	str	r2, [r3, #92]	@ 0x5c
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	2200      	movs	r2, #0
 8002734:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

        return HAL_ERROR;
 8002738:	2301      	movs	r3, #1
 800273a:	e01b      	b.n	8002774 <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	4618      	mov	r0, r3
 8002742:	f7ff ff94 	bl	800266e <LL_ADC_IsCalibrationOnGoing>
 8002746:	4603      	mov	r3, r0
 8002748:	2b00      	cmp	r3, #0
 800274a:	d1e2      	bne.n	8002712 <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002750:	f023 0303 	bic.w	r3, r3, #3
 8002754:	f043 0201 	orr.w	r2, r3, #1
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	65da      	str	r2, [r3, #92]	@ 0x5c
 800275c:	e005      	b.n	800276a <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002762:	f043 0210 	orr.w	r2, r3, #16
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	2200      	movs	r2, #0
 800276e:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8002772:	7bfb      	ldrb	r3, [r7, #15]
}
 8002774:	4618      	mov	r0, r3
 8002776:	3710      	adds	r7, #16
 8002778:	46bd      	mov	sp, r7
 800277a:	bd80      	pop	{r7, pc}
 800277c:	0004de01 	.word	0x0004de01

08002780 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 8002780:	b590      	push	{r4, r7, lr}
 8002782:	b0a1      	sub	sp, #132	@ 0x84
 8002784:	af00      	add	r7, sp, #0
 8002786:	6078      	str	r0, [r7, #4]
 8002788:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800278a:	2300      	movs	r3, #0
 800278c:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8002796:	2b01      	cmp	r3, #1
 8002798:	d101      	bne.n	800279e <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 800279a:	2302      	movs	r3, #2
 800279c:	e08b      	b.n	80028b6 <HAL_ADCEx_MultiModeConfigChannel+0x136>
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	2201      	movs	r2, #1
 80027a2:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 80027a6:	2300      	movs	r3, #0
 80027a8:	667b      	str	r3, [r7, #100]	@ 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 80027aa:	2300      	movs	r3, #0
 80027ac:	66bb      	str	r3, [r7, #104]	@ 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80027b6:	d102      	bne.n	80027be <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 80027b8:	4b41      	ldr	r3, [pc, #260]	@ (80028c0 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 80027ba:	60bb      	str	r3, [r7, #8]
 80027bc:	e001      	b.n	80027c2 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 80027be:	2300      	movs	r3, #0
 80027c0:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 80027c2:	68bb      	ldr	r3, [r7, #8]
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	d10b      	bne.n	80027e0 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80027cc:	f043 0220 	orr.w	r2, r3, #32
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	2200      	movs	r2, #0
 80027d8:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

    return HAL_ERROR;
 80027dc:	2301      	movs	r3, #1
 80027de:	e06a      	b.n	80028b6 <HAL_ADCEx_MultiModeConfigChannel+0x136>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 80027e0:	68bb      	ldr	r3, [r7, #8]
 80027e2:	4618      	mov	r0, r3
 80027e4:	f7ff ff57 	bl	8002696 <LL_ADC_REG_IsConversionOngoing>
 80027e8:	67b8      	str	r0, [r7, #120]	@ 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	4618      	mov	r0, r3
 80027f0:	f7ff ff51 	bl	8002696 <LL_ADC_REG_IsConversionOngoing>
 80027f4:	4603      	mov	r3, r0
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d14c      	bne.n	8002894 <HAL_ADCEx_MultiModeConfigChannel+0x114>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 80027fa:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d149      	bne.n	8002894 <HAL_ADCEx_MultiModeConfigChannel+0x114>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8002800:	4b30      	ldr	r3, [pc, #192]	@ (80028c4 <HAL_ADCEx_MultiModeConfigChannel+0x144>)
 8002802:	677b      	str	r3, [r7, #116]	@ 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002804:	683b      	ldr	r3, [r7, #0]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	2b00      	cmp	r3, #0
 800280a:	d028      	beq.n	800285e <HAL_ADCEx_MultiModeConfigChannel+0xde>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 800280c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800280e:	689b      	ldr	r3, [r3, #8]
 8002810:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002814:	683b      	ldr	r3, [r7, #0]
 8002816:	6859      	ldr	r1, [r3, #4]
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800281e:	035b      	lsls	r3, r3, #13
 8002820:	430b      	orrs	r3, r1
 8002822:	431a      	orrs	r2, r3
 8002824:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002826:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002828:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 800282c:	f7ff fef3 	bl	8002616 <LL_ADC_IsEnabled>
 8002830:	4604      	mov	r4, r0
 8002832:	4823      	ldr	r0, [pc, #140]	@ (80028c0 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8002834:	f7ff feef 	bl	8002616 <LL_ADC_IsEnabled>
 8002838:	4603      	mov	r3, r0
 800283a:	4323      	orrs	r3, r4
 800283c:	2b00      	cmp	r3, #0
 800283e:	d133      	bne.n	80028a8 <HAL_ADCEx_MultiModeConfigChannel+0x128>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8002840:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002842:	689b      	ldr	r3, [r3, #8]
 8002844:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8002848:	f023 030f 	bic.w	r3, r3, #15
 800284c:	683a      	ldr	r2, [r7, #0]
 800284e:	6811      	ldr	r1, [r2, #0]
 8002850:	683a      	ldr	r2, [r7, #0]
 8002852:	6892      	ldr	r2, [r2, #8]
 8002854:	430a      	orrs	r2, r1
 8002856:	431a      	orrs	r2, r3
 8002858:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800285a:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 800285c:	e024      	b.n	80028a8 <HAL_ADCEx_MultiModeConfigChannel+0x128>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 800285e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002860:	689b      	ldr	r3, [r3, #8]
 8002862:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002866:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002868:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800286a:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 800286e:	f7ff fed2 	bl	8002616 <LL_ADC_IsEnabled>
 8002872:	4604      	mov	r4, r0
 8002874:	4812      	ldr	r0, [pc, #72]	@ (80028c0 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8002876:	f7ff fece 	bl	8002616 <LL_ADC_IsEnabled>
 800287a:	4603      	mov	r3, r0
 800287c:	4323      	orrs	r3, r4
 800287e:	2b00      	cmp	r3, #0
 8002880:	d112      	bne.n	80028a8 <HAL_ADCEx_MultiModeConfigChannel+0x128>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8002882:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002884:	689b      	ldr	r3, [r3, #8]
 8002886:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 800288a:	f023 030f 	bic.w	r3, r3, #15
 800288e:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8002890:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002892:	e009      	b.n	80028a8 <HAL_ADCEx_MultiModeConfigChannel+0x128>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002898:	f043 0220 	orr.w	r2, r3, #32
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 80028a0:	2301      	movs	r3, #1
 80028a2:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 80028a6:	e000      	b.n	80028aa <HAL_ADCEx_MultiModeConfigChannel+0x12a>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80028a8:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	2200      	movs	r2, #0
 80028ae:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 80028b2:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 80028b6:	4618      	mov	r0, r3
 80028b8:	3784      	adds	r7, #132	@ 0x84
 80028ba:	46bd      	mov	sp, r7
 80028bc:	bd90      	pop	{r4, r7, pc}
 80028be:	bf00      	nop
 80028c0:	50000100 	.word	0x50000100
 80028c4:	50000300 	.word	0x50000300

080028c8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80028c8:	b480      	push	{r7}
 80028ca:	b085      	sub	sp, #20
 80028cc:	af00      	add	r7, sp, #0
 80028ce:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	f003 0307 	and.w	r3, r3, #7
 80028d6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80028d8:	4b0c      	ldr	r3, [pc, #48]	@ (800290c <__NVIC_SetPriorityGrouping+0x44>)
 80028da:	68db      	ldr	r3, [r3, #12]
 80028dc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80028de:	68ba      	ldr	r2, [r7, #8]
 80028e0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80028e4:	4013      	ands	r3, r2
 80028e6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80028ec:	68bb      	ldr	r3, [r7, #8]
 80028ee:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80028f0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80028f4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80028f8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80028fa:	4a04      	ldr	r2, [pc, #16]	@ (800290c <__NVIC_SetPriorityGrouping+0x44>)
 80028fc:	68bb      	ldr	r3, [r7, #8]
 80028fe:	60d3      	str	r3, [r2, #12]
}
 8002900:	bf00      	nop
 8002902:	3714      	adds	r7, #20
 8002904:	46bd      	mov	sp, r7
 8002906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800290a:	4770      	bx	lr
 800290c:	e000ed00 	.word	0xe000ed00

08002910 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002910:	b480      	push	{r7}
 8002912:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002914:	4b04      	ldr	r3, [pc, #16]	@ (8002928 <__NVIC_GetPriorityGrouping+0x18>)
 8002916:	68db      	ldr	r3, [r3, #12]
 8002918:	0a1b      	lsrs	r3, r3, #8
 800291a:	f003 0307 	and.w	r3, r3, #7
}
 800291e:	4618      	mov	r0, r3
 8002920:	46bd      	mov	sp, r7
 8002922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002926:	4770      	bx	lr
 8002928:	e000ed00 	.word	0xe000ed00

0800292c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800292c:	b480      	push	{r7}
 800292e:	b083      	sub	sp, #12
 8002930:	af00      	add	r7, sp, #0
 8002932:	4603      	mov	r3, r0
 8002934:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002936:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800293a:	2b00      	cmp	r3, #0
 800293c:	db0b      	blt.n	8002956 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800293e:	79fb      	ldrb	r3, [r7, #7]
 8002940:	f003 021f 	and.w	r2, r3, #31
 8002944:	4907      	ldr	r1, [pc, #28]	@ (8002964 <__NVIC_EnableIRQ+0x38>)
 8002946:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800294a:	095b      	lsrs	r3, r3, #5
 800294c:	2001      	movs	r0, #1
 800294e:	fa00 f202 	lsl.w	r2, r0, r2
 8002952:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002956:	bf00      	nop
 8002958:	370c      	adds	r7, #12
 800295a:	46bd      	mov	sp, r7
 800295c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002960:	4770      	bx	lr
 8002962:	bf00      	nop
 8002964:	e000e100 	.word	0xe000e100

08002968 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002968:	b480      	push	{r7}
 800296a:	b083      	sub	sp, #12
 800296c:	af00      	add	r7, sp, #0
 800296e:	4603      	mov	r3, r0
 8002970:	6039      	str	r1, [r7, #0]
 8002972:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002974:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002978:	2b00      	cmp	r3, #0
 800297a:	db0a      	blt.n	8002992 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800297c:	683b      	ldr	r3, [r7, #0]
 800297e:	b2da      	uxtb	r2, r3
 8002980:	490c      	ldr	r1, [pc, #48]	@ (80029b4 <__NVIC_SetPriority+0x4c>)
 8002982:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002986:	0112      	lsls	r2, r2, #4
 8002988:	b2d2      	uxtb	r2, r2
 800298a:	440b      	add	r3, r1
 800298c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002990:	e00a      	b.n	80029a8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002992:	683b      	ldr	r3, [r7, #0]
 8002994:	b2da      	uxtb	r2, r3
 8002996:	4908      	ldr	r1, [pc, #32]	@ (80029b8 <__NVIC_SetPriority+0x50>)
 8002998:	79fb      	ldrb	r3, [r7, #7]
 800299a:	f003 030f 	and.w	r3, r3, #15
 800299e:	3b04      	subs	r3, #4
 80029a0:	0112      	lsls	r2, r2, #4
 80029a2:	b2d2      	uxtb	r2, r2
 80029a4:	440b      	add	r3, r1
 80029a6:	761a      	strb	r2, [r3, #24]
}
 80029a8:	bf00      	nop
 80029aa:	370c      	adds	r7, #12
 80029ac:	46bd      	mov	sp, r7
 80029ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029b2:	4770      	bx	lr
 80029b4:	e000e100 	.word	0xe000e100
 80029b8:	e000ed00 	.word	0xe000ed00

080029bc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80029bc:	b480      	push	{r7}
 80029be:	b089      	sub	sp, #36	@ 0x24
 80029c0:	af00      	add	r7, sp, #0
 80029c2:	60f8      	str	r0, [r7, #12]
 80029c4:	60b9      	str	r1, [r7, #8]
 80029c6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	f003 0307 	and.w	r3, r3, #7
 80029ce:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80029d0:	69fb      	ldr	r3, [r7, #28]
 80029d2:	f1c3 0307 	rsb	r3, r3, #7
 80029d6:	2b04      	cmp	r3, #4
 80029d8:	bf28      	it	cs
 80029da:	2304      	movcs	r3, #4
 80029dc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80029de:	69fb      	ldr	r3, [r7, #28]
 80029e0:	3304      	adds	r3, #4
 80029e2:	2b06      	cmp	r3, #6
 80029e4:	d902      	bls.n	80029ec <NVIC_EncodePriority+0x30>
 80029e6:	69fb      	ldr	r3, [r7, #28]
 80029e8:	3b03      	subs	r3, #3
 80029ea:	e000      	b.n	80029ee <NVIC_EncodePriority+0x32>
 80029ec:	2300      	movs	r3, #0
 80029ee:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80029f0:	f04f 32ff 	mov.w	r2, #4294967295
 80029f4:	69bb      	ldr	r3, [r7, #24]
 80029f6:	fa02 f303 	lsl.w	r3, r2, r3
 80029fa:	43da      	mvns	r2, r3
 80029fc:	68bb      	ldr	r3, [r7, #8]
 80029fe:	401a      	ands	r2, r3
 8002a00:	697b      	ldr	r3, [r7, #20]
 8002a02:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002a04:	f04f 31ff 	mov.w	r1, #4294967295
 8002a08:	697b      	ldr	r3, [r7, #20]
 8002a0a:	fa01 f303 	lsl.w	r3, r1, r3
 8002a0e:	43d9      	mvns	r1, r3
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002a14:	4313      	orrs	r3, r2
         );
}
 8002a16:	4618      	mov	r0, r3
 8002a18:	3724      	adds	r7, #36	@ 0x24
 8002a1a:	46bd      	mov	sp, r7
 8002a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a20:	4770      	bx	lr
	...

08002a24 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002a24:	b580      	push	{r7, lr}
 8002a26:	b082      	sub	sp, #8
 8002a28:	af00      	add	r7, sp, #0
 8002a2a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	3b01      	subs	r3, #1
 8002a30:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002a34:	d301      	bcc.n	8002a3a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002a36:	2301      	movs	r3, #1
 8002a38:	e00f      	b.n	8002a5a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002a3a:	4a0a      	ldr	r2, [pc, #40]	@ (8002a64 <SysTick_Config+0x40>)
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	3b01      	subs	r3, #1
 8002a40:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002a42:	210f      	movs	r1, #15
 8002a44:	f04f 30ff 	mov.w	r0, #4294967295
 8002a48:	f7ff ff8e 	bl	8002968 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002a4c:	4b05      	ldr	r3, [pc, #20]	@ (8002a64 <SysTick_Config+0x40>)
 8002a4e:	2200      	movs	r2, #0
 8002a50:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002a52:	4b04      	ldr	r3, [pc, #16]	@ (8002a64 <SysTick_Config+0x40>)
 8002a54:	2207      	movs	r2, #7
 8002a56:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002a58:	2300      	movs	r3, #0
}
 8002a5a:	4618      	mov	r0, r3
 8002a5c:	3708      	adds	r7, #8
 8002a5e:	46bd      	mov	sp, r7
 8002a60:	bd80      	pop	{r7, pc}
 8002a62:	bf00      	nop
 8002a64:	e000e010 	.word	0xe000e010

08002a68 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002a68:	b580      	push	{r7, lr}
 8002a6a:	b082      	sub	sp, #8
 8002a6c:	af00      	add	r7, sp, #0
 8002a6e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002a70:	6878      	ldr	r0, [r7, #4]
 8002a72:	f7ff ff29 	bl	80028c8 <__NVIC_SetPriorityGrouping>
}
 8002a76:	bf00      	nop
 8002a78:	3708      	adds	r7, #8
 8002a7a:	46bd      	mov	sp, r7
 8002a7c:	bd80      	pop	{r7, pc}

08002a7e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002a7e:	b580      	push	{r7, lr}
 8002a80:	b086      	sub	sp, #24
 8002a82:	af00      	add	r7, sp, #0
 8002a84:	4603      	mov	r3, r0
 8002a86:	60b9      	str	r1, [r7, #8]
 8002a88:	607a      	str	r2, [r7, #4]
 8002a8a:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002a8c:	f7ff ff40 	bl	8002910 <__NVIC_GetPriorityGrouping>
 8002a90:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002a92:	687a      	ldr	r2, [r7, #4]
 8002a94:	68b9      	ldr	r1, [r7, #8]
 8002a96:	6978      	ldr	r0, [r7, #20]
 8002a98:	f7ff ff90 	bl	80029bc <NVIC_EncodePriority>
 8002a9c:	4602      	mov	r2, r0
 8002a9e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002aa2:	4611      	mov	r1, r2
 8002aa4:	4618      	mov	r0, r3
 8002aa6:	f7ff ff5f 	bl	8002968 <__NVIC_SetPriority>
}
 8002aaa:	bf00      	nop
 8002aac:	3718      	adds	r7, #24
 8002aae:	46bd      	mov	sp, r7
 8002ab0:	bd80      	pop	{r7, pc}

08002ab2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002ab2:	b580      	push	{r7, lr}
 8002ab4:	b082      	sub	sp, #8
 8002ab6:	af00      	add	r7, sp, #0
 8002ab8:	4603      	mov	r3, r0
 8002aba:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002abc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ac0:	4618      	mov	r0, r3
 8002ac2:	f7ff ff33 	bl	800292c <__NVIC_EnableIRQ>
}
 8002ac6:	bf00      	nop
 8002ac8:	3708      	adds	r7, #8
 8002aca:	46bd      	mov	sp, r7
 8002acc:	bd80      	pop	{r7, pc}

08002ace <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002ace:	b580      	push	{r7, lr}
 8002ad0:	b082      	sub	sp, #8
 8002ad2:	af00      	add	r7, sp, #0
 8002ad4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002ad6:	6878      	ldr	r0, [r7, #4]
 8002ad8:	f7ff ffa4 	bl	8002a24 <SysTick_Config>
 8002adc:	4603      	mov	r3, r0
}
 8002ade:	4618      	mov	r0, r3
 8002ae0:	3708      	adds	r7, #8
 8002ae2:	46bd      	mov	sp, r7
 8002ae4:	bd80      	pop	{r7, pc}
	...

08002ae8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002ae8:	b580      	push	{r7, lr}
 8002aea:	b084      	sub	sp, #16
 8002aec:	af00      	add	r7, sp, #0
 8002aee:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d101      	bne.n	8002afa <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8002af6:	2301      	movs	r3, #1
 8002af8:	e08d      	b.n	8002c16 <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	461a      	mov	r2, r3
 8002b00:	4b47      	ldr	r3, [pc, #284]	@ (8002c20 <HAL_DMA_Init+0x138>)
 8002b02:	429a      	cmp	r2, r3
 8002b04:	d80f      	bhi.n	8002b26 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	461a      	mov	r2, r3
 8002b0c:	4b45      	ldr	r3, [pc, #276]	@ (8002c24 <HAL_DMA_Init+0x13c>)
 8002b0e:	4413      	add	r3, r2
 8002b10:	4a45      	ldr	r2, [pc, #276]	@ (8002c28 <HAL_DMA_Init+0x140>)
 8002b12:	fba2 2303 	umull	r2, r3, r2, r3
 8002b16:	091b      	lsrs	r3, r3, #4
 8002b18:	009a      	lsls	r2, r3, #2
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	4a42      	ldr	r2, [pc, #264]	@ (8002c2c <HAL_DMA_Init+0x144>)
 8002b22:	641a      	str	r2, [r3, #64]	@ 0x40
 8002b24:	e00e      	b.n	8002b44 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	461a      	mov	r2, r3
 8002b2c:	4b40      	ldr	r3, [pc, #256]	@ (8002c30 <HAL_DMA_Init+0x148>)
 8002b2e:	4413      	add	r3, r2
 8002b30:	4a3d      	ldr	r2, [pc, #244]	@ (8002c28 <HAL_DMA_Init+0x140>)
 8002b32:	fba2 2303 	umull	r2, r3, r2, r3
 8002b36:	091b      	lsrs	r3, r3, #4
 8002b38:	009a      	lsls	r2, r3, #2
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	4a3c      	ldr	r2, [pc, #240]	@ (8002c34 <HAL_DMA_Init+0x14c>)
 8002b42:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	2202      	movs	r2, #2
 8002b48:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8002b5a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002b5e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8002b68:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	691b      	ldr	r3, [r3, #16]
 8002b6e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002b74:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	699b      	ldr	r3, [r3, #24]
 8002b7a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002b80:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	6a1b      	ldr	r3, [r3, #32]
 8002b86:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002b88:	68fa      	ldr	r2, [r7, #12]
 8002b8a:	4313      	orrs	r3, r2
 8002b8c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	68fa      	ldr	r2, [r7, #12]
 8002b94:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8002b96:	6878      	ldr	r0, [r7, #4]
 8002b98:	f000 fa2c 	bl	8002ff4 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	689b      	ldr	r3, [r3, #8]
 8002ba0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002ba4:	d102      	bne.n	8002bac <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	2200      	movs	r2, #0
 8002baa:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	685a      	ldr	r2, [r3, #4]
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002bb4:	b2d2      	uxtb	r2, r2
 8002bb6:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002bbc:	687a      	ldr	r2, [r7, #4]
 8002bbe:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8002bc0:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	685b      	ldr	r3, [r3, #4]
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d010      	beq.n	8002bec <HAL_DMA_Init+0x104>
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	685b      	ldr	r3, [r3, #4]
 8002bce:	2b04      	cmp	r3, #4
 8002bd0:	d80c      	bhi.n	8002bec <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8002bd2:	6878      	ldr	r0, [r7, #4]
 8002bd4:	f000 fa4c 	bl	8003070 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002bdc:	2200      	movs	r2, #0
 8002bde:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002be4:	687a      	ldr	r2, [r7, #4]
 8002be6:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8002be8:	605a      	str	r2, [r3, #4]
 8002bea:	e008      	b.n	8002bfe <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	2200      	movs	r2, #0
 8002bf0:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	2200      	movs	r2, #0
 8002bf6:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	2200      	movs	r2, #0
 8002bfc:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	2200      	movs	r2, #0
 8002c02:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	2201      	movs	r2, #1
 8002c08:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	2200      	movs	r2, #0
 8002c10:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8002c14:	2300      	movs	r3, #0
}
 8002c16:	4618      	mov	r0, r3
 8002c18:	3710      	adds	r7, #16
 8002c1a:	46bd      	mov	sp, r7
 8002c1c:	bd80      	pop	{r7, pc}
 8002c1e:	bf00      	nop
 8002c20:	40020407 	.word	0x40020407
 8002c24:	bffdfff8 	.word	0xbffdfff8
 8002c28:	cccccccd 	.word	0xcccccccd
 8002c2c:	40020000 	.word	0x40020000
 8002c30:	bffdfbf8 	.word	0xbffdfbf8
 8002c34:	40020400 	.word	0x40020400

08002c38 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8002c38:	b580      	push	{r7, lr}
 8002c3a:	b086      	sub	sp, #24
 8002c3c:	af00      	add	r7, sp, #0
 8002c3e:	60f8      	str	r0, [r7, #12]
 8002c40:	60b9      	str	r1, [r7, #8]
 8002c42:	607a      	str	r2, [r7, #4]
 8002c44:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002c46:	2300      	movs	r3, #0
 8002c48:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002c50:	2b01      	cmp	r3, #1
 8002c52:	d101      	bne.n	8002c58 <HAL_DMA_Start_IT+0x20>
 8002c54:	2302      	movs	r3, #2
 8002c56:	e066      	b.n	8002d26 <HAL_DMA_Start_IT+0xee>
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	2201      	movs	r2, #1
 8002c5c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8002c66:	b2db      	uxtb	r3, r3
 8002c68:	2b01      	cmp	r3, #1
 8002c6a:	d155      	bne.n	8002d18 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	2202      	movs	r2, #2
 8002c70:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	2200      	movs	r2, #0
 8002c78:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	681a      	ldr	r2, [r3, #0]
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	f022 0201 	bic.w	r2, r2, #1
 8002c88:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002c8a:	683b      	ldr	r3, [r7, #0]
 8002c8c:	687a      	ldr	r2, [r7, #4]
 8002c8e:	68b9      	ldr	r1, [r7, #8]
 8002c90:	68f8      	ldr	r0, [r7, #12]
 8002c92:	f000 f970 	bl	8002f76 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d008      	beq.n	8002cb0 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	681a      	ldr	r2, [r3, #0]
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	f042 020e 	orr.w	r2, r2, #14
 8002cac:	601a      	str	r2, [r3, #0]
 8002cae:	e00f      	b.n	8002cd0 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	681a      	ldr	r2, [r3, #0]
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	f022 0204 	bic.w	r2, r2, #4
 8002cbe:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	681a      	ldr	r2, [r3, #0]
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	f042 020a 	orr.w	r2, r2, #10
 8002cce:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d007      	beq.n	8002cee <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002ce2:	681a      	ldr	r2, [r3, #0]
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002ce8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002cec:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d007      	beq.n	8002d06 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002cfa:	681a      	ldr	r2, [r3, #0]
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002d00:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002d04:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	681a      	ldr	r2, [r3, #0]
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	f042 0201 	orr.w	r2, r2, #1
 8002d14:	601a      	str	r2, [r3, #0]
 8002d16:	e005      	b.n	8002d24 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	2200      	movs	r2, #0
 8002d1c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8002d20:	2302      	movs	r3, #2
 8002d22:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8002d24:	7dfb      	ldrb	r3, [r7, #23]
}
 8002d26:	4618      	mov	r0, r3
 8002d28:	3718      	adds	r7, #24
 8002d2a:	46bd      	mov	sp, r7
 8002d2c:	bd80      	pop	{r7, pc}

08002d2e <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002d2e:	b580      	push	{r7, lr}
 8002d30:	b084      	sub	sp, #16
 8002d32:	af00      	add	r7, sp, #0
 8002d34:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002d36:	2300      	movs	r3, #0
 8002d38:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8002d40:	b2db      	uxtb	r3, r3
 8002d42:	2b02      	cmp	r3, #2
 8002d44:	d00d      	beq.n	8002d62 <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	2204      	movs	r2, #4
 8002d4a:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	2201      	movs	r2, #1
 8002d50:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	2200      	movs	r2, #0
 8002d58:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    status = HAL_ERROR;
 8002d5c:	2301      	movs	r3, #1
 8002d5e:	73fb      	strb	r3, [r7, #15]
 8002d60:	e047      	b.n	8002df2 <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	681a      	ldr	r2, [r3, #0]
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	f022 020e 	bic.w	r2, r2, #14
 8002d70:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	681a      	ldr	r2, [r3, #0]
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	f022 0201 	bic.w	r2, r2, #1
 8002d80:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002d86:	681a      	ldr	r2, [r3, #0]
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002d8c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002d90:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d96:	f003 021f 	and.w	r2, r3, #31
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d9e:	2101      	movs	r1, #1
 8002da0:	fa01 f202 	lsl.w	r2, r1, r2
 8002da4:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002daa:	687a      	ldr	r2, [r7, #4]
 8002dac:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8002dae:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d00c      	beq.n	8002dd2 <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002dbc:	681a      	ldr	r2, [r3, #0]
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002dc2:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002dc6:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002dcc:	687a      	ldr	r2, [r7, #4]
 8002dce:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8002dd0:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	2201      	movs	r2, #1
 8002dd6:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	2200      	movs	r2, #0
 8002dde:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d003      	beq.n	8002df2 <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002dee:	6878      	ldr	r0, [r7, #4]
 8002df0:	4798      	blx	r3
    }
  }
  return status;
 8002df2:	7bfb      	ldrb	r3, [r7, #15]
}
 8002df4:	4618      	mov	r0, r3
 8002df6:	3710      	adds	r7, #16
 8002df8:	46bd      	mov	sp, r7
 8002dfa:	bd80      	pop	{r7, pc}

08002dfc <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002dfc:	b580      	push	{r7, lr}
 8002dfe:	b084      	sub	sp, #16
 8002e00:	af00      	add	r7, sp, #0
 8002e02:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002e18:	f003 031f 	and.w	r3, r3, #31
 8002e1c:	2204      	movs	r2, #4
 8002e1e:	409a      	lsls	r2, r3
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	4013      	ands	r3, r2
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d026      	beq.n	8002e76 <HAL_DMA_IRQHandler+0x7a>
 8002e28:	68bb      	ldr	r3, [r7, #8]
 8002e2a:	f003 0304 	and.w	r3, r3, #4
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d021      	beq.n	8002e76 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	f003 0320 	and.w	r3, r3, #32
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d107      	bne.n	8002e50 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	681a      	ldr	r2, [r3, #0]
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	f022 0204 	bic.w	r2, r2, #4
 8002e4e:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002e54:	f003 021f 	and.w	r2, r3, #31
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e5c:	2104      	movs	r1, #4
 8002e5e:	fa01 f202 	lsl.w	r2, r1, r2
 8002e62:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d071      	beq.n	8002f50 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e70:	6878      	ldr	r0, [r7, #4]
 8002e72:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8002e74:	e06c      	b.n	8002f50 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002e7a:	f003 031f 	and.w	r3, r3, #31
 8002e7e:	2202      	movs	r2, #2
 8002e80:	409a      	lsls	r2, r3
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	4013      	ands	r3, r2
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d02e      	beq.n	8002ee8 <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 8002e8a:	68bb      	ldr	r3, [r7, #8]
 8002e8c:	f003 0302 	and.w	r3, r3, #2
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d029      	beq.n	8002ee8 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	f003 0320 	and.w	r3, r3, #32
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d10b      	bne.n	8002eba <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	681a      	ldr	r2, [r3, #0]
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	f022 020a 	bic.w	r2, r2, #10
 8002eb0:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	2201      	movs	r2, #1
 8002eb6:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002ebe:	f003 021f 	and.w	r2, r3, #31
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ec6:	2102      	movs	r1, #2
 8002ec8:	fa01 f202 	lsl.w	r2, r1, r2
 8002ecc:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	2200      	movs	r2, #0
 8002ed2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d038      	beq.n	8002f50 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ee2:	6878      	ldr	r0, [r7, #4]
 8002ee4:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8002ee6:	e033      	b.n	8002f50 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002eec:	f003 031f 	and.w	r3, r3, #31
 8002ef0:	2208      	movs	r2, #8
 8002ef2:	409a      	lsls	r2, r3
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	4013      	ands	r3, r2
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d02a      	beq.n	8002f52 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 8002efc:	68bb      	ldr	r3, [r7, #8]
 8002efe:	f003 0308 	and.w	r3, r3, #8
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d025      	beq.n	8002f52 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	681a      	ldr	r2, [r3, #0]
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	f022 020e 	bic.w	r2, r2, #14
 8002f14:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002f1a:	f003 021f 	and.w	r2, r3, #31
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f22:	2101      	movs	r1, #1
 8002f24:	fa01 f202 	lsl.w	r2, r1, r2
 8002f28:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	2201      	movs	r2, #1
 8002f2e:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	2201      	movs	r2, #1
 8002f34:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	2200      	movs	r2, #0
 8002f3c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d004      	beq.n	8002f52 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002f4c:	6878      	ldr	r0, [r7, #4]
 8002f4e:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8002f50:	bf00      	nop
 8002f52:	bf00      	nop
}
 8002f54:	3710      	adds	r7, #16
 8002f56:	46bd      	mov	sp, r7
 8002f58:	bd80      	pop	{r7, pc}

08002f5a <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8002f5a:	b480      	push	{r7}
 8002f5c:	b083      	sub	sp, #12
 8002f5e:	af00      	add	r7, sp, #0
 8002f60:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8002f68:	b2db      	uxtb	r3, r3
}
 8002f6a:	4618      	mov	r0, r3
 8002f6c:	370c      	adds	r7, #12
 8002f6e:	46bd      	mov	sp, r7
 8002f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f74:	4770      	bx	lr

08002f76 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002f76:	b480      	push	{r7}
 8002f78:	b085      	sub	sp, #20
 8002f7a:	af00      	add	r7, sp, #0
 8002f7c:	60f8      	str	r0, [r7, #12]
 8002f7e:	60b9      	str	r1, [r7, #8]
 8002f80:	607a      	str	r2, [r7, #4]
 8002f82:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002f88:	68fa      	ldr	r2, [r7, #12]
 8002f8a:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8002f8c:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d004      	beq.n	8002fa0 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002f9a:	68fa      	ldr	r2, [r7, #12]
 8002f9c:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8002f9e:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002fa4:	f003 021f 	and.w	r2, r3, #31
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002fac:	2101      	movs	r1, #1
 8002fae:	fa01 f202 	lsl.w	r2, r1, r2
 8002fb2:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	683a      	ldr	r2, [r7, #0]
 8002fba:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	689b      	ldr	r3, [r3, #8]
 8002fc0:	2b10      	cmp	r3, #16
 8002fc2:	d108      	bne.n	8002fd6 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	687a      	ldr	r2, [r7, #4]
 8002fca:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	68ba      	ldr	r2, [r7, #8]
 8002fd2:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8002fd4:	e007      	b.n	8002fe6 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	68ba      	ldr	r2, [r7, #8]
 8002fdc:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	687a      	ldr	r2, [r7, #4]
 8002fe4:	60da      	str	r2, [r3, #12]
}
 8002fe6:	bf00      	nop
 8002fe8:	3714      	adds	r7, #20
 8002fea:	46bd      	mov	sp, r7
 8002fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ff0:	4770      	bx	lr
	...

08002ff4 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8002ff4:	b480      	push	{r7}
 8002ff6:	b087      	sub	sp, #28
 8002ff8:	af00      	add	r7, sp, #0
 8002ffa:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	461a      	mov	r2, r3
 8003002:	4b16      	ldr	r3, [pc, #88]	@ (800305c <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 8003004:	429a      	cmp	r2, r3
 8003006:	d802      	bhi.n	800300e <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 8003008:	4b15      	ldr	r3, [pc, #84]	@ (8003060 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 800300a:	617b      	str	r3, [r7, #20]
 800300c:	e001      	b.n	8003012 <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G414xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
#elif defined (STM32G431xx) || defined (STM32G441xx) || defined (STM32GBK1CB)
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
 800300e:	4b15      	ldr	r3, [pc, #84]	@ (8003064 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8003010:	617b      	str	r3, [r7, #20]
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 8003012:	697b      	ldr	r3, [r7, #20]
 8003014:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	b2db      	uxtb	r3, r3
 800301c:	3b08      	subs	r3, #8
 800301e:	4a12      	ldr	r2, [pc, #72]	@ (8003068 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8003020:	fba2 2303 	umull	r2, r3, r2, r3
 8003024:	091b      	lsrs	r3, r3, #4
 8003026:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800302c:	089b      	lsrs	r3, r3, #2
 800302e:	009a      	lsls	r2, r3, #2
 8003030:	693b      	ldr	r3, [r7, #16]
 8003032:	4413      	add	r3, r2
 8003034:	461a      	mov	r2, r3
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	4a0b      	ldr	r2, [pc, #44]	@ (800306c <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 800303e:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	f003 031f 	and.w	r3, r3, #31
 8003046:	2201      	movs	r2, #1
 8003048:	409a      	lsls	r2, r3
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	651a      	str	r2, [r3, #80]	@ 0x50
}
 800304e:	bf00      	nop
 8003050:	371c      	adds	r7, #28
 8003052:	46bd      	mov	sp, r7
 8003054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003058:	4770      	bx	lr
 800305a:	bf00      	nop
 800305c:	40020407 	.word	0x40020407
 8003060:	40020800 	.word	0x40020800
 8003064:	40020820 	.word	0x40020820
 8003068:	cccccccd 	.word	0xcccccccd
 800306c:	40020880 	.word	0x40020880

08003070 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003070:	b480      	push	{r7}
 8003072:	b085      	sub	sp, #20
 8003074:	af00      	add	r7, sp, #0
 8003076:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	685b      	ldr	r3, [r3, #4]
 800307c:	b2db      	uxtb	r3, r3
 800307e:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8003080:	68fa      	ldr	r2, [r7, #12]
 8003082:	4b0b      	ldr	r3, [pc, #44]	@ (80030b0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8003084:	4413      	add	r3, r2
 8003086:	009b      	lsls	r3, r3, #2
 8003088:	461a      	mov	r2, r3
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	4a08      	ldr	r2, [pc, #32]	@ (80030b4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8003092:	659a      	str	r2, [r3, #88]	@ 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	3b01      	subs	r3, #1
 8003098:	f003 031f 	and.w	r3, r3, #31
 800309c:	2201      	movs	r2, #1
 800309e:	409a      	lsls	r2, r3
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 80030a4:	bf00      	nop
 80030a6:	3714      	adds	r7, #20
 80030a8:	46bd      	mov	sp, r7
 80030aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ae:	4770      	bx	lr
 80030b0:	1000823f 	.word	0x1000823f
 80030b4:	40020940 	.word	0x40020940

080030b8 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 80030b8:	b580      	push	{r7, lr}
 80030ba:	b084      	sub	sp, #16
 80030bc:	af00      	add	r7, sp, #0
 80030be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d101      	bne.n	80030ca <HAL_FDCAN_Init+0x12>
  {
    return HAL_ERROR;
 80030c6:	2301      	movs	r3, #1
 80030c8:	e147      	b.n	800335a <HAL_FDCAN_Init+0x2a2>

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80030d0:	b2db      	uxtb	r3, r3
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d106      	bne.n	80030e4 <HAL_FDCAN_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	2200      	movs	r2, #0
 80030da:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 80030de:	6878      	ldr	r0, [r7, #4]
 80030e0:	f7fd fd9a 	bl	8000c18 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	699a      	ldr	r2, [r3, #24]
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	f022 0210 	bic.w	r2, r2, #16
 80030f2:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 80030f4:	f7fe f85e 	bl	80011b4 <HAL_GetTick>
 80030f8:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 80030fa:	e012      	b.n	8003122 <HAL_FDCAN_Init+0x6a>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 80030fc:	f7fe f85a 	bl	80011b4 <HAL_GetTick>
 8003100:	4602      	mov	r2, r0
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	1ad3      	subs	r3, r2, r3
 8003106:	2b0a      	cmp	r3, #10
 8003108:	d90b      	bls.n	8003122 <HAL_FDCAN_Init+0x6a>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800310e:	f043 0201 	orr.w	r2, r3, #1
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	2203      	movs	r2, #3
 800311a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 800311e:	2301      	movs	r3, #1
 8003120:	e11b      	b.n	800335a <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	699b      	ldr	r3, [r3, #24]
 8003128:	f003 0308 	and.w	r3, r3, #8
 800312c:	2b08      	cmp	r3, #8
 800312e:	d0e5      	beq.n	80030fc <HAL_FDCAN_Init+0x44>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	699a      	ldr	r2, [r3, #24]
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	f042 0201 	orr.w	r2, r2, #1
 800313e:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003140:	f7fe f838 	bl	80011b4 <HAL_GetTick>
 8003144:	60f8      	str	r0, [r7, #12]

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8003146:	e012      	b.n	800316e <HAL_FDCAN_Init+0xb6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8003148:	f7fe f834 	bl	80011b4 <HAL_GetTick>
 800314c:	4602      	mov	r2, r0
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	1ad3      	subs	r3, r2, r3
 8003152:	2b0a      	cmp	r3, #10
 8003154:	d90b      	bls.n	800316e <HAL_FDCAN_Init+0xb6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800315a:	f043 0201 	orr.w	r2, r3, #1
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	2203      	movs	r2, #3
 8003166:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 800316a:	2301      	movs	r3, #1
 800316c:	e0f5      	b.n	800335a <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	699b      	ldr	r3, [r3, #24]
 8003174:	f003 0301 	and.w	r3, r3, #1
 8003178:	2b00      	cmp	r3, #0
 800317a:	d0e5      	beq.n	8003148 <HAL_FDCAN_Init+0x90>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	699a      	ldr	r2, [r3, #24]
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	f042 0202 	orr.w	r2, r2, #2
 800318a:	619a      	str	r2, [r3, #24]

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	4a74      	ldr	r2, [pc, #464]	@ (8003364 <HAL_FDCAN_Init+0x2ac>)
 8003192:	4293      	cmp	r3, r2
 8003194:	d103      	bne.n	800319e <HAL_FDCAN_Init+0xe6>
  {
    /* Configure Clock divider */
    FDCAN_CONFIG->CKDIV = hfdcan->Init.ClockDivider;
 8003196:	4a74      	ldr	r2, [pc, #464]	@ (8003368 <HAL_FDCAN_Init+0x2b0>)
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	685b      	ldr	r3, [r3, #4]
 800319c:	6013      	str	r3, [r2, #0]
  }

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	7c1b      	ldrb	r3, [r3, #16]
 80031a2:	2b01      	cmp	r3, #1
 80031a4:	d108      	bne.n	80031b8 <HAL_FDCAN_Init+0x100>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	699a      	ldr	r2, [r3, #24]
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80031b4:	619a      	str	r2, [r3, #24]
 80031b6:	e007      	b.n	80031c8 <HAL_FDCAN_Init+0x110>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	699a      	ldr	r2, [r3, #24]
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80031c6:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	7c5b      	ldrb	r3, [r3, #17]
 80031cc:	2b01      	cmp	r3, #1
 80031ce:	d108      	bne.n	80031e2 <HAL_FDCAN_Init+0x12a>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	699a      	ldr	r2, [r3, #24]
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80031de:	619a      	str	r2, [r3, #24]
 80031e0:	e007      	b.n	80031f2 <HAL_FDCAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	699a      	ldr	r2, [r3, #24]
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80031f0:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	7c9b      	ldrb	r3, [r3, #18]
 80031f6:	2b01      	cmp	r3, #1
 80031f8:	d108      	bne.n	800320c <HAL_FDCAN_Init+0x154>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	699a      	ldr	r2, [r3, #24]
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8003208:	619a      	str	r2, [r3, #24]
 800320a:	e007      	b.n	800321c <HAL_FDCAN_Init+0x164>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	699a      	ldr	r2, [r3, #24]
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800321a:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	699b      	ldr	r3, [r3, #24]
 8003222:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	689a      	ldr	r2, [r3, #8]
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	430a      	orrs	r2, r1
 8003230:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	699a      	ldr	r2, [r3, #24]
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	f022 02a4 	bic.w	r2, r2, #164	@ 0xa4
 8003240:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	691a      	ldr	r2, [r3, #16]
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	f022 0210 	bic.w	r2, r2, #16
 8003250:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	68db      	ldr	r3, [r3, #12]
 8003256:	2b01      	cmp	r3, #1
 8003258:	d108      	bne.n	800326c <HAL_FDCAN_Init+0x1b4>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	699a      	ldr	r2, [r3, #24]
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	f042 0204 	orr.w	r2, r2, #4
 8003268:	619a      	str	r2, [r3, #24]
 800326a:	e02c      	b.n	80032c6 <HAL_FDCAN_Init+0x20e>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	68db      	ldr	r3, [r3, #12]
 8003270:	2b00      	cmp	r3, #0
 8003272:	d028      	beq.n	80032c6 <HAL_FDCAN_Init+0x20e>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	68db      	ldr	r3, [r3, #12]
 8003278:	2b02      	cmp	r3, #2
 800327a:	d01c      	beq.n	80032b6 <HAL_FDCAN_Init+0x1fe>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	699a      	ldr	r2, [r3, #24]
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800328a:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	691a      	ldr	r2, [r3, #16]
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	f042 0210 	orr.w	r2, r2, #16
 800329a:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	68db      	ldr	r3, [r3, #12]
 80032a0:	2b03      	cmp	r3, #3
 80032a2:	d110      	bne.n	80032c6 <HAL_FDCAN_Init+0x20e>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	699a      	ldr	r2, [r3, #24]
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	f042 0220 	orr.w	r2, r2, #32
 80032b2:	619a      	str	r2, [r3, #24]
 80032b4:	e007      	b.n	80032c6 <HAL_FDCAN_Init+0x20e>
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	699a      	ldr	r2, [r3, #24]
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	f042 0220 	orr.w	r2, r2, #32
 80032c4:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	699b      	ldr	r3, [r3, #24]
 80032ca:	3b01      	subs	r3, #1
 80032cc:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	69db      	ldr	r3, [r3, #28]
 80032d2:	3b01      	subs	r3, #1
 80032d4:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80032d6:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	6a1b      	ldr	r3, [r3, #32]
 80032dc:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 80032de:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	695b      	ldr	r3, [r3, #20]
 80032e6:	3b01      	subs	r3, #1
 80032e8:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 80032ee:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80032f0:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	689b      	ldr	r3, [r3, #8]
 80032f6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80032fa:	d115      	bne.n	8003328 <HAL_FDCAN_Init+0x270>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003300:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003306:	3b01      	subs	r3, #1
 8003308:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 800330a:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003310:	3b01      	subs	r3, #1
 8003312:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8003314:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800331c:	3b01      	subs	r3, #1
 800331e:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8003324:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8003326:	60da      	str	r2, [r3, #12]
  }

  /* Select between Tx FIFO and Tx Queue operation modes */
  SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	f8d3 10c0 	ldr.w	r1, [r3, #192]	@ 0xc0
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	430a      	orrs	r2, r1
 800333a:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0

  /* Calculate each RAM block address */
  FDCAN_CalcultateRamBlockAddresses(hfdcan);
 800333e:	6878      	ldr	r0, [r7, #4]
 8003340:	f000 f814 	bl	800336c <FDCAN_CalcultateRamBlockAddresses>

  /* Initialize the Latest Tx request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	2200      	movs	r2, #0
 8003348:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	2200      	movs	r2, #0
 800334e:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	2201      	movs	r2, #1
 8003354:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Return function status */
  return HAL_OK;
 8003358:	2300      	movs	r3, #0
}
 800335a:	4618      	mov	r0, r3
 800335c:	3710      	adds	r7, #16
 800335e:	46bd      	mov	sp, r7
 8003360:	bd80      	pop	{r7, pc}
 8003362:	bf00      	nop
 8003364:	40006400 	.word	0x40006400
 8003368:	40006500 	.word	0x40006500

0800336c <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval none
 */
static void FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 800336c:	b480      	push	{r7}
 800336e:	b085      	sub	sp, #20
 8003370:	af00      	add	r7, sp, #0
 8003372:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t SramCanInstanceBase = SRAMCAN_BASE;
 8003374:	4b27      	ldr	r3, [pc, #156]	@ (8003414 <FDCAN_CalcultateRamBlockAddresses+0xa8>)
 8003376:	60bb      	str	r3, [r7, #8]
    SramCanInstanceBase += SRAMCAN_SIZE * 2U;
  }
#endif /* FDCAN3 */

  /* Standard filter list start address */
  hfdcan->msgRam.StandardFilterSA = SramCanInstanceBase + SRAMCAN_FLSSA;
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	68ba      	ldr	r2, [r7, #8]
 800337c:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_RXGFC_LSS_Pos));
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003386:	f423 11f8 	bic.w	r1, r3, #2031616	@ 0x1f0000
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800338e:	041a      	lsls	r2, r3, #16
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	430a      	orrs	r2, r1
 8003396:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Extended filter list start address */
  hfdcan->msgRam.ExtendedFilterSA = SramCanInstanceBase + SRAMCAN_FLESA;
 800339a:	68bb      	ldr	r3, [r7, #8]
 800339c:	f103 0270 	add.w	r2, r3, #112	@ 0x70
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_RXGFC_LSE_Pos));
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80033ac:	f023 6170 	bic.w	r1, r3, #251658240	@ 0xf000000
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80033b4:	061a      	lsls	r2, r3, #24
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	430a      	orrs	r2, r1
 80033bc:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Rx FIFO 0 start address */
  hfdcan->msgRam.RxFIFO0SA = SramCanInstanceBase + SRAMCAN_RF0SA;
 80033c0:	68bb      	ldr	r3, [r7, #8]
 80033c2:	f103 02b0 	add.w	r2, r3, #176	@ 0xb0
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Rx FIFO 1 start address */
  hfdcan->msgRam.RxFIFO1SA = SramCanInstanceBase + SRAMCAN_RF1SA;
 80033ca:	68bb      	ldr	r3, [r7, #8]
 80033cc:	f503 72c4 	add.w	r2, r3, #392	@ 0x188
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Tx event FIFO start address */
  hfdcan->msgRam.TxEventFIFOSA = SramCanInstanceBase + SRAMCAN_TEFSA;
 80033d4:	68bb      	ldr	r3, [r7, #8]
 80033d6:	f503 7218 	add.w	r2, r3, #608	@ 0x260
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Tx FIFO/queue start address */
  hfdcan->msgRam.TxFIFOQSA = SramCanInstanceBase + SRAMCAN_TFQSA;
 80033de:	68bb      	ldr	r3, [r7, #8]
 80033e0:	f503 721e 	add.w	r2, r3, #632	@ 0x278
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Flush the allocated Message RAM area */
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 80033e8:	68bb      	ldr	r3, [r7, #8]
 80033ea:	60fb      	str	r3, [r7, #12]
 80033ec:	e005      	b.n	80033fa <FDCAN_CalcultateRamBlockAddresses+0x8e>
  {
    *(uint32_t *)(RAMcounter) = 0x00000000U;
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	2200      	movs	r2, #0
 80033f2:	601a      	str	r2, [r3, #0]
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	3304      	adds	r3, #4
 80033f8:	60fb      	str	r3, [r7, #12]
 80033fa:	68bb      	ldr	r3, [r7, #8]
 80033fc:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 8003400:	68fa      	ldr	r2, [r7, #12]
 8003402:	429a      	cmp	r2, r3
 8003404:	d3f3      	bcc.n	80033ee <FDCAN_CalcultateRamBlockAddresses+0x82>
  }
}
 8003406:	bf00      	nop
 8003408:	bf00      	nop
 800340a:	3714      	adds	r7, #20
 800340c:	46bd      	mov	sp, r7
 800340e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003412:	4770      	bx	lr
 8003414:	4000a400 	.word	0x4000a400

08003418 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003418:	b480      	push	{r7}
 800341a:	b087      	sub	sp, #28
 800341c:	af00      	add	r7, sp, #0
 800341e:	6078      	str	r0, [r7, #4]
 8003420:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8003422:	2300      	movs	r3, #0
 8003424:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8003426:	e15a      	b.n	80036de <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8003428:	683b      	ldr	r3, [r7, #0]
 800342a:	681a      	ldr	r2, [r3, #0]
 800342c:	2101      	movs	r1, #1
 800342e:	697b      	ldr	r3, [r7, #20]
 8003430:	fa01 f303 	lsl.w	r3, r1, r3
 8003434:	4013      	ands	r3, r2
 8003436:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	2b00      	cmp	r3, #0
 800343c:	f000 814c 	beq.w	80036d8 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8003440:	683b      	ldr	r3, [r7, #0]
 8003442:	685b      	ldr	r3, [r3, #4]
 8003444:	f003 0303 	and.w	r3, r3, #3
 8003448:	2b01      	cmp	r3, #1
 800344a:	d005      	beq.n	8003458 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800344c:	683b      	ldr	r3, [r7, #0]
 800344e:	685b      	ldr	r3, [r3, #4]
 8003450:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8003454:	2b02      	cmp	r3, #2
 8003456:	d130      	bne.n	80034ba <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	689b      	ldr	r3, [r3, #8]
 800345c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800345e:	697b      	ldr	r3, [r7, #20]
 8003460:	005b      	lsls	r3, r3, #1
 8003462:	2203      	movs	r2, #3
 8003464:	fa02 f303 	lsl.w	r3, r2, r3
 8003468:	43db      	mvns	r3, r3
 800346a:	693a      	ldr	r2, [r7, #16]
 800346c:	4013      	ands	r3, r2
 800346e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003470:	683b      	ldr	r3, [r7, #0]
 8003472:	68da      	ldr	r2, [r3, #12]
 8003474:	697b      	ldr	r3, [r7, #20]
 8003476:	005b      	lsls	r3, r3, #1
 8003478:	fa02 f303 	lsl.w	r3, r2, r3
 800347c:	693a      	ldr	r2, [r7, #16]
 800347e:	4313      	orrs	r3, r2
 8003480:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	693a      	ldr	r2, [r7, #16]
 8003486:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	685b      	ldr	r3, [r3, #4]
 800348c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800348e:	2201      	movs	r2, #1
 8003490:	697b      	ldr	r3, [r7, #20]
 8003492:	fa02 f303 	lsl.w	r3, r2, r3
 8003496:	43db      	mvns	r3, r3
 8003498:	693a      	ldr	r2, [r7, #16]
 800349a:	4013      	ands	r3, r2
 800349c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800349e:	683b      	ldr	r3, [r7, #0]
 80034a0:	685b      	ldr	r3, [r3, #4]
 80034a2:	091b      	lsrs	r3, r3, #4
 80034a4:	f003 0201 	and.w	r2, r3, #1
 80034a8:	697b      	ldr	r3, [r7, #20]
 80034aa:	fa02 f303 	lsl.w	r3, r2, r3
 80034ae:	693a      	ldr	r2, [r7, #16]
 80034b0:	4313      	orrs	r3, r2
 80034b2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	693a      	ldr	r2, [r7, #16]
 80034b8:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80034ba:	683b      	ldr	r3, [r7, #0]
 80034bc:	685b      	ldr	r3, [r3, #4]
 80034be:	f003 0303 	and.w	r3, r3, #3
 80034c2:	2b03      	cmp	r3, #3
 80034c4:	d017      	beq.n	80034f6 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	68db      	ldr	r3, [r3, #12]
 80034ca:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80034cc:	697b      	ldr	r3, [r7, #20]
 80034ce:	005b      	lsls	r3, r3, #1
 80034d0:	2203      	movs	r2, #3
 80034d2:	fa02 f303 	lsl.w	r3, r2, r3
 80034d6:	43db      	mvns	r3, r3
 80034d8:	693a      	ldr	r2, [r7, #16]
 80034da:	4013      	ands	r3, r2
 80034dc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80034de:	683b      	ldr	r3, [r7, #0]
 80034e0:	689a      	ldr	r2, [r3, #8]
 80034e2:	697b      	ldr	r3, [r7, #20]
 80034e4:	005b      	lsls	r3, r3, #1
 80034e6:	fa02 f303 	lsl.w	r3, r2, r3
 80034ea:	693a      	ldr	r2, [r7, #16]
 80034ec:	4313      	orrs	r3, r2
 80034ee:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	693a      	ldr	r2, [r7, #16]
 80034f4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80034f6:	683b      	ldr	r3, [r7, #0]
 80034f8:	685b      	ldr	r3, [r3, #4]
 80034fa:	f003 0303 	and.w	r3, r3, #3
 80034fe:	2b02      	cmp	r3, #2
 8003500:	d123      	bne.n	800354a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003502:	697b      	ldr	r3, [r7, #20]
 8003504:	08da      	lsrs	r2, r3, #3
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	3208      	adds	r2, #8
 800350a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800350e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8003510:	697b      	ldr	r3, [r7, #20]
 8003512:	f003 0307 	and.w	r3, r3, #7
 8003516:	009b      	lsls	r3, r3, #2
 8003518:	220f      	movs	r2, #15
 800351a:	fa02 f303 	lsl.w	r3, r2, r3
 800351e:	43db      	mvns	r3, r3
 8003520:	693a      	ldr	r2, [r7, #16]
 8003522:	4013      	ands	r3, r2
 8003524:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8003526:	683b      	ldr	r3, [r7, #0]
 8003528:	691a      	ldr	r2, [r3, #16]
 800352a:	697b      	ldr	r3, [r7, #20]
 800352c:	f003 0307 	and.w	r3, r3, #7
 8003530:	009b      	lsls	r3, r3, #2
 8003532:	fa02 f303 	lsl.w	r3, r2, r3
 8003536:	693a      	ldr	r2, [r7, #16]
 8003538:	4313      	orrs	r3, r2
 800353a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 800353c:	697b      	ldr	r3, [r7, #20]
 800353e:	08da      	lsrs	r2, r3, #3
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	3208      	adds	r2, #8
 8003544:	6939      	ldr	r1, [r7, #16]
 8003546:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8003550:	697b      	ldr	r3, [r7, #20]
 8003552:	005b      	lsls	r3, r3, #1
 8003554:	2203      	movs	r2, #3
 8003556:	fa02 f303 	lsl.w	r3, r2, r3
 800355a:	43db      	mvns	r3, r3
 800355c:	693a      	ldr	r2, [r7, #16]
 800355e:	4013      	ands	r3, r2
 8003560:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003562:	683b      	ldr	r3, [r7, #0]
 8003564:	685b      	ldr	r3, [r3, #4]
 8003566:	f003 0203 	and.w	r2, r3, #3
 800356a:	697b      	ldr	r3, [r7, #20]
 800356c:	005b      	lsls	r3, r3, #1
 800356e:	fa02 f303 	lsl.w	r3, r2, r3
 8003572:	693a      	ldr	r2, [r7, #16]
 8003574:	4313      	orrs	r3, r2
 8003576:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	693a      	ldr	r2, [r7, #16]
 800357c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800357e:	683b      	ldr	r3, [r7, #0]
 8003580:	685b      	ldr	r3, [r3, #4]
 8003582:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003586:	2b00      	cmp	r3, #0
 8003588:	f000 80a6 	beq.w	80036d8 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800358c:	4b5b      	ldr	r3, [pc, #364]	@ (80036fc <HAL_GPIO_Init+0x2e4>)
 800358e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003590:	4a5a      	ldr	r2, [pc, #360]	@ (80036fc <HAL_GPIO_Init+0x2e4>)
 8003592:	f043 0301 	orr.w	r3, r3, #1
 8003596:	6613      	str	r3, [r2, #96]	@ 0x60
 8003598:	4b58      	ldr	r3, [pc, #352]	@ (80036fc <HAL_GPIO_Init+0x2e4>)
 800359a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800359c:	f003 0301 	and.w	r3, r3, #1
 80035a0:	60bb      	str	r3, [r7, #8]
 80035a2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 80035a4:	4a56      	ldr	r2, [pc, #344]	@ (8003700 <HAL_GPIO_Init+0x2e8>)
 80035a6:	697b      	ldr	r3, [r7, #20]
 80035a8:	089b      	lsrs	r3, r3, #2
 80035aa:	3302      	adds	r3, #2
 80035ac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80035b0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80035b2:	697b      	ldr	r3, [r7, #20]
 80035b4:	f003 0303 	and.w	r3, r3, #3
 80035b8:	009b      	lsls	r3, r3, #2
 80035ba:	220f      	movs	r2, #15
 80035bc:	fa02 f303 	lsl.w	r3, r2, r3
 80035c0:	43db      	mvns	r3, r3
 80035c2:	693a      	ldr	r2, [r7, #16]
 80035c4:	4013      	ands	r3, r2
 80035c6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80035ce:	d01f      	beq.n	8003610 <HAL_GPIO_Init+0x1f8>
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	4a4c      	ldr	r2, [pc, #304]	@ (8003704 <HAL_GPIO_Init+0x2ec>)
 80035d4:	4293      	cmp	r3, r2
 80035d6:	d019      	beq.n	800360c <HAL_GPIO_Init+0x1f4>
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	4a4b      	ldr	r2, [pc, #300]	@ (8003708 <HAL_GPIO_Init+0x2f0>)
 80035dc:	4293      	cmp	r3, r2
 80035de:	d013      	beq.n	8003608 <HAL_GPIO_Init+0x1f0>
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	4a4a      	ldr	r2, [pc, #296]	@ (800370c <HAL_GPIO_Init+0x2f4>)
 80035e4:	4293      	cmp	r3, r2
 80035e6:	d00d      	beq.n	8003604 <HAL_GPIO_Init+0x1ec>
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	4a49      	ldr	r2, [pc, #292]	@ (8003710 <HAL_GPIO_Init+0x2f8>)
 80035ec:	4293      	cmp	r3, r2
 80035ee:	d007      	beq.n	8003600 <HAL_GPIO_Init+0x1e8>
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	4a48      	ldr	r2, [pc, #288]	@ (8003714 <HAL_GPIO_Init+0x2fc>)
 80035f4:	4293      	cmp	r3, r2
 80035f6:	d101      	bne.n	80035fc <HAL_GPIO_Init+0x1e4>
 80035f8:	2305      	movs	r3, #5
 80035fa:	e00a      	b.n	8003612 <HAL_GPIO_Init+0x1fa>
 80035fc:	2306      	movs	r3, #6
 80035fe:	e008      	b.n	8003612 <HAL_GPIO_Init+0x1fa>
 8003600:	2304      	movs	r3, #4
 8003602:	e006      	b.n	8003612 <HAL_GPIO_Init+0x1fa>
 8003604:	2303      	movs	r3, #3
 8003606:	e004      	b.n	8003612 <HAL_GPIO_Init+0x1fa>
 8003608:	2302      	movs	r3, #2
 800360a:	e002      	b.n	8003612 <HAL_GPIO_Init+0x1fa>
 800360c:	2301      	movs	r3, #1
 800360e:	e000      	b.n	8003612 <HAL_GPIO_Init+0x1fa>
 8003610:	2300      	movs	r3, #0
 8003612:	697a      	ldr	r2, [r7, #20]
 8003614:	f002 0203 	and.w	r2, r2, #3
 8003618:	0092      	lsls	r2, r2, #2
 800361a:	4093      	lsls	r3, r2
 800361c:	693a      	ldr	r2, [r7, #16]
 800361e:	4313      	orrs	r3, r2
 8003620:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003622:	4937      	ldr	r1, [pc, #220]	@ (8003700 <HAL_GPIO_Init+0x2e8>)
 8003624:	697b      	ldr	r3, [r7, #20]
 8003626:	089b      	lsrs	r3, r3, #2
 8003628:	3302      	adds	r3, #2
 800362a:	693a      	ldr	r2, [r7, #16]
 800362c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003630:	4b39      	ldr	r3, [pc, #228]	@ (8003718 <HAL_GPIO_Init+0x300>)
 8003632:	689b      	ldr	r3, [r3, #8]
 8003634:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	43db      	mvns	r3, r3
 800363a:	693a      	ldr	r2, [r7, #16]
 800363c:	4013      	ands	r3, r2
 800363e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003640:	683b      	ldr	r3, [r7, #0]
 8003642:	685b      	ldr	r3, [r3, #4]
 8003644:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003648:	2b00      	cmp	r3, #0
 800364a:	d003      	beq.n	8003654 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 800364c:	693a      	ldr	r2, [r7, #16]
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	4313      	orrs	r3, r2
 8003652:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003654:	4a30      	ldr	r2, [pc, #192]	@ (8003718 <HAL_GPIO_Init+0x300>)
 8003656:	693b      	ldr	r3, [r7, #16]
 8003658:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800365a:	4b2f      	ldr	r3, [pc, #188]	@ (8003718 <HAL_GPIO_Init+0x300>)
 800365c:	68db      	ldr	r3, [r3, #12]
 800365e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	43db      	mvns	r3, r3
 8003664:	693a      	ldr	r2, [r7, #16]
 8003666:	4013      	ands	r3, r2
 8003668:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800366a:	683b      	ldr	r3, [r7, #0]
 800366c:	685b      	ldr	r3, [r3, #4]
 800366e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003672:	2b00      	cmp	r3, #0
 8003674:	d003      	beq.n	800367e <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8003676:	693a      	ldr	r2, [r7, #16]
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	4313      	orrs	r3, r2
 800367c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800367e:	4a26      	ldr	r2, [pc, #152]	@ (8003718 <HAL_GPIO_Init+0x300>)
 8003680:	693b      	ldr	r3, [r7, #16]
 8003682:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8003684:	4b24      	ldr	r3, [pc, #144]	@ (8003718 <HAL_GPIO_Init+0x300>)
 8003686:	685b      	ldr	r3, [r3, #4]
 8003688:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	43db      	mvns	r3, r3
 800368e:	693a      	ldr	r2, [r7, #16]
 8003690:	4013      	ands	r3, r2
 8003692:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003694:	683b      	ldr	r3, [r7, #0]
 8003696:	685b      	ldr	r3, [r3, #4]
 8003698:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800369c:	2b00      	cmp	r3, #0
 800369e:	d003      	beq.n	80036a8 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 80036a0:	693a      	ldr	r2, [r7, #16]
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	4313      	orrs	r3, r2
 80036a6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80036a8:	4a1b      	ldr	r2, [pc, #108]	@ (8003718 <HAL_GPIO_Init+0x300>)
 80036aa:	693b      	ldr	r3, [r7, #16]
 80036ac:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80036ae:	4b1a      	ldr	r3, [pc, #104]	@ (8003718 <HAL_GPIO_Init+0x300>)
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	43db      	mvns	r3, r3
 80036b8:	693a      	ldr	r2, [r7, #16]
 80036ba:	4013      	ands	r3, r2
 80036bc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80036be:	683b      	ldr	r3, [r7, #0]
 80036c0:	685b      	ldr	r3, [r3, #4]
 80036c2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d003      	beq.n	80036d2 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 80036ca:	693a      	ldr	r2, [r7, #16]
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	4313      	orrs	r3, r2
 80036d0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80036d2:	4a11      	ldr	r2, [pc, #68]	@ (8003718 <HAL_GPIO_Init+0x300>)
 80036d4:	693b      	ldr	r3, [r7, #16]
 80036d6:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80036d8:	697b      	ldr	r3, [r7, #20]
 80036da:	3301      	adds	r3, #1
 80036dc:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 80036de:	683b      	ldr	r3, [r7, #0]
 80036e0:	681a      	ldr	r2, [r3, #0]
 80036e2:	697b      	ldr	r3, [r7, #20]
 80036e4:	fa22 f303 	lsr.w	r3, r2, r3
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	f47f ae9d 	bne.w	8003428 <HAL_GPIO_Init+0x10>
  }
}
 80036ee:	bf00      	nop
 80036f0:	bf00      	nop
 80036f2:	371c      	adds	r7, #28
 80036f4:	46bd      	mov	sp, r7
 80036f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036fa:	4770      	bx	lr
 80036fc:	40021000 	.word	0x40021000
 8003700:	40010000 	.word	0x40010000
 8003704:	48000400 	.word	0x48000400
 8003708:	48000800 	.word	0x48000800
 800370c:	48000c00 	.word	0x48000c00
 8003710:	48001000 	.word	0x48001000
 8003714:	48001400 	.word	0x48001400
 8003718:	40010400 	.word	0x40010400

0800371c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800371c:	b480      	push	{r7}
 800371e:	b083      	sub	sp, #12
 8003720:	af00      	add	r7, sp, #0
 8003722:	6078      	str	r0, [r7, #4]
 8003724:	460b      	mov	r3, r1
 8003726:	807b      	strh	r3, [r7, #2]
 8003728:	4613      	mov	r3, r2
 800372a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800372c:	787b      	ldrb	r3, [r7, #1]
 800372e:	2b00      	cmp	r3, #0
 8003730:	d003      	beq.n	800373a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003732:	887a      	ldrh	r2, [r7, #2]
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003738:	e002      	b.n	8003740 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800373a:	887a      	ldrh	r2, [r7, #2]
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8003740:	bf00      	nop
 8003742:	370c      	adds	r7, #12
 8003744:	46bd      	mov	sp, r7
 8003746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800374a:	4770      	bx	lr

0800374c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800374c:	b580      	push	{r7, lr}
 800374e:	b082      	sub	sp, #8
 8003750:	af00      	add	r7, sp, #0
 8003752:	4603      	mov	r3, r0
 8003754:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8003756:	4b08      	ldr	r3, [pc, #32]	@ (8003778 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003758:	695a      	ldr	r2, [r3, #20]
 800375a:	88fb      	ldrh	r3, [r7, #6]
 800375c:	4013      	ands	r3, r2
 800375e:	2b00      	cmp	r3, #0
 8003760:	d006      	beq.n	8003770 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003762:	4a05      	ldr	r2, [pc, #20]	@ (8003778 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003764:	88fb      	ldrh	r3, [r7, #6]
 8003766:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003768:	88fb      	ldrh	r3, [r7, #6]
 800376a:	4618      	mov	r0, r3
 800376c:	f000 f806 	bl	800377c <HAL_GPIO_EXTI_Callback>
  }
}
 8003770:	bf00      	nop
 8003772:	3708      	adds	r7, #8
 8003774:	46bd      	mov	sp, r7
 8003776:	bd80      	pop	{r7, pc}
 8003778:	40010400 	.word	0x40010400

0800377c <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800377c:	b480      	push	{r7}
 800377e:	b083      	sub	sp, #12
 8003780:	af00      	add	r7, sp, #0
 8003782:	4603      	mov	r3, r0
 8003784:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8003786:	bf00      	nop
 8003788:	370c      	adds	r7, #12
 800378a:	46bd      	mov	sp, r7
 800378c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003790:	4770      	bx	lr

08003792 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003792:	b580      	push	{r7, lr}
 8003794:	b082      	sub	sp, #8
 8003796:	af00      	add	r7, sp, #0
 8003798:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	2b00      	cmp	r3, #0
 800379e:	d101      	bne.n	80037a4 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80037a0:	2301      	movs	r3, #1
 80037a2:	e08d      	b.n	80038c0 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80037aa:	b2db      	uxtb	r3, r3
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	d106      	bne.n	80037be <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	2200      	movs	r2, #0
 80037b4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80037b8:	6878      	ldr	r0, [r7, #4]
 80037ba:	f7fd faa7 	bl	8000d0c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	2224      	movs	r2, #36	@ 0x24
 80037c2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	681a      	ldr	r2, [r3, #0]
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	f022 0201 	bic.w	r2, r2, #1
 80037d4:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	685a      	ldr	r2, [r3, #4]
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80037e2:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	689a      	ldr	r2, [r3, #8]
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80037f2:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	68db      	ldr	r3, [r3, #12]
 80037f8:	2b01      	cmp	r3, #1
 80037fa:	d107      	bne.n	800380c <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	689a      	ldr	r2, [r3, #8]
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003808:	609a      	str	r2, [r3, #8]
 800380a:	e006      	b.n	800381a <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	689a      	ldr	r2, [r3, #8]
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8003818:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	68db      	ldr	r3, [r3, #12]
 800381e:	2b02      	cmp	r3, #2
 8003820:	d108      	bne.n	8003834 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	685a      	ldr	r2, [r3, #4]
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003830:	605a      	str	r2, [r3, #4]
 8003832:	e007      	b.n	8003844 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	685a      	ldr	r2, [r3, #4]
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003842:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	685b      	ldr	r3, [r3, #4]
 800384a:	687a      	ldr	r2, [r7, #4]
 800384c:	6812      	ldr	r2, [r2, #0]
 800384e:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8003852:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003856:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	68da      	ldr	r2, [r3, #12]
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003866:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	691a      	ldr	r2, [r3, #16]
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	695b      	ldr	r3, [r3, #20]
 8003870:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	699b      	ldr	r3, [r3, #24]
 8003878:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	430a      	orrs	r2, r1
 8003880:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	69d9      	ldr	r1, [r3, #28]
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	6a1a      	ldr	r2, [r3, #32]
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	430a      	orrs	r2, r1
 8003890:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	681a      	ldr	r2, [r3, #0]
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	f042 0201 	orr.w	r2, r2, #1
 80038a0:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	2200      	movs	r2, #0
 80038a6:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	2220      	movs	r2, #32
 80038ac:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	2200      	movs	r2, #0
 80038b4:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	2200      	movs	r2, #0
 80038ba:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 80038be:	2300      	movs	r3, #0
}
 80038c0:	4618      	mov	r0, r3
 80038c2:	3708      	adds	r7, #8
 80038c4:	46bd      	mov	sp, r7
 80038c6:	bd80      	pop	{r7, pc}

080038c8 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c) /* Derogation MISRAC2012-Rule-8.13 */
{
 80038c8:	b580      	push	{r7, lr}
 80038ca:	b084      	sub	sp, #16
 80038cc:	af00      	add	r7, sp, #0
 80038ce:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	699b      	ldr	r3, [r3, #24]
 80038d6:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d005      	beq.n	80038f4 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80038ec:	68ba      	ldr	r2, [r7, #8]
 80038ee:	68f9      	ldr	r1, [r7, #12]
 80038f0:	6878      	ldr	r0, [r7, #4]
 80038f2:	4798      	blx	r3
  }
}
 80038f4:	bf00      	nop
 80038f6:	3710      	adds	r7, #16
 80038f8:	46bd      	mov	sp, r7
 80038fa:	bd80      	pop	{r7, pc}

080038fc <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80038fc:	b580      	push	{r7, lr}
 80038fe:	b086      	sub	sp, #24
 8003900:	af00      	add	r7, sp, #0
 8003902:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	699b      	ldr	r3, [r3, #24]
 800390a:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8003914:	697b      	ldr	r3, [r7, #20]
 8003916:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800391a:	2b00      	cmp	r3, #0
 800391c:	d00f      	beq.n	800393e <HAL_I2C_ER_IRQHandler+0x42>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 800391e:	693b      	ldr	r3, [r7, #16]
 8003920:	f003 0380 	and.w	r3, r3, #128	@ 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8003924:	2b00      	cmp	r3, #0
 8003926:	d00a      	beq.n	800393e <HAL_I2C_ER_IRQHandler+0x42>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800392c:	f043 0201 	orr.w	r2, r3, #1
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800393c:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 800393e:	697b      	ldr	r3, [r7, #20]
 8003940:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003944:	2b00      	cmp	r3, #0
 8003946:	d00f      	beq.n	8003968 <HAL_I2C_ER_IRQHandler+0x6c>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8003948:	693b      	ldr	r3, [r7, #16]
 800394a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 800394e:	2b00      	cmp	r3, #0
 8003950:	d00a      	beq.n	8003968 <HAL_I2C_ER_IRQHandler+0x6c>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003956:	f043 0208 	orr.w	r2, r3, #8
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003966:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8003968:	697b      	ldr	r3, [r7, #20]
 800396a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800396e:	2b00      	cmp	r3, #0
 8003970:	d00f      	beq.n	8003992 <HAL_I2C_ER_IRQHandler+0x96>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8003972:	693b      	ldr	r3, [r7, #16]
 8003974:	f003 0380 	and.w	r3, r3, #128	@ 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8003978:	2b00      	cmp	r3, #0
 800397a:	d00a      	beq.n	8003992 <HAL_I2C_ER_IRQHandler+0x96>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003980:	f043 0202 	orr.w	r2, r3, #2
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003990:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003996:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	f003 030b 	and.w	r3, r3, #11
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d003      	beq.n	80039aa <HAL_I2C_ER_IRQHandler+0xae>
  {
    I2C_ITError(hi2c, tmperror);
 80039a2:	68f9      	ldr	r1, [r7, #12]
 80039a4:	6878      	ldr	r0, [r7, #4]
 80039a6:	f000 fbd5 	bl	8004154 <I2C_ITError>
  }
}
 80039aa:	bf00      	nop
 80039ac:	3718      	adds	r7, #24
 80039ae:	46bd      	mov	sp, r7
 80039b0:	bd80      	pop	{r7, pc}

080039b2 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80039b2:	b480      	push	{r7}
 80039b4:	b083      	sub	sp, #12
 80039b6:	af00      	add	r7, sp, #0
 80039b8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 80039ba:	bf00      	nop
 80039bc:	370c      	adds	r7, #12
 80039be:	46bd      	mov	sp, r7
 80039c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039c4:	4770      	bx	lr

080039c6 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80039c6:	b480      	push	{r7}
 80039c8:	b083      	sub	sp, #12
 80039ca:	af00      	add	r7, sp, #0
 80039cc:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 80039ce:	bf00      	nop
 80039d0:	370c      	adds	r7, #12
 80039d2:	46bd      	mov	sp, r7
 80039d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039d8:	4770      	bx	lr

080039da <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 80039da:	b480      	push	{r7}
 80039dc:	b083      	sub	sp, #12
 80039de:	af00      	add	r7, sp, #0
 80039e0:	6078      	str	r0, [r7, #4]
 80039e2:	460b      	mov	r3, r1
 80039e4:	70fb      	strb	r3, [r7, #3]
 80039e6:	4613      	mov	r3, r2
 80039e8:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 80039ea:	bf00      	nop
 80039ec:	370c      	adds	r7, #12
 80039ee:	46bd      	mov	sp, r7
 80039f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039f4:	4770      	bx	lr

080039f6 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80039f6:	b480      	push	{r7}
 80039f8:	b083      	sub	sp, #12
 80039fa:	af00      	add	r7, sp, #0
 80039fc:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 80039fe:	bf00      	nop
 8003a00:	370c      	adds	r7, #12
 8003a02:	46bd      	mov	sp, r7
 8003a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a08:	4770      	bx	lr

08003a0a <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8003a0a:	b480      	push	{r7}
 8003a0c:	b083      	sub	sp, #12
 8003a0e:	af00      	add	r7, sp, #0
 8003a10:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8003a12:	bf00      	nop
 8003a14:	370c      	adds	r7, #12
 8003a16:	46bd      	mov	sp, r7
 8003a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a1c:	4770      	bx	lr

08003a1e <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003a1e:	b480      	push	{r7}
 8003a20:	b083      	sub	sp, #12
 8003a22:	af00      	add	r7, sp, #0
 8003a24:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8003a26:	bf00      	nop
 8003a28:	370c      	adds	r7, #12
 8003a2a:	46bd      	mov	sp, r7
 8003a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a30:	4770      	bx	lr

08003a32 <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 8003a32:	b580      	push	{r7, lr}
 8003a34:	b086      	sub	sp, #24
 8003a36:	af00      	add	r7, sp, #0
 8003a38:	60f8      	str	r0, [r7, #12]
 8003a3a:	60b9      	str	r1, [r7, #8]
 8003a3c:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a42:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 8003a44:	68bb      	ldr	r3, [r7, #8]
 8003a46:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003a4e:	2b01      	cmp	r3, #1
 8003a50:	d101      	bne.n	8003a56 <I2C_Slave_ISR_IT+0x24>
 8003a52:	2302      	movs	r3, #2
 8003a54:	e0e2      	b.n	8003c1c <I2C_Slave_ISR_IT+0x1ea>
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	2201      	movs	r2, #1
 8003a5a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8003a5e:	693b      	ldr	r3, [r7, #16]
 8003a60:	f003 0320 	and.w	r3, r3, #32
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d009      	beq.n	8003a7c <I2C_Slave_ISR_IT+0x4a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	f003 0320 	and.w	r3, r3, #32
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d004      	beq.n	8003a7c <I2C_Slave_ISR_IT+0x4a>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 8003a72:	6939      	ldr	r1, [r7, #16]
 8003a74:	68f8      	ldr	r0, [r7, #12]
 8003a76:	f000 f9b5 	bl	8003de4 <I2C_ITSlaveCplt>
 8003a7a:	e0ca      	b.n	8003c12 <I2C_Slave_ISR_IT+0x1e0>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8003a7c:	693b      	ldr	r3, [r7, #16]
 8003a7e:	f003 0310 	and.w	r3, r3, #16
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d04b      	beq.n	8003b1e <I2C_Slave_ISR_IT+0xec>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	f003 0310 	and.w	r3, r3, #16
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d046      	beq.n	8003b1e <I2C_Slave_ISR_IT+0xec>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003a94:	b29b      	uxth	r3, r3
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d128      	bne.n	8003aec <I2C_Slave_ISR_IT+0xba>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003aa0:	b2db      	uxtb	r3, r3
 8003aa2:	2b28      	cmp	r3, #40	@ 0x28
 8003aa4:	d108      	bne.n	8003ab8 <I2C_Slave_ISR_IT+0x86>
 8003aa6:	697b      	ldr	r3, [r7, #20]
 8003aa8:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003aac:	d104      	bne.n	8003ab8 <I2C_Slave_ISR_IT+0x86>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8003aae:	6939      	ldr	r1, [r7, #16]
 8003ab0:	68f8      	ldr	r0, [r7, #12]
 8003ab2:	f000 fafb 	bl	80040ac <I2C_ITListenCplt>
 8003ab6:	e031      	b.n	8003b1c <I2C_Slave_ISR_IT+0xea>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003abe:	b2db      	uxtb	r3, r3
 8003ac0:	2b29      	cmp	r3, #41	@ 0x29
 8003ac2:	d10e      	bne.n	8003ae2 <I2C_Slave_ISR_IT+0xb0>
 8003ac4:	697b      	ldr	r3, [r7, #20]
 8003ac6:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8003aca:	d00a      	beq.n	8003ae2 <I2C_Slave_ISR_IT+0xb0>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	2210      	movs	r2, #16
 8003ad2:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8003ad4:	68f8      	ldr	r0, [r7, #12]
 8003ad6:	f000 fc54 	bl	8004382 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8003ada:	68f8      	ldr	r0, [r7, #12]
 8003adc:	f000 f926 	bl	8003d2c <I2C_ITSlaveSeqCplt>
 8003ae0:	e01c      	b.n	8003b1c <I2C_Slave_ISR_IT+0xea>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	2210      	movs	r2, #16
 8003ae8:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 8003aea:	e08f      	b.n	8003c0c <I2C_Slave_ISR_IT+0x1da>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	2210      	movs	r2, #16
 8003af2:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003af8:	f043 0204 	orr.w	r2, r3, #4
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8003b00:	697b      	ldr	r3, [r7, #20]
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d003      	beq.n	8003b0e <I2C_Slave_ISR_IT+0xdc>
 8003b06:	697b      	ldr	r3, [r7, #20]
 8003b08:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003b0c:	d17e      	bne.n	8003c0c <I2C_Slave_ISR_IT+0x1da>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003b12:	4619      	mov	r1, r3
 8003b14:	68f8      	ldr	r0, [r7, #12]
 8003b16:	f000 fb1d 	bl	8004154 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8003b1a:	e077      	b.n	8003c0c <I2C_Slave_ISR_IT+0x1da>
 8003b1c:	e076      	b.n	8003c0c <I2C_Slave_ISR_IT+0x1da>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8003b1e:	693b      	ldr	r3, [r7, #16]
 8003b20:	f003 0304 	and.w	r3, r3, #4
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d02f      	beq.n	8003b88 <I2C_Slave_ISR_IT+0x156>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	f003 0304 	and.w	r3, r3, #4
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d02a      	beq.n	8003b88 <I2C_Slave_ISR_IT+0x156>
  {
    if (hi2c->XferCount > 0U)
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003b36:	b29b      	uxth	r3, r3
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	d018      	beq.n	8003b6e <I2C_Slave_ISR_IT+0x13c>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b46:	b2d2      	uxtb	r2, r2
 8003b48:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b4e:	1c5a      	adds	r2, r3, #1
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003b58:	3b01      	subs	r3, #1
 8003b5a:	b29a      	uxth	r2, r3
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003b64:	b29b      	uxth	r3, r3
 8003b66:	3b01      	subs	r3, #1
 8003b68:	b29a      	uxth	r2, r3
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003b72:	b29b      	uxth	r3, r3
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	d14b      	bne.n	8003c10 <I2C_Slave_ISR_IT+0x1de>
 8003b78:	697b      	ldr	r3, [r7, #20]
 8003b7a:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8003b7e:	d047      	beq.n	8003c10 <I2C_Slave_ISR_IT+0x1de>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 8003b80:	68f8      	ldr	r0, [r7, #12]
 8003b82:	f000 f8d3 	bl	8003d2c <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 8003b86:	e043      	b.n	8003c10 <I2C_Slave_ISR_IT+0x1de>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8003b88:	693b      	ldr	r3, [r7, #16]
 8003b8a:	f003 0308 	and.w	r3, r3, #8
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d009      	beq.n	8003ba6 <I2C_Slave_ISR_IT+0x174>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	f003 0308 	and.w	r3, r3, #8
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	d004      	beq.n	8003ba6 <I2C_Slave_ISR_IT+0x174>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 8003b9c:	6939      	ldr	r1, [r7, #16]
 8003b9e:	68f8      	ldr	r0, [r7, #12]
 8003ba0:	f000 f840 	bl	8003c24 <I2C_ITAddrCplt>
 8003ba4:	e035      	b.n	8003c12 <I2C_Slave_ISR_IT+0x1e0>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8003ba6:	693b      	ldr	r3, [r7, #16]
 8003ba8:	f003 0302 	and.w	r3, r3, #2
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	d030      	beq.n	8003c12 <I2C_Slave_ISR_IT+0x1e0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	f003 0302 	and.w	r3, r3, #2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d02b      	beq.n	8003c12 <I2C_Slave_ISR_IT+0x1e0>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003bbe:	b29b      	uxth	r3, r3
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d018      	beq.n	8003bf6 <I2C_Slave_ISR_IT+0x1c4>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003bc8:	781a      	ldrb	r2, [r3, #0]
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003bd4:	1c5a      	adds	r2, r3, #1
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003bde:	b29b      	uxth	r3, r3
 8003be0:	3b01      	subs	r3, #1
 8003be2:	b29a      	uxth	r2, r3
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003bec:	3b01      	subs	r3, #1
 8003bee:	b29a      	uxth	r2, r3
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	851a      	strh	r2, [r3, #40]	@ 0x28
 8003bf4:	e00d      	b.n	8003c12 <I2C_Slave_ISR_IT+0x1e0>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 8003bf6:	697b      	ldr	r3, [r7, #20]
 8003bf8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003bfc:	d002      	beq.n	8003c04 <I2C_Slave_ISR_IT+0x1d2>
 8003bfe:	697b      	ldr	r3, [r7, #20]
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	d106      	bne.n	8003c12 <I2C_Slave_ISR_IT+0x1e0>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8003c04:	68f8      	ldr	r0, [r7, #12]
 8003c06:	f000 f891 	bl	8003d2c <I2C_ITSlaveSeqCplt>
 8003c0a:	e002      	b.n	8003c12 <I2C_Slave_ISR_IT+0x1e0>
    if (hi2c->XferCount == 0U)
 8003c0c:	bf00      	nop
 8003c0e:	e000      	b.n	8003c12 <I2C_Slave_ISR_IT+0x1e0>
    if ((hi2c->XferCount == 0U) && \
 8003c10:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	2200      	movs	r2, #0
 8003c16:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8003c1a:	2300      	movs	r3, #0
}
 8003c1c:	4618      	mov	r0, r3
 8003c1e:	3718      	adds	r7, #24
 8003c20:	46bd      	mov	sp, r7
 8003c22:	bd80      	pop	{r7, pc}

08003c24 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8003c24:	b580      	push	{r7, lr}
 8003c26:	b084      	sub	sp, #16
 8003c28:	af00      	add	r7, sp, #0
 8003c2a:	6078      	str	r0, [r7, #4]
 8003c2c:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003c34:	b2db      	uxtb	r3, r3
 8003c36:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8003c3a:	2b28      	cmp	r3, #40	@ 0x28
 8003c3c:	d16a      	bne.n	8003d14 <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	699b      	ldr	r3, [r3, #24]
 8003c44:	0c1b      	lsrs	r3, r3, #16
 8003c46:	b2db      	uxtb	r3, r3
 8003c48:	f003 0301 	and.w	r3, r3, #1
 8003c4c:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	699b      	ldr	r3, [r3, #24]
 8003c54:	0c1b      	lsrs	r3, r3, #16
 8003c56:	b29b      	uxth	r3, r3
 8003c58:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 8003c5c:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	689b      	ldr	r3, [r3, #8]
 8003c64:	b29b      	uxth	r3, r3
 8003c66:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003c6a:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	68db      	ldr	r3, [r3, #12]
 8003c72:	b29b      	uxth	r3, r3
 8003c74:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 8003c78:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	68db      	ldr	r3, [r3, #12]
 8003c7e:	2b02      	cmp	r3, #2
 8003c80:	d138      	bne.n	8003cf4 <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 8003c82:	897b      	ldrh	r3, [r7, #10]
 8003c84:	09db      	lsrs	r3, r3, #7
 8003c86:	b29a      	uxth	r2, r3
 8003c88:	89bb      	ldrh	r3, [r7, #12]
 8003c8a:	4053      	eors	r3, r2
 8003c8c:	b29b      	uxth	r3, r3
 8003c8e:	f003 0306 	and.w	r3, r3, #6
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	d11c      	bne.n	8003cd0 <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 8003c96:	897b      	ldrh	r3, [r7, #10]
 8003c98:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003c9e:	1c5a      	adds	r2, r3, #1
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	649a      	str	r2, [r3, #72]	@ 0x48
        if (hi2c->AddrEventCount == 2U)
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003ca8:	2b02      	cmp	r3, #2
 8003caa:	d13b      	bne.n	8003d24 <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	2200      	movs	r2, #0
 8003cb0:	649a      	str	r2, [r3, #72]	@ 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	2208      	movs	r2, #8
 8003cb8:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	2200      	movs	r2, #0
 8003cbe:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8003cc2:	89ba      	ldrh	r2, [r7, #12]
 8003cc4:	7bfb      	ldrb	r3, [r7, #15]
 8003cc6:	4619      	mov	r1, r3
 8003cc8:	6878      	ldr	r0, [r7, #4]
 8003cca:	f7ff fe86 	bl	80039da <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8003cce:	e029      	b.n	8003d24 <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 8003cd0:	893b      	ldrh	r3, [r7, #8]
 8003cd2:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8003cd4:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8003cd8:	6878      	ldr	r0, [r7, #4]
 8003cda:	f000 fb94 	bl	8004406 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	2200      	movs	r2, #0
 8003ce2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8003ce6:	89ba      	ldrh	r2, [r7, #12]
 8003ce8:	7bfb      	ldrb	r3, [r7, #15]
 8003cea:	4619      	mov	r1, r3
 8003cec:	6878      	ldr	r0, [r7, #4]
 8003cee:	f7ff fe74 	bl	80039da <HAL_I2C_AddrCallback>
}
 8003cf2:	e017      	b.n	8003d24 <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8003cf4:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8003cf8:	6878      	ldr	r0, [r7, #4]
 8003cfa:	f000 fb84 	bl	8004406 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	2200      	movs	r2, #0
 8003d02:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8003d06:	89ba      	ldrh	r2, [r7, #12]
 8003d08:	7bfb      	ldrb	r3, [r7, #15]
 8003d0a:	4619      	mov	r1, r3
 8003d0c:	6878      	ldr	r0, [r7, #4]
 8003d0e:	f7ff fe64 	bl	80039da <HAL_I2C_AddrCallback>
}
 8003d12:	e007      	b.n	8003d24 <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	2208      	movs	r2, #8
 8003d1a:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	2200      	movs	r2, #0
 8003d20:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
}
 8003d24:	bf00      	nop
 8003d26:	3710      	adds	r7, #16
 8003d28:	46bd      	mov	sp, r7
 8003d2a:	bd80      	pop	{r7, pc}

08003d2c <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8003d2c:	b580      	push	{r7, lr}
 8003d2e:	b084      	sub	sp, #16
 8003d30:	af00      	add	r7, sp, #0
 8003d32:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	2200      	movs	r2, #0
 8003d40:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d008      	beq.n	8003d60 <I2C_ITSlaveSeqCplt+0x34>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	681a      	ldr	r2, [r3, #0]
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8003d5c:	601a      	str	r2, [r3, #0]
 8003d5e:	e00c      	b.n	8003d7a <I2C_ITSlaveSeqCplt+0x4e>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d007      	beq.n	8003d7a <I2C_ITSlaveSeqCplt+0x4e>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	681a      	ldr	r2, [r3, #0]
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003d78:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003d80:	b2db      	uxtb	r3, r3
 8003d82:	2b29      	cmp	r3, #41	@ 0x29
 8003d84:	d112      	bne.n	8003dac <I2C_ITSlaveSeqCplt+0x80>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	2228      	movs	r2, #40	@ 0x28
 8003d8a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	2221      	movs	r2, #33	@ 0x21
 8003d92:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8003d94:	2101      	movs	r1, #1
 8003d96:	6878      	ldr	r0, [r7, #4]
 8003d98:	f000 fb35 	bl	8004406 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	2200      	movs	r2, #0
 8003da0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8003da4:	6878      	ldr	r0, [r7, #4]
 8003da6:	f7ff fe04 	bl	80039b2 <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8003daa:	e017      	b.n	8003ddc <I2C_ITSlaveSeqCplt+0xb0>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003db2:	b2db      	uxtb	r3, r3
 8003db4:	2b2a      	cmp	r3, #42	@ 0x2a
 8003db6:	d111      	bne.n	8003ddc <I2C_ITSlaveSeqCplt+0xb0>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	2228      	movs	r2, #40	@ 0x28
 8003dbc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	2222      	movs	r2, #34	@ 0x22
 8003dc4:	631a      	str	r2, [r3, #48]	@ 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8003dc6:	2102      	movs	r1, #2
 8003dc8:	6878      	ldr	r0, [r7, #4]
 8003dca:	f000 fb1c 	bl	8004406 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	2200      	movs	r2, #0
 8003dd2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8003dd6:	6878      	ldr	r0, [r7, #4]
 8003dd8:	f7ff fdf5 	bl	80039c6 <HAL_I2C_SlaveRxCpltCallback>
}
 8003ddc:	bf00      	nop
 8003dde:	3710      	adds	r7, #16
 8003de0:	46bd      	mov	sp, r7
 8003de2:	bd80      	pop	{r7, pc}

08003de4 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8003de4:	b580      	push	{r7, lr}
 8003de6:	b086      	sub	sp, #24
 8003de8:	af00      	add	r7, sp, #0
 8003dea:	6078      	str	r0, [r7, #4]
 8003dec:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 8003df6:	683b      	ldr	r3, [r7, #0]
 8003df8:	617b      	str	r3, [r7, #20]
  uint32_t tmpoptions = hi2c->XferOptions;
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003dfe:	60fb      	str	r3, [r7, #12]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003e06:	72fb      	strb	r3, [r7, #11]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	2220      	movs	r2, #32
 8003e0e:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8003e10:	7afb      	ldrb	r3, [r7, #11]
 8003e12:	2b21      	cmp	r3, #33	@ 0x21
 8003e14:	d002      	beq.n	8003e1c <I2C_ITSlaveCplt+0x38>
 8003e16:	7afb      	ldrb	r3, [r7, #11]
 8003e18:	2b29      	cmp	r3, #41	@ 0x29
 8003e1a:	d108      	bne.n	8003e2e <I2C_ITSlaveCplt+0x4a>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 8003e1c:	f248 0101 	movw	r1, #32769	@ 0x8001
 8003e20:	6878      	ldr	r0, [r7, #4]
 8003e22:	f000 faf0 	bl	8004406 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	2221      	movs	r2, #33	@ 0x21
 8003e2a:	631a      	str	r2, [r3, #48]	@ 0x30
 8003e2c:	e019      	b.n	8003e62 <I2C_ITSlaveCplt+0x7e>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8003e2e:	7afb      	ldrb	r3, [r7, #11]
 8003e30:	2b22      	cmp	r3, #34	@ 0x22
 8003e32:	d002      	beq.n	8003e3a <I2C_ITSlaveCplt+0x56>
 8003e34:	7afb      	ldrb	r3, [r7, #11]
 8003e36:	2b2a      	cmp	r3, #42	@ 0x2a
 8003e38:	d108      	bne.n	8003e4c <I2C_ITSlaveCplt+0x68>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 8003e3a:	f248 0102 	movw	r1, #32770	@ 0x8002
 8003e3e:	6878      	ldr	r0, [r7, #4]
 8003e40:	f000 fae1 	bl	8004406 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	2222      	movs	r2, #34	@ 0x22
 8003e48:	631a      	str	r2, [r3, #48]	@ 0x30
 8003e4a:	e00a      	b.n	8003e62 <I2C_ITSlaveCplt+0x7e>
  }
  else if (tmpstate == HAL_I2C_STATE_LISTEN)
 8003e4c:	7afb      	ldrb	r3, [r7, #11]
 8003e4e:	2b28      	cmp	r3, #40	@ 0x28
 8003e50:	d107      	bne.n	8003e62 <I2C_ITSlaveCplt+0x7e>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT | I2C_XFER_RX_IT);
 8003e52:	f248 0103 	movw	r1, #32771	@ 0x8003
 8003e56:	6878      	ldr	r0, [r7, #4]
 8003e58:	f000 fad5 	bl	8004406 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_NONE;
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	2200      	movs	r2, #0
 8003e60:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	685a      	ldr	r2, [r3, #4]
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003e70:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	6859      	ldr	r1, [r3, #4]
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	681a      	ldr	r2, [r3, #0]
 8003e7c:	4b89      	ldr	r3, [pc, #548]	@ (80040a4 <I2C_ITSlaveCplt+0x2c0>)
 8003e7e:	400b      	ands	r3, r1
 8003e80:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8003e82:	6878      	ldr	r0, [r7, #4]
 8003e84:	f000 fa7d 	bl	8004382 <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8003e88:	693b      	ldr	r3, [r7, #16]
 8003e8a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d013      	beq.n	8003eba <I2C_ITSlaveCplt+0xd6>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	681a      	ldr	r2, [r3, #0]
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8003ea0:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d01f      	beq.n	8003eea <I2C_ITSlaveCplt+0x106>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	685b      	ldr	r3, [r3, #4]
 8003eb2:	b29a      	uxth	r2, r3
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003eb8:	e017      	b.n	8003eea <I2C_ITSlaveCplt+0x106>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8003eba:	693b      	ldr	r3, [r7, #16]
 8003ebc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	d012      	beq.n	8003eea <I2C_ITSlaveCplt+0x106>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	681a      	ldr	r2, [r3, #0]
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003ed2:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	d006      	beq.n	8003eea <I2C_ITSlaveCplt+0x106>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	685b      	ldr	r3, [r3, #4]
 8003ee4:	b29a      	uxth	r2, r3
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	855a      	strh	r2, [r3, #42]	@ 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 8003eea:	697b      	ldr	r3, [r7, #20]
 8003eec:	f003 0304 	and.w	r3, r3, #4
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	d020      	beq.n	8003f36 <I2C_ITSlaveCplt+0x152>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8003ef4:	697b      	ldr	r3, [r7, #20]
 8003ef6:	f023 0304 	bic.w	r3, r3, #4
 8003efa:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f06:	b2d2      	uxtb	r2, r2
 8003f08:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f0e:	1c5a      	adds	r2, r3, #1
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d00c      	beq.n	8003f36 <I2C_ITSlaveCplt+0x152>
    {
      hi2c->XferSize--;
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003f20:	3b01      	subs	r3, #1
 8003f22:	b29a      	uxth	r2, r3
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003f2c:	b29b      	uxth	r3, r3
 8003f2e:	3b01      	subs	r3, #1
 8003f30:	b29a      	uxth	r2, r3
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003f3a:	b29b      	uxth	r3, r3
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	d005      	beq.n	8003f4c <I2C_ITSlaveCplt+0x168>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003f44:	f043 0204 	orr.w	r2, r3, #4
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8003f4c:	697b      	ldr	r3, [r7, #20]
 8003f4e:	f003 0310 	and.w	r3, r3, #16
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d049      	beq.n	8003fea <I2C_ITSlaveCplt+0x206>
      (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_IT_NACKI) != RESET))
 8003f56:	693b      	ldr	r3, [r7, #16]
 8003f58:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	d044      	beq.n	8003fea <I2C_ITSlaveCplt+0x206>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003f64:	b29b      	uxth	r3, r3
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d128      	bne.n	8003fbc <I2C_ITSlaveCplt+0x1d8>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003f70:	b2db      	uxtb	r3, r3
 8003f72:	2b28      	cmp	r3, #40	@ 0x28
 8003f74:	d108      	bne.n	8003f88 <I2C_ITSlaveCplt+0x1a4>
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003f7c:	d104      	bne.n	8003f88 <I2C_ITSlaveCplt+0x1a4>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8003f7e:	6979      	ldr	r1, [r7, #20]
 8003f80:	6878      	ldr	r0, [r7, #4]
 8003f82:	f000 f893 	bl	80040ac <I2C_ITListenCplt>
 8003f86:	e030      	b.n	8003fea <I2C_ITSlaveCplt+0x206>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003f8e:	b2db      	uxtb	r3, r3
 8003f90:	2b29      	cmp	r3, #41	@ 0x29
 8003f92:	d10e      	bne.n	8003fb2 <I2C_ITSlaveCplt+0x1ce>
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8003f9a:	d00a      	beq.n	8003fb2 <I2C_ITSlaveCplt+0x1ce>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	2210      	movs	r2, #16
 8003fa2:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8003fa4:	6878      	ldr	r0, [r7, #4]
 8003fa6:	f000 f9ec 	bl	8004382 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8003faa:	6878      	ldr	r0, [r7, #4]
 8003fac:	f7ff febe 	bl	8003d2c <I2C_ITSlaveSeqCplt>
 8003fb0:	e01b      	b.n	8003fea <I2C_ITSlaveCplt+0x206>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	2210      	movs	r2, #16
 8003fb8:	61da      	str	r2, [r3, #28]
 8003fba:	e016      	b.n	8003fea <I2C_ITSlaveCplt+0x206>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	2210      	movs	r2, #16
 8003fc2:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003fc8:	f043 0204 	orr.w	r2, r3, #4
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d003      	beq.n	8003fde <I2C_ITSlaveCplt+0x1fa>
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003fdc:	d105      	bne.n	8003fea <I2C_ITSlaveCplt+0x206>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003fe2:	4619      	mov	r1, r3
 8003fe4:	6878      	ldr	r0, [r7, #4]
 8003fe6:	f000 f8b5 	bl	8004154 <I2C_ITError>
      }
    }
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	2200      	movs	r2, #0
 8003fee:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferISR = NULL;
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	2200      	movs	r2, #0
 8003ff6:	635a      	str	r2, [r3, #52]	@ 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	d010      	beq.n	8004022 <I2C_ITSlaveCplt+0x23e>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004004:	4619      	mov	r1, r3
 8004006:	6878      	ldr	r0, [r7, #4]
 8004008:	f000 f8a4 	bl	8004154 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004012:	b2db      	uxtb	r3, r3
 8004014:	2b28      	cmp	r3, #40	@ 0x28
 8004016:	d141      	bne.n	800409c <I2C_ITSlaveCplt+0x2b8>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 8004018:	6979      	ldr	r1, [r7, #20]
 800401a:	6878      	ldr	r0, [r7, #4]
 800401c:	f000 f846 	bl	80040ac <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8004020:	e03c      	b.n	800409c <I2C_ITSlaveCplt+0x2b8>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004026:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800402a:	d014      	beq.n	8004056 <I2C_ITSlaveCplt+0x272>
    I2C_ITSlaveSeqCplt(hi2c);
 800402c:	6878      	ldr	r0, [r7, #4]
 800402e:	f7ff fe7d 	bl	8003d2c <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	4a1c      	ldr	r2, [pc, #112]	@ (80040a8 <I2C_ITSlaveCplt+0x2c4>)
 8004036:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	2220      	movs	r2, #32
 800403c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	2200      	movs	r2, #0
 8004044:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	2200      	movs	r2, #0
 800404a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 800404e:	6878      	ldr	r0, [r7, #4]
 8004050:	f7ff fcd1 	bl	80039f6 <HAL_I2C_ListenCpltCallback>
}
 8004054:	e022      	b.n	800409c <I2C_ITSlaveCplt+0x2b8>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800405c:	b2db      	uxtb	r3, r3
 800405e:	2b22      	cmp	r3, #34	@ 0x22
 8004060:	d10e      	bne.n	8004080 <I2C_ITSlaveCplt+0x29c>
    hi2c->State = HAL_I2C_STATE_READY;
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	2220      	movs	r2, #32
 8004066:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	2200      	movs	r2, #0
 800406e:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	2200      	movs	r2, #0
 8004074:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004078:	6878      	ldr	r0, [r7, #4]
 800407a:	f7ff fca4 	bl	80039c6 <HAL_I2C_SlaveRxCpltCallback>
}
 800407e:	e00d      	b.n	800409c <I2C_ITSlaveCplt+0x2b8>
    hi2c->State = HAL_I2C_STATE_READY;
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	2220      	movs	r2, #32
 8004084:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	2200      	movs	r2, #0
 800408c:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	2200      	movs	r2, #0
 8004092:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8004096:	6878      	ldr	r0, [r7, #4]
 8004098:	f7ff fc8b 	bl	80039b2 <HAL_I2C_SlaveTxCpltCallback>
}
 800409c:	bf00      	nop
 800409e:	3718      	adds	r7, #24
 80040a0:	46bd      	mov	sp, r7
 80040a2:	bd80      	pop	{r7, pc}
 80040a4:	fe00e800 	.word	0xfe00e800
 80040a8:	ffff0000 	.word	0xffff0000

080040ac <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80040ac:	b580      	push	{r7, lr}
 80040ae:	b082      	sub	sp, #8
 80040b0:	af00      	add	r7, sp, #0
 80040b2:	6078      	str	r0, [r7, #4]
 80040b4:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	4a25      	ldr	r2, [pc, #148]	@ (8004150 <I2C_ITListenCplt+0xa4>)
 80040ba:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	2200      	movs	r2, #0
 80040c0:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	2220      	movs	r2, #32
 80040c6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	2200      	movs	r2, #0
 80040ce:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferISR = NULL;
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	2200      	movs	r2, #0
 80040d6:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 80040d8:	683b      	ldr	r3, [r7, #0]
 80040da:	f003 0304 	and.w	r3, r3, #4
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d022      	beq.n	8004128 <I2C_ITListenCplt+0x7c>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040ec:	b2d2      	uxtb	r2, r2
 80040ee:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040f4:	1c5a      	adds	r2, r3, #1
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80040fe:	2b00      	cmp	r3, #0
 8004100:	d012      	beq.n	8004128 <I2C_ITListenCplt+0x7c>
    {
      hi2c->XferSize--;
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004106:	3b01      	subs	r3, #1
 8004108:	b29a      	uxth	r2, r3
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004112:	b29b      	uxth	r3, r3
 8004114:	3b01      	subs	r3, #1
 8004116:	b29a      	uxth	r2, r3
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004120:	f043 0204 	orr.w	r2, r3, #4
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	645a      	str	r2, [r3, #68]	@ 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8004128:	f248 0103 	movw	r1, #32771	@ 0x8003
 800412c:	6878      	ldr	r0, [r7, #4]
 800412e:	f000 f96a 	bl	8004406 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	2210      	movs	r2, #16
 8004138:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	2200      	movs	r2, #0
 800413e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 8004142:	6878      	ldr	r0, [r7, #4]
 8004144:	f7ff fc57 	bl	80039f6 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 8004148:	bf00      	nop
 800414a:	3708      	adds	r7, #8
 800414c:	46bd      	mov	sp, r7
 800414e:	bd80      	pop	{r7, pc}
 8004150:	ffff0000 	.word	0xffff0000

08004154 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 8004154:	b580      	push	{r7, lr}
 8004156:	b084      	sub	sp, #16
 8004158:	af00      	add	r7, sp, #0
 800415a:	6078      	str	r0, [r7, #4]
 800415c:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004164:	73fb      	strb	r3, [r7, #15]

  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	2200      	movs	r2, #0
 800416a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	4a6d      	ldr	r2, [pc, #436]	@ (8004328 <I2C_ITError+0x1d4>)
 8004172:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->XferCount     = 0U;
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	2200      	movs	r2, #0
 8004178:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800417e:	683b      	ldr	r3, [r7, #0]
 8004180:	431a      	orrs	r2, r3
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 8004186:	7bfb      	ldrb	r3, [r7, #15]
 8004188:	2b28      	cmp	r3, #40	@ 0x28
 800418a:	d005      	beq.n	8004198 <I2C_ITError+0x44>
 800418c:	7bfb      	ldrb	r3, [r7, #15]
 800418e:	2b29      	cmp	r3, #41	@ 0x29
 8004190:	d002      	beq.n	8004198 <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 8004192:	7bfb      	ldrb	r3, [r7, #15]
 8004194:	2b2a      	cmp	r3, #42	@ 0x2a
 8004196:	d10b      	bne.n	80041b0 <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8004198:	2103      	movs	r1, #3
 800419a:	6878      	ldr	r0, [r7, #4]
 800419c:	f000 f933 	bl	8004406 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	2228      	movs	r2, #40	@ 0x28
 80041a4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	4a60      	ldr	r2, [pc, #384]	@ (800432c <I2C_ITError+0x1d8>)
 80041ac:	635a      	str	r2, [r3, #52]	@ 0x34
 80041ae:	e030      	b.n	8004212 <I2C_ITError+0xbe>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80041b0:	f248 0103 	movw	r1, #32771	@ 0x8003
 80041b4:	6878      	ldr	r0, [r7, #4]
 80041b6:	f000 f926 	bl	8004406 <I2C_Disable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80041ba:	6878      	ldr	r0, [r7, #4]
 80041bc:	f000 f8e1 	bl	8004382 <I2C_Flush_TXDR>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80041c6:	b2db      	uxtb	r3, r3
 80041c8:	2b60      	cmp	r3, #96	@ 0x60
 80041ca:	d01f      	beq.n	800420c <I2C_ITError+0xb8>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	2220      	movs	r2, #32
 80041d0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Check if a STOPF is detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	699b      	ldr	r3, [r3, #24]
 80041da:	f003 0320 	and.w	r3, r3, #32
 80041de:	2b20      	cmp	r3, #32
 80041e0:	d114      	bne.n	800420c <I2C_ITError+0xb8>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	699b      	ldr	r3, [r3, #24]
 80041e8:	f003 0310 	and.w	r3, r3, #16
 80041ec:	2b10      	cmp	r3, #16
 80041ee:	d109      	bne.n	8004204 <I2C_ITError+0xb0>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	2210      	movs	r2, #16
 80041f6:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80041fc:	f043 0204 	orr.w	r2, r3, #4
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	645a      	str	r2, [r3, #68]	@ 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	2220      	movs	r2, #32
 800420a:	61da      	str	r2, [r3, #28]
      }

    }
    hi2c->XferISR       = NULL;
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	2200      	movs	r2, #0
 8004210:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004216:	60bb      	str	r3, [r7, #8]

  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800421c:	2b00      	cmp	r3, #0
 800421e:	d039      	beq.n	8004294 <I2C_ITError+0x140>
 8004220:	68bb      	ldr	r3, [r7, #8]
 8004222:	2b11      	cmp	r3, #17
 8004224:	d002      	beq.n	800422c <I2C_ITError+0xd8>
 8004226:	68bb      	ldr	r3, [r7, #8]
 8004228:	2b21      	cmp	r3, #33	@ 0x21
 800422a:	d133      	bne.n	8004294 <I2C_ITError+0x140>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004236:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800423a:	d107      	bne.n	800424c <I2C_ITError+0xf8>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	681a      	ldr	r2, [r3, #0]
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800424a:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004250:	4618      	mov	r0, r3
 8004252:	f7fe fe82 	bl	8002f5a <HAL_DMA_GetState>
 8004256:	4603      	mov	r3, r0
 8004258:	2b01      	cmp	r3, #1
 800425a:	d017      	beq.n	800428c <I2C_ITError+0x138>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004260:	4a33      	ldr	r2, [pc, #204]	@ (8004330 <I2C_ITError+0x1dc>)
 8004262:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	2200      	movs	r2, #0
 8004268:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004270:	4618      	mov	r0, r3
 8004272:	f7fe fd5c 	bl	8002d2e <HAL_DMA_Abort_IT>
 8004276:	4603      	mov	r3, r0
 8004278:	2b00      	cmp	r3, #0
 800427a:	d04d      	beq.n	8004318 <I2C_ITError+0x1c4>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004280:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004282:	687a      	ldr	r2, [r7, #4]
 8004284:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8004286:	4610      	mov	r0, r2
 8004288:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800428a:	e045      	b.n	8004318 <I2C_ITError+0x1c4>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 800428c:	6878      	ldr	r0, [r7, #4]
 800428e:	f000 f851 	bl	8004334 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8004292:	e041      	b.n	8004318 <I2C_ITError+0x1c4>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004298:	2b00      	cmp	r3, #0
 800429a:	d039      	beq.n	8004310 <I2C_ITError+0x1bc>
 800429c:	68bb      	ldr	r3, [r7, #8]
 800429e:	2b12      	cmp	r3, #18
 80042a0:	d002      	beq.n	80042a8 <I2C_ITError+0x154>
 80042a2:	68bb      	ldr	r3, [r7, #8]
 80042a4:	2b22      	cmp	r3, #34	@ 0x22
 80042a6:	d133      	bne.n	8004310 <I2C_ITError+0x1bc>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80042b2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80042b6:	d107      	bne.n	80042c8 <I2C_ITError+0x174>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	681a      	ldr	r2, [r3, #0]
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80042c6:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80042cc:	4618      	mov	r0, r3
 80042ce:	f7fe fe44 	bl	8002f5a <HAL_DMA_GetState>
 80042d2:	4603      	mov	r3, r0
 80042d4:	2b01      	cmp	r3, #1
 80042d6:	d017      	beq.n	8004308 <I2C_ITError+0x1b4>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80042dc:	4a14      	ldr	r2, [pc, #80]	@ (8004330 <I2C_ITError+0x1dc>)
 80042de:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	2200      	movs	r2, #0
 80042e4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80042ec:	4618      	mov	r0, r3
 80042ee:	f7fe fd1e 	bl	8002d2e <HAL_DMA_Abort_IT>
 80042f2:	4603      	mov	r3, r0
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	d011      	beq.n	800431c <I2C_ITError+0x1c8>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80042fc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80042fe:	687a      	ldr	r2, [r7, #4]
 8004300:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8004302:	4610      	mov	r0, r2
 8004304:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004306:	e009      	b.n	800431c <I2C_ITError+0x1c8>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8004308:	6878      	ldr	r0, [r7, #4]
 800430a:	f000 f813 	bl	8004334 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800430e:	e005      	b.n	800431c <I2C_ITError+0x1c8>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 8004310:	6878      	ldr	r0, [r7, #4]
 8004312:	f000 f80f 	bl	8004334 <I2C_TreatErrorCallback>
  }
}
 8004316:	e002      	b.n	800431e <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8004318:	bf00      	nop
 800431a:	e000      	b.n	800431e <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800431c:	bf00      	nop
}
 800431e:	bf00      	nop
 8004320:	3710      	adds	r7, #16
 8004322:	46bd      	mov	sp, r7
 8004324:	bd80      	pop	{r7, pc}
 8004326:	bf00      	nop
 8004328:	ffff0000 	.word	0xffff0000
 800432c:	08003a33 	.word	0x08003a33
 8004330:	080043cb 	.word	0x080043cb

08004334 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8004334:	b580      	push	{r7, lr}
 8004336:	b082      	sub	sp, #8
 8004338:	af00      	add	r7, sp, #0
 800433a:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004342:	b2db      	uxtb	r3, r3
 8004344:	2b60      	cmp	r3, #96	@ 0x60
 8004346:	d10e      	bne.n	8004366 <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	2220      	movs	r2, #32
 800434c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	2200      	movs	r2, #0
 8004354:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	2200      	movs	r2, #0
 800435a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800435e:	6878      	ldr	r0, [r7, #4]
 8004360:	f7ff fb5d 	bl	8003a1e <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8004364:	e009      	b.n	800437a <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	2200      	movs	r2, #0
 800436a:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	2200      	movs	r2, #0
 8004370:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_ErrorCallback(hi2c);
 8004374:	6878      	ldr	r0, [r7, #4]
 8004376:	f7ff fb48 	bl	8003a0a <HAL_I2C_ErrorCallback>
}
 800437a:	bf00      	nop
 800437c:	3708      	adds	r7, #8
 800437e:	46bd      	mov	sp, r7
 8004380:	bd80      	pop	{r7, pc}

08004382 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8004382:	b480      	push	{r7}
 8004384:	b083      	sub	sp, #12
 8004386:	af00      	add	r7, sp, #0
 8004388:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	699b      	ldr	r3, [r3, #24]
 8004390:	f003 0302 	and.w	r3, r3, #2
 8004394:	2b02      	cmp	r3, #2
 8004396:	d103      	bne.n	80043a0 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	2200      	movs	r2, #0
 800439e:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	699b      	ldr	r3, [r3, #24]
 80043a6:	f003 0301 	and.w	r3, r3, #1
 80043aa:	2b01      	cmp	r3, #1
 80043ac:	d007      	beq.n	80043be <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	699a      	ldr	r2, [r3, #24]
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	f042 0201 	orr.w	r2, r2, #1
 80043bc:	619a      	str	r2, [r3, #24]
  }
}
 80043be:	bf00      	nop
 80043c0:	370c      	adds	r7, #12
 80043c2:	46bd      	mov	sp, r7
 80043c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043c8:	4770      	bx	lr

080043ca <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 80043ca:	b580      	push	{r7, lr}
 80043cc:	b084      	sub	sp, #16
 80043ce:	af00      	add	r7, sp, #0
 80043d0:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80043d6:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80043dc:	2b00      	cmp	r3, #0
 80043de:	d003      	beq.n	80043e8 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80043e4:	2200      	movs	r2, #0
 80043e6:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  if (hi2c->hdmarx != NULL)
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	d003      	beq.n	80043f8 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80043f4:	2200      	movs	r2, #0
 80043f6:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  I2C_TreatErrorCallback(hi2c);
 80043f8:	68f8      	ldr	r0, [r7, #12]
 80043fa:	f7ff ff9b 	bl	8004334 <I2C_TreatErrorCallback>
}
 80043fe:	bf00      	nop
 8004400:	3710      	adds	r7, #16
 8004402:	46bd      	mov	sp, r7
 8004404:	bd80      	pop	{r7, pc}

08004406 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8004406:	b480      	push	{r7}
 8004408:	b085      	sub	sp, #20
 800440a:	af00      	add	r7, sp, #0
 800440c:	6078      	str	r0, [r7, #4]
 800440e:	460b      	mov	r3, r1
 8004410:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8004412:	2300      	movs	r3, #0
 8004414:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8004416:	887b      	ldrh	r3, [r7, #2]
 8004418:	f003 0301 	and.w	r3, r3, #1
 800441c:	2b00      	cmp	r3, #0
 800441e:	d00f      	beq.n	8004440 <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	f043 0342 	orr.w	r3, r3, #66	@ 0x42
 8004426:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800442e:	b2db      	uxtb	r3, r3
 8004430:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8004434:	2b28      	cmp	r3, #40	@ 0x28
 8004436:	d003      	beq.n	8004440 <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 800443e:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8004440:	887b      	ldrh	r3, [r7, #2]
 8004442:	f003 0302 	and.w	r3, r3, #2
 8004446:	2b00      	cmp	r3, #0
 8004448:	d00f      	beq.n	800446a <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	f043 0344 	orr.w	r3, r3, #68	@ 0x44
 8004450:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004458:	b2db      	uxtb	r3, r3
 800445a:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 800445e:	2b28      	cmp	r3, #40	@ 0x28
 8004460:	d003      	beq.n	800446a <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 8004468:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 800446a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800446e:	2b00      	cmp	r3, #0
 8004470:	da03      	bge.n	800447a <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	f043 03b8 	orr.w	r3, r3, #184	@ 0xb8
 8004478:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 800447a:	887b      	ldrh	r3, [r7, #2]
 800447c:	2b10      	cmp	r3, #16
 800447e:	d103      	bne.n	8004488 <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	f043 0390 	orr.w	r3, r3, #144	@ 0x90
 8004486:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 8004488:	887b      	ldrh	r3, [r7, #2]
 800448a:	2b20      	cmp	r3, #32
 800448c:	d103      	bne.n	8004496 <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	f043 0320 	orr.w	r3, r3, #32
 8004494:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8004496:	887b      	ldrh	r3, [r7, #2]
 8004498:	2b40      	cmp	r3, #64	@ 0x40
 800449a:	d103      	bne.n	80044a4 <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80044a2:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	6819      	ldr	r1, [r3, #0]
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	43da      	mvns	r2, r3
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	400a      	ands	r2, r1
 80044b4:	601a      	str	r2, [r3, #0]
}
 80044b6:	bf00      	nop
 80044b8:	3714      	adds	r7, #20
 80044ba:	46bd      	mov	sp, r7
 80044bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044c0:	4770      	bx	lr

080044c2 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80044c2:	b480      	push	{r7}
 80044c4:	b083      	sub	sp, #12
 80044c6:	af00      	add	r7, sp, #0
 80044c8:	6078      	str	r0, [r7, #4]
 80044ca:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80044d2:	b2db      	uxtb	r3, r3
 80044d4:	2b20      	cmp	r3, #32
 80044d6:	d138      	bne.n	800454a <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80044de:	2b01      	cmp	r3, #1
 80044e0:	d101      	bne.n	80044e6 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80044e2:	2302      	movs	r3, #2
 80044e4:	e032      	b.n	800454c <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	2201      	movs	r2, #1
 80044ea:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	2224      	movs	r2, #36	@ 0x24
 80044f2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	681a      	ldr	r2, [r3, #0]
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	f022 0201 	bic.w	r2, r2, #1
 8004504:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	681a      	ldr	r2, [r3, #0]
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8004514:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	6819      	ldr	r1, [r3, #0]
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	683a      	ldr	r2, [r7, #0]
 8004522:	430a      	orrs	r2, r1
 8004524:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	681a      	ldr	r2, [r3, #0]
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	f042 0201 	orr.w	r2, r2, #1
 8004534:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	2220      	movs	r2, #32
 800453a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	2200      	movs	r2, #0
 8004542:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8004546:	2300      	movs	r3, #0
 8004548:	e000      	b.n	800454c <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800454a:	2302      	movs	r3, #2
  }
}
 800454c:	4618      	mov	r0, r3
 800454e:	370c      	adds	r7, #12
 8004550:	46bd      	mov	sp, r7
 8004552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004556:	4770      	bx	lr

08004558 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8004558:	b480      	push	{r7}
 800455a:	b085      	sub	sp, #20
 800455c:	af00      	add	r7, sp, #0
 800455e:	6078      	str	r0, [r7, #4]
 8004560:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004568:	b2db      	uxtb	r3, r3
 800456a:	2b20      	cmp	r3, #32
 800456c:	d139      	bne.n	80045e2 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004574:	2b01      	cmp	r3, #1
 8004576:	d101      	bne.n	800457c <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8004578:	2302      	movs	r3, #2
 800457a:	e033      	b.n	80045e4 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	2201      	movs	r2, #1
 8004580:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	2224      	movs	r2, #36	@ 0x24
 8004588:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	681a      	ldr	r2, [r3, #0]
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	f022 0201 	bic.w	r2, r2, #1
 800459a:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80045aa:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80045ac:	683b      	ldr	r3, [r7, #0]
 80045ae:	021b      	lsls	r3, r3, #8
 80045b0:	68fa      	ldr	r2, [r7, #12]
 80045b2:	4313      	orrs	r3, r2
 80045b4:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	68fa      	ldr	r2, [r7, #12]
 80045bc:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	681a      	ldr	r2, [r3, #0]
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	f042 0201 	orr.w	r2, r2, #1
 80045cc:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	2220      	movs	r2, #32
 80045d2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	2200      	movs	r2, #0
 80045da:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80045de:	2300      	movs	r3, #0
 80045e0:	e000      	b.n	80045e4 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80045e2:	2302      	movs	r3, #2
  }
}
 80045e4:	4618      	mov	r0, r3
 80045e6:	3714      	adds	r7, #20
 80045e8:	46bd      	mov	sp, r7
 80045ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ee:	4770      	bx	lr

080045f0 <HAL_PWR_PVDCallback>:
/**
  * @brief PWR PVD interrupt callback
  * @retval None
  */
__weak void HAL_PWR_PVDCallback(void)
{
 80045f0:	b480      	push	{r7}
 80045f2:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_PWR_PVDCallback can be implemented in the user file
   */
}
 80045f4:	bf00      	nop
 80045f6:	46bd      	mov	sp, r7
 80045f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045fc:	4770      	bx	lr
	...

08004600 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8004600:	b480      	push	{r7}
 8004602:	b085      	sub	sp, #20
 8004604:	af00      	add	r7, sp, #0
 8004606:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	2b00      	cmp	r3, #0
 800460c:	d141      	bne.n	8004692 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800460e:	4b4b      	ldr	r3, [pc, #300]	@ (800473c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8004616:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800461a:	d131      	bne.n	8004680 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800461c:	4b47      	ldr	r3, [pc, #284]	@ (800473c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800461e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004622:	4a46      	ldr	r2, [pc, #280]	@ (800473c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004624:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004628:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800462c:	4b43      	ldr	r3, [pc, #268]	@ (800473c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8004634:	4a41      	ldr	r2, [pc, #260]	@ (800473c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004636:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800463a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800463c:	4b40      	ldr	r3, [pc, #256]	@ (8004740 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	2232      	movs	r2, #50	@ 0x32
 8004642:	fb02 f303 	mul.w	r3, r2, r3
 8004646:	4a3f      	ldr	r2, [pc, #252]	@ (8004744 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8004648:	fba2 2303 	umull	r2, r3, r2, r3
 800464c:	0c9b      	lsrs	r3, r3, #18
 800464e:	3301      	adds	r3, #1
 8004650:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004652:	e002      	b.n	800465a <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	3b01      	subs	r3, #1
 8004658:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800465a:	4b38      	ldr	r3, [pc, #224]	@ (800473c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800465c:	695b      	ldr	r3, [r3, #20]
 800465e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004662:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004666:	d102      	bne.n	800466e <HAL_PWREx_ControlVoltageScaling+0x6e>
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	2b00      	cmp	r3, #0
 800466c:	d1f2      	bne.n	8004654 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800466e:	4b33      	ldr	r3, [pc, #204]	@ (800473c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004670:	695b      	ldr	r3, [r3, #20]
 8004672:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004676:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800467a:	d158      	bne.n	800472e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800467c:	2303      	movs	r3, #3
 800467e:	e057      	b.n	8004730 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004680:	4b2e      	ldr	r3, [pc, #184]	@ (800473c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004682:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004686:	4a2d      	ldr	r2, [pc, #180]	@ (800473c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004688:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800468c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8004690:	e04d      	b.n	800472e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004698:	d141      	bne.n	800471e <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800469a:	4b28      	ldr	r3, [pc, #160]	@ (800473c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80046a2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80046a6:	d131      	bne.n	800470c <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80046a8:	4b24      	ldr	r3, [pc, #144]	@ (800473c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80046aa:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80046ae:	4a23      	ldr	r2, [pc, #140]	@ (800473c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80046b0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80046b4:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80046b8:	4b20      	ldr	r3, [pc, #128]	@ (800473c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80046c0:	4a1e      	ldr	r2, [pc, #120]	@ (800473c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80046c2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80046c6:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80046c8:	4b1d      	ldr	r3, [pc, #116]	@ (8004740 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	2232      	movs	r2, #50	@ 0x32
 80046ce:	fb02 f303 	mul.w	r3, r2, r3
 80046d2:	4a1c      	ldr	r2, [pc, #112]	@ (8004744 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80046d4:	fba2 2303 	umull	r2, r3, r2, r3
 80046d8:	0c9b      	lsrs	r3, r3, #18
 80046da:	3301      	adds	r3, #1
 80046dc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80046de:	e002      	b.n	80046e6 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	3b01      	subs	r3, #1
 80046e4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80046e6:	4b15      	ldr	r3, [pc, #84]	@ (800473c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80046e8:	695b      	ldr	r3, [r3, #20]
 80046ea:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80046ee:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80046f2:	d102      	bne.n	80046fa <HAL_PWREx_ControlVoltageScaling+0xfa>
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	d1f2      	bne.n	80046e0 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80046fa:	4b10      	ldr	r3, [pc, #64]	@ (800473c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80046fc:	695b      	ldr	r3, [r3, #20]
 80046fe:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004702:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004706:	d112      	bne.n	800472e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8004708:	2303      	movs	r3, #3
 800470a:	e011      	b.n	8004730 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800470c:	4b0b      	ldr	r3, [pc, #44]	@ (800473c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800470e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004712:	4a0a      	ldr	r2, [pc, #40]	@ (800473c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004714:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004718:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 800471c:	e007      	b.n	800472e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800471e:	4b07      	ldr	r3, [pc, #28]	@ (800473c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8004726:	4a05      	ldr	r2, [pc, #20]	@ (800473c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004728:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800472c:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 800472e:	2300      	movs	r3, #0
}
 8004730:	4618      	mov	r0, r3
 8004732:	3714      	adds	r7, #20
 8004734:	46bd      	mov	sp, r7
 8004736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800473a:	4770      	bx	lr
 800473c:	40007000 	.word	0x40007000
 8004740:	20000000 	.word	0x20000000
 8004744:	431bde83 	.word	0x431bde83

08004748 <HAL_PWREx_PVD_PVM_IRQHandler>:
  * @brief This function handles the PWR PVD/PVMx interrupt request.
  * @note This API should be called under the PVD_PVM_IRQHandler().
  * @retval None
  */
void HAL_PWREx_PVD_PVM_IRQHandler(void)
{
 8004748:	b580      	push	{r7, lr}
 800474a:	af00      	add	r7, sp, #0
  /* Check PWR exti flag */
  if(__HAL_PWR_PVD_EXTI_GET_FLAG() != 0U)
 800474c:	4b1c      	ldr	r3, [pc, #112]	@ (80047c0 <HAL_PWREx_PVD_PVM_IRQHandler+0x78>)
 800474e:	695b      	ldr	r3, [r3, #20]
 8004750:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004754:	2b00      	cmp	r3, #0
 8004756:	d005      	beq.n	8004764 <HAL_PWREx_PVD_PVM_IRQHandler+0x1c>
  {
    /* PWR PVD interrupt user callback */
    HAL_PWR_PVDCallback();
 8004758:	f7ff ff4a 	bl	80045f0 <HAL_PWR_PVDCallback>

    /* Clear PVD exti pending bit */
    __HAL_PWR_PVD_EXTI_CLEAR_FLAG();
 800475c:	4b18      	ldr	r3, [pc, #96]	@ (80047c0 <HAL_PWREx_PVD_PVM_IRQHandler+0x78>)
 800475e:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8004762:	615a      	str	r2, [r3, #20]
  }
  /* Next, successively check PVMx exti flags */
#if defined(PWR_CR2_PVME1)
  if(__HAL_PWR_PVM1_EXTI_GET_FLAG() != 0U)
 8004764:	4b16      	ldr	r3, [pc, #88]	@ (80047c0 <HAL_PWREx_PVD_PVM_IRQHandler+0x78>)
 8004766:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004768:	f003 0308 	and.w	r3, r3, #8
 800476c:	2b00      	cmp	r3, #0
 800476e:	d004      	beq.n	800477a <HAL_PWREx_PVD_PVM_IRQHandler+0x32>
  {
    /* PWR PVM1 interrupt user callback */
    HAL_PWREx_PVM1Callback();
 8004770:	f000 f828 	bl	80047c4 <HAL_PWREx_PVM1Callback>

    /* Clear PVM1 exti pending bit */
    __HAL_PWR_PVM1_EXTI_CLEAR_FLAG();
 8004774:	4b12      	ldr	r3, [pc, #72]	@ (80047c0 <HAL_PWREx_PVD_PVM_IRQHandler+0x78>)
 8004776:	2208      	movs	r2, #8
 8004778:	635a      	str	r2, [r3, #52]	@ 0x34
  }
#endif /* PWR_CR2_PVME1 */
#if defined(PWR_CR2_PVME2)
  if(__HAL_PWR_PVM2_EXTI_GET_FLAG() != 0U)
 800477a:	4b11      	ldr	r3, [pc, #68]	@ (80047c0 <HAL_PWREx_PVD_PVM_IRQHandler+0x78>)
 800477c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800477e:	f003 0310 	and.w	r3, r3, #16
 8004782:	2b00      	cmp	r3, #0
 8004784:	d004      	beq.n	8004790 <HAL_PWREx_PVD_PVM_IRQHandler+0x48>
  {
    /* PWR PVM2 interrupt user callback */
    HAL_PWREx_PVM2Callback();
 8004786:	f000 f824 	bl	80047d2 <HAL_PWREx_PVM2Callback>

    /* Clear PVM2 exti pending bit */
    __HAL_PWR_PVM2_EXTI_CLEAR_FLAG();
 800478a:	4b0d      	ldr	r3, [pc, #52]	@ (80047c0 <HAL_PWREx_PVD_PVM_IRQHandler+0x78>)
 800478c:	2210      	movs	r2, #16
 800478e:	635a      	str	r2, [r3, #52]	@ 0x34
  }
#endif /* PWR_CR2_PVME2 */
  if(__HAL_PWR_PVM3_EXTI_GET_FLAG() != 0U)
 8004790:	4b0b      	ldr	r3, [pc, #44]	@ (80047c0 <HAL_PWREx_PVD_PVM_IRQHandler+0x78>)
 8004792:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004794:	f003 0320 	and.w	r3, r3, #32
 8004798:	2b00      	cmp	r3, #0
 800479a:	d004      	beq.n	80047a6 <HAL_PWREx_PVD_PVM_IRQHandler+0x5e>
  {
    /* PWR PVM3 interrupt user callback */
    HAL_PWREx_PVM3Callback();
 800479c:	f000 f820 	bl	80047e0 <HAL_PWREx_PVM3Callback>

    /* Clear PVM3 exti pending bit */
    __HAL_PWR_PVM3_EXTI_CLEAR_FLAG();
 80047a0:	4b07      	ldr	r3, [pc, #28]	@ (80047c0 <HAL_PWREx_PVD_PVM_IRQHandler+0x78>)
 80047a2:	2220      	movs	r2, #32
 80047a4:	635a      	str	r2, [r3, #52]	@ 0x34
  }
  if(__HAL_PWR_PVM4_EXTI_GET_FLAG() != 0U)
 80047a6:	4b06      	ldr	r3, [pc, #24]	@ (80047c0 <HAL_PWREx_PVD_PVM_IRQHandler+0x78>)
 80047a8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80047aa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	d004      	beq.n	80047bc <HAL_PWREx_PVD_PVM_IRQHandler+0x74>
  {
    /* PWR PVM4 interrupt user callback */
    HAL_PWREx_PVM4Callback();
 80047b2:	f000 f81c 	bl	80047ee <HAL_PWREx_PVM4Callback>

    /* Clear PVM4 exti pending bit */
    __HAL_PWR_PVM4_EXTI_CLEAR_FLAG();
 80047b6:	4b02      	ldr	r3, [pc, #8]	@ (80047c0 <HAL_PWREx_PVD_PVM_IRQHandler+0x78>)
 80047b8:	2240      	movs	r2, #64	@ 0x40
 80047ba:	635a      	str	r2, [r3, #52]	@ 0x34
  }
}
 80047bc:	bf00      	nop
 80047be:	bd80      	pop	{r7, pc}
 80047c0:	40010400 	.word	0x40010400

080047c4 <HAL_PWREx_PVM1Callback>:
/**
  * @brief PWR PVM1 interrupt callback
  * @retval None
  */
__weak void HAL_PWREx_PVM1Callback(void)
{
 80047c4:	b480      	push	{r7}
 80047c6:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified; when the callback is needed,
            HAL_PWREx_PVM1Callback() API can be implemented in the user file
   */
}
 80047c8:	bf00      	nop
 80047ca:	46bd      	mov	sp, r7
 80047cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047d0:	4770      	bx	lr

080047d2 <HAL_PWREx_PVM2Callback>:
/**
  * @brief PWR PVM2 interrupt callback
  * @retval None
  */
__weak void HAL_PWREx_PVM2Callback(void)
{
 80047d2:	b480      	push	{r7}
 80047d4:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified; when the callback is needed,
            HAL_PWREx_PVM2Callback() API can be implemented in the user file
   */
}
 80047d6:	bf00      	nop
 80047d8:	46bd      	mov	sp, r7
 80047da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047de:	4770      	bx	lr

080047e0 <HAL_PWREx_PVM3Callback>:
/**
  * @brief PWR PVM3 interrupt callback
  * @retval None
  */
__weak void HAL_PWREx_PVM3Callback(void)
{
 80047e0:	b480      	push	{r7}
 80047e2:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified; when the callback is needed,
            HAL_PWREx_PVM3Callback() API can be implemented in the user file
   */
}
 80047e4:	bf00      	nop
 80047e6:	46bd      	mov	sp, r7
 80047e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ec:	4770      	bx	lr

080047ee <HAL_PWREx_PVM4Callback>:
/**
  * @brief PWR PVM4 interrupt callback
  * @retval None
  */
__weak void HAL_PWREx_PVM4Callback(void)
{
 80047ee:	b480      	push	{r7}
 80047f0:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified; when the callback is needed,
            HAL_PWREx_PVM4Callback() API can be implemented in the user file
   */
}
 80047f2:	bf00      	nop
 80047f4:	46bd      	mov	sp, r7
 80047f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047fa:	4770      	bx	lr

080047fc <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 80047fc:	b480      	push	{r7}
 80047fe:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8004800:	4b05      	ldr	r3, [pc, #20]	@ (8004818 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8004802:	689b      	ldr	r3, [r3, #8]
 8004804:	4a04      	ldr	r2, [pc, #16]	@ (8004818 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8004806:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800480a:	6093      	str	r3, [r2, #8]
}
 800480c:	bf00      	nop
 800480e:	46bd      	mov	sp, r7
 8004810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004814:	4770      	bx	lr
 8004816:	bf00      	nop
 8004818:	40007000 	.word	0x40007000

0800481c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800481c:	b580      	push	{r7, lr}
 800481e:	b088      	sub	sp, #32
 8004820:	af00      	add	r7, sp, #0
 8004822:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	2b00      	cmp	r3, #0
 8004828:	d101      	bne.n	800482e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800482a:	2301      	movs	r3, #1
 800482c:	e2fe      	b.n	8004e2c <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	f003 0301 	and.w	r3, r3, #1
 8004836:	2b00      	cmp	r3, #0
 8004838:	d075      	beq.n	8004926 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800483a:	4b97      	ldr	r3, [pc, #604]	@ (8004a98 <HAL_RCC_OscConfig+0x27c>)
 800483c:	689b      	ldr	r3, [r3, #8]
 800483e:	f003 030c 	and.w	r3, r3, #12
 8004842:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004844:	4b94      	ldr	r3, [pc, #592]	@ (8004a98 <HAL_RCC_OscConfig+0x27c>)
 8004846:	68db      	ldr	r3, [r3, #12]
 8004848:	f003 0303 	and.w	r3, r3, #3
 800484c:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 800484e:	69bb      	ldr	r3, [r7, #24]
 8004850:	2b0c      	cmp	r3, #12
 8004852:	d102      	bne.n	800485a <HAL_RCC_OscConfig+0x3e>
 8004854:	697b      	ldr	r3, [r7, #20]
 8004856:	2b03      	cmp	r3, #3
 8004858:	d002      	beq.n	8004860 <HAL_RCC_OscConfig+0x44>
 800485a:	69bb      	ldr	r3, [r7, #24]
 800485c:	2b08      	cmp	r3, #8
 800485e:	d10b      	bne.n	8004878 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004860:	4b8d      	ldr	r3, [pc, #564]	@ (8004a98 <HAL_RCC_OscConfig+0x27c>)
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004868:	2b00      	cmp	r3, #0
 800486a:	d05b      	beq.n	8004924 <HAL_RCC_OscConfig+0x108>
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	685b      	ldr	r3, [r3, #4]
 8004870:	2b00      	cmp	r3, #0
 8004872:	d157      	bne.n	8004924 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004874:	2301      	movs	r3, #1
 8004876:	e2d9      	b.n	8004e2c <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	685b      	ldr	r3, [r3, #4]
 800487c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004880:	d106      	bne.n	8004890 <HAL_RCC_OscConfig+0x74>
 8004882:	4b85      	ldr	r3, [pc, #532]	@ (8004a98 <HAL_RCC_OscConfig+0x27c>)
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	4a84      	ldr	r2, [pc, #528]	@ (8004a98 <HAL_RCC_OscConfig+0x27c>)
 8004888:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800488c:	6013      	str	r3, [r2, #0]
 800488e:	e01d      	b.n	80048cc <HAL_RCC_OscConfig+0xb0>
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	685b      	ldr	r3, [r3, #4]
 8004894:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004898:	d10c      	bne.n	80048b4 <HAL_RCC_OscConfig+0x98>
 800489a:	4b7f      	ldr	r3, [pc, #508]	@ (8004a98 <HAL_RCC_OscConfig+0x27c>)
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	4a7e      	ldr	r2, [pc, #504]	@ (8004a98 <HAL_RCC_OscConfig+0x27c>)
 80048a0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80048a4:	6013      	str	r3, [r2, #0]
 80048a6:	4b7c      	ldr	r3, [pc, #496]	@ (8004a98 <HAL_RCC_OscConfig+0x27c>)
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	4a7b      	ldr	r2, [pc, #492]	@ (8004a98 <HAL_RCC_OscConfig+0x27c>)
 80048ac:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80048b0:	6013      	str	r3, [r2, #0]
 80048b2:	e00b      	b.n	80048cc <HAL_RCC_OscConfig+0xb0>
 80048b4:	4b78      	ldr	r3, [pc, #480]	@ (8004a98 <HAL_RCC_OscConfig+0x27c>)
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	4a77      	ldr	r2, [pc, #476]	@ (8004a98 <HAL_RCC_OscConfig+0x27c>)
 80048ba:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80048be:	6013      	str	r3, [r2, #0]
 80048c0:	4b75      	ldr	r3, [pc, #468]	@ (8004a98 <HAL_RCC_OscConfig+0x27c>)
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	4a74      	ldr	r2, [pc, #464]	@ (8004a98 <HAL_RCC_OscConfig+0x27c>)
 80048c6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80048ca:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	685b      	ldr	r3, [r3, #4]
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	d013      	beq.n	80048fc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80048d4:	f7fc fc6e 	bl	80011b4 <HAL_GetTick>
 80048d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80048da:	e008      	b.n	80048ee <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80048dc:	f7fc fc6a 	bl	80011b4 <HAL_GetTick>
 80048e0:	4602      	mov	r2, r0
 80048e2:	693b      	ldr	r3, [r7, #16]
 80048e4:	1ad3      	subs	r3, r2, r3
 80048e6:	2b64      	cmp	r3, #100	@ 0x64
 80048e8:	d901      	bls.n	80048ee <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80048ea:	2303      	movs	r3, #3
 80048ec:	e29e      	b.n	8004e2c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80048ee:	4b6a      	ldr	r3, [pc, #424]	@ (8004a98 <HAL_RCC_OscConfig+0x27c>)
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	d0f0      	beq.n	80048dc <HAL_RCC_OscConfig+0xc0>
 80048fa:	e014      	b.n	8004926 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80048fc:	f7fc fc5a 	bl	80011b4 <HAL_GetTick>
 8004900:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004902:	e008      	b.n	8004916 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004904:	f7fc fc56 	bl	80011b4 <HAL_GetTick>
 8004908:	4602      	mov	r2, r0
 800490a:	693b      	ldr	r3, [r7, #16]
 800490c:	1ad3      	subs	r3, r2, r3
 800490e:	2b64      	cmp	r3, #100	@ 0x64
 8004910:	d901      	bls.n	8004916 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004912:	2303      	movs	r3, #3
 8004914:	e28a      	b.n	8004e2c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004916:	4b60      	ldr	r3, [pc, #384]	@ (8004a98 <HAL_RCC_OscConfig+0x27c>)
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800491e:	2b00      	cmp	r3, #0
 8004920:	d1f0      	bne.n	8004904 <HAL_RCC_OscConfig+0xe8>
 8004922:	e000      	b.n	8004926 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004924:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	f003 0302 	and.w	r3, r3, #2
 800492e:	2b00      	cmp	r3, #0
 8004930:	d075      	beq.n	8004a1e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004932:	4b59      	ldr	r3, [pc, #356]	@ (8004a98 <HAL_RCC_OscConfig+0x27c>)
 8004934:	689b      	ldr	r3, [r3, #8]
 8004936:	f003 030c 	and.w	r3, r3, #12
 800493a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800493c:	4b56      	ldr	r3, [pc, #344]	@ (8004a98 <HAL_RCC_OscConfig+0x27c>)
 800493e:	68db      	ldr	r3, [r3, #12]
 8004940:	f003 0303 	and.w	r3, r3, #3
 8004944:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8004946:	69bb      	ldr	r3, [r7, #24]
 8004948:	2b0c      	cmp	r3, #12
 800494a:	d102      	bne.n	8004952 <HAL_RCC_OscConfig+0x136>
 800494c:	697b      	ldr	r3, [r7, #20]
 800494e:	2b02      	cmp	r3, #2
 8004950:	d002      	beq.n	8004958 <HAL_RCC_OscConfig+0x13c>
 8004952:	69bb      	ldr	r3, [r7, #24]
 8004954:	2b04      	cmp	r3, #4
 8004956:	d11f      	bne.n	8004998 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004958:	4b4f      	ldr	r3, [pc, #316]	@ (8004a98 <HAL_RCC_OscConfig+0x27c>)
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004960:	2b00      	cmp	r3, #0
 8004962:	d005      	beq.n	8004970 <HAL_RCC_OscConfig+0x154>
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	68db      	ldr	r3, [r3, #12]
 8004968:	2b00      	cmp	r3, #0
 800496a:	d101      	bne.n	8004970 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 800496c:	2301      	movs	r3, #1
 800496e:	e25d      	b.n	8004e2c <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004970:	4b49      	ldr	r3, [pc, #292]	@ (8004a98 <HAL_RCC_OscConfig+0x27c>)
 8004972:	685b      	ldr	r3, [r3, #4]
 8004974:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	691b      	ldr	r3, [r3, #16]
 800497c:	061b      	lsls	r3, r3, #24
 800497e:	4946      	ldr	r1, [pc, #280]	@ (8004a98 <HAL_RCC_OscConfig+0x27c>)
 8004980:	4313      	orrs	r3, r2
 8004982:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8004984:	4b45      	ldr	r3, [pc, #276]	@ (8004a9c <HAL_RCC_OscConfig+0x280>)
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	4618      	mov	r0, r3
 800498a:	f7fc fbc7 	bl	800111c <HAL_InitTick>
 800498e:	4603      	mov	r3, r0
 8004990:	2b00      	cmp	r3, #0
 8004992:	d043      	beq.n	8004a1c <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8004994:	2301      	movs	r3, #1
 8004996:	e249      	b.n	8004e2c <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	68db      	ldr	r3, [r3, #12]
 800499c:	2b00      	cmp	r3, #0
 800499e:	d023      	beq.n	80049e8 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80049a0:	4b3d      	ldr	r3, [pc, #244]	@ (8004a98 <HAL_RCC_OscConfig+0x27c>)
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	4a3c      	ldr	r2, [pc, #240]	@ (8004a98 <HAL_RCC_OscConfig+0x27c>)
 80049a6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80049aa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80049ac:	f7fc fc02 	bl	80011b4 <HAL_GetTick>
 80049b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80049b2:	e008      	b.n	80049c6 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80049b4:	f7fc fbfe 	bl	80011b4 <HAL_GetTick>
 80049b8:	4602      	mov	r2, r0
 80049ba:	693b      	ldr	r3, [r7, #16]
 80049bc:	1ad3      	subs	r3, r2, r3
 80049be:	2b02      	cmp	r3, #2
 80049c0:	d901      	bls.n	80049c6 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80049c2:	2303      	movs	r3, #3
 80049c4:	e232      	b.n	8004e2c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80049c6:	4b34      	ldr	r3, [pc, #208]	@ (8004a98 <HAL_RCC_OscConfig+0x27c>)
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	d0f0      	beq.n	80049b4 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80049d2:	4b31      	ldr	r3, [pc, #196]	@ (8004a98 <HAL_RCC_OscConfig+0x27c>)
 80049d4:	685b      	ldr	r3, [r3, #4]
 80049d6:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	691b      	ldr	r3, [r3, #16]
 80049de:	061b      	lsls	r3, r3, #24
 80049e0:	492d      	ldr	r1, [pc, #180]	@ (8004a98 <HAL_RCC_OscConfig+0x27c>)
 80049e2:	4313      	orrs	r3, r2
 80049e4:	604b      	str	r3, [r1, #4]
 80049e6:	e01a      	b.n	8004a1e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80049e8:	4b2b      	ldr	r3, [pc, #172]	@ (8004a98 <HAL_RCC_OscConfig+0x27c>)
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	4a2a      	ldr	r2, [pc, #168]	@ (8004a98 <HAL_RCC_OscConfig+0x27c>)
 80049ee:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80049f2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80049f4:	f7fc fbde 	bl	80011b4 <HAL_GetTick>
 80049f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80049fa:	e008      	b.n	8004a0e <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80049fc:	f7fc fbda 	bl	80011b4 <HAL_GetTick>
 8004a00:	4602      	mov	r2, r0
 8004a02:	693b      	ldr	r3, [r7, #16]
 8004a04:	1ad3      	subs	r3, r2, r3
 8004a06:	2b02      	cmp	r3, #2
 8004a08:	d901      	bls.n	8004a0e <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8004a0a:	2303      	movs	r3, #3
 8004a0c:	e20e      	b.n	8004e2c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004a0e:	4b22      	ldr	r3, [pc, #136]	@ (8004a98 <HAL_RCC_OscConfig+0x27c>)
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	d1f0      	bne.n	80049fc <HAL_RCC_OscConfig+0x1e0>
 8004a1a:	e000      	b.n	8004a1e <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004a1c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	f003 0308 	and.w	r3, r3, #8
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	d041      	beq.n	8004aae <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	695b      	ldr	r3, [r3, #20]
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	d01c      	beq.n	8004a6c <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004a32:	4b19      	ldr	r3, [pc, #100]	@ (8004a98 <HAL_RCC_OscConfig+0x27c>)
 8004a34:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004a38:	4a17      	ldr	r2, [pc, #92]	@ (8004a98 <HAL_RCC_OscConfig+0x27c>)
 8004a3a:	f043 0301 	orr.w	r3, r3, #1
 8004a3e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004a42:	f7fc fbb7 	bl	80011b4 <HAL_GetTick>
 8004a46:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004a48:	e008      	b.n	8004a5c <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004a4a:	f7fc fbb3 	bl	80011b4 <HAL_GetTick>
 8004a4e:	4602      	mov	r2, r0
 8004a50:	693b      	ldr	r3, [r7, #16]
 8004a52:	1ad3      	subs	r3, r2, r3
 8004a54:	2b02      	cmp	r3, #2
 8004a56:	d901      	bls.n	8004a5c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8004a58:	2303      	movs	r3, #3
 8004a5a:	e1e7      	b.n	8004e2c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004a5c:	4b0e      	ldr	r3, [pc, #56]	@ (8004a98 <HAL_RCC_OscConfig+0x27c>)
 8004a5e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004a62:	f003 0302 	and.w	r3, r3, #2
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	d0ef      	beq.n	8004a4a <HAL_RCC_OscConfig+0x22e>
 8004a6a:	e020      	b.n	8004aae <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004a6c:	4b0a      	ldr	r3, [pc, #40]	@ (8004a98 <HAL_RCC_OscConfig+0x27c>)
 8004a6e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004a72:	4a09      	ldr	r2, [pc, #36]	@ (8004a98 <HAL_RCC_OscConfig+0x27c>)
 8004a74:	f023 0301 	bic.w	r3, r3, #1
 8004a78:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004a7c:	f7fc fb9a 	bl	80011b4 <HAL_GetTick>
 8004a80:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004a82:	e00d      	b.n	8004aa0 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004a84:	f7fc fb96 	bl	80011b4 <HAL_GetTick>
 8004a88:	4602      	mov	r2, r0
 8004a8a:	693b      	ldr	r3, [r7, #16]
 8004a8c:	1ad3      	subs	r3, r2, r3
 8004a8e:	2b02      	cmp	r3, #2
 8004a90:	d906      	bls.n	8004aa0 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8004a92:	2303      	movs	r3, #3
 8004a94:	e1ca      	b.n	8004e2c <HAL_RCC_OscConfig+0x610>
 8004a96:	bf00      	nop
 8004a98:	40021000 	.word	0x40021000
 8004a9c:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004aa0:	4b8c      	ldr	r3, [pc, #560]	@ (8004cd4 <HAL_RCC_OscConfig+0x4b8>)
 8004aa2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004aa6:	f003 0302 	and.w	r3, r3, #2
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	d1ea      	bne.n	8004a84 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	f003 0304 	and.w	r3, r3, #4
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	f000 80a6 	beq.w	8004c08 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004abc:	2300      	movs	r3, #0
 8004abe:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004ac0:	4b84      	ldr	r3, [pc, #528]	@ (8004cd4 <HAL_RCC_OscConfig+0x4b8>)
 8004ac2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004ac4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004ac8:	2b00      	cmp	r3, #0
 8004aca:	d101      	bne.n	8004ad0 <HAL_RCC_OscConfig+0x2b4>
 8004acc:	2301      	movs	r3, #1
 8004ace:	e000      	b.n	8004ad2 <HAL_RCC_OscConfig+0x2b6>
 8004ad0:	2300      	movs	r3, #0
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	d00d      	beq.n	8004af2 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004ad6:	4b7f      	ldr	r3, [pc, #508]	@ (8004cd4 <HAL_RCC_OscConfig+0x4b8>)
 8004ad8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004ada:	4a7e      	ldr	r2, [pc, #504]	@ (8004cd4 <HAL_RCC_OscConfig+0x4b8>)
 8004adc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004ae0:	6593      	str	r3, [r2, #88]	@ 0x58
 8004ae2:	4b7c      	ldr	r3, [pc, #496]	@ (8004cd4 <HAL_RCC_OscConfig+0x4b8>)
 8004ae4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004ae6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004aea:	60fb      	str	r3, [r7, #12]
 8004aec:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8004aee:	2301      	movs	r3, #1
 8004af0:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004af2:	4b79      	ldr	r3, [pc, #484]	@ (8004cd8 <HAL_RCC_OscConfig+0x4bc>)
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	d118      	bne.n	8004b30 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004afe:	4b76      	ldr	r3, [pc, #472]	@ (8004cd8 <HAL_RCC_OscConfig+0x4bc>)
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	4a75      	ldr	r2, [pc, #468]	@ (8004cd8 <HAL_RCC_OscConfig+0x4bc>)
 8004b04:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004b08:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004b0a:	f7fc fb53 	bl	80011b4 <HAL_GetTick>
 8004b0e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004b10:	e008      	b.n	8004b24 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004b12:	f7fc fb4f 	bl	80011b4 <HAL_GetTick>
 8004b16:	4602      	mov	r2, r0
 8004b18:	693b      	ldr	r3, [r7, #16]
 8004b1a:	1ad3      	subs	r3, r2, r3
 8004b1c:	2b02      	cmp	r3, #2
 8004b1e:	d901      	bls.n	8004b24 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8004b20:	2303      	movs	r3, #3
 8004b22:	e183      	b.n	8004e2c <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004b24:	4b6c      	ldr	r3, [pc, #432]	@ (8004cd8 <HAL_RCC_OscConfig+0x4bc>)
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004b2c:	2b00      	cmp	r3, #0
 8004b2e:	d0f0      	beq.n	8004b12 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	689b      	ldr	r3, [r3, #8]
 8004b34:	2b01      	cmp	r3, #1
 8004b36:	d108      	bne.n	8004b4a <HAL_RCC_OscConfig+0x32e>
 8004b38:	4b66      	ldr	r3, [pc, #408]	@ (8004cd4 <HAL_RCC_OscConfig+0x4b8>)
 8004b3a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004b3e:	4a65      	ldr	r2, [pc, #404]	@ (8004cd4 <HAL_RCC_OscConfig+0x4b8>)
 8004b40:	f043 0301 	orr.w	r3, r3, #1
 8004b44:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004b48:	e024      	b.n	8004b94 <HAL_RCC_OscConfig+0x378>
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	689b      	ldr	r3, [r3, #8]
 8004b4e:	2b05      	cmp	r3, #5
 8004b50:	d110      	bne.n	8004b74 <HAL_RCC_OscConfig+0x358>
 8004b52:	4b60      	ldr	r3, [pc, #384]	@ (8004cd4 <HAL_RCC_OscConfig+0x4b8>)
 8004b54:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004b58:	4a5e      	ldr	r2, [pc, #376]	@ (8004cd4 <HAL_RCC_OscConfig+0x4b8>)
 8004b5a:	f043 0304 	orr.w	r3, r3, #4
 8004b5e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004b62:	4b5c      	ldr	r3, [pc, #368]	@ (8004cd4 <HAL_RCC_OscConfig+0x4b8>)
 8004b64:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004b68:	4a5a      	ldr	r2, [pc, #360]	@ (8004cd4 <HAL_RCC_OscConfig+0x4b8>)
 8004b6a:	f043 0301 	orr.w	r3, r3, #1
 8004b6e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004b72:	e00f      	b.n	8004b94 <HAL_RCC_OscConfig+0x378>
 8004b74:	4b57      	ldr	r3, [pc, #348]	@ (8004cd4 <HAL_RCC_OscConfig+0x4b8>)
 8004b76:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004b7a:	4a56      	ldr	r2, [pc, #344]	@ (8004cd4 <HAL_RCC_OscConfig+0x4b8>)
 8004b7c:	f023 0301 	bic.w	r3, r3, #1
 8004b80:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004b84:	4b53      	ldr	r3, [pc, #332]	@ (8004cd4 <HAL_RCC_OscConfig+0x4b8>)
 8004b86:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004b8a:	4a52      	ldr	r2, [pc, #328]	@ (8004cd4 <HAL_RCC_OscConfig+0x4b8>)
 8004b8c:	f023 0304 	bic.w	r3, r3, #4
 8004b90:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	689b      	ldr	r3, [r3, #8]
 8004b98:	2b00      	cmp	r3, #0
 8004b9a:	d016      	beq.n	8004bca <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004b9c:	f7fc fb0a 	bl	80011b4 <HAL_GetTick>
 8004ba0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004ba2:	e00a      	b.n	8004bba <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004ba4:	f7fc fb06 	bl	80011b4 <HAL_GetTick>
 8004ba8:	4602      	mov	r2, r0
 8004baa:	693b      	ldr	r3, [r7, #16]
 8004bac:	1ad3      	subs	r3, r2, r3
 8004bae:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004bb2:	4293      	cmp	r3, r2
 8004bb4:	d901      	bls.n	8004bba <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8004bb6:	2303      	movs	r3, #3
 8004bb8:	e138      	b.n	8004e2c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004bba:	4b46      	ldr	r3, [pc, #280]	@ (8004cd4 <HAL_RCC_OscConfig+0x4b8>)
 8004bbc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004bc0:	f003 0302 	and.w	r3, r3, #2
 8004bc4:	2b00      	cmp	r3, #0
 8004bc6:	d0ed      	beq.n	8004ba4 <HAL_RCC_OscConfig+0x388>
 8004bc8:	e015      	b.n	8004bf6 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004bca:	f7fc faf3 	bl	80011b4 <HAL_GetTick>
 8004bce:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004bd0:	e00a      	b.n	8004be8 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004bd2:	f7fc faef 	bl	80011b4 <HAL_GetTick>
 8004bd6:	4602      	mov	r2, r0
 8004bd8:	693b      	ldr	r3, [r7, #16]
 8004bda:	1ad3      	subs	r3, r2, r3
 8004bdc:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004be0:	4293      	cmp	r3, r2
 8004be2:	d901      	bls.n	8004be8 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8004be4:	2303      	movs	r3, #3
 8004be6:	e121      	b.n	8004e2c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004be8:	4b3a      	ldr	r3, [pc, #232]	@ (8004cd4 <HAL_RCC_OscConfig+0x4b8>)
 8004bea:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004bee:	f003 0302 	and.w	r3, r3, #2
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	d1ed      	bne.n	8004bd2 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004bf6:	7ffb      	ldrb	r3, [r7, #31]
 8004bf8:	2b01      	cmp	r3, #1
 8004bfa:	d105      	bne.n	8004c08 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004bfc:	4b35      	ldr	r3, [pc, #212]	@ (8004cd4 <HAL_RCC_OscConfig+0x4b8>)
 8004bfe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004c00:	4a34      	ldr	r2, [pc, #208]	@ (8004cd4 <HAL_RCC_OscConfig+0x4b8>)
 8004c02:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004c06:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	f003 0320 	and.w	r3, r3, #32
 8004c10:	2b00      	cmp	r3, #0
 8004c12:	d03c      	beq.n	8004c8e <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	699b      	ldr	r3, [r3, #24]
 8004c18:	2b00      	cmp	r3, #0
 8004c1a:	d01c      	beq.n	8004c56 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004c1c:	4b2d      	ldr	r3, [pc, #180]	@ (8004cd4 <HAL_RCC_OscConfig+0x4b8>)
 8004c1e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004c22:	4a2c      	ldr	r2, [pc, #176]	@ (8004cd4 <HAL_RCC_OscConfig+0x4b8>)
 8004c24:	f043 0301 	orr.w	r3, r3, #1
 8004c28:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004c2c:	f7fc fac2 	bl	80011b4 <HAL_GetTick>
 8004c30:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004c32:	e008      	b.n	8004c46 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004c34:	f7fc fabe 	bl	80011b4 <HAL_GetTick>
 8004c38:	4602      	mov	r2, r0
 8004c3a:	693b      	ldr	r3, [r7, #16]
 8004c3c:	1ad3      	subs	r3, r2, r3
 8004c3e:	2b02      	cmp	r3, #2
 8004c40:	d901      	bls.n	8004c46 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8004c42:	2303      	movs	r3, #3
 8004c44:	e0f2      	b.n	8004e2c <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004c46:	4b23      	ldr	r3, [pc, #140]	@ (8004cd4 <HAL_RCC_OscConfig+0x4b8>)
 8004c48:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004c4c:	f003 0302 	and.w	r3, r3, #2
 8004c50:	2b00      	cmp	r3, #0
 8004c52:	d0ef      	beq.n	8004c34 <HAL_RCC_OscConfig+0x418>
 8004c54:	e01b      	b.n	8004c8e <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004c56:	4b1f      	ldr	r3, [pc, #124]	@ (8004cd4 <HAL_RCC_OscConfig+0x4b8>)
 8004c58:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004c5c:	4a1d      	ldr	r2, [pc, #116]	@ (8004cd4 <HAL_RCC_OscConfig+0x4b8>)
 8004c5e:	f023 0301 	bic.w	r3, r3, #1
 8004c62:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004c66:	f7fc faa5 	bl	80011b4 <HAL_GetTick>
 8004c6a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004c6c:	e008      	b.n	8004c80 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004c6e:	f7fc faa1 	bl	80011b4 <HAL_GetTick>
 8004c72:	4602      	mov	r2, r0
 8004c74:	693b      	ldr	r3, [r7, #16]
 8004c76:	1ad3      	subs	r3, r2, r3
 8004c78:	2b02      	cmp	r3, #2
 8004c7a:	d901      	bls.n	8004c80 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8004c7c:	2303      	movs	r3, #3
 8004c7e:	e0d5      	b.n	8004e2c <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004c80:	4b14      	ldr	r3, [pc, #80]	@ (8004cd4 <HAL_RCC_OscConfig+0x4b8>)
 8004c82:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004c86:	f003 0302 	and.w	r3, r3, #2
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	d1ef      	bne.n	8004c6e <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	69db      	ldr	r3, [r3, #28]
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	f000 80c9 	beq.w	8004e2a <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004c98:	4b0e      	ldr	r3, [pc, #56]	@ (8004cd4 <HAL_RCC_OscConfig+0x4b8>)
 8004c9a:	689b      	ldr	r3, [r3, #8]
 8004c9c:	f003 030c 	and.w	r3, r3, #12
 8004ca0:	2b0c      	cmp	r3, #12
 8004ca2:	f000 8083 	beq.w	8004dac <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	69db      	ldr	r3, [r3, #28]
 8004caa:	2b02      	cmp	r3, #2
 8004cac:	d15e      	bne.n	8004d6c <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004cae:	4b09      	ldr	r3, [pc, #36]	@ (8004cd4 <HAL_RCC_OscConfig+0x4b8>)
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	4a08      	ldr	r2, [pc, #32]	@ (8004cd4 <HAL_RCC_OscConfig+0x4b8>)
 8004cb4:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004cb8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004cba:	f7fc fa7b 	bl	80011b4 <HAL_GetTick>
 8004cbe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004cc0:	e00c      	b.n	8004cdc <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004cc2:	f7fc fa77 	bl	80011b4 <HAL_GetTick>
 8004cc6:	4602      	mov	r2, r0
 8004cc8:	693b      	ldr	r3, [r7, #16]
 8004cca:	1ad3      	subs	r3, r2, r3
 8004ccc:	2b02      	cmp	r3, #2
 8004cce:	d905      	bls.n	8004cdc <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8004cd0:	2303      	movs	r3, #3
 8004cd2:	e0ab      	b.n	8004e2c <HAL_RCC_OscConfig+0x610>
 8004cd4:	40021000 	.word	0x40021000
 8004cd8:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004cdc:	4b55      	ldr	r3, [pc, #340]	@ (8004e34 <HAL_RCC_OscConfig+0x618>)
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004ce4:	2b00      	cmp	r3, #0
 8004ce6:	d1ec      	bne.n	8004cc2 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004ce8:	4b52      	ldr	r3, [pc, #328]	@ (8004e34 <HAL_RCC_OscConfig+0x618>)
 8004cea:	68da      	ldr	r2, [r3, #12]
 8004cec:	4b52      	ldr	r3, [pc, #328]	@ (8004e38 <HAL_RCC_OscConfig+0x61c>)
 8004cee:	4013      	ands	r3, r2
 8004cf0:	687a      	ldr	r2, [r7, #4]
 8004cf2:	6a11      	ldr	r1, [r2, #32]
 8004cf4:	687a      	ldr	r2, [r7, #4]
 8004cf6:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8004cf8:	3a01      	subs	r2, #1
 8004cfa:	0112      	lsls	r2, r2, #4
 8004cfc:	4311      	orrs	r1, r2
 8004cfe:	687a      	ldr	r2, [r7, #4]
 8004d00:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8004d02:	0212      	lsls	r2, r2, #8
 8004d04:	4311      	orrs	r1, r2
 8004d06:	687a      	ldr	r2, [r7, #4]
 8004d08:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8004d0a:	0852      	lsrs	r2, r2, #1
 8004d0c:	3a01      	subs	r2, #1
 8004d0e:	0552      	lsls	r2, r2, #21
 8004d10:	4311      	orrs	r1, r2
 8004d12:	687a      	ldr	r2, [r7, #4]
 8004d14:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8004d16:	0852      	lsrs	r2, r2, #1
 8004d18:	3a01      	subs	r2, #1
 8004d1a:	0652      	lsls	r2, r2, #25
 8004d1c:	4311      	orrs	r1, r2
 8004d1e:	687a      	ldr	r2, [r7, #4]
 8004d20:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8004d22:	06d2      	lsls	r2, r2, #27
 8004d24:	430a      	orrs	r2, r1
 8004d26:	4943      	ldr	r1, [pc, #268]	@ (8004e34 <HAL_RCC_OscConfig+0x618>)
 8004d28:	4313      	orrs	r3, r2
 8004d2a:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004d2c:	4b41      	ldr	r3, [pc, #260]	@ (8004e34 <HAL_RCC_OscConfig+0x618>)
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	4a40      	ldr	r2, [pc, #256]	@ (8004e34 <HAL_RCC_OscConfig+0x618>)
 8004d32:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004d36:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004d38:	4b3e      	ldr	r3, [pc, #248]	@ (8004e34 <HAL_RCC_OscConfig+0x618>)
 8004d3a:	68db      	ldr	r3, [r3, #12]
 8004d3c:	4a3d      	ldr	r2, [pc, #244]	@ (8004e34 <HAL_RCC_OscConfig+0x618>)
 8004d3e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004d42:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d44:	f7fc fa36 	bl	80011b4 <HAL_GetTick>
 8004d48:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004d4a:	e008      	b.n	8004d5e <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004d4c:	f7fc fa32 	bl	80011b4 <HAL_GetTick>
 8004d50:	4602      	mov	r2, r0
 8004d52:	693b      	ldr	r3, [r7, #16]
 8004d54:	1ad3      	subs	r3, r2, r3
 8004d56:	2b02      	cmp	r3, #2
 8004d58:	d901      	bls.n	8004d5e <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8004d5a:	2303      	movs	r3, #3
 8004d5c:	e066      	b.n	8004e2c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004d5e:	4b35      	ldr	r3, [pc, #212]	@ (8004e34 <HAL_RCC_OscConfig+0x618>)
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	d0f0      	beq.n	8004d4c <HAL_RCC_OscConfig+0x530>
 8004d6a:	e05e      	b.n	8004e2a <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004d6c:	4b31      	ldr	r3, [pc, #196]	@ (8004e34 <HAL_RCC_OscConfig+0x618>)
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	4a30      	ldr	r2, [pc, #192]	@ (8004e34 <HAL_RCC_OscConfig+0x618>)
 8004d72:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004d76:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d78:	f7fc fa1c 	bl	80011b4 <HAL_GetTick>
 8004d7c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004d7e:	e008      	b.n	8004d92 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004d80:	f7fc fa18 	bl	80011b4 <HAL_GetTick>
 8004d84:	4602      	mov	r2, r0
 8004d86:	693b      	ldr	r3, [r7, #16]
 8004d88:	1ad3      	subs	r3, r2, r3
 8004d8a:	2b02      	cmp	r3, #2
 8004d8c:	d901      	bls.n	8004d92 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8004d8e:	2303      	movs	r3, #3
 8004d90:	e04c      	b.n	8004e2c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004d92:	4b28      	ldr	r3, [pc, #160]	@ (8004e34 <HAL_RCC_OscConfig+0x618>)
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004d9a:	2b00      	cmp	r3, #0
 8004d9c:	d1f0      	bne.n	8004d80 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8004d9e:	4b25      	ldr	r3, [pc, #148]	@ (8004e34 <HAL_RCC_OscConfig+0x618>)
 8004da0:	68da      	ldr	r2, [r3, #12]
 8004da2:	4924      	ldr	r1, [pc, #144]	@ (8004e34 <HAL_RCC_OscConfig+0x618>)
 8004da4:	4b25      	ldr	r3, [pc, #148]	@ (8004e3c <HAL_RCC_OscConfig+0x620>)
 8004da6:	4013      	ands	r3, r2
 8004da8:	60cb      	str	r3, [r1, #12]
 8004daa:	e03e      	b.n	8004e2a <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	69db      	ldr	r3, [r3, #28]
 8004db0:	2b01      	cmp	r3, #1
 8004db2:	d101      	bne.n	8004db8 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8004db4:	2301      	movs	r3, #1
 8004db6:	e039      	b.n	8004e2c <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8004db8:	4b1e      	ldr	r3, [pc, #120]	@ (8004e34 <HAL_RCC_OscConfig+0x618>)
 8004dba:	68db      	ldr	r3, [r3, #12]
 8004dbc:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004dbe:	697b      	ldr	r3, [r7, #20]
 8004dc0:	f003 0203 	and.w	r2, r3, #3
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	6a1b      	ldr	r3, [r3, #32]
 8004dc8:	429a      	cmp	r2, r3
 8004dca:	d12c      	bne.n	8004e26 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004dcc:	697b      	ldr	r3, [r7, #20]
 8004dce:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004dd6:	3b01      	subs	r3, #1
 8004dd8:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004dda:	429a      	cmp	r2, r3
 8004ddc:	d123      	bne.n	8004e26 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8004dde:	697b      	ldr	r3, [r7, #20]
 8004de0:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004de8:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004dea:	429a      	cmp	r2, r3
 8004dec:	d11b      	bne.n	8004e26 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004dee:	697b      	ldr	r3, [r7, #20]
 8004df0:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004df8:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8004dfa:	429a      	cmp	r2, r3
 8004dfc:	d113      	bne.n	8004e26 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004dfe:	697b      	ldr	r3, [r7, #20]
 8004e00:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004e08:	085b      	lsrs	r3, r3, #1
 8004e0a:	3b01      	subs	r3, #1
 8004e0c:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004e0e:	429a      	cmp	r2, r3
 8004e10:	d109      	bne.n	8004e26 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8004e12:	697b      	ldr	r3, [r7, #20]
 8004e14:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004e1c:	085b      	lsrs	r3, r3, #1
 8004e1e:	3b01      	subs	r3, #1
 8004e20:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004e22:	429a      	cmp	r2, r3
 8004e24:	d001      	beq.n	8004e2a <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8004e26:	2301      	movs	r3, #1
 8004e28:	e000      	b.n	8004e2c <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8004e2a:	2300      	movs	r3, #0
}
 8004e2c:	4618      	mov	r0, r3
 8004e2e:	3720      	adds	r7, #32
 8004e30:	46bd      	mov	sp, r7
 8004e32:	bd80      	pop	{r7, pc}
 8004e34:	40021000 	.word	0x40021000
 8004e38:	019f800c 	.word	0x019f800c
 8004e3c:	feeefffc 	.word	0xfeeefffc

08004e40 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004e40:	b580      	push	{r7, lr}
 8004e42:	b086      	sub	sp, #24
 8004e44:	af00      	add	r7, sp, #0
 8004e46:	6078      	str	r0, [r7, #4]
 8004e48:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8004e4a:	2300      	movs	r3, #0
 8004e4c:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	2b00      	cmp	r3, #0
 8004e52:	d101      	bne.n	8004e58 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004e54:	2301      	movs	r3, #1
 8004e56:	e11e      	b.n	8005096 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004e58:	4b91      	ldr	r3, [pc, #580]	@ (80050a0 <HAL_RCC_ClockConfig+0x260>)
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	f003 030f 	and.w	r3, r3, #15
 8004e60:	683a      	ldr	r2, [r7, #0]
 8004e62:	429a      	cmp	r2, r3
 8004e64:	d910      	bls.n	8004e88 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004e66:	4b8e      	ldr	r3, [pc, #568]	@ (80050a0 <HAL_RCC_ClockConfig+0x260>)
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	f023 020f 	bic.w	r2, r3, #15
 8004e6e:	498c      	ldr	r1, [pc, #560]	@ (80050a0 <HAL_RCC_ClockConfig+0x260>)
 8004e70:	683b      	ldr	r3, [r7, #0]
 8004e72:	4313      	orrs	r3, r2
 8004e74:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004e76:	4b8a      	ldr	r3, [pc, #552]	@ (80050a0 <HAL_RCC_ClockConfig+0x260>)
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	f003 030f 	and.w	r3, r3, #15
 8004e7e:	683a      	ldr	r2, [r7, #0]
 8004e80:	429a      	cmp	r2, r3
 8004e82:	d001      	beq.n	8004e88 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004e84:	2301      	movs	r3, #1
 8004e86:	e106      	b.n	8005096 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	f003 0301 	and.w	r3, r3, #1
 8004e90:	2b00      	cmp	r3, #0
 8004e92:	d073      	beq.n	8004f7c <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	685b      	ldr	r3, [r3, #4]
 8004e98:	2b03      	cmp	r3, #3
 8004e9a:	d129      	bne.n	8004ef0 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004e9c:	4b81      	ldr	r3, [pc, #516]	@ (80050a4 <HAL_RCC_ClockConfig+0x264>)
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004ea4:	2b00      	cmp	r3, #0
 8004ea6:	d101      	bne.n	8004eac <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8004ea8:	2301      	movs	r3, #1
 8004eaa:	e0f4      	b.n	8005096 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8004eac:	f000 f966 	bl	800517c <RCC_GetSysClockFreqFromPLLSource>
 8004eb0:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8004eb2:	693b      	ldr	r3, [r7, #16]
 8004eb4:	4a7c      	ldr	r2, [pc, #496]	@ (80050a8 <HAL_RCC_ClockConfig+0x268>)
 8004eb6:	4293      	cmp	r3, r2
 8004eb8:	d93f      	bls.n	8004f3a <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8004eba:	4b7a      	ldr	r3, [pc, #488]	@ (80050a4 <HAL_RCC_ClockConfig+0x264>)
 8004ebc:	689b      	ldr	r3, [r3, #8]
 8004ebe:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	d009      	beq.n	8004eda <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8004ece:	2b00      	cmp	r3, #0
 8004ed0:	d033      	beq.n	8004f3a <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8004ed6:	2b00      	cmp	r3, #0
 8004ed8:	d12f      	bne.n	8004f3a <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8004eda:	4b72      	ldr	r3, [pc, #456]	@ (80050a4 <HAL_RCC_ClockConfig+0x264>)
 8004edc:	689b      	ldr	r3, [r3, #8]
 8004ede:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004ee2:	4a70      	ldr	r2, [pc, #448]	@ (80050a4 <HAL_RCC_ClockConfig+0x264>)
 8004ee4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004ee8:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8004eea:	2380      	movs	r3, #128	@ 0x80
 8004eec:	617b      	str	r3, [r7, #20]
 8004eee:	e024      	b.n	8004f3a <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	685b      	ldr	r3, [r3, #4]
 8004ef4:	2b02      	cmp	r3, #2
 8004ef6:	d107      	bne.n	8004f08 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004ef8:	4b6a      	ldr	r3, [pc, #424]	@ (80050a4 <HAL_RCC_ClockConfig+0x264>)
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004f00:	2b00      	cmp	r3, #0
 8004f02:	d109      	bne.n	8004f18 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8004f04:	2301      	movs	r3, #1
 8004f06:	e0c6      	b.n	8005096 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004f08:	4b66      	ldr	r3, [pc, #408]	@ (80050a4 <HAL_RCC_ClockConfig+0x264>)
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004f10:	2b00      	cmp	r3, #0
 8004f12:	d101      	bne.n	8004f18 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8004f14:	2301      	movs	r3, #1
 8004f16:	e0be      	b.n	8005096 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8004f18:	f000 f8ce 	bl	80050b8 <HAL_RCC_GetSysClockFreq>
 8004f1c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8004f1e:	693b      	ldr	r3, [r7, #16]
 8004f20:	4a61      	ldr	r2, [pc, #388]	@ (80050a8 <HAL_RCC_ClockConfig+0x268>)
 8004f22:	4293      	cmp	r3, r2
 8004f24:	d909      	bls.n	8004f3a <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8004f26:	4b5f      	ldr	r3, [pc, #380]	@ (80050a4 <HAL_RCC_ClockConfig+0x264>)
 8004f28:	689b      	ldr	r3, [r3, #8]
 8004f2a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004f2e:	4a5d      	ldr	r2, [pc, #372]	@ (80050a4 <HAL_RCC_ClockConfig+0x264>)
 8004f30:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004f34:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8004f36:	2380      	movs	r3, #128	@ 0x80
 8004f38:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004f3a:	4b5a      	ldr	r3, [pc, #360]	@ (80050a4 <HAL_RCC_ClockConfig+0x264>)
 8004f3c:	689b      	ldr	r3, [r3, #8]
 8004f3e:	f023 0203 	bic.w	r2, r3, #3
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	685b      	ldr	r3, [r3, #4]
 8004f46:	4957      	ldr	r1, [pc, #348]	@ (80050a4 <HAL_RCC_ClockConfig+0x264>)
 8004f48:	4313      	orrs	r3, r2
 8004f4a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004f4c:	f7fc f932 	bl	80011b4 <HAL_GetTick>
 8004f50:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004f52:	e00a      	b.n	8004f6a <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004f54:	f7fc f92e 	bl	80011b4 <HAL_GetTick>
 8004f58:	4602      	mov	r2, r0
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	1ad3      	subs	r3, r2, r3
 8004f5e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004f62:	4293      	cmp	r3, r2
 8004f64:	d901      	bls.n	8004f6a <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8004f66:	2303      	movs	r3, #3
 8004f68:	e095      	b.n	8005096 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004f6a:	4b4e      	ldr	r3, [pc, #312]	@ (80050a4 <HAL_RCC_ClockConfig+0x264>)
 8004f6c:	689b      	ldr	r3, [r3, #8]
 8004f6e:	f003 020c 	and.w	r2, r3, #12
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	685b      	ldr	r3, [r3, #4]
 8004f76:	009b      	lsls	r3, r3, #2
 8004f78:	429a      	cmp	r2, r3
 8004f7a:	d1eb      	bne.n	8004f54 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	f003 0302 	and.w	r3, r3, #2
 8004f84:	2b00      	cmp	r3, #0
 8004f86:	d023      	beq.n	8004fd0 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	f003 0304 	and.w	r3, r3, #4
 8004f90:	2b00      	cmp	r3, #0
 8004f92:	d005      	beq.n	8004fa0 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004f94:	4b43      	ldr	r3, [pc, #268]	@ (80050a4 <HAL_RCC_ClockConfig+0x264>)
 8004f96:	689b      	ldr	r3, [r3, #8]
 8004f98:	4a42      	ldr	r2, [pc, #264]	@ (80050a4 <HAL_RCC_ClockConfig+0x264>)
 8004f9a:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8004f9e:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	f003 0308 	and.w	r3, r3, #8
 8004fa8:	2b00      	cmp	r3, #0
 8004faa:	d007      	beq.n	8004fbc <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8004fac:	4b3d      	ldr	r3, [pc, #244]	@ (80050a4 <HAL_RCC_ClockConfig+0x264>)
 8004fae:	689b      	ldr	r3, [r3, #8]
 8004fb0:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8004fb4:	4a3b      	ldr	r2, [pc, #236]	@ (80050a4 <HAL_RCC_ClockConfig+0x264>)
 8004fb6:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8004fba:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004fbc:	4b39      	ldr	r3, [pc, #228]	@ (80050a4 <HAL_RCC_ClockConfig+0x264>)
 8004fbe:	689b      	ldr	r3, [r3, #8]
 8004fc0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	689b      	ldr	r3, [r3, #8]
 8004fc8:	4936      	ldr	r1, [pc, #216]	@ (80050a4 <HAL_RCC_ClockConfig+0x264>)
 8004fca:	4313      	orrs	r3, r2
 8004fcc:	608b      	str	r3, [r1, #8]
 8004fce:	e008      	b.n	8004fe2 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8004fd0:	697b      	ldr	r3, [r7, #20]
 8004fd2:	2b80      	cmp	r3, #128	@ 0x80
 8004fd4:	d105      	bne.n	8004fe2 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8004fd6:	4b33      	ldr	r3, [pc, #204]	@ (80050a4 <HAL_RCC_ClockConfig+0x264>)
 8004fd8:	689b      	ldr	r3, [r3, #8]
 8004fda:	4a32      	ldr	r2, [pc, #200]	@ (80050a4 <HAL_RCC_ClockConfig+0x264>)
 8004fdc:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004fe0:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004fe2:	4b2f      	ldr	r3, [pc, #188]	@ (80050a0 <HAL_RCC_ClockConfig+0x260>)
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	f003 030f 	and.w	r3, r3, #15
 8004fea:	683a      	ldr	r2, [r7, #0]
 8004fec:	429a      	cmp	r2, r3
 8004fee:	d21d      	bcs.n	800502c <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004ff0:	4b2b      	ldr	r3, [pc, #172]	@ (80050a0 <HAL_RCC_ClockConfig+0x260>)
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	f023 020f 	bic.w	r2, r3, #15
 8004ff8:	4929      	ldr	r1, [pc, #164]	@ (80050a0 <HAL_RCC_ClockConfig+0x260>)
 8004ffa:	683b      	ldr	r3, [r7, #0]
 8004ffc:	4313      	orrs	r3, r2
 8004ffe:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8005000:	f7fc f8d8 	bl	80011b4 <HAL_GetTick>
 8005004:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005006:	e00a      	b.n	800501e <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005008:	f7fc f8d4 	bl	80011b4 <HAL_GetTick>
 800500c:	4602      	mov	r2, r0
 800500e:	68fb      	ldr	r3, [r7, #12]
 8005010:	1ad3      	subs	r3, r2, r3
 8005012:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005016:	4293      	cmp	r3, r2
 8005018:	d901      	bls.n	800501e <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 800501a:	2303      	movs	r3, #3
 800501c:	e03b      	b.n	8005096 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800501e:	4b20      	ldr	r3, [pc, #128]	@ (80050a0 <HAL_RCC_ClockConfig+0x260>)
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	f003 030f 	and.w	r3, r3, #15
 8005026:	683a      	ldr	r2, [r7, #0]
 8005028:	429a      	cmp	r2, r3
 800502a:	d1ed      	bne.n	8005008 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	f003 0304 	and.w	r3, r3, #4
 8005034:	2b00      	cmp	r3, #0
 8005036:	d008      	beq.n	800504a <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005038:	4b1a      	ldr	r3, [pc, #104]	@ (80050a4 <HAL_RCC_ClockConfig+0x264>)
 800503a:	689b      	ldr	r3, [r3, #8]
 800503c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	68db      	ldr	r3, [r3, #12]
 8005044:	4917      	ldr	r1, [pc, #92]	@ (80050a4 <HAL_RCC_ClockConfig+0x264>)
 8005046:	4313      	orrs	r3, r2
 8005048:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	f003 0308 	and.w	r3, r3, #8
 8005052:	2b00      	cmp	r3, #0
 8005054:	d009      	beq.n	800506a <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005056:	4b13      	ldr	r3, [pc, #76]	@ (80050a4 <HAL_RCC_ClockConfig+0x264>)
 8005058:	689b      	ldr	r3, [r3, #8]
 800505a:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	691b      	ldr	r3, [r3, #16]
 8005062:	00db      	lsls	r3, r3, #3
 8005064:	490f      	ldr	r1, [pc, #60]	@ (80050a4 <HAL_RCC_ClockConfig+0x264>)
 8005066:	4313      	orrs	r3, r2
 8005068:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800506a:	f000 f825 	bl	80050b8 <HAL_RCC_GetSysClockFreq>
 800506e:	4602      	mov	r2, r0
 8005070:	4b0c      	ldr	r3, [pc, #48]	@ (80050a4 <HAL_RCC_ClockConfig+0x264>)
 8005072:	689b      	ldr	r3, [r3, #8]
 8005074:	091b      	lsrs	r3, r3, #4
 8005076:	f003 030f 	and.w	r3, r3, #15
 800507a:	490c      	ldr	r1, [pc, #48]	@ (80050ac <HAL_RCC_ClockConfig+0x26c>)
 800507c:	5ccb      	ldrb	r3, [r1, r3]
 800507e:	f003 031f 	and.w	r3, r3, #31
 8005082:	fa22 f303 	lsr.w	r3, r2, r3
 8005086:	4a0a      	ldr	r2, [pc, #40]	@ (80050b0 <HAL_RCC_ClockConfig+0x270>)
 8005088:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800508a:	4b0a      	ldr	r3, [pc, #40]	@ (80050b4 <HAL_RCC_ClockConfig+0x274>)
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	4618      	mov	r0, r3
 8005090:	f7fc f844 	bl	800111c <HAL_InitTick>
 8005094:	4603      	mov	r3, r0
}
 8005096:	4618      	mov	r0, r3
 8005098:	3718      	adds	r7, #24
 800509a:	46bd      	mov	sp, r7
 800509c:	bd80      	pop	{r7, pc}
 800509e:	bf00      	nop
 80050a0:	40022000 	.word	0x40022000
 80050a4:	40021000 	.word	0x40021000
 80050a8:	04c4b400 	.word	0x04c4b400
 80050ac:	08006c64 	.word	0x08006c64
 80050b0:	20000000 	.word	0x20000000
 80050b4:	20000004 	.word	0x20000004

080050b8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80050b8:	b480      	push	{r7}
 80050ba:	b087      	sub	sp, #28
 80050bc:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80050be:	4b2c      	ldr	r3, [pc, #176]	@ (8005170 <HAL_RCC_GetSysClockFreq+0xb8>)
 80050c0:	689b      	ldr	r3, [r3, #8]
 80050c2:	f003 030c 	and.w	r3, r3, #12
 80050c6:	2b04      	cmp	r3, #4
 80050c8:	d102      	bne.n	80050d0 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80050ca:	4b2a      	ldr	r3, [pc, #168]	@ (8005174 <HAL_RCC_GetSysClockFreq+0xbc>)
 80050cc:	613b      	str	r3, [r7, #16]
 80050ce:	e047      	b.n	8005160 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80050d0:	4b27      	ldr	r3, [pc, #156]	@ (8005170 <HAL_RCC_GetSysClockFreq+0xb8>)
 80050d2:	689b      	ldr	r3, [r3, #8]
 80050d4:	f003 030c 	and.w	r3, r3, #12
 80050d8:	2b08      	cmp	r3, #8
 80050da:	d102      	bne.n	80050e2 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80050dc:	4b26      	ldr	r3, [pc, #152]	@ (8005178 <HAL_RCC_GetSysClockFreq+0xc0>)
 80050de:	613b      	str	r3, [r7, #16]
 80050e0:	e03e      	b.n	8005160 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 80050e2:	4b23      	ldr	r3, [pc, #140]	@ (8005170 <HAL_RCC_GetSysClockFreq+0xb8>)
 80050e4:	689b      	ldr	r3, [r3, #8]
 80050e6:	f003 030c 	and.w	r3, r3, #12
 80050ea:	2b0c      	cmp	r3, #12
 80050ec:	d136      	bne.n	800515c <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80050ee:	4b20      	ldr	r3, [pc, #128]	@ (8005170 <HAL_RCC_GetSysClockFreq+0xb8>)
 80050f0:	68db      	ldr	r3, [r3, #12]
 80050f2:	f003 0303 	and.w	r3, r3, #3
 80050f6:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80050f8:	4b1d      	ldr	r3, [pc, #116]	@ (8005170 <HAL_RCC_GetSysClockFreq+0xb8>)
 80050fa:	68db      	ldr	r3, [r3, #12]
 80050fc:	091b      	lsrs	r3, r3, #4
 80050fe:	f003 030f 	and.w	r3, r3, #15
 8005102:	3301      	adds	r3, #1
 8005104:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8005106:	68fb      	ldr	r3, [r7, #12]
 8005108:	2b03      	cmp	r3, #3
 800510a:	d10c      	bne.n	8005126 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800510c:	4a1a      	ldr	r2, [pc, #104]	@ (8005178 <HAL_RCC_GetSysClockFreq+0xc0>)
 800510e:	68bb      	ldr	r3, [r7, #8]
 8005110:	fbb2 f3f3 	udiv	r3, r2, r3
 8005114:	4a16      	ldr	r2, [pc, #88]	@ (8005170 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005116:	68d2      	ldr	r2, [r2, #12]
 8005118:	0a12      	lsrs	r2, r2, #8
 800511a:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800511e:	fb02 f303 	mul.w	r3, r2, r3
 8005122:	617b      	str	r3, [r7, #20]
      break;
 8005124:	e00c      	b.n	8005140 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005126:	4a13      	ldr	r2, [pc, #76]	@ (8005174 <HAL_RCC_GetSysClockFreq+0xbc>)
 8005128:	68bb      	ldr	r3, [r7, #8]
 800512a:	fbb2 f3f3 	udiv	r3, r2, r3
 800512e:	4a10      	ldr	r2, [pc, #64]	@ (8005170 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005130:	68d2      	ldr	r2, [r2, #12]
 8005132:	0a12      	lsrs	r2, r2, #8
 8005134:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8005138:	fb02 f303 	mul.w	r3, r2, r3
 800513c:	617b      	str	r3, [r7, #20]
      break;
 800513e:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005140:	4b0b      	ldr	r3, [pc, #44]	@ (8005170 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005142:	68db      	ldr	r3, [r3, #12]
 8005144:	0e5b      	lsrs	r3, r3, #25
 8005146:	f003 0303 	and.w	r3, r3, #3
 800514a:	3301      	adds	r3, #1
 800514c:	005b      	lsls	r3, r3, #1
 800514e:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8005150:	697a      	ldr	r2, [r7, #20]
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	fbb2 f3f3 	udiv	r3, r2, r3
 8005158:	613b      	str	r3, [r7, #16]
 800515a:	e001      	b.n	8005160 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 800515c:	2300      	movs	r3, #0
 800515e:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8005160:	693b      	ldr	r3, [r7, #16]
}
 8005162:	4618      	mov	r0, r3
 8005164:	371c      	adds	r7, #28
 8005166:	46bd      	mov	sp, r7
 8005168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800516c:	4770      	bx	lr
 800516e:	bf00      	nop
 8005170:	40021000 	.word	0x40021000
 8005174:	00f42400 	.word	0x00f42400
 8005178:	016e3600 	.word	0x016e3600

0800517c <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 800517c:	b480      	push	{r7}
 800517e:	b087      	sub	sp, #28
 8005180:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8005182:	4b1e      	ldr	r3, [pc, #120]	@ (80051fc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005184:	68db      	ldr	r3, [r3, #12]
 8005186:	f003 0303 	and.w	r3, r3, #3
 800518a:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800518c:	4b1b      	ldr	r3, [pc, #108]	@ (80051fc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800518e:	68db      	ldr	r3, [r3, #12]
 8005190:	091b      	lsrs	r3, r3, #4
 8005192:	f003 030f 	and.w	r3, r3, #15
 8005196:	3301      	adds	r3, #1
 8005198:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 800519a:	693b      	ldr	r3, [r7, #16]
 800519c:	2b03      	cmp	r3, #3
 800519e:	d10c      	bne.n	80051ba <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80051a0:	4a17      	ldr	r2, [pc, #92]	@ (8005200 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80051a8:	4a14      	ldr	r2, [pc, #80]	@ (80051fc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80051aa:	68d2      	ldr	r2, [r2, #12]
 80051ac:	0a12      	lsrs	r2, r2, #8
 80051ae:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80051b2:	fb02 f303 	mul.w	r3, r2, r3
 80051b6:	617b      	str	r3, [r7, #20]
    break;
 80051b8:	e00c      	b.n	80051d4 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80051ba:	4a12      	ldr	r2, [pc, #72]	@ (8005204 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	fbb2 f3f3 	udiv	r3, r2, r3
 80051c2:	4a0e      	ldr	r2, [pc, #56]	@ (80051fc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80051c4:	68d2      	ldr	r2, [r2, #12]
 80051c6:	0a12      	lsrs	r2, r2, #8
 80051c8:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80051cc:	fb02 f303 	mul.w	r3, r2, r3
 80051d0:	617b      	str	r3, [r7, #20]
    break;
 80051d2:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80051d4:	4b09      	ldr	r3, [pc, #36]	@ (80051fc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80051d6:	68db      	ldr	r3, [r3, #12]
 80051d8:	0e5b      	lsrs	r3, r3, #25
 80051da:	f003 0303 	and.w	r3, r3, #3
 80051de:	3301      	adds	r3, #1
 80051e0:	005b      	lsls	r3, r3, #1
 80051e2:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 80051e4:	697a      	ldr	r2, [r7, #20]
 80051e6:	68bb      	ldr	r3, [r7, #8]
 80051e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80051ec:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 80051ee:	687b      	ldr	r3, [r7, #4]
}
 80051f0:	4618      	mov	r0, r3
 80051f2:	371c      	adds	r7, #28
 80051f4:	46bd      	mov	sp, r7
 80051f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051fa:	4770      	bx	lr
 80051fc:	40021000 	.word	0x40021000
 8005200:	016e3600 	.word	0x016e3600
 8005204:	00f42400 	.word	0x00f42400

08005208 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005208:	b580      	push	{r7, lr}
 800520a:	b086      	sub	sp, #24
 800520c:	af00      	add	r7, sp, #0
 800520e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005210:	2300      	movs	r3, #0
 8005212:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005214:	2300      	movs	r3, #0
 8005216:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8005220:	2b00      	cmp	r3, #0
 8005222:	f000 8098 	beq.w	8005356 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005226:	2300      	movs	r3, #0
 8005228:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800522a:	4b43      	ldr	r3, [pc, #268]	@ (8005338 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800522c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800522e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005232:	2b00      	cmp	r3, #0
 8005234:	d10d      	bne.n	8005252 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005236:	4b40      	ldr	r3, [pc, #256]	@ (8005338 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005238:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800523a:	4a3f      	ldr	r2, [pc, #252]	@ (8005338 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800523c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005240:	6593      	str	r3, [r2, #88]	@ 0x58
 8005242:	4b3d      	ldr	r3, [pc, #244]	@ (8005338 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005244:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005246:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800524a:	60bb      	str	r3, [r7, #8]
 800524c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800524e:	2301      	movs	r3, #1
 8005250:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005252:	4b3a      	ldr	r3, [pc, #232]	@ (800533c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	4a39      	ldr	r2, [pc, #228]	@ (800533c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8005258:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800525c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800525e:	f7fb ffa9 	bl	80011b4 <HAL_GetTick>
 8005262:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005264:	e009      	b.n	800527a <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005266:	f7fb ffa5 	bl	80011b4 <HAL_GetTick>
 800526a:	4602      	mov	r2, r0
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	1ad3      	subs	r3, r2, r3
 8005270:	2b02      	cmp	r3, #2
 8005272:	d902      	bls.n	800527a <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8005274:	2303      	movs	r3, #3
 8005276:	74fb      	strb	r3, [r7, #19]
        break;
 8005278:	e005      	b.n	8005286 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800527a:	4b30      	ldr	r3, [pc, #192]	@ (800533c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005282:	2b00      	cmp	r3, #0
 8005284:	d0ef      	beq.n	8005266 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8005286:	7cfb      	ldrb	r3, [r7, #19]
 8005288:	2b00      	cmp	r3, #0
 800528a:	d159      	bne.n	8005340 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800528c:	4b2a      	ldr	r3, [pc, #168]	@ (8005338 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800528e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005292:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005296:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8005298:	697b      	ldr	r3, [r7, #20]
 800529a:	2b00      	cmp	r3, #0
 800529c:	d01e      	beq.n	80052dc <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80052a2:	697a      	ldr	r2, [r7, #20]
 80052a4:	429a      	cmp	r2, r3
 80052a6:	d019      	beq.n	80052dc <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80052a8:	4b23      	ldr	r3, [pc, #140]	@ (8005338 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80052aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80052ae:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80052b2:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80052b4:	4b20      	ldr	r3, [pc, #128]	@ (8005338 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80052b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80052ba:	4a1f      	ldr	r2, [pc, #124]	@ (8005338 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80052bc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80052c0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80052c4:	4b1c      	ldr	r3, [pc, #112]	@ (8005338 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80052c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80052ca:	4a1b      	ldr	r2, [pc, #108]	@ (8005338 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80052cc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80052d0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80052d4:	4a18      	ldr	r2, [pc, #96]	@ (8005338 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80052d6:	697b      	ldr	r3, [r7, #20]
 80052d8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80052dc:	697b      	ldr	r3, [r7, #20]
 80052de:	f003 0301 	and.w	r3, r3, #1
 80052e2:	2b00      	cmp	r3, #0
 80052e4:	d016      	beq.n	8005314 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80052e6:	f7fb ff65 	bl	80011b4 <HAL_GetTick>
 80052ea:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80052ec:	e00b      	b.n	8005306 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80052ee:	f7fb ff61 	bl	80011b4 <HAL_GetTick>
 80052f2:	4602      	mov	r2, r0
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	1ad3      	subs	r3, r2, r3
 80052f8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80052fc:	4293      	cmp	r3, r2
 80052fe:	d902      	bls.n	8005306 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8005300:	2303      	movs	r3, #3
 8005302:	74fb      	strb	r3, [r7, #19]
            break;
 8005304:	e006      	b.n	8005314 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005306:	4b0c      	ldr	r3, [pc, #48]	@ (8005338 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005308:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800530c:	f003 0302 	and.w	r3, r3, #2
 8005310:	2b00      	cmp	r3, #0
 8005312:	d0ec      	beq.n	80052ee <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8005314:	7cfb      	ldrb	r3, [r7, #19]
 8005316:	2b00      	cmp	r3, #0
 8005318:	d10b      	bne.n	8005332 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800531a:	4b07      	ldr	r3, [pc, #28]	@ (8005338 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800531c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005320:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005328:	4903      	ldr	r1, [pc, #12]	@ (8005338 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800532a:	4313      	orrs	r3, r2
 800532c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8005330:	e008      	b.n	8005344 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005332:	7cfb      	ldrb	r3, [r7, #19]
 8005334:	74bb      	strb	r3, [r7, #18]
 8005336:	e005      	b.n	8005344 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8005338:	40021000 	.word	0x40021000
 800533c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005340:	7cfb      	ldrb	r3, [r7, #19]
 8005342:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005344:	7c7b      	ldrb	r3, [r7, #17]
 8005346:	2b01      	cmp	r3, #1
 8005348:	d105      	bne.n	8005356 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800534a:	4ba6      	ldr	r3, [pc, #664]	@ (80055e4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800534c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800534e:	4aa5      	ldr	r2, [pc, #660]	@ (80055e4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005350:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005354:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	f003 0301 	and.w	r3, r3, #1
 800535e:	2b00      	cmp	r3, #0
 8005360:	d00a      	beq.n	8005378 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005362:	4ba0      	ldr	r3, [pc, #640]	@ (80055e4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005364:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005368:	f023 0203 	bic.w	r2, r3, #3
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	685b      	ldr	r3, [r3, #4]
 8005370:	499c      	ldr	r1, [pc, #624]	@ (80055e4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005372:	4313      	orrs	r3, r2
 8005374:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	f003 0302 	and.w	r3, r3, #2
 8005380:	2b00      	cmp	r3, #0
 8005382:	d00a      	beq.n	800539a <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005384:	4b97      	ldr	r3, [pc, #604]	@ (80055e4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005386:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800538a:	f023 020c 	bic.w	r2, r3, #12
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	689b      	ldr	r3, [r3, #8]
 8005392:	4994      	ldr	r1, [pc, #592]	@ (80055e4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005394:	4313      	orrs	r3, r2
 8005396:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	f003 0304 	and.w	r3, r3, #4
 80053a2:	2b00      	cmp	r3, #0
 80053a4:	d00a      	beq.n	80053bc <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80053a6:	4b8f      	ldr	r3, [pc, #572]	@ (80055e4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80053a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80053ac:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	68db      	ldr	r3, [r3, #12]
 80053b4:	498b      	ldr	r1, [pc, #556]	@ (80055e4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80053b6:	4313      	orrs	r3, r2
 80053b8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	f003 0308 	and.w	r3, r3, #8
 80053c4:	2b00      	cmp	r3, #0
 80053c6:	d00a      	beq.n	80053de <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80053c8:	4b86      	ldr	r3, [pc, #536]	@ (80055e4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80053ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80053ce:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	691b      	ldr	r3, [r3, #16]
 80053d6:	4983      	ldr	r1, [pc, #524]	@ (80055e4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80053d8:	4313      	orrs	r3, r2
 80053da:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	f003 0320 	and.w	r3, r3, #32
 80053e6:	2b00      	cmp	r3, #0
 80053e8:	d00a      	beq.n	8005400 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80053ea:	4b7e      	ldr	r3, [pc, #504]	@ (80055e4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80053ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80053f0:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	695b      	ldr	r3, [r3, #20]
 80053f8:	497a      	ldr	r1, [pc, #488]	@ (80055e4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80053fa:	4313      	orrs	r3, r2
 80053fc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005408:	2b00      	cmp	r3, #0
 800540a:	d00a      	beq.n	8005422 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800540c:	4b75      	ldr	r3, [pc, #468]	@ (80055e4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800540e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005412:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	699b      	ldr	r3, [r3, #24]
 800541a:	4972      	ldr	r1, [pc, #456]	@ (80055e4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800541c:	4313      	orrs	r3, r2
 800541e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800542a:	2b00      	cmp	r3, #0
 800542c:	d00a      	beq.n	8005444 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800542e:	4b6d      	ldr	r3, [pc, #436]	@ (80055e4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005430:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005434:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	69db      	ldr	r3, [r3, #28]
 800543c:	4969      	ldr	r1, [pc, #420]	@ (80055e4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800543e:	4313      	orrs	r3, r2
 8005440:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800544c:	2b00      	cmp	r3, #0
 800544e:	d00a      	beq.n	8005466 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005450:	4b64      	ldr	r3, [pc, #400]	@ (80055e4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005452:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005456:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	6a1b      	ldr	r3, [r3, #32]
 800545e:	4961      	ldr	r1, [pc, #388]	@ (80055e4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005460:	4313      	orrs	r3, r2
 8005462:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800546e:	2b00      	cmp	r3, #0
 8005470:	d00a      	beq.n	8005488 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005472:	4b5c      	ldr	r3, [pc, #368]	@ (80055e4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005474:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005478:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005480:	4958      	ldr	r1, [pc, #352]	@ (80055e4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005482:	4313      	orrs	r3, r2
 8005484:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005490:	2b00      	cmp	r3, #0
 8005492:	d015      	beq.n	80054c0 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005494:	4b53      	ldr	r3, [pc, #332]	@ (80055e4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005496:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800549a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80054a2:	4950      	ldr	r1, [pc, #320]	@ (80055e4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80054a4:	4313      	orrs	r3, r2
 80054a6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80054ae:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80054b2:	d105      	bne.n	80054c0 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80054b4:	4b4b      	ldr	r3, [pc, #300]	@ (80055e4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80054b6:	68db      	ldr	r3, [r3, #12]
 80054b8:	4a4a      	ldr	r2, [pc, #296]	@ (80055e4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80054ba:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80054be:	60d3      	str	r3, [r2, #12]

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80054c8:	2b00      	cmp	r3, #0
 80054ca:	d015      	beq.n	80054f8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80054cc:	4b45      	ldr	r3, [pc, #276]	@ (80055e4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80054ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80054d2:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80054da:	4942      	ldr	r1, [pc, #264]	@ (80055e4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80054dc:	4313      	orrs	r3, r2
 80054de:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80054e6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80054ea:	d105      	bne.n	80054f8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80054ec:	4b3d      	ldr	r3, [pc, #244]	@ (80055e4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80054ee:	68db      	ldr	r3, [r3, #12]
 80054f0:	4a3c      	ldr	r2, [pc, #240]	@ (80055e4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80054f2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80054f6:	60d3      	str	r3, [r2, #12]

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005500:	2b00      	cmp	r3, #0
 8005502:	d015      	beq.n	8005530 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8005504:	4b37      	ldr	r3, [pc, #220]	@ (80055e4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005506:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800550a:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005512:	4934      	ldr	r1, [pc, #208]	@ (80055e4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005514:	4313      	orrs	r3, r2
 8005516:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800551e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005522:	d105      	bne.n	8005530 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005524:	4b2f      	ldr	r3, [pc, #188]	@ (80055e4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005526:	68db      	ldr	r3, [r3, #12]
 8005528:	4a2e      	ldr	r2, [pc, #184]	@ (80055e4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800552a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800552e:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005538:	2b00      	cmp	r3, #0
 800553a:	d015      	beq.n	8005568 <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800553c:	4b29      	ldr	r3, [pc, #164]	@ (80055e4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800553e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005542:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800554a:	4926      	ldr	r1, [pc, #152]	@ (80055e4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800554c:	4313      	orrs	r3, r2
 800554e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005556:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800555a:	d105      	bne.n	8005568 <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800555c:	4b21      	ldr	r3, [pc, #132]	@ (80055e4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800555e:	68db      	ldr	r3, [r3, #12]
 8005560:	4a20      	ldr	r2, [pc, #128]	@ (80055e4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005562:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005566:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005570:	2b00      	cmp	r3, #0
 8005572:	d015      	beq.n	80055a0 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005574:	4b1b      	ldr	r3, [pc, #108]	@ (80055e4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005576:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800557a:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005582:	4918      	ldr	r1, [pc, #96]	@ (80055e4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005584:	4313      	orrs	r3, r2
 8005586:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800558e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005592:	d105      	bne.n	80055a0 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005594:	4b13      	ldr	r3, [pc, #76]	@ (80055e4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005596:	68db      	ldr	r3, [r3, #12]
 8005598:	4a12      	ldr	r2, [pc, #72]	@ (80055e4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800559a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800559e:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80055a8:	2b00      	cmp	r3, #0
 80055aa:	d015      	beq.n	80055d8 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80055ac:	4b0d      	ldr	r3, [pc, #52]	@ (80055e4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80055ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80055b2:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80055ba:	490a      	ldr	r1, [pc, #40]	@ (80055e4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80055bc:	4313      	orrs	r3, r2
 80055be:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80055c6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80055ca:	d105      	bne.n	80055d8 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80055cc:	4b05      	ldr	r3, [pc, #20]	@ (80055e4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80055ce:	68db      	ldr	r3, [r3, #12]
 80055d0:	4a04      	ldr	r2, [pc, #16]	@ (80055e4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80055d2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80055d6:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 80055d8:	7cbb      	ldrb	r3, [r7, #18]
}
 80055da:	4618      	mov	r0, r3
 80055dc:	3718      	adds	r7, #24
 80055de:	46bd      	mov	sp, r7
 80055e0:	bd80      	pop	{r7, pc}
 80055e2:	bf00      	nop
 80055e4:	40021000 	.word	0x40021000

080055e8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80055e8:	b580      	push	{r7, lr}
 80055ea:	b082      	sub	sp, #8
 80055ec:	af00      	add	r7, sp, #0
 80055ee:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	2b00      	cmp	r3, #0
 80055f4:	d101      	bne.n	80055fa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80055f6:	2301      	movs	r3, #1
 80055f8:	e049      	b.n	800568e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005600:	b2db      	uxtb	r3, r3
 8005602:	2b00      	cmp	r3, #0
 8005604:	d106      	bne.n	8005614 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	2200      	movs	r2, #0
 800560a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800560e:	6878      	ldr	r0, [r7, #4]
 8005610:	f7fb fc52 	bl	8000eb8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	2202      	movs	r2, #2
 8005618:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	681a      	ldr	r2, [r3, #0]
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	3304      	adds	r3, #4
 8005624:	4619      	mov	r1, r3
 8005626:	4610      	mov	r0, r2
 8005628:	f000 fdbc 	bl	80061a4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	2201      	movs	r2, #1
 8005630:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	2201      	movs	r2, #1
 8005638:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	2201      	movs	r2, #1
 8005640:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	2201      	movs	r2, #1
 8005648:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	2201      	movs	r2, #1
 8005650:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	2201      	movs	r2, #1
 8005658:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	2201      	movs	r2, #1
 8005660:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	2201      	movs	r2, #1
 8005668:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	2201      	movs	r2, #1
 8005670:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	2201      	movs	r2, #1
 8005678:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	2201      	movs	r2, #1
 8005680:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	2201      	movs	r2, #1
 8005688:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800568c:	2300      	movs	r3, #0
}
 800568e:	4618      	mov	r0, r3
 8005690:	3708      	adds	r7, #8
 8005692:	46bd      	mov	sp, r7
 8005694:	bd80      	pop	{r7, pc}

08005696 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005696:	b580      	push	{r7, lr}
 8005698:	b082      	sub	sp, #8
 800569a:	af00      	add	r7, sp, #0
 800569c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	2b00      	cmp	r3, #0
 80056a2:	d101      	bne.n	80056a8 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80056a4:	2301      	movs	r3, #1
 80056a6:	e049      	b.n	800573c <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80056ae:	b2db      	uxtb	r3, r3
 80056b0:	2b00      	cmp	r3, #0
 80056b2:	d106      	bne.n	80056c2 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	2200      	movs	r2, #0
 80056b8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80056bc:	6878      	ldr	r0, [r7, #4]
 80056be:	f000 f841 	bl	8005744 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	2202      	movs	r2, #2
 80056c6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	681a      	ldr	r2, [r3, #0]
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	3304      	adds	r3, #4
 80056d2:	4619      	mov	r1, r3
 80056d4:	4610      	mov	r0, r2
 80056d6:	f000 fd65 	bl	80061a4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	2201      	movs	r2, #1
 80056de:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	2201      	movs	r2, #1
 80056e6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	2201      	movs	r2, #1
 80056ee:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	2201      	movs	r2, #1
 80056f6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	2201      	movs	r2, #1
 80056fe:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	2201      	movs	r2, #1
 8005706:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	2201      	movs	r2, #1
 800570e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	2201      	movs	r2, #1
 8005716:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	2201      	movs	r2, #1
 800571e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	2201      	movs	r2, #1
 8005726:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	2201      	movs	r2, #1
 800572e:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	2201      	movs	r2, #1
 8005736:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800573a:	2300      	movs	r3, #0
}
 800573c:	4618      	mov	r0, r3
 800573e:	3708      	adds	r7, #8
 8005740:	46bd      	mov	sp, r7
 8005742:	bd80      	pop	{r7, pc}

08005744 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8005744:	b480      	push	{r7}
 8005746:	b083      	sub	sp, #12
 8005748:	af00      	add	r7, sp, #0
 800574a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800574c:	bf00      	nop
 800574e:	370c      	adds	r7, #12
 8005750:	46bd      	mov	sp, r7
 8005752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005756:	4770      	bx	lr

08005758 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005758:	b580      	push	{r7, lr}
 800575a:	b084      	sub	sp, #16
 800575c:	af00      	add	r7, sp, #0
 800575e:	6078      	str	r0, [r7, #4]
 8005760:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005762:	683b      	ldr	r3, [r7, #0]
 8005764:	2b00      	cmp	r3, #0
 8005766:	d109      	bne.n	800577c <HAL_TIM_PWM_Start+0x24>
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800576e:	b2db      	uxtb	r3, r3
 8005770:	2b01      	cmp	r3, #1
 8005772:	bf14      	ite	ne
 8005774:	2301      	movne	r3, #1
 8005776:	2300      	moveq	r3, #0
 8005778:	b2db      	uxtb	r3, r3
 800577a:	e03c      	b.n	80057f6 <HAL_TIM_PWM_Start+0x9e>
 800577c:	683b      	ldr	r3, [r7, #0]
 800577e:	2b04      	cmp	r3, #4
 8005780:	d109      	bne.n	8005796 <HAL_TIM_PWM_Start+0x3e>
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8005788:	b2db      	uxtb	r3, r3
 800578a:	2b01      	cmp	r3, #1
 800578c:	bf14      	ite	ne
 800578e:	2301      	movne	r3, #1
 8005790:	2300      	moveq	r3, #0
 8005792:	b2db      	uxtb	r3, r3
 8005794:	e02f      	b.n	80057f6 <HAL_TIM_PWM_Start+0x9e>
 8005796:	683b      	ldr	r3, [r7, #0]
 8005798:	2b08      	cmp	r3, #8
 800579a:	d109      	bne.n	80057b0 <HAL_TIM_PWM_Start+0x58>
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80057a2:	b2db      	uxtb	r3, r3
 80057a4:	2b01      	cmp	r3, #1
 80057a6:	bf14      	ite	ne
 80057a8:	2301      	movne	r3, #1
 80057aa:	2300      	moveq	r3, #0
 80057ac:	b2db      	uxtb	r3, r3
 80057ae:	e022      	b.n	80057f6 <HAL_TIM_PWM_Start+0x9e>
 80057b0:	683b      	ldr	r3, [r7, #0]
 80057b2:	2b0c      	cmp	r3, #12
 80057b4:	d109      	bne.n	80057ca <HAL_TIM_PWM_Start+0x72>
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80057bc:	b2db      	uxtb	r3, r3
 80057be:	2b01      	cmp	r3, #1
 80057c0:	bf14      	ite	ne
 80057c2:	2301      	movne	r3, #1
 80057c4:	2300      	moveq	r3, #0
 80057c6:	b2db      	uxtb	r3, r3
 80057c8:	e015      	b.n	80057f6 <HAL_TIM_PWM_Start+0x9e>
 80057ca:	683b      	ldr	r3, [r7, #0]
 80057cc:	2b10      	cmp	r3, #16
 80057ce:	d109      	bne.n	80057e4 <HAL_TIM_PWM_Start+0x8c>
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80057d6:	b2db      	uxtb	r3, r3
 80057d8:	2b01      	cmp	r3, #1
 80057da:	bf14      	ite	ne
 80057dc:	2301      	movne	r3, #1
 80057de:	2300      	moveq	r3, #0
 80057e0:	b2db      	uxtb	r3, r3
 80057e2:	e008      	b.n	80057f6 <HAL_TIM_PWM_Start+0x9e>
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 80057ea:	b2db      	uxtb	r3, r3
 80057ec:	2b01      	cmp	r3, #1
 80057ee:	bf14      	ite	ne
 80057f0:	2301      	movne	r3, #1
 80057f2:	2300      	moveq	r3, #0
 80057f4:	b2db      	uxtb	r3, r3
 80057f6:	2b00      	cmp	r3, #0
 80057f8:	d001      	beq.n	80057fe <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 80057fa:	2301      	movs	r3, #1
 80057fc:	e097      	b.n	800592e <HAL_TIM_PWM_Start+0x1d6>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80057fe:	683b      	ldr	r3, [r7, #0]
 8005800:	2b00      	cmp	r3, #0
 8005802:	d104      	bne.n	800580e <HAL_TIM_PWM_Start+0xb6>
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	2202      	movs	r2, #2
 8005808:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800580c:	e023      	b.n	8005856 <HAL_TIM_PWM_Start+0xfe>
 800580e:	683b      	ldr	r3, [r7, #0]
 8005810:	2b04      	cmp	r3, #4
 8005812:	d104      	bne.n	800581e <HAL_TIM_PWM_Start+0xc6>
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	2202      	movs	r2, #2
 8005818:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800581c:	e01b      	b.n	8005856 <HAL_TIM_PWM_Start+0xfe>
 800581e:	683b      	ldr	r3, [r7, #0]
 8005820:	2b08      	cmp	r3, #8
 8005822:	d104      	bne.n	800582e <HAL_TIM_PWM_Start+0xd6>
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	2202      	movs	r2, #2
 8005828:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800582c:	e013      	b.n	8005856 <HAL_TIM_PWM_Start+0xfe>
 800582e:	683b      	ldr	r3, [r7, #0]
 8005830:	2b0c      	cmp	r3, #12
 8005832:	d104      	bne.n	800583e <HAL_TIM_PWM_Start+0xe6>
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	2202      	movs	r2, #2
 8005838:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800583c:	e00b      	b.n	8005856 <HAL_TIM_PWM_Start+0xfe>
 800583e:	683b      	ldr	r3, [r7, #0]
 8005840:	2b10      	cmp	r3, #16
 8005842:	d104      	bne.n	800584e <HAL_TIM_PWM_Start+0xf6>
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	2202      	movs	r2, #2
 8005848:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800584c:	e003      	b.n	8005856 <HAL_TIM_PWM_Start+0xfe>
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	2202      	movs	r2, #2
 8005852:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	2201      	movs	r2, #1
 800585c:	6839      	ldr	r1, [r7, #0]
 800585e:	4618      	mov	r0, r3
 8005860:	f001 f8ce 	bl	8006a00 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	4a33      	ldr	r2, [pc, #204]	@ (8005938 <HAL_TIM_PWM_Start+0x1e0>)
 800586a:	4293      	cmp	r3, r2
 800586c:	d013      	beq.n	8005896 <HAL_TIM_PWM_Start+0x13e>
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	4a32      	ldr	r2, [pc, #200]	@ (800593c <HAL_TIM_PWM_Start+0x1e4>)
 8005874:	4293      	cmp	r3, r2
 8005876:	d00e      	beq.n	8005896 <HAL_TIM_PWM_Start+0x13e>
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	4a30      	ldr	r2, [pc, #192]	@ (8005940 <HAL_TIM_PWM_Start+0x1e8>)
 800587e:	4293      	cmp	r3, r2
 8005880:	d009      	beq.n	8005896 <HAL_TIM_PWM_Start+0x13e>
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	4a2f      	ldr	r2, [pc, #188]	@ (8005944 <HAL_TIM_PWM_Start+0x1ec>)
 8005888:	4293      	cmp	r3, r2
 800588a:	d004      	beq.n	8005896 <HAL_TIM_PWM_Start+0x13e>
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	4a2d      	ldr	r2, [pc, #180]	@ (8005948 <HAL_TIM_PWM_Start+0x1f0>)
 8005892:	4293      	cmp	r3, r2
 8005894:	d101      	bne.n	800589a <HAL_TIM_PWM_Start+0x142>
 8005896:	2301      	movs	r3, #1
 8005898:	e000      	b.n	800589c <HAL_TIM_PWM_Start+0x144>
 800589a:	2300      	movs	r3, #0
 800589c:	2b00      	cmp	r3, #0
 800589e:	d007      	beq.n	80058b0 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80058ae:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	4a20      	ldr	r2, [pc, #128]	@ (8005938 <HAL_TIM_PWM_Start+0x1e0>)
 80058b6:	4293      	cmp	r3, r2
 80058b8:	d018      	beq.n	80058ec <HAL_TIM_PWM_Start+0x194>
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80058c2:	d013      	beq.n	80058ec <HAL_TIM_PWM_Start+0x194>
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	4a20      	ldr	r2, [pc, #128]	@ (800594c <HAL_TIM_PWM_Start+0x1f4>)
 80058ca:	4293      	cmp	r3, r2
 80058cc:	d00e      	beq.n	80058ec <HAL_TIM_PWM_Start+0x194>
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	4a1f      	ldr	r2, [pc, #124]	@ (8005950 <HAL_TIM_PWM_Start+0x1f8>)
 80058d4:	4293      	cmp	r3, r2
 80058d6:	d009      	beq.n	80058ec <HAL_TIM_PWM_Start+0x194>
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	4a17      	ldr	r2, [pc, #92]	@ (800593c <HAL_TIM_PWM_Start+0x1e4>)
 80058de:	4293      	cmp	r3, r2
 80058e0:	d004      	beq.n	80058ec <HAL_TIM_PWM_Start+0x194>
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	4a16      	ldr	r2, [pc, #88]	@ (8005940 <HAL_TIM_PWM_Start+0x1e8>)
 80058e8:	4293      	cmp	r3, r2
 80058ea:	d115      	bne.n	8005918 <HAL_TIM_PWM_Start+0x1c0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	689a      	ldr	r2, [r3, #8]
 80058f2:	4b18      	ldr	r3, [pc, #96]	@ (8005954 <HAL_TIM_PWM_Start+0x1fc>)
 80058f4:	4013      	ands	r3, r2
 80058f6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80058f8:	68fb      	ldr	r3, [r7, #12]
 80058fa:	2b06      	cmp	r3, #6
 80058fc:	d015      	beq.n	800592a <HAL_TIM_PWM_Start+0x1d2>
 80058fe:	68fb      	ldr	r3, [r7, #12]
 8005900:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005904:	d011      	beq.n	800592a <HAL_TIM_PWM_Start+0x1d2>
    {
      __HAL_TIM_ENABLE(htim);
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	681a      	ldr	r2, [r3, #0]
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	f042 0201 	orr.w	r2, r2, #1
 8005914:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005916:	e008      	b.n	800592a <HAL_TIM_PWM_Start+0x1d2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	681a      	ldr	r2, [r3, #0]
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	f042 0201 	orr.w	r2, r2, #1
 8005926:	601a      	str	r2, [r3, #0]
 8005928:	e000      	b.n	800592c <HAL_TIM_PWM_Start+0x1d4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800592a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800592c:	2300      	movs	r3, #0
}
 800592e:	4618      	mov	r0, r3
 8005930:	3710      	adds	r7, #16
 8005932:	46bd      	mov	sp, r7
 8005934:	bd80      	pop	{r7, pc}
 8005936:	bf00      	nop
 8005938:	40012c00 	.word	0x40012c00
 800593c:	40013400 	.word	0x40013400
 8005940:	40014000 	.word	0x40014000
 8005944:	40014400 	.word	0x40014400
 8005948:	40014800 	.word	0x40014800
 800594c:	40000400 	.word	0x40000400
 8005950:	40000800 	.word	0x40000800
 8005954:	00010007 	.word	0x00010007

08005958 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005958:	b580      	push	{r7, lr}
 800595a:	b082      	sub	sp, #8
 800595c:	af00      	add	r7, sp, #0
 800595e:	6078      	str	r0, [r7, #4]
 8005960:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	2200      	movs	r2, #0
 8005968:	6839      	ldr	r1, [r7, #0]
 800596a:	4618      	mov	r0, r3
 800596c:	f001 f848 	bl	8006a00 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	4a3e      	ldr	r2, [pc, #248]	@ (8005a70 <HAL_TIM_PWM_Stop+0x118>)
 8005976:	4293      	cmp	r3, r2
 8005978:	d013      	beq.n	80059a2 <HAL_TIM_PWM_Stop+0x4a>
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	4a3d      	ldr	r2, [pc, #244]	@ (8005a74 <HAL_TIM_PWM_Stop+0x11c>)
 8005980:	4293      	cmp	r3, r2
 8005982:	d00e      	beq.n	80059a2 <HAL_TIM_PWM_Stop+0x4a>
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	4a3b      	ldr	r2, [pc, #236]	@ (8005a78 <HAL_TIM_PWM_Stop+0x120>)
 800598a:	4293      	cmp	r3, r2
 800598c:	d009      	beq.n	80059a2 <HAL_TIM_PWM_Stop+0x4a>
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	4a3a      	ldr	r2, [pc, #232]	@ (8005a7c <HAL_TIM_PWM_Stop+0x124>)
 8005994:	4293      	cmp	r3, r2
 8005996:	d004      	beq.n	80059a2 <HAL_TIM_PWM_Stop+0x4a>
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	4a38      	ldr	r2, [pc, #224]	@ (8005a80 <HAL_TIM_PWM_Stop+0x128>)
 800599e:	4293      	cmp	r3, r2
 80059a0:	d101      	bne.n	80059a6 <HAL_TIM_PWM_Stop+0x4e>
 80059a2:	2301      	movs	r3, #1
 80059a4:	e000      	b.n	80059a8 <HAL_TIM_PWM_Stop+0x50>
 80059a6:	2300      	movs	r3, #0
 80059a8:	2b00      	cmp	r3, #0
 80059aa:	d017      	beq.n	80059dc <HAL_TIM_PWM_Stop+0x84>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	6a1a      	ldr	r2, [r3, #32]
 80059b2:	f241 1311 	movw	r3, #4369	@ 0x1111
 80059b6:	4013      	ands	r3, r2
 80059b8:	2b00      	cmp	r3, #0
 80059ba:	d10f      	bne.n	80059dc <HAL_TIM_PWM_Stop+0x84>
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	6a1a      	ldr	r2, [r3, #32]
 80059c2:	f244 4344 	movw	r3, #17476	@ 0x4444
 80059c6:	4013      	ands	r3, r2
 80059c8:	2b00      	cmp	r3, #0
 80059ca:	d107      	bne.n	80059dc <HAL_TIM_PWM_Stop+0x84>
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80059da:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	6a1a      	ldr	r2, [r3, #32]
 80059e2:	f241 1311 	movw	r3, #4369	@ 0x1111
 80059e6:	4013      	ands	r3, r2
 80059e8:	2b00      	cmp	r3, #0
 80059ea:	d10f      	bne.n	8005a0c <HAL_TIM_PWM_Stop+0xb4>
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	6a1a      	ldr	r2, [r3, #32]
 80059f2:	f244 4344 	movw	r3, #17476	@ 0x4444
 80059f6:	4013      	ands	r3, r2
 80059f8:	2b00      	cmp	r3, #0
 80059fa:	d107      	bne.n	8005a0c <HAL_TIM_PWM_Stop+0xb4>
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	681a      	ldr	r2, [r3, #0]
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	f022 0201 	bic.w	r2, r2, #1
 8005a0a:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8005a0c:	683b      	ldr	r3, [r7, #0]
 8005a0e:	2b00      	cmp	r3, #0
 8005a10:	d104      	bne.n	8005a1c <HAL_TIM_PWM_Stop+0xc4>
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	2201      	movs	r2, #1
 8005a16:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005a1a:	e023      	b.n	8005a64 <HAL_TIM_PWM_Stop+0x10c>
 8005a1c:	683b      	ldr	r3, [r7, #0]
 8005a1e:	2b04      	cmp	r3, #4
 8005a20:	d104      	bne.n	8005a2c <HAL_TIM_PWM_Stop+0xd4>
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	2201      	movs	r2, #1
 8005a26:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005a2a:	e01b      	b.n	8005a64 <HAL_TIM_PWM_Stop+0x10c>
 8005a2c:	683b      	ldr	r3, [r7, #0]
 8005a2e:	2b08      	cmp	r3, #8
 8005a30:	d104      	bne.n	8005a3c <HAL_TIM_PWM_Stop+0xe4>
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	2201      	movs	r2, #1
 8005a36:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005a3a:	e013      	b.n	8005a64 <HAL_TIM_PWM_Stop+0x10c>
 8005a3c:	683b      	ldr	r3, [r7, #0]
 8005a3e:	2b0c      	cmp	r3, #12
 8005a40:	d104      	bne.n	8005a4c <HAL_TIM_PWM_Stop+0xf4>
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	2201      	movs	r2, #1
 8005a46:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005a4a:	e00b      	b.n	8005a64 <HAL_TIM_PWM_Stop+0x10c>
 8005a4c:	683b      	ldr	r3, [r7, #0]
 8005a4e:	2b10      	cmp	r3, #16
 8005a50:	d104      	bne.n	8005a5c <HAL_TIM_PWM_Stop+0x104>
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	2201      	movs	r2, #1
 8005a56:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005a5a:	e003      	b.n	8005a64 <HAL_TIM_PWM_Stop+0x10c>
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	2201      	movs	r2, #1
 8005a60:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Return function status */
  return HAL_OK;
 8005a64:	2300      	movs	r3, #0
}
 8005a66:	4618      	mov	r0, r3
 8005a68:	3708      	adds	r7, #8
 8005a6a:	46bd      	mov	sp, r7
 8005a6c:	bd80      	pop	{r7, pc}
 8005a6e:	bf00      	nop
 8005a70:	40012c00 	.word	0x40012c00
 8005a74:	40013400 	.word	0x40013400
 8005a78:	40014000 	.word	0x40014000
 8005a7c:	40014400 	.word	0x40014400
 8005a80:	40014800 	.word	0x40014800

08005a84 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005a84:	b580      	push	{r7, lr}
 8005a86:	b084      	sub	sp, #16
 8005a88:	af00      	add	r7, sp, #0
 8005a8a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	68db      	ldr	r3, [r3, #12]
 8005a92:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	691b      	ldr	r3, [r3, #16]
 8005a9a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8005a9c:	68bb      	ldr	r3, [r7, #8]
 8005a9e:	f003 0302 	and.w	r3, r3, #2
 8005aa2:	2b00      	cmp	r3, #0
 8005aa4:	d020      	beq.n	8005ae8 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8005aa6:	68fb      	ldr	r3, [r7, #12]
 8005aa8:	f003 0302 	and.w	r3, r3, #2
 8005aac:	2b00      	cmp	r3, #0
 8005aae:	d01b      	beq.n	8005ae8 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	f06f 0202 	mvn.w	r2, #2
 8005ab8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	2201      	movs	r2, #1
 8005abe:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	699b      	ldr	r3, [r3, #24]
 8005ac6:	f003 0303 	and.w	r3, r3, #3
 8005aca:	2b00      	cmp	r3, #0
 8005acc:	d003      	beq.n	8005ad6 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005ace:	6878      	ldr	r0, [r7, #4]
 8005ad0:	f000 fb4a 	bl	8006168 <HAL_TIM_IC_CaptureCallback>
 8005ad4:	e005      	b.n	8005ae2 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005ad6:	6878      	ldr	r0, [r7, #4]
 8005ad8:	f000 fb3c 	bl	8006154 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005adc:	6878      	ldr	r0, [r7, #4]
 8005ade:	f000 fb4d 	bl	800617c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	2200      	movs	r2, #0
 8005ae6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8005ae8:	68bb      	ldr	r3, [r7, #8]
 8005aea:	f003 0304 	and.w	r3, r3, #4
 8005aee:	2b00      	cmp	r3, #0
 8005af0:	d020      	beq.n	8005b34 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8005af2:	68fb      	ldr	r3, [r7, #12]
 8005af4:	f003 0304 	and.w	r3, r3, #4
 8005af8:	2b00      	cmp	r3, #0
 8005afa:	d01b      	beq.n	8005b34 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	f06f 0204 	mvn.w	r2, #4
 8005b04:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	2202      	movs	r2, #2
 8005b0a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	699b      	ldr	r3, [r3, #24]
 8005b12:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005b16:	2b00      	cmp	r3, #0
 8005b18:	d003      	beq.n	8005b22 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005b1a:	6878      	ldr	r0, [r7, #4]
 8005b1c:	f000 fb24 	bl	8006168 <HAL_TIM_IC_CaptureCallback>
 8005b20:	e005      	b.n	8005b2e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005b22:	6878      	ldr	r0, [r7, #4]
 8005b24:	f000 fb16 	bl	8006154 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005b28:	6878      	ldr	r0, [r7, #4]
 8005b2a:	f000 fb27 	bl	800617c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	2200      	movs	r2, #0
 8005b32:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8005b34:	68bb      	ldr	r3, [r7, #8]
 8005b36:	f003 0308 	and.w	r3, r3, #8
 8005b3a:	2b00      	cmp	r3, #0
 8005b3c:	d020      	beq.n	8005b80 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8005b3e:	68fb      	ldr	r3, [r7, #12]
 8005b40:	f003 0308 	and.w	r3, r3, #8
 8005b44:	2b00      	cmp	r3, #0
 8005b46:	d01b      	beq.n	8005b80 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	f06f 0208 	mvn.w	r2, #8
 8005b50:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	2204      	movs	r2, #4
 8005b56:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	69db      	ldr	r3, [r3, #28]
 8005b5e:	f003 0303 	and.w	r3, r3, #3
 8005b62:	2b00      	cmp	r3, #0
 8005b64:	d003      	beq.n	8005b6e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005b66:	6878      	ldr	r0, [r7, #4]
 8005b68:	f000 fafe 	bl	8006168 <HAL_TIM_IC_CaptureCallback>
 8005b6c:	e005      	b.n	8005b7a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005b6e:	6878      	ldr	r0, [r7, #4]
 8005b70:	f000 faf0 	bl	8006154 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005b74:	6878      	ldr	r0, [r7, #4]
 8005b76:	f000 fb01 	bl	800617c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	2200      	movs	r2, #0
 8005b7e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8005b80:	68bb      	ldr	r3, [r7, #8]
 8005b82:	f003 0310 	and.w	r3, r3, #16
 8005b86:	2b00      	cmp	r3, #0
 8005b88:	d020      	beq.n	8005bcc <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8005b8a:	68fb      	ldr	r3, [r7, #12]
 8005b8c:	f003 0310 	and.w	r3, r3, #16
 8005b90:	2b00      	cmp	r3, #0
 8005b92:	d01b      	beq.n	8005bcc <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	f06f 0210 	mvn.w	r2, #16
 8005b9c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	2208      	movs	r2, #8
 8005ba2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	69db      	ldr	r3, [r3, #28]
 8005baa:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005bae:	2b00      	cmp	r3, #0
 8005bb0:	d003      	beq.n	8005bba <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005bb2:	6878      	ldr	r0, [r7, #4]
 8005bb4:	f000 fad8 	bl	8006168 <HAL_TIM_IC_CaptureCallback>
 8005bb8:	e005      	b.n	8005bc6 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005bba:	6878      	ldr	r0, [r7, #4]
 8005bbc:	f000 faca 	bl	8006154 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005bc0:	6878      	ldr	r0, [r7, #4]
 8005bc2:	f000 fadb 	bl	800617c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	2200      	movs	r2, #0
 8005bca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8005bcc:	68bb      	ldr	r3, [r7, #8]
 8005bce:	f003 0301 	and.w	r3, r3, #1
 8005bd2:	2b00      	cmp	r3, #0
 8005bd4:	d00c      	beq.n	8005bf0 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8005bd6:	68fb      	ldr	r3, [r7, #12]
 8005bd8:	f003 0301 	and.w	r3, r3, #1
 8005bdc:	2b00      	cmp	r3, #0
 8005bde:	d007      	beq.n	8005bf0 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	f06f 0201 	mvn.w	r2, #1
 8005be8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005bea:	6878      	ldr	r0, [r7, #4]
 8005bec:	f000 faa8 	bl	8006140 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8005bf0:	68bb      	ldr	r3, [r7, #8]
 8005bf2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005bf6:	2b00      	cmp	r3, #0
 8005bf8:	d104      	bne.n	8005c04 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8005bfa:	68bb      	ldr	r3, [r7, #8]
 8005bfc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8005c00:	2b00      	cmp	r3, #0
 8005c02:	d00c      	beq.n	8005c1e <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005c0a:	2b00      	cmp	r3, #0
 8005c0c:	d007      	beq.n	8005c1e <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8005c16:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005c18:	6878      	ldr	r0, [r7, #4]
 8005c1a:	f000 ffa3 	bl	8006b64 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8005c1e:	68bb      	ldr	r3, [r7, #8]
 8005c20:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005c24:	2b00      	cmp	r3, #0
 8005c26:	d00c      	beq.n	8005c42 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005c28:	68fb      	ldr	r3, [r7, #12]
 8005c2a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005c2e:	2b00      	cmp	r3, #0
 8005c30:	d007      	beq.n	8005c42 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8005c3a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005c3c:	6878      	ldr	r0, [r7, #4]
 8005c3e:	f000 ff9b 	bl	8006b78 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8005c42:	68bb      	ldr	r3, [r7, #8]
 8005c44:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005c48:	2b00      	cmp	r3, #0
 8005c4a:	d00c      	beq.n	8005c66 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8005c4c:	68fb      	ldr	r3, [r7, #12]
 8005c4e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005c52:	2b00      	cmp	r3, #0
 8005c54:	d007      	beq.n	8005c66 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8005c5e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005c60:	6878      	ldr	r0, [r7, #4]
 8005c62:	f000 fa95 	bl	8006190 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8005c66:	68bb      	ldr	r3, [r7, #8]
 8005c68:	f003 0320 	and.w	r3, r3, #32
 8005c6c:	2b00      	cmp	r3, #0
 8005c6e:	d00c      	beq.n	8005c8a <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8005c70:	68fb      	ldr	r3, [r7, #12]
 8005c72:	f003 0320 	and.w	r3, r3, #32
 8005c76:	2b00      	cmp	r3, #0
 8005c78:	d007      	beq.n	8005c8a <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	f06f 0220 	mvn.w	r2, #32
 8005c82:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005c84:	6878      	ldr	r0, [r7, #4]
 8005c86:	f000 ff63 	bl	8006b50 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 8005c8a:	68bb      	ldr	r3, [r7, #8]
 8005c8c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005c90:	2b00      	cmp	r3, #0
 8005c92:	d00c      	beq.n	8005cae <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 8005c94:	68fb      	ldr	r3, [r7, #12]
 8005c96:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005c9a:	2b00      	cmp	r3, #0
 8005c9c:	d007      	beq.n	8005cae <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 8005ca6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8005ca8:	6878      	ldr	r0, [r7, #4]
 8005caa:	f000 ff6f 	bl	8006b8c <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 8005cae:	68bb      	ldr	r3, [r7, #8]
 8005cb0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005cb4:	2b00      	cmp	r3, #0
 8005cb6:	d00c      	beq.n	8005cd2 <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 8005cb8:	68fb      	ldr	r3, [r7, #12]
 8005cba:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005cbe:	2b00      	cmp	r3, #0
 8005cc0:	d007      	beq.n	8005cd2 <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 8005cca:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8005ccc:	6878      	ldr	r0, [r7, #4]
 8005cce:	f000 ff67 	bl	8006ba0 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 8005cd2:	68bb      	ldr	r3, [r7, #8]
 8005cd4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005cd8:	2b00      	cmp	r3, #0
 8005cda:	d00c      	beq.n	8005cf6 <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 8005cdc:	68fb      	ldr	r3, [r7, #12]
 8005cde:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005ce2:	2b00      	cmp	r3, #0
 8005ce4:	d007      	beq.n	8005cf6 <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 8005cee:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 8005cf0:	6878      	ldr	r0, [r7, #4]
 8005cf2:	f000 ff5f 	bl	8006bb4 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 8005cf6:	68bb      	ldr	r3, [r7, #8]
 8005cf8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005cfc:	2b00      	cmp	r3, #0
 8005cfe:	d00c      	beq.n	8005d1a <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 8005d00:	68fb      	ldr	r3, [r7, #12]
 8005d02:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005d06:	2b00      	cmp	r3, #0
 8005d08:	d007      	beq.n	8005d1a <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 8005d12:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 8005d14:	6878      	ldr	r0, [r7, #4]
 8005d16:	f000 ff57 	bl	8006bc8 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005d1a:	bf00      	nop
 8005d1c:	3710      	adds	r7, #16
 8005d1e:	46bd      	mov	sp, r7
 8005d20:	bd80      	pop	{r7, pc}
	...

08005d24 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005d24:	b580      	push	{r7, lr}
 8005d26:	b086      	sub	sp, #24
 8005d28:	af00      	add	r7, sp, #0
 8005d2a:	60f8      	str	r0, [r7, #12]
 8005d2c:	60b9      	str	r1, [r7, #8]
 8005d2e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005d30:	2300      	movs	r3, #0
 8005d32:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005d34:	68fb      	ldr	r3, [r7, #12]
 8005d36:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005d3a:	2b01      	cmp	r3, #1
 8005d3c:	d101      	bne.n	8005d42 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8005d3e:	2302      	movs	r3, #2
 8005d40:	e0ff      	b.n	8005f42 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8005d42:	68fb      	ldr	r3, [r7, #12]
 8005d44:	2201      	movs	r2, #1
 8005d46:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	2b14      	cmp	r3, #20
 8005d4e:	f200 80f0 	bhi.w	8005f32 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8005d52:	a201      	add	r2, pc, #4	@ (adr r2, 8005d58 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005d54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d58:	08005dad 	.word	0x08005dad
 8005d5c:	08005f33 	.word	0x08005f33
 8005d60:	08005f33 	.word	0x08005f33
 8005d64:	08005f33 	.word	0x08005f33
 8005d68:	08005ded 	.word	0x08005ded
 8005d6c:	08005f33 	.word	0x08005f33
 8005d70:	08005f33 	.word	0x08005f33
 8005d74:	08005f33 	.word	0x08005f33
 8005d78:	08005e2f 	.word	0x08005e2f
 8005d7c:	08005f33 	.word	0x08005f33
 8005d80:	08005f33 	.word	0x08005f33
 8005d84:	08005f33 	.word	0x08005f33
 8005d88:	08005e6f 	.word	0x08005e6f
 8005d8c:	08005f33 	.word	0x08005f33
 8005d90:	08005f33 	.word	0x08005f33
 8005d94:	08005f33 	.word	0x08005f33
 8005d98:	08005eb1 	.word	0x08005eb1
 8005d9c:	08005f33 	.word	0x08005f33
 8005da0:	08005f33 	.word	0x08005f33
 8005da4:	08005f33 	.word	0x08005f33
 8005da8:	08005ef1 	.word	0x08005ef1
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005dac:	68fb      	ldr	r3, [r7, #12]
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	68b9      	ldr	r1, [r7, #8]
 8005db2:	4618      	mov	r0, r3
 8005db4:	f000 fa92 	bl	80062dc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005db8:	68fb      	ldr	r3, [r7, #12]
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	699a      	ldr	r2, [r3, #24]
 8005dbe:	68fb      	ldr	r3, [r7, #12]
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	f042 0208 	orr.w	r2, r2, #8
 8005dc6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005dc8:	68fb      	ldr	r3, [r7, #12]
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	699a      	ldr	r2, [r3, #24]
 8005dce:	68fb      	ldr	r3, [r7, #12]
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	f022 0204 	bic.w	r2, r2, #4
 8005dd6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005dd8:	68fb      	ldr	r3, [r7, #12]
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	6999      	ldr	r1, [r3, #24]
 8005dde:	68bb      	ldr	r3, [r7, #8]
 8005de0:	691a      	ldr	r2, [r3, #16]
 8005de2:	68fb      	ldr	r3, [r7, #12]
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	430a      	orrs	r2, r1
 8005de8:	619a      	str	r2, [r3, #24]
      break;
 8005dea:	e0a5      	b.n	8005f38 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005dec:	68fb      	ldr	r3, [r7, #12]
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	68b9      	ldr	r1, [r7, #8]
 8005df2:	4618      	mov	r0, r3
 8005df4:	f000 fb02 	bl	80063fc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005df8:	68fb      	ldr	r3, [r7, #12]
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	699a      	ldr	r2, [r3, #24]
 8005dfe:	68fb      	ldr	r3, [r7, #12]
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005e06:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005e08:	68fb      	ldr	r3, [r7, #12]
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	699a      	ldr	r2, [r3, #24]
 8005e0e:	68fb      	ldr	r3, [r7, #12]
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005e16:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005e18:	68fb      	ldr	r3, [r7, #12]
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	6999      	ldr	r1, [r3, #24]
 8005e1e:	68bb      	ldr	r3, [r7, #8]
 8005e20:	691b      	ldr	r3, [r3, #16]
 8005e22:	021a      	lsls	r2, r3, #8
 8005e24:	68fb      	ldr	r3, [r7, #12]
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	430a      	orrs	r2, r1
 8005e2a:	619a      	str	r2, [r3, #24]
      break;
 8005e2c:	e084      	b.n	8005f38 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005e2e:	68fb      	ldr	r3, [r7, #12]
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	68b9      	ldr	r1, [r7, #8]
 8005e34:	4618      	mov	r0, r3
 8005e36:	f000 fb6b 	bl	8006510 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005e3a:	68fb      	ldr	r3, [r7, #12]
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	69da      	ldr	r2, [r3, #28]
 8005e40:	68fb      	ldr	r3, [r7, #12]
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	f042 0208 	orr.w	r2, r2, #8
 8005e48:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005e4a:	68fb      	ldr	r3, [r7, #12]
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	69da      	ldr	r2, [r3, #28]
 8005e50:	68fb      	ldr	r3, [r7, #12]
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	f022 0204 	bic.w	r2, r2, #4
 8005e58:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005e5a:	68fb      	ldr	r3, [r7, #12]
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	69d9      	ldr	r1, [r3, #28]
 8005e60:	68bb      	ldr	r3, [r7, #8]
 8005e62:	691a      	ldr	r2, [r3, #16]
 8005e64:	68fb      	ldr	r3, [r7, #12]
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	430a      	orrs	r2, r1
 8005e6a:	61da      	str	r2, [r3, #28]
      break;
 8005e6c:	e064      	b.n	8005f38 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005e6e:	68fb      	ldr	r3, [r7, #12]
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	68b9      	ldr	r1, [r7, #8]
 8005e74:	4618      	mov	r0, r3
 8005e76:	f000 fbd3 	bl	8006620 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005e7a:	68fb      	ldr	r3, [r7, #12]
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	69da      	ldr	r2, [r3, #28]
 8005e80:	68fb      	ldr	r3, [r7, #12]
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005e88:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005e8a:	68fb      	ldr	r3, [r7, #12]
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	69da      	ldr	r2, [r3, #28]
 8005e90:	68fb      	ldr	r3, [r7, #12]
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005e98:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005e9a:	68fb      	ldr	r3, [r7, #12]
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	69d9      	ldr	r1, [r3, #28]
 8005ea0:	68bb      	ldr	r3, [r7, #8]
 8005ea2:	691b      	ldr	r3, [r3, #16]
 8005ea4:	021a      	lsls	r2, r3, #8
 8005ea6:	68fb      	ldr	r3, [r7, #12]
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	430a      	orrs	r2, r1
 8005eac:	61da      	str	r2, [r3, #28]
      break;
 8005eae:	e043      	b.n	8005f38 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8005eb0:	68fb      	ldr	r3, [r7, #12]
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	68b9      	ldr	r1, [r7, #8]
 8005eb6:	4618      	mov	r0, r3
 8005eb8:	f000 fc3c 	bl	8006734 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8005ebc:	68fb      	ldr	r3, [r7, #12]
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8005ec2:	68fb      	ldr	r3, [r7, #12]
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	f042 0208 	orr.w	r2, r2, #8
 8005eca:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8005ecc:	68fb      	ldr	r3, [r7, #12]
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8005ed2:	68fb      	ldr	r3, [r7, #12]
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	f022 0204 	bic.w	r2, r2, #4
 8005eda:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8005edc:	68fb      	ldr	r3, [r7, #12]
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8005ee2:	68bb      	ldr	r3, [r7, #8]
 8005ee4:	691a      	ldr	r2, [r3, #16]
 8005ee6:	68fb      	ldr	r3, [r7, #12]
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	430a      	orrs	r2, r1
 8005eec:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8005eee:	e023      	b.n	8005f38 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8005ef0:	68fb      	ldr	r3, [r7, #12]
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	68b9      	ldr	r1, [r7, #8]
 8005ef6:	4618      	mov	r0, r3
 8005ef8:	f000 fc80 	bl	80067fc <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8005efc:	68fb      	ldr	r3, [r7, #12]
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8005f02:	68fb      	ldr	r3, [r7, #12]
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005f0a:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8005f0c:	68fb      	ldr	r3, [r7, #12]
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8005f12:	68fb      	ldr	r3, [r7, #12]
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005f1a:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8005f1c:	68fb      	ldr	r3, [r7, #12]
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8005f22:	68bb      	ldr	r3, [r7, #8]
 8005f24:	691b      	ldr	r3, [r3, #16]
 8005f26:	021a      	lsls	r2, r3, #8
 8005f28:	68fb      	ldr	r3, [r7, #12]
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	430a      	orrs	r2, r1
 8005f2e:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8005f30:	e002      	b.n	8005f38 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8005f32:	2301      	movs	r3, #1
 8005f34:	75fb      	strb	r3, [r7, #23]
      break;
 8005f36:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005f38:	68fb      	ldr	r3, [r7, #12]
 8005f3a:	2200      	movs	r2, #0
 8005f3c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005f40:	7dfb      	ldrb	r3, [r7, #23]
}
 8005f42:	4618      	mov	r0, r3
 8005f44:	3718      	adds	r7, #24
 8005f46:	46bd      	mov	sp, r7
 8005f48:	bd80      	pop	{r7, pc}
 8005f4a:	bf00      	nop

08005f4c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005f4c:	b580      	push	{r7, lr}
 8005f4e:	b084      	sub	sp, #16
 8005f50:	af00      	add	r7, sp, #0
 8005f52:	6078      	str	r0, [r7, #4]
 8005f54:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005f56:	2300      	movs	r3, #0
 8005f58:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005f60:	2b01      	cmp	r3, #1
 8005f62:	d101      	bne.n	8005f68 <HAL_TIM_ConfigClockSource+0x1c>
 8005f64:	2302      	movs	r3, #2
 8005f66:	e0de      	b.n	8006126 <HAL_TIM_ConfigClockSource+0x1da>
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	2201      	movs	r2, #1
 8005f6c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	2202      	movs	r2, #2
 8005f74:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	689b      	ldr	r3, [r3, #8]
 8005f7e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005f80:	68bb      	ldr	r3, [r7, #8]
 8005f82:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 8005f86:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8005f8a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005f8c:	68bb      	ldr	r3, [r7, #8]
 8005f8e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005f92:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	68ba      	ldr	r2, [r7, #8]
 8005f9a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005f9c:	683b      	ldr	r3, [r7, #0]
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	4a63      	ldr	r2, [pc, #396]	@ (8006130 <HAL_TIM_ConfigClockSource+0x1e4>)
 8005fa2:	4293      	cmp	r3, r2
 8005fa4:	f000 80a9 	beq.w	80060fa <HAL_TIM_ConfigClockSource+0x1ae>
 8005fa8:	4a61      	ldr	r2, [pc, #388]	@ (8006130 <HAL_TIM_ConfigClockSource+0x1e4>)
 8005faa:	4293      	cmp	r3, r2
 8005fac:	f200 80ae 	bhi.w	800610c <HAL_TIM_ConfigClockSource+0x1c0>
 8005fb0:	4a60      	ldr	r2, [pc, #384]	@ (8006134 <HAL_TIM_ConfigClockSource+0x1e8>)
 8005fb2:	4293      	cmp	r3, r2
 8005fb4:	f000 80a1 	beq.w	80060fa <HAL_TIM_ConfigClockSource+0x1ae>
 8005fb8:	4a5e      	ldr	r2, [pc, #376]	@ (8006134 <HAL_TIM_ConfigClockSource+0x1e8>)
 8005fba:	4293      	cmp	r3, r2
 8005fbc:	f200 80a6 	bhi.w	800610c <HAL_TIM_ConfigClockSource+0x1c0>
 8005fc0:	4a5d      	ldr	r2, [pc, #372]	@ (8006138 <HAL_TIM_ConfigClockSource+0x1ec>)
 8005fc2:	4293      	cmp	r3, r2
 8005fc4:	f000 8099 	beq.w	80060fa <HAL_TIM_ConfigClockSource+0x1ae>
 8005fc8:	4a5b      	ldr	r2, [pc, #364]	@ (8006138 <HAL_TIM_ConfigClockSource+0x1ec>)
 8005fca:	4293      	cmp	r3, r2
 8005fcc:	f200 809e 	bhi.w	800610c <HAL_TIM_ConfigClockSource+0x1c0>
 8005fd0:	4a5a      	ldr	r2, [pc, #360]	@ (800613c <HAL_TIM_ConfigClockSource+0x1f0>)
 8005fd2:	4293      	cmp	r3, r2
 8005fd4:	f000 8091 	beq.w	80060fa <HAL_TIM_ConfigClockSource+0x1ae>
 8005fd8:	4a58      	ldr	r2, [pc, #352]	@ (800613c <HAL_TIM_ConfigClockSource+0x1f0>)
 8005fda:	4293      	cmp	r3, r2
 8005fdc:	f200 8096 	bhi.w	800610c <HAL_TIM_ConfigClockSource+0x1c0>
 8005fe0:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8005fe4:	f000 8089 	beq.w	80060fa <HAL_TIM_ConfigClockSource+0x1ae>
 8005fe8:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8005fec:	f200 808e 	bhi.w	800610c <HAL_TIM_ConfigClockSource+0x1c0>
 8005ff0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005ff4:	d03e      	beq.n	8006074 <HAL_TIM_ConfigClockSource+0x128>
 8005ff6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005ffa:	f200 8087 	bhi.w	800610c <HAL_TIM_ConfigClockSource+0x1c0>
 8005ffe:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006002:	f000 8086 	beq.w	8006112 <HAL_TIM_ConfigClockSource+0x1c6>
 8006006:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800600a:	d87f      	bhi.n	800610c <HAL_TIM_ConfigClockSource+0x1c0>
 800600c:	2b70      	cmp	r3, #112	@ 0x70
 800600e:	d01a      	beq.n	8006046 <HAL_TIM_ConfigClockSource+0xfa>
 8006010:	2b70      	cmp	r3, #112	@ 0x70
 8006012:	d87b      	bhi.n	800610c <HAL_TIM_ConfigClockSource+0x1c0>
 8006014:	2b60      	cmp	r3, #96	@ 0x60
 8006016:	d050      	beq.n	80060ba <HAL_TIM_ConfigClockSource+0x16e>
 8006018:	2b60      	cmp	r3, #96	@ 0x60
 800601a:	d877      	bhi.n	800610c <HAL_TIM_ConfigClockSource+0x1c0>
 800601c:	2b50      	cmp	r3, #80	@ 0x50
 800601e:	d03c      	beq.n	800609a <HAL_TIM_ConfigClockSource+0x14e>
 8006020:	2b50      	cmp	r3, #80	@ 0x50
 8006022:	d873      	bhi.n	800610c <HAL_TIM_ConfigClockSource+0x1c0>
 8006024:	2b40      	cmp	r3, #64	@ 0x40
 8006026:	d058      	beq.n	80060da <HAL_TIM_ConfigClockSource+0x18e>
 8006028:	2b40      	cmp	r3, #64	@ 0x40
 800602a:	d86f      	bhi.n	800610c <HAL_TIM_ConfigClockSource+0x1c0>
 800602c:	2b30      	cmp	r3, #48	@ 0x30
 800602e:	d064      	beq.n	80060fa <HAL_TIM_ConfigClockSource+0x1ae>
 8006030:	2b30      	cmp	r3, #48	@ 0x30
 8006032:	d86b      	bhi.n	800610c <HAL_TIM_ConfigClockSource+0x1c0>
 8006034:	2b20      	cmp	r3, #32
 8006036:	d060      	beq.n	80060fa <HAL_TIM_ConfigClockSource+0x1ae>
 8006038:	2b20      	cmp	r3, #32
 800603a:	d867      	bhi.n	800610c <HAL_TIM_ConfigClockSource+0x1c0>
 800603c:	2b00      	cmp	r3, #0
 800603e:	d05c      	beq.n	80060fa <HAL_TIM_ConfigClockSource+0x1ae>
 8006040:	2b10      	cmp	r3, #16
 8006042:	d05a      	beq.n	80060fa <HAL_TIM_ConfigClockSource+0x1ae>
 8006044:	e062      	b.n	800610c <HAL_TIM_ConfigClockSource+0x1c0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800604a:	683b      	ldr	r3, [r7, #0]
 800604c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800604e:	683b      	ldr	r3, [r7, #0]
 8006050:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006052:	683b      	ldr	r3, [r7, #0]
 8006054:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006056:	f000 fcb3 	bl	80069c0 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	689b      	ldr	r3, [r3, #8]
 8006060:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006062:	68bb      	ldr	r3, [r7, #8]
 8006064:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8006068:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	68ba      	ldr	r2, [r7, #8]
 8006070:	609a      	str	r2, [r3, #8]
      break;
 8006072:	e04f      	b.n	8006114 <HAL_TIM_ConfigClockSource+0x1c8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006078:	683b      	ldr	r3, [r7, #0]
 800607a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800607c:	683b      	ldr	r3, [r7, #0]
 800607e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006080:	683b      	ldr	r3, [r7, #0]
 8006082:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006084:	f000 fc9c 	bl	80069c0 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	689a      	ldr	r2, [r3, #8]
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8006096:	609a      	str	r2, [r3, #8]
      break;
 8006098:	e03c      	b.n	8006114 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800609e:	683b      	ldr	r3, [r7, #0]
 80060a0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80060a2:	683b      	ldr	r3, [r7, #0]
 80060a4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80060a6:	461a      	mov	r2, r3
 80060a8:	f000 fc0e 	bl	80068c8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	2150      	movs	r1, #80	@ 0x50
 80060b2:	4618      	mov	r0, r3
 80060b4:	f000 fc67 	bl	8006986 <TIM_ITRx_SetConfig>
      break;
 80060b8:	e02c      	b.n	8006114 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80060be:	683b      	ldr	r3, [r7, #0]
 80060c0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80060c2:	683b      	ldr	r3, [r7, #0]
 80060c4:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80060c6:	461a      	mov	r2, r3
 80060c8:	f000 fc2d 	bl	8006926 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	2160      	movs	r1, #96	@ 0x60
 80060d2:	4618      	mov	r0, r3
 80060d4:	f000 fc57 	bl	8006986 <TIM_ITRx_SetConfig>
      break;
 80060d8:	e01c      	b.n	8006114 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80060de:	683b      	ldr	r3, [r7, #0]
 80060e0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80060e2:	683b      	ldr	r3, [r7, #0]
 80060e4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80060e6:	461a      	mov	r2, r3
 80060e8:	f000 fbee 	bl	80068c8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	2140      	movs	r1, #64	@ 0x40
 80060f2:	4618      	mov	r0, r3
 80060f4:	f000 fc47 	bl	8006986 <TIM_ITRx_SetConfig>
      break;
 80060f8:	e00c      	b.n	8006114 <HAL_TIM_ConfigClockSource+0x1c8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	681a      	ldr	r2, [r3, #0]
 80060fe:	683b      	ldr	r3, [r7, #0]
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	4619      	mov	r1, r3
 8006104:	4610      	mov	r0, r2
 8006106:	f000 fc3e 	bl	8006986 <TIM_ITRx_SetConfig>
      break;
 800610a:	e003      	b.n	8006114 <HAL_TIM_ConfigClockSource+0x1c8>
    }

    default:
      status = HAL_ERROR;
 800610c:	2301      	movs	r3, #1
 800610e:	73fb      	strb	r3, [r7, #15]
      break;
 8006110:	e000      	b.n	8006114 <HAL_TIM_ConfigClockSource+0x1c8>
      break;
 8006112:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	2201      	movs	r2, #1
 8006118:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	2200      	movs	r2, #0
 8006120:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8006124:	7bfb      	ldrb	r3, [r7, #15]
}
 8006126:	4618      	mov	r0, r3
 8006128:	3710      	adds	r7, #16
 800612a:	46bd      	mov	sp, r7
 800612c:	bd80      	pop	{r7, pc}
 800612e:	bf00      	nop
 8006130:	00100070 	.word	0x00100070
 8006134:	00100040 	.word	0x00100040
 8006138:	00100030 	.word	0x00100030
 800613c:	00100020 	.word	0x00100020

08006140 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006140:	b480      	push	{r7}
 8006142:	b083      	sub	sp, #12
 8006144:	af00      	add	r7, sp, #0
 8006146:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8006148:	bf00      	nop
 800614a:	370c      	adds	r7, #12
 800614c:	46bd      	mov	sp, r7
 800614e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006152:	4770      	bx	lr

08006154 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006154:	b480      	push	{r7}
 8006156:	b083      	sub	sp, #12
 8006158:	af00      	add	r7, sp, #0
 800615a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800615c:	bf00      	nop
 800615e:	370c      	adds	r7, #12
 8006160:	46bd      	mov	sp, r7
 8006162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006166:	4770      	bx	lr

08006168 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006168:	b480      	push	{r7}
 800616a:	b083      	sub	sp, #12
 800616c:	af00      	add	r7, sp, #0
 800616e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006170:	bf00      	nop
 8006172:	370c      	adds	r7, #12
 8006174:	46bd      	mov	sp, r7
 8006176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800617a:	4770      	bx	lr

0800617c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800617c:	b480      	push	{r7}
 800617e:	b083      	sub	sp, #12
 8006180:	af00      	add	r7, sp, #0
 8006182:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006184:	bf00      	nop
 8006186:	370c      	adds	r7, #12
 8006188:	46bd      	mov	sp, r7
 800618a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800618e:	4770      	bx	lr

08006190 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006190:	b480      	push	{r7}
 8006192:	b083      	sub	sp, #12
 8006194:	af00      	add	r7, sp, #0
 8006196:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006198:	bf00      	nop
 800619a:	370c      	adds	r7, #12
 800619c:	46bd      	mov	sp, r7
 800619e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061a2:	4770      	bx	lr

080061a4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80061a4:	b480      	push	{r7}
 80061a6:	b085      	sub	sp, #20
 80061a8:	af00      	add	r7, sp, #0
 80061aa:	6078      	str	r0, [r7, #4]
 80061ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	4a42      	ldr	r2, [pc, #264]	@ (80062c0 <TIM_Base_SetConfig+0x11c>)
 80061b8:	4293      	cmp	r3, r2
 80061ba:	d00f      	beq.n	80061dc <TIM_Base_SetConfig+0x38>
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80061c2:	d00b      	beq.n	80061dc <TIM_Base_SetConfig+0x38>
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	4a3f      	ldr	r2, [pc, #252]	@ (80062c4 <TIM_Base_SetConfig+0x120>)
 80061c8:	4293      	cmp	r3, r2
 80061ca:	d007      	beq.n	80061dc <TIM_Base_SetConfig+0x38>
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	4a3e      	ldr	r2, [pc, #248]	@ (80062c8 <TIM_Base_SetConfig+0x124>)
 80061d0:	4293      	cmp	r3, r2
 80061d2:	d003      	beq.n	80061dc <TIM_Base_SetConfig+0x38>
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	4a3d      	ldr	r2, [pc, #244]	@ (80062cc <TIM_Base_SetConfig+0x128>)
 80061d8:	4293      	cmp	r3, r2
 80061da:	d108      	bne.n	80061ee <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80061dc:	68fb      	ldr	r3, [r7, #12]
 80061de:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80061e2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80061e4:	683b      	ldr	r3, [r7, #0]
 80061e6:	685b      	ldr	r3, [r3, #4]
 80061e8:	68fa      	ldr	r2, [r7, #12]
 80061ea:	4313      	orrs	r3, r2
 80061ec:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	4a33      	ldr	r2, [pc, #204]	@ (80062c0 <TIM_Base_SetConfig+0x11c>)
 80061f2:	4293      	cmp	r3, r2
 80061f4:	d01b      	beq.n	800622e <TIM_Base_SetConfig+0x8a>
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80061fc:	d017      	beq.n	800622e <TIM_Base_SetConfig+0x8a>
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	4a30      	ldr	r2, [pc, #192]	@ (80062c4 <TIM_Base_SetConfig+0x120>)
 8006202:	4293      	cmp	r3, r2
 8006204:	d013      	beq.n	800622e <TIM_Base_SetConfig+0x8a>
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	4a2f      	ldr	r2, [pc, #188]	@ (80062c8 <TIM_Base_SetConfig+0x124>)
 800620a:	4293      	cmp	r3, r2
 800620c:	d00f      	beq.n	800622e <TIM_Base_SetConfig+0x8a>
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	4a2e      	ldr	r2, [pc, #184]	@ (80062cc <TIM_Base_SetConfig+0x128>)
 8006212:	4293      	cmp	r3, r2
 8006214:	d00b      	beq.n	800622e <TIM_Base_SetConfig+0x8a>
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	4a2d      	ldr	r2, [pc, #180]	@ (80062d0 <TIM_Base_SetConfig+0x12c>)
 800621a:	4293      	cmp	r3, r2
 800621c:	d007      	beq.n	800622e <TIM_Base_SetConfig+0x8a>
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	4a2c      	ldr	r2, [pc, #176]	@ (80062d4 <TIM_Base_SetConfig+0x130>)
 8006222:	4293      	cmp	r3, r2
 8006224:	d003      	beq.n	800622e <TIM_Base_SetConfig+0x8a>
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	4a2b      	ldr	r2, [pc, #172]	@ (80062d8 <TIM_Base_SetConfig+0x134>)
 800622a:	4293      	cmp	r3, r2
 800622c:	d108      	bne.n	8006240 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800622e:	68fb      	ldr	r3, [r7, #12]
 8006230:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006234:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006236:	683b      	ldr	r3, [r7, #0]
 8006238:	68db      	ldr	r3, [r3, #12]
 800623a:	68fa      	ldr	r2, [r7, #12]
 800623c:	4313      	orrs	r3, r2
 800623e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006240:	68fb      	ldr	r3, [r7, #12]
 8006242:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8006246:	683b      	ldr	r3, [r7, #0]
 8006248:	695b      	ldr	r3, [r3, #20]
 800624a:	4313      	orrs	r3, r2
 800624c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	68fa      	ldr	r2, [r7, #12]
 8006252:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006254:	683b      	ldr	r3, [r7, #0]
 8006256:	689a      	ldr	r2, [r3, #8]
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800625c:	683b      	ldr	r3, [r7, #0]
 800625e:	681a      	ldr	r2, [r3, #0]
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	4a16      	ldr	r2, [pc, #88]	@ (80062c0 <TIM_Base_SetConfig+0x11c>)
 8006268:	4293      	cmp	r3, r2
 800626a:	d00f      	beq.n	800628c <TIM_Base_SetConfig+0xe8>
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	4a17      	ldr	r2, [pc, #92]	@ (80062cc <TIM_Base_SetConfig+0x128>)
 8006270:	4293      	cmp	r3, r2
 8006272:	d00b      	beq.n	800628c <TIM_Base_SetConfig+0xe8>
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	4a16      	ldr	r2, [pc, #88]	@ (80062d0 <TIM_Base_SetConfig+0x12c>)
 8006278:	4293      	cmp	r3, r2
 800627a:	d007      	beq.n	800628c <TIM_Base_SetConfig+0xe8>
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	4a15      	ldr	r2, [pc, #84]	@ (80062d4 <TIM_Base_SetConfig+0x130>)
 8006280:	4293      	cmp	r3, r2
 8006282:	d003      	beq.n	800628c <TIM_Base_SetConfig+0xe8>
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	4a14      	ldr	r2, [pc, #80]	@ (80062d8 <TIM_Base_SetConfig+0x134>)
 8006288:	4293      	cmp	r3, r2
 800628a:	d103      	bne.n	8006294 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800628c:	683b      	ldr	r3, [r7, #0]
 800628e:	691a      	ldr	r2, [r3, #16]
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	2201      	movs	r2, #1
 8006298:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	691b      	ldr	r3, [r3, #16]
 800629e:	f003 0301 	and.w	r3, r3, #1
 80062a2:	2b01      	cmp	r3, #1
 80062a4:	d105      	bne.n	80062b2 <TIM_Base_SetConfig+0x10e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	691b      	ldr	r3, [r3, #16]
 80062aa:	f023 0201 	bic.w	r2, r3, #1
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	611a      	str	r2, [r3, #16]
  }
}
 80062b2:	bf00      	nop
 80062b4:	3714      	adds	r7, #20
 80062b6:	46bd      	mov	sp, r7
 80062b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062bc:	4770      	bx	lr
 80062be:	bf00      	nop
 80062c0:	40012c00 	.word	0x40012c00
 80062c4:	40000400 	.word	0x40000400
 80062c8:	40000800 	.word	0x40000800
 80062cc:	40013400 	.word	0x40013400
 80062d0:	40014000 	.word	0x40014000
 80062d4:	40014400 	.word	0x40014400
 80062d8:	40014800 	.word	0x40014800

080062dc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80062dc:	b480      	push	{r7}
 80062de:	b087      	sub	sp, #28
 80062e0:	af00      	add	r7, sp, #0
 80062e2:	6078      	str	r0, [r7, #4]
 80062e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	6a1b      	ldr	r3, [r3, #32]
 80062ea:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	6a1b      	ldr	r3, [r3, #32]
 80062f0:	f023 0201 	bic.w	r2, r3, #1
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	685b      	ldr	r3, [r3, #4]
 80062fc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	699b      	ldr	r3, [r3, #24]
 8006302:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006304:	68fb      	ldr	r3, [r7, #12]
 8006306:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800630a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800630e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006310:	68fb      	ldr	r3, [r7, #12]
 8006312:	f023 0303 	bic.w	r3, r3, #3
 8006316:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006318:	683b      	ldr	r3, [r7, #0]
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	68fa      	ldr	r2, [r7, #12]
 800631e:	4313      	orrs	r3, r2
 8006320:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006322:	697b      	ldr	r3, [r7, #20]
 8006324:	f023 0302 	bic.w	r3, r3, #2
 8006328:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800632a:	683b      	ldr	r3, [r7, #0]
 800632c:	689b      	ldr	r3, [r3, #8]
 800632e:	697a      	ldr	r2, [r7, #20]
 8006330:	4313      	orrs	r3, r2
 8006332:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	4a2c      	ldr	r2, [pc, #176]	@ (80063e8 <TIM_OC1_SetConfig+0x10c>)
 8006338:	4293      	cmp	r3, r2
 800633a:	d00f      	beq.n	800635c <TIM_OC1_SetConfig+0x80>
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	4a2b      	ldr	r2, [pc, #172]	@ (80063ec <TIM_OC1_SetConfig+0x110>)
 8006340:	4293      	cmp	r3, r2
 8006342:	d00b      	beq.n	800635c <TIM_OC1_SetConfig+0x80>
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	4a2a      	ldr	r2, [pc, #168]	@ (80063f0 <TIM_OC1_SetConfig+0x114>)
 8006348:	4293      	cmp	r3, r2
 800634a:	d007      	beq.n	800635c <TIM_OC1_SetConfig+0x80>
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	4a29      	ldr	r2, [pc, #164]	@ (80063f4 <TIM_OC1_SetConfig+0x118>)
 8006350:	4293      	cmp	r3, r2
 8006352:	d003      	beq.n	800635c <TIM_OC1_SetConfig+0x80>
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	4a28      	ldr	r2, [pc, #160]	@ (80063f8 <TIM_OC1_SetConfig+0x11c>)
 8006358:	4293      	cmp	r3, r2
 800635a:	d10c      	bne.n	8006376 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800635c:	697b      	ldr	r3, [r7, #20]
 800635e:	f023 0308 	bic.w	r3, r3, #8
 8006362:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006364:	683b      	ldr	r3, [r7, #0]
 8006366:	68db      	ldr	r3, [r3, #12]
 8006368:	697a      	ldr	r2, [r7, #20]
 800636a:	4313      	orrs	r3, r2
 800636c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800636e:	697b      	ldr	r3, [r7, #20]
 8006370:	f023 0304 	bic.w	r3, r3, #4
 8006374:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	4a1b      	ldr	r2, [pc, #108]	@ (80063e8 <TIM_OC1_SetConfig+0x10c>)
 800637a:	4293      	cmp	r3, r2
 800637c:	d00f      	beq.n	800639e <TIM_OC1_SetConfig+0xc2>
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	4a1a      	ldr	r2, [pc, #104]	@ (80063ec <TIM_OC1_SetConfig+0x110>)
 8006382:	4293      	cmp	r3, r2
 8006384:	d00b      	beq.n	800639e <TIM_OC1_SetConfig+0xc2>
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	4a19      	ldr	r2, [pc, #100]	@ (80063f0 <TIM_OC1_SetConfig+0x114>)
 800638a:	4293      	cmp	r3, r2
 800638c:	d007      	beq.n	800639e <TIM_OC1_SetConfig+0xc2>
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	4a18      	ldr	r2, [pc, #96]	@ (80063f4 <TIM_OC1_SetConfig+0x118>)
 8006392:	4293      	cmp	r3, r2
 8006394:	d003      	beq.n	800639e <TIM_OC1_SetConfig+0xc2>
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	4a17      	ldr	r2, [pc, #92]	@ (80063f8 <TIM_OC1_SetConfig+0x11c>)
 800639a:	4293      	cmp	r3, r2
 800639c:	d111      	bne.n	80063c2 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800639e:	693b      	ldr	r3, [r7, #16]
 80063a0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80063a4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80063a6:	693b      	ldr	r3, [r7, #16]
 80063a8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80063ac:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80063ae:	683b      	ldr	r3, [r7, #0]
 80063b0:	695b      	ldr	r3, [r3, #20]
 80063b2:	693a      	ldr	r2, [r7, #16]
 80063b4:	4313      	orrs	r3, r2
 80063b6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80063b8:	683b      	ldr	r3, [r7, #0]
 80063ba:	699b      	ldr	r3, [r3, #24]
 80063bc:	693a      	ldr	r2, [r7, #16]
 80063be:	4313      	orrs	r3, r2
 80063c0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	693a      	ldr	r2, [r7, #16]
 80063c6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	68fa      	ldr	r2, [r7, #12]
 80063cc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80063ce:	683b      	ldr	r3, [r7, #0]
 80063d0:	685a      	ldr	r2, [r3, #4]
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	697a      	ldr	r2, [r7, #20]
 80063da:	621a      	str	r2, [r3, #32]
}
 80063dc:	bf00      	nop
 80063de:	371c      	adds	r7, #28
 80063e0:	46bd      	mov	sp, r7
 80063e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063e6:	4770      	bx	lr
 80063e8:	40012c00 	.word	0x40012c00
 80063ec:	40013400 	.word	0x40013400
 80063f0:	40014000 	.word	0x40014000
 80063f4:	40014400 	.word	0x40014400
 80063f8:	40014800 	.word	0x40014800

080063fc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80063fc:	b480      	push	{r7}
 80063fe:	b087      	sub	sp, #28
 8006400:	af00      	add	r7, sp, #0
 8006402:	6078      	str	r0, [r7, #4]
 8006404:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	6a1b      	ldr	r3, [r3, #32]
 800640a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	6a1b      	ldr	r3, [r3, #32]
 8006410:	f023 0210 	bic.w	r2, r3, #16
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	685b      	ldr	r3, [r3, #4]
 800641c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	699b      	ldr	r3, [r3, #24]
 8006422:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006424:	68fb      	ldr	r3, [r7, #12]
 8006426:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800642a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800642e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006430:	68fb      	ldr	r3, [r7, #12]
 8006432:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006436:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006438:	683b      	ldr	r3, [r7, #0]
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	021b      	lsls	r3, r3, #8
 800643e:	68fa      	ldr	r2, [r7, #12]
 8006440:	4313      	orrs	r3, r2
 8006442:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006444:	697b      	ldr	r3, [r7, #20]
 8006446:	f023 0320 	bic.w	r3, r3, #32
 800644a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800644c:	683b      	ldr	r3, [r7, #0]
 800644e:	689b      	ldr	r3, [r3, #8]
 8006450:	011b      	lsls	r3, r3, #4
 8006452:	697a      	ldr	r2, [r7, #20]
 8006454:	4313      	orrs	r3, r2
 8006456:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	4a28      	ldr	r2, [pc, #160]	@ (80064fc <TIM_OC2_SetConfig+0x100>)
 800645c:	4293      	cmp	r3, r2
 800645e:	d003      	beq.n	8006468 <TIM_OC2_SetConfig+0x6c>
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	4a27      	ldr	r2, [pc, #156]	@ (8006500 <TIM_OC2_SetConfig+0x104>)
 8006464:	4293      	cmp	r3, r2
 8006466:	d10d      	bne.n	8006484 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006468:	697b      	ldr	r3, [r7, #20]
 800646a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800646e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006470:	683b      	ldr	r3, [r7, #0]
 8006472:	68db      	ldr	r3, [r3, #12]
 8006474:	011b      	lsls	r3, r3, #4
 8006476:	697a      	ldr	r2, [r7, #20]
 8006478:	4313      	orrs	r3, r2
 800647a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800647c:	697b      	ldr	r3, [r7, #20]
 800647e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006482:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	4a1d      	ldr	r2, [pc, #116]	@ (80064fc <TIM_OC2_SetConfig+0x100>)
 8006488:	4293      	cmp	r3, r2
 800648a:	d00f      	beq.n	80064ac <TIM_OC2_SetConfig+0xb0>
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	4a1c      	ldr	r2, [pc, #112]	@ (8006500 <TIM_OC2_SetConfig+0x104>)
 8006490:	4293      	cmp	r3, r2
 8006492:	d00b      	beq.n	80064ac <TIM_OC2_SetConfig+0xb0>
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	4a1b      	ldr	r2, [pc, #108]	@ (8006504 <TIM_OC2_SetConfig+0x108>)
 8006498:	4293      	cmp	r3, r2
 800649a:	d007      	beq.n	80064ac <TIM_OC2_SetConfig+0xb0>
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	4a1a      	ldr	r2, [pc, #104]	@ (8006508 <TIM_OC2_SetConfig+0x10c>)
 80064a0:	4293      	cmp	r3, r2
 80064a2:	d003      	beq.n	80064ac <TIM_OC2_SetConfig+0xb0>
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	4a19      	ldr	r2, [pc, #100]	@ (800650c <TIM_OC2_SetConfig+0x110>)
 80064a8:	4293      	cmp	r3, r2
 80064aa:	d113      	bne.n	80064d4 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80064ac:	693b      	ldr	r3, [r7, #16]
 80064ae:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80064b2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80064b4:	693b      	ldr	r3, [r7, #16]
 80064b6:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80064ba:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80064bc:	683b      	ldr	r3, [r7, #0]
 80064be:	695b      	ldr	r3, [r3, #20]
 80064c0:	009b      	lsls	r3, r3, #2
 80064c2:	693a      	ldr	r2, [r7, #16]
 80064c4:	4313      	orrs	r3, r2
 80064c6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80064c8:	683b      	ldr	r3, [r7, #0]
 80064ca:	699b      	ldr	r3, [r3, #24]
 80064cc:	009b      	lsls	r3, r3, #2
 80064ce:	693a      	ldr	r2, [r7, #16]
 80064d0:	4313      	orrs	r3, r2
 80064d2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	693a      	ldr	r2, [r7, #16]
 80064d8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	68fa      	ldr	r2, [r7, #12]
 80064de:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80064e0:	683b      	ldr	r3, [r7, #0]
 80064e2:	685a      	ldr	r2, [r3, #4]
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	697a      	ldr	r2, [r7, #20]
 80064ec:	621a      	str	r2, [r3, #32]
}
 80064ee:	bf00      	nop
 80064f0:	371c      	adds	r7, #28
 80064f2:	46bd      	mov	sp, r7
 80064f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064f8:	4770      	bx	lr
 80064fa:	bf00      	nop
 80064fc:	40012c00 	.word	0x40012c00
 8006500:	40013400 	.word	0x40013400
 8006504:	40014000 	.word	0x40014000
 8006508:	40014400 	.word	0x40014400
 800650c:	40014800 	.word	0x40014800

08006510 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006510:	b480      	push	{r7}
 8006512:	b087      	sub	sp, #28
 8006514:	af00      	add	r7, sp, #0
 8006516:	6078      	str	r0, [r7, #4]
 8006518:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	6a1b      	ldr	r3, [r3, #32]
 800651e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	6a1b      	ldr	r3, [r3, #32]
 8006524:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	685b      	ldr	r3, [r3, #4]
 8006530:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	69db      	ldr	r3, [r3, #28]
 8006536:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006538:	68fb      	ldr	r3, [r7, #12]
 800653a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800653e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006542:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006544:	68fb      	ldr	r3, [r7, #12]
 8006546:	f023 0303 	bic.w	r3, r3, #3
 800654a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800654c:	683b      	ldr	r3, [r7, #0]
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	68fa      	ldr	r2, [r7, #12]
 8006552:	4313      	orrs	r3, r2
 8006554:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006556:	697b      	ldr	r3, [r7, #20]
 8006558:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800655c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800655e:	683b      	ldr	r3, [r7, #0]
 8006560:	689b      	ldr	r3, [r3, #8]
 8006562:	021b      	lsls	r3, r3, #8
 8006564:	697a      	ldr	r2, [r7, #20]
 8006566:	4313      	orrs	r3, r2
 8006568:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	4a27      	ldr	r2, [pc, #156]	@ (800660c <TIM_OC3_SetConfig+0xfc>)
 800656e:	4293      	cmp	r3, r2
 8006570:	d003      	beq.n	800657a <TIM_OC3_SetConfig+0x6a>
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	4a26      	ldr	r2, [pc, #152]	@ (8006610 <TIM_OC3_SetConfig+0x100>)
 8006576:	4293      	cmp	r3, r2
 8006578:	d10d      	bne.n	8006596 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800657a:	697b      	ldr	r3, [r7, #20]
 800657c:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8006580:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006582:	683b      	ldr	r3, [r7, #0]
 8006584:	68db      	ldr	r3, [r3, #12]
 8006586:	021b      	lsls	r3, r3, #8
 8006588:	697a      	ldr	r2, [r7, #20]
 800658a:	4313      	orrs	r3, r2
 800658c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800658e:	697b      	ldr	r3, [r7, #20]
 8006590:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8006594:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	4a1c      	ldr	r2, [pc, #112]	@ (800660c <TIM_OC3_SetConfig+0xfc>)
 800659a:	4293      	cmp	r3, r2
 800659c:	d00f      	beq.n	80065be <TIM_OC3_SetConfig+0xae>
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	4a1b      	ldr	r2, [pc, #108]	@ (8006610 <TIM_OC3_SetConfig+0x100>)
 80065a2:	4293      	cmp	r3, r2
 80065a4:	d00b      	beq.n	80065be <TIM_OC3_SetConfig+0xae>
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	4a1a      	ldr	r2, [pc, #104]	@ (8006614 <TIM_OC3_SetConfig+0x104>)
 80065aa:	4293      	cmp	r3, r2
 80065ac:	d007      	beq.n	80065be <TIM_OC3_SetConfig+0xae>
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	4a19      	ldr	r2, [pc, #100]	@ (8006618 <TIM_OC3_SetConfig+0x108>)
 80065b2:	4293      	cmp	r3, r2
 80065b4:	d003      	beq.n	80065be <TIM_OC3_SetConfig+0xae>
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	4a18      	ldr	r2, [pc, #96]	@ (800661c <TIM_OC3_SetConfig+0x10c>)
 80065ba:	4293      	cmp	r3, r2
 80065bc:	d113      	bne.n	80065e6 <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80065be:	693b      	ldr	r3, [r7, #16]
 80065c0:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80065c4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80065c6:	693b      	ldr	r3, [r7, #16]
 80065c8:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80065cc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80065ce:	683b      	ldr	r3, [r7, #0]
 80065d0:	695b      	ldr	r3, [r3, #20]
 80065d2:	011b      	lsls	r3, r3, #4
 80065d4:	693a      	ldr	r2, [r7, #16]
 80065d6:	4313      	orrs	r3, r2
 80065d8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80065da:	683b      	ldr	r3, [r7, #0]
 80065dc:	699b      	ldr	r3, [r3, #24]
 80065de:	011b      	lsls	r3, r3, #4
 80065e0:	693a      	ldr	r2, [r7, #16]
 80065e2:	4313      	orrs	r3, r2
 80065e4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	693a      	ldr	r2, [r7, #16]
 80065ea:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	68fa      	ldr	r2, [r7, #12]
 80065f0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80065f2:	683b      	ldr	r3, [r7, #0]
 80065f4:	685a      	ldr	r2, [r3, #4]
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	697a      	ldr	r2, [r7, #20]
 80065fe:	621a      	str	r2, [r3, #32]
}
 8006600:	bf00      	nop
 8006602:	371c      	adds	r7, #28
 8006604:	46bd      	mov	sp, r7
 8006606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800660a:	4770      	bx	lr
 800660c:	40012c00 	.word	0x40012c00
 8006610:	40013400 	.word	0x40013400
 8006614:	40014000 	.word	0x40014000
 8006618:	40014400 	.word	0x40014400
 800661c:	40014800 	.word	0x40014800

08006620 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006620:	b480      	push	{r7}
 8006622:	b087      	sub	sp, #28
 8006624:	af00      	add	r7, sp, #0
 8006626:	6078      	str	r0, [r7, #4]
 8006628:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	6a1b      	ldr	r3, [r3, #32]
 800662e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	6a1b      	ldr	r3, [r3, #32]
 8006634:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	685b      	ldr	r3, [r3, #4]
 8006640:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	69db      	ldr	r3, [r3, #28]
 8006646:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006648:	68fb      	ldr	r3, [r7, #12]
 800664a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800664e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006652:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006654:	68fb      	ldr	r3, [r7, #12]
 8006656:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800665a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800665c:	683b      	ldr	r3, [r7, #0]
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	021b      	lsls	r3, r3, #8
 8006662:	68fa      	ldr	r2, [r7, #12]
 8006664:	4313      	orrs	r3, r2
 8006666:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006668:	697b      	ldr	r3, [r7, #20]
 800666a:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800666e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006670:	683b      	ldr	r3, [r7, #0]
 8006672:	689b      	ldr	r3, [r3, #8]
 8006674:	031b      	lsls	r3, r3, #12
 8006676:	697a      	ldr	r2, [r7, #20]
 8006678:	4313      	orrs	r3, r2
 800667a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	4a28      	ldr	r2, [pc, #160]	@ (8006720 <TIM_OC4_SetConfig+0x100>)
 8006680:	4293      	cmp	r3, r2
 8006682:	d003      	beq.n	800668c <TIM_OC4_SetConfig+0x6c>
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	4a27      	ldr	r2, [pc, #156]	@ (8006724 <TIM_OC4_SetConfig+0x104>)
 8006688:	4293      	cmp	r3, r2
 800668a:	d10d      	bne.n	80066a8 <TIM_OC4_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 800668c:	697b      	ldr	r3, [r7, #20]
 800668e:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8006692:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8006694:	683b      	ldr	r3, [r7, #0]
 8006696:	68db      	ldr	r3, [r3, #12]
 8006698:	031b      	lsls	r3, r3, #12
 800669a:	697a      	ldr	r2, [r7, #20]
 800669c:	4313      	orrs	r3, r2
 800669e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 80066a0:	697b      	ldr	r3, [r7, #20]
 80066a2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80066a6:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	4a1d      	ldr	r2, [pc, #116]	@ (8006720 <TIM_OC4_SetConfig+0x100>)
 80066ac:	4293      	cmp	r3, r2
 80066ae:	d00f      	beq.n	80066d0 <TIM_OC4_SetConfig+0xb0>
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	4a1c      	ldr	r2, [pc, #112]	@ (8006724 <TIM_OC4_SetConfig+0x104>)
 80066b4:	4293      	cmp	r3, r2
 80066b6:	d00b      	beq.n	80066d0 <TIM_OC4_SetConfig+0xb0>
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	4a1b      	ldr	r2, [pc, #108]	@ (8006728 <TIM_OC4_SetConfig+0x108>)
 80066bc:	4293      	cmp	r3, r2
 80066be:	d007      	beq.n	80066d0 <TIM_OC4_SetConfig+0xb0>
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	4a1a      	ldr	r2, [pc, #104]	@ (800672c <TIM_OC4_SetConfig+0x10c>)
 80066c4:	4293      	cmp	r3, r2
 80066c6:	d003      	beq.n	80066d0 <TIM_OC4_SetConfig+0xb0>
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	4a19      	ldr	r2, [pc, #100]	@ (8006730 <TIM_OC4_SetConfig+0x110>)
 80066cc:	4293      	cmp	r3, r2
 80066ce:	d113      	bne.n	80066f8 <TIM_OC4_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80066d0:	693b      	ldr	r3, [r7, #16]
 80066d2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80066d6:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 80066d8:	693b      	ldr	r3, [r7, #16]
 80066da:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80066de:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80066e0:	683b      	ldr	r3, [r7, #0]
 80066e2:	695b      	ldr	r3, [r3, #20]
 80066e4:	019b      	lsls	r3, r3, #6
 80066e6:	693a      	ldr	r2, [r7, #16]
 80066e8:	4313      	orrs	r3, r2
 80066ea:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 80066ec:	683b      	ldr	r3, [r7, #0]
 80066ee:	699b      	ldr	r3, [r3, #24]
 80066f0:	019b      	lsls	r3, r3, #6
 80066f2:	693a      	ldr	r2, [r7, #16]
 80066f4:	4313      	orrs	r3, r2
 80066f6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	693a      	ldr	r2, [r7, #16]
 80066fc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	68fa      	ldr	r2, [r7, #12]
 8006702:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006704:	683b      	ldr	r3, [r7, #0]
 8006706:	685a      	ldr	r2, [r3, #4]
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	697a      	ldr	r2, [r7, #20]
 8006710:	621a      	str	r2, [r3, #32]
}
 8006712:	bf00      	nop
 8006714:	371c      	adds	r7, #28
 8006716:	46bd      	mov	sp, r7
 8006718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800671c:	4770      	bx	lr
 800671e:	bf00      	nop
 8006720:	40012c00 	.word	0x40012c00
 8006724:	40013400 	.word	0x40013400
 8006728:	40014000 	.word	0x40014000
 800672c:	40014400 	.word	0x40014400
 8006730:	40014800 	.word	0x40014800

08006734 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8006734:	b480      	push	{r7}
 8006736:	b087      	sub	sp, #28
 8006738:	af00      	add	r7, sp, #0
 800673a:	6078      	str	r0, [r7, #4]
 800673c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	6a1b      	ldr	r3, [r3, #32]
 8006742:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	6a1b      	ldr	r3, [r3, #32]
 8006748:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	685b      	ldr	r3, [r3, #4]
 8006754:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800675a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800675c:	68fb      	ldr	r3, [r7, #12]
 800675e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006762:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006766:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006768:	683b      	ldr	r3, [r7, #0]
 800676a:	681b      	ldr	r3, [r3, #0]
 800676c:	68fa      	ldr	r2, [r7, #12]
 800676e:	4313      	orrs	r3, r2
 8006770:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8006772:	693b      	ldr	r3, [r7, #16]
 8006774:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8006778:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800677a:	683b      	ldr	r3, [r7, #0]
 800677c:	689b      	ldr	r3, [r3, #8]
 800677e:	041b      	lsls	r3, r3, #16
 8006780:	693a      	ldr	r2, [r7, #16]
 8006782:	4313      	orrs	r3, r2
 8006784:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	4a17      	ldr	r2, [pc, #92]	@ (80067e8 <TIM_OC5_SetConfig+0xb4>)
 800678a:	4293      	cmp	r3, r2
 800678c:	d00f      	beq.n	80067ae <TIM_OC5_SetConfig+0x7a>
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	4a16      	ldr	r2, [pc, #88]	@ (80067ec <TIM_OC5_SetConfig+0xb8>)
 8006792:	4293      	cmp	r3, r2
 8006794:	d00b      	beq.n	80067ae <TIM_OC5_SetConfig+0x7a>
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	4a15      	ldr	r2, [pc, #84]	@ (80067f0 <TIM_OC5_SetConfig+0xbc>)
 800679a:	4293      	cmp	r3, r2
 800679c:	d007      	beq.n	80067ae <TIM_OC5_SetConfig+0x7a>
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	4a14      	ldr	r2, [pc, #80]	@ (80067f4 <TIM_OC5_SetConfig+0xc0>)
 80067a2:	4293      	cmp	r3, r2
 80067a4:	d003      	beq.n	80067ae <TIM_OC5_SetConfig+0x7a>
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	4a13      	ldr	r2, [pc, #76]	@ (80067f8 <TIM_OC5_SetConfig+0xc4>)
 80067aa:	4293      	cmp	r3, r2
 80067ac:	d109      	bne.n	80067c2 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80067ae:	697b      	ldr	r3, [r7, #20]
 80067b0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80067b4:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80067b6:	683b      	ldr	r3, [r7, #0]
 80067b8:	695b      	ldr	r3, [r3, #20]
 80067ba:	021b      	lsls	r3, r3, #8
 80067bc:	697a      	ldr	r2, [r7, #20]
 80067be:	4313      	orrs	r3, r2
 80067c0:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	697a      	ldr	r2, [r7, #20]
 80067c6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	68fa      	ldr	r2, [r7, #12]
 80067cc:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80067ce:	683b      	ldr	r3, [r7, #0]
 80067d0:	685a      	ldr	r2, [r3, #4]
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	693a      	ldr	r2, [r7, #16]
 80067da:	621a      	str	r2, [r3, #32]
}
 80067dc:	bf00      	nop
 80067de:	371c      	adds	r7, #28
 80067e0:	46bd      	mov	sp, r7
 80067e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067e6:	4770      	bx	lr
 80067e8:	40012c00 	.word	0x40012c00
 80067ec:	40013400 	.word	0x40013400
 80067f0:	40014000 	.word	0x40014000
 80067f4:	40014400 	.word	0x40014400
 80067f8:	40014800 	.word	0x40014800

080067fc <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80067fc:	b480      	push	{r7}
 80067fe:	b087      	sub	sp, #28
 8006800:	af00      	add	r7, sp, #0
 8006802:	6078      	str	r0, [r7, #4]
 8006804:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	6a1b      	ldr	r3, [r3, #32]
 800680a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	6a1b      	ldr	r3, [r3, #32]
 8006810:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	685b      	ldr	r3, [r3, #4]
 800681c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006822:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8006824:	68fb      	ldr	r3, [r7, #12]
 8006826:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800682a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800682e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006830:	683b      	ldr	r3, [r7, #0]
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	021b      	lsls	r3, r3, #8
 8006836:	68fa      	ldr	r2, [r7, #12]
 8006838:	4313      	orrs	r3, r2
 800683a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800683c:	693b      	ldr	r3, [r7, #16]
 800683e:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8006842:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8006844:	683b      	ldr	r3, [r7, #0]
 8006846:	689b      	ldr	r3, [r3, #8]
 8006848:	051b      	lsls	r3, r3, #20
 800684a:	693a      	ldr	r2, [r7, #16]
 800684c:	4313      	orrs	r3, r2
 800684e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	4a18      	ldr	r2, [pc, #96]	@ (80068b4 <TIM_OC6_SetConfig+0xb8>)
 8006854:	4293      	cmp	r3, r2
 8006856:	d00f      	beq.n	8006878 <TIM_OC6_SetConfig+0x7c>
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	4a17      	ldr	r2, [pc, #92]	@ (80068b8 <TIM_OC6_SetConfig+0xbc>)
 800685c:	4293      	cmp	r3, r2
 800685e:	d00b      	beq.n	8006878 <TIM_OC6_SetConfig+0x7c>
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	4a16      	ldr	r2, [pc, #88]	@ (80068bc <TIM_OC6_SetConfig+0xc0>)
 8006864:	4293      	cmp	r3, r2
 8006866:	d007      	beq.n	8006878 <TIM_OC6_SetConfig+0x7c>
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	4a15      	ldr	r2, [pc, #84]	@ (80068c0 <TIM_OC6_SetConfig+0xc4>)
 800686c:	4293      	cmp	r3, r2
 800686e:	d003      	beq.n	8006878 <TIM_OC6_SetConfig+0x7c>
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	4a14      	ldr	r2, [pc, #80]	@ (80068c4 <TIM_OC6_SetConfig+0xc8>)
 8006874:	4293      	cmp	r3, r2
 8006876:	d109      	bne.n	800688c <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8006878:	697b      	ldr	r3, [r7, #20]
 800687a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800687e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8006880:	683b      	ldr	r3, [r7, #0]
 8006882:	695b      	ldr	r3, [r3, #20]
 8006884:	029b      	lsls	r3, r3, #10
 8006886:	697a      	ldr	r2, [r7, #20]
 8006888:	4313      	orrs	r3, r2
 800688a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	697a      	ldr	r2, [r7, #20]
 8006890:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	68fa      	ldr	r2, [r7, #12]
 8006896:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8006898:	683b      	ldr	r3, [r7, #0]
 800689a:	685a      	ldr	r2, [r3, #4]
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	693a      	ldr	r2, [r7, #16]
 80068a4:	621a      	str	r2, [r3, #32]
}
 80068a6:	bf00      	nop
 80068a8:	371c      	adds	r7, #28
 80068aa:	46bd      	mov	sp, r7
 80068ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068b0:	4770      	bx	lr
 80068b2:	bf00      	nop
 80068b4:	40012c00 	.word	0x40012c00
 80068b8:	40013400 	.word	0x40013400
 80068bc:	40014000 	.word	0x40014000
 80068c0:	40014400 	.word	0x40014400
 80068c4:	40014800 	.word	0x40014800

080068c8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80068c8:	b480      	push	{r7}
 80068ca:	b087      	sub	sp, #28
 80068cc:	af00      	add	r7, sp, #0
 80068ce:	60f8      	str	r0, [r7, #12]
 80068d0:	60b9      	str	r1, [r7, #8]
 80068d2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80068d4:	68fb      	ldr	r3, [r7, #12]
 80068d6:	6a1b      	ldr	r3, [r3, #32]
 80068d8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80068da:	68fb      	ldr	r3, [r7, #12]
 80068dc:	6a1b      	ldr	r3, [r3, #32]
 80068de:	f023 0201 	bic.w	r2, r3, #1
 80068e2:	68fb      	ldr	r3, [r7, #12]
 80068e4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80068e6:	68fb      	ldr	r3, [r7, #12]
 80068e8:	699b      	ldr	r3, [r3, #24]
 80068ea:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80068ec:	693b      	ldr	r3, [r7, #16]
 80068ee:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80068f2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	011b      	lsls	r3, r3, #4
 80068f8:	693a      	ldr	r2, [r7, #16]
 80068fa:	4313      	orrs	r3, r2
 80068fc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80068fe:	697b      	ldr	r3, [r7, #20]
 8006900:	f023 030a 	bic.w	r3, r3, #10
 8006904:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006906:	697a      	ldr	r2, [r7, #20]
 8006908:	68bb      	ldr	r3, [r7, #8]
 800690a:	4313      	orrs	r3, r2
 800690c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800690e:	68fb      	ldr	r3, [r7, #12]
 8006910:	693a      	ldr	r2, [r7, #16]
 8006912:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006914:	68fb      	ldr	r3, [r7, #12]
 8006916:	697a      	ldr	r2, [r7, #20]
 8006918:	621a      	str	r2, [r3, #32]
}
 800691a:	bf00      	nop
 800691c:	371c      	adds	r7, #28
 800691e:	46bd      	mov	sp, r7
 8006920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006924:	4770      	bx	lr

08006926 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006926:	b480      	push	{r7}
 8006928:	b087      	sub	sp, #28
 800692a:	af00      	add	r7, sp, #0
 800692c:	60f8      	str	r0, [r7, #12]
 800692e:	60b9      	str	r1, [r7, #8]
 8006930:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8006932:	68fb      	ldr	r3, [r7, #12]
 8006934:	6a1b      	ldr	r3, [r3, #32]
 8006936:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006938:	68fb      	ldr	r3, [r7, #12]
 800693a:	6a1b      	ldr	r3, [r3, #32]
 800693c:	f023 0210 	bic.w	r2, r3, #16
 8006940:	68fb      	ldr	r3, [r7, #12]
 8006942:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006944:	68fb      	ldr	r3, [r7, #12]
 8006946:	699b      	ldr	r3, [r3, #24]
 8006948:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800694a:	693b      	ldr	r3, [r7, #16]
 800694c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8006950:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	031b      	lsls	r3, r3, #12
 8006956:	693a      	ldr	r2, [r7, #16]
 8006958:	4313      	orrs	r3, r2
 800695a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800695c:	697b      	ldr	r3, [r7, #20]
 800695e:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8006962:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006964:	68bb      	ldr	r3, [r7, #8]
 8006966:	011b      	lsls	r3, r3, #4
 8006968:	697a      	ldr	r2, [r7, #20]
 800696a:	4313      	orrs	r3, r2
 800696c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800696e:	68fb      	ldr	r3, [r7, #12]
 8006970:	693a      	ldr	r2, [r7, #16]
 8006972:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006974:	68fb      	ldr	r3, [r7, #12]
 8006976:	697a      	ldr	r2, [r7, #20]
 8006978:	621a      	str	r2, [r3, #32]
}
 800697a:	bf00      	nop
 800697c:	371c      	adds	r7, #28
 800697e:	46bd      	mov	sp, r7
 8006980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006984:	4770      	bx	lr

08006986 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006986:	b480      	push	{r7}
 8006988:	b085      	sub	sp, #20
 800698a:	af00      	add	r7, sp, #0
 800698c:	6078      	str	r0, [r7, #4]
 800698e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	689b      	ldr	r3, [r3, #8]
 8006994:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006996:	68fb      	ldr	r3, [r7, #12]
 8006998:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 800699c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80069a0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80069a2:	683a      	ldr	r2, [r7, #0]
 80069a4:	68fb      	ldr	r3, [r7, #12]
 80069a6:	4313      	orrs	r3, r2
 80069a8:	f043 0307 	orr.w	r3, r3, #7
 80069ac:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	68fa      	ldr	r2, [r7, #12]
 80069b2:	609a      	str	r2, [r3, #8]
}
 80069b4:	bf00      	nop
 80069b6:	3714      	adds	r7, #20
 80069b8:	46bd      	mov	sp, r7
 80069ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069be:	4770      	bx	lr

080069c0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80069c0:	b480      	push	{r7}
 80069c2:	b087      	sub	sp, #28
 80069c4:	af00      	add	r7, sp, #0
 80069c6:	60f8      	str	r0, [r7, #12]
 80069c8:	60b9      	str	r1, [r7, #8]
 80069ca:	607a      	str	r2, [r7, #4]
 80069cc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80069ce:	68fb      	ldr	r3, [r7, #12]
 80069d0:	689b      	ldr	r3, [r3, #8]
 80069d2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80069d4:	697b      	ldr	r3, [r7, #20]
 80069d6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80069da:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80069dc:	683b      	ldr	r3, [r7, #0]
 80069de:	021a      	lsls	r2, r3, #8
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	431a      	orrs	r2, r3
 80069e4:	68bb      	ldr	r3, [r7, #8]
 80069e6:	4313      	orrs	r3, r2
 80069e8:	697a      	ldr	r2, [r7, #20]
 80069ea:	4313      	orrs	r3, r2
 80069ec:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80069ee:	68fb      	ldr	r3, [r7, #12]
 80069f0:	697a      	ldr	r2, [r7, #20]
 80069f2:	609a      	str	r2, [r3, #8]
}
 80069f4:	bf00      	nop
 80069f6:	371c      	adds	r7, #28
 80069f8:	46bd      	mov	sp, r7
 80069fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069fe:	4770      	bx	lr

08006a00 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006a00:	b480      	push	{r7}
 8006a02:	b087      	sub	sp, #28
 8006a04:	af00      	add	r7, sp, #0
 8006a06:	60f8      	str	r0, [r7, #12]
 8006a08:	60b9      	str	r1, [r7, #8]
 8006a0a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006a0c:	68bb      	ldr	r3, [r7, #8]
 8006a0e:	f003 031f 	and.w	r3, r3, #31
 8006a12:	2201      	movs	r2, #1
 8006a14:	fa02 f303 	lsl.w	r3, r2, r3
 8006a18:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006a1a:	68fb      	ldr	r3, [r7, #12]
 8006a1c:	6a1a      	ldr	r2, [r3, #32]
 8006a1e:	697b      	ldr	r3, [r7, #20]
 8006a20:	43db      	mvns	r3, r3
 8006a22:	401a      	ands	r2, r3
 8006a24:	68fb      	ldr	r3, [r7, #12]
 8006a26:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006a28:	68fb      	ldr	r3, [r7, #12]
 8006a2a:	6a1a      	ldr	r2, [r3, #32]
 8006a2c:	68bb      	ldr	r3, [r7, #8]
 8006a2e:	f003 031f 	and.w	r3, r3, #31
 8006a32:	6879      	ldr	r1, [r7, #4]
 8006a34:	fa01 f303 	lsl.w	r3, r1, r3
 8006a38:	431a      	orrs	r2, r3
 8006a3a:	68fb      	ldr	r3, [r7, #12]
 8006a3c:	621a      	str	r2, [r3, #32]
}
 8006a3e:	bf00      	nop
 8006a40:	371c      	adds	r7, #28
 8006a42:	46bd      	mov	sp, r7
 8006a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a48:	4770      	bx	lr
	...

08006a4c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006a4c:	b480      	push	{r7}
 8006a4e:	b085      	sub	sp, #20
 8006a50:	af00      	add	r7, sp, #0
 8006a52:	6078      	str	r0, [r7, #4]
 8006a54:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006a5c:	2b01      	cmp	r3, #1
 8006a5e:	d101      	bne.n	8006a64 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006a60:	2302      	movs	r3, #2
 8006a62:	e065      	b.n	8006b30 <HAL_TIMEx_MasterConfigSynchronization+0xe4>
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	2201      	movs	r2, #1
 8006a68:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	2202      	movs	r2, #2
 8006a70:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	681b      	ldr	r3, [r3, #0]
 8006a78:	685b      	ldr	r3, [r3, #4]
 8006a7a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	681b      	ldr	r3, [r3, #0]
 8006a80:	689b      	ldr	r3, [r3, #8]
 8006a82:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	681b      	ldr	r3, [r3, #0]
 8006a88:	4a2c      	ldr	r2, [pc, #176]	@ (8006b3c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8006a8a:	4293      	cmp	r3, r2
 8006a8c:	d004      	beq.n	8006a98 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	681b      	ldr	r3, [r3, #0]
 8006a92:	4a2b      	ldr	r2, [pc, #172]	@ (8006b40 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8006a94:	4293      	cmp	r3, r2
 8006a96:	d108      	bne.n	8006aaa <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006a98:	68fb      	ldr	r3, [r7, #12]
 8006a9a:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8006a9e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006aa0:	683b      	ldr	r3, [r7, #0]
 8006aa2:	685b      	ldr	r3, [r3, #4]
 8006aa4:	68fa      	ldr	r2, [r7, #12]
 8006aa6:	4313      	orrs	r3, r2
 8006aa8:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006aaa:	68fb      	ldr	r3, [r7, #12]
 8006aac:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 8006ab0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006ab4:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006ab6:	683b      	ldr	r3, [r7, #0]
 8006ab8:	681b      	ldr	r3, [r3, #0]
 8006aba:	68fa      	ldr	r2, [r7, #12]
 8006abc:	4313      	orrs	r3, r2
 8006abe:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	68fa      	ldr	r2, [r7, #12]
 8006ac6:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	681b      	ldr	r3, [r3, #0]
 8006acc:	4a1b      	ldr	r2, [pc, #108]	@ (8006b3c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8006ace:	4293      	cmp	r3, r2
 8006ad0:	d018      	beq.n	8006b04 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	681b      	ldr	r3, [r3, #0]
 8006ad6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006ada:	d013      	beq.n	8006b04 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	4a18      	ldr	r2, [pc, #96]	@ (8006b44 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8006ae2:	4293      	cmp	r3, r2
 8006ae4:	d00e      	beq.n	8006b04 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	681b      	ldr	r3, [r3, #0]
 8006aea:	4a17      	ldr	r2, [pc, #92]	@ (8006b48 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8006aec:	4293      	cmp	r3, r2
 8006aee:	d009      	beq.n	8006b04 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	681b      	ldr	r3, [r3, #0]
 8006af4:	4a12      	ldr	r2, [pc, #72]	@ (8006b40 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8006af6:	4293      	cmp	r3, r2
 8006af8:	d004      	beq.n	8006b04 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	681b      	ldr	r3, [r3, #0]
 8006afe:	4a13      	ldr	r2, [pc, #76]	@ (8006b4c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8006b00:	4293      	cmp	r3, r2
 8006b02:	d10c      	bne.n	8006b1e <HAL_TIMEx_MasterConfigSynchronization+0xd2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006b04:	68bb      	ldr	r3, [r7, #8]
 8006b06:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006b0a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006b0c:	683b      	ldr	r3, [r7, #0]
 8006b0e:	689b      	ldr	r3, [r3, #8]
 8006b10:	68ba      	ldr	r2, [r7, #8]
 8006b12:	4313      	orrs	r3, r2
 8006b14:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	681b      	ldr	r3, [r3, #0]
 8006b1a:	68ba      	ldr	r2, [r7, #8]
 8006b1c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	2201      	movs	r2, #1
 8006b22:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	2200      	movs	r2, #0
 8006b2a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8006b2e:	2300      	movs	r3, #0
}
 8006b30:	4618      	mov	r0, r3
 8006b32:	3714      	adds	r7, #20
 8006b34:	46bd      	mov	sp, r7
 8006b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b3a:	4770      	bx	lr
 8006b3c:	40012c00 	.word	0x40012c00
 8006b40:	40013400 	.word	0x40013400
 8006b44:	40000400 	.word	0x40000400
 8006b48:	40000800 	.word	0x40000800
 8006b4c:	40014000 	.word	0x40014000

08006b50 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006b50:	b480      	push	{r7}
 8006b52:	b083      	sub	sp, #12
 8006b54:	af00      	add	r7, sp, #0
 8006b56:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006b58:	bf00      	nop
 8006b5a:	370c      	adds	r7, #12
 8006b5c:	46bd      	mov	sp, r7
 8006b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b62:	4770      	bx	lr

08006b64 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006b64:	b480      	push	{r7}
 8006b66:	b083      	sub	sp, #12
 8006b68:	af00      	add	r7, sp, #0
 8006b6a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006b6c:	bf00      	nop
 8006b6e:	370c      	adds	r7, #12
 8006b70:	46bd      	mov	sp, r7
 8006b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b76:	4770      	bx	lr

08006b78 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8006b78:	b480      	push	{r7}
 8006b7a:	b083      	sub	sp, #12
 8006b7c:	af00      	add	r7, sp, #0
 8006b7e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006b80:	bf00      	nop
 8006b82:	370c      	adds	r7, #12
 8006b84:	46bd      	mov	sp, r7
 8006b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b8a:	4770      	bx	lr

08006b8c <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8006b8c:	b480      	push	{r7}
 8006b8e:	b083      	sub	sp, #12
 8006b90:	af00      	add	r7, sp, #0
 8006b92:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8006b94:	bf00      	nop
 8006b96:	370c      	adds	r7, #12
 8006b98:	46bd      	mov	sp, r7
 8006b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b9e:	4770      	bx	lr

08006ba0 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8006ba0:	b480      	push	{r7}
 8006ba2:	b083      	sub	sp, #12
 8006ba4:	af00      	add	r7, sp, #0
 8006ba6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8006ba8:	bf00      	nop
 8006baa:	370c      	adds	r7, #12
 8006bac:	46bd      	mov	sp, r7
 8006bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bb2:	4770      	bx	lr

08006bb4 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8006bb4:	b480      	push	{r7}
 8006bb6:	b083      	sub	sp, #12
 8006bb8:	af00      	add	r7, sp, #0
 8006bba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8006bbc:	bf00      	nop
 8006bbe:	370c      	adds	r7, #12
 8006bc0:	46bd      	mov	sp, r7
 8006bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bc6:	4770      	bx	lr

08006bc8 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8006bc8:	b480      	push	{r7}
 8006bca:	b083      	sub	sp, #12
 8006bcc:	af00      	add	r7, sp, #0
 8006bce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8006bd0:	bf00      	nop
 8006bd2:	370c      	adds	r7, #12
 8006bd4:	46bd      	mov	sp, r7
 8006bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bda:	4770      	bx	lr

08006bdc <memset>:
 8006bdc:	4402      	add	r2, r0
 8006bde:	4603      	mov	r3, r0
 8006be0:	4293      	cmp	r3, r2
 8006be2:	d100      	bne.n	8006be6 <memset+0xa>
 8006be4:	4770      	bx	lr
 8006be6:	f803 1b01 	strb.w	r1, [r3], #1
 8006bea:	e7f9      	b.n	8006be0 <memset+0x4>

08006bec <__libc_init_array>:
 8006bec:	b570      	push	{r4, r5, r6, lr}
 8006bee:	4d0d      	ldr	r5, [pc, #52]	@ (8006c24 <__libc_init_array+0x38>)
 8006bf0:	4c0d      	ldr	r4, [pc, #52]	@ (8006c28 <__libc_init_array+0x3c>)
 8006bf2:	1b64      	subs	r4, r4, r5
 8006bf4:	10a4      	asrs	r4, r4, #2
 8006bf6:	2600      	movs	r6, #0
 8006bf8:	42a6      	cmp	r6, r4
 8006bfa:	d109      	bne.n	8006c10 <__libc_init_array+0x24>
 8006bfc:	4d0b      	ldr	r5, [pc, #44]	@ (8006c2c <__libc_init_array+0x40>)
 8006bfe:	4c0c      	ldr	r4, [pc, #48]	@ (8006c30 <__libc_init_array+0x44>)
 8006c00:	f000 f818 	bl	8006c34 <_init>
 8006c04:	1b64      	subs	r4, r4, r5
 8006c06:	10a4      	asrs	r4, r4, #2
 8006c08:	2600      	movs	r6, #0
 8006c0a:	42a6      	cmp	r6, r4
 8006c0c:	d105      	bne.n	8006c1a <__libc_init_array+0x2e>
 8006c0e:	bd70      	pop	{r4, r5, r6, pc}
 8006c10:	f855 3b04 	ldr.w	r3, [r5], #4
 8006c14:	4798      	blx	r3
 8006c16:	3601      	adds	r6, #1
 8006c18:	e7ee      	b.n	8006bf8 <__libc_init_array+0xc>
 8006c1a:	f855 3b04 	ldr.w	r3, [r5], #4
 8006c1e:	4798      	blx	r3
 8006c20:	3601      	adds	r6, #1
 8006c22:	e7f2      	b.n	8006c0a <__libc_init_array+0x1e>
 8006c24:	08006c74 	.word	0x08006c74
 8006c28:	08006c74 	.word	0x08006c74
 8006c2c:	08006c74 	.word	0x08006c74
 8006c30:	08006c78 	.word	0x08006c78

08006c34 <_init>:
 8006c34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006c36:	bf00      	nop
 8006c38:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006c3a:	bc08      	pop	{r3}
 8006c3c:	469e      	mov	lr, r3
 8006c3e:	4770      	bx	lr

08006c40 <_fini>:
 8006c40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006c42:	bf00      	nop
 8006c44:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006c46:	bc08      	pop	{r3}
 8006c48:	469e      	mov	lr, r3
 8006c4a:	4770      	bx	lr
