
DC_driver.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ab44  080001e0  080001e0  000011e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003ec  0800ad28  0800ad28  0000bd28  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b114  0800b114  0000d1d4  2**0
                  CONTENTS
  4 .ARM          00000008  0800b114  0800b114  0000c114  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b11c  0800b11c  0000d1d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b11c  0800b11c  0000c11c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800b120  0800b120  0000c120  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d4  20000000  0800b124  0000d000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000398  200001d4  0800b2f8  0000d1d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000056c  0800b2f8  0000d56c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000d1d4  2**0
                  CONTENTS, READONLY
 12 .debug_info   000186c7  00000000  00000000  0000d204  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000031e3  00000000  00000000  000258cb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001888  00000000  00000000  00028ab0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000012dd  00000000  00000000  0002a338  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000047fb  00000000  00000000  0002b615  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001ad37  00000000  00000000  0002fe10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000df881  00000000  00000000  0004ab47  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0012a3c8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007d0c  00000000  00000000  0012a40c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000065  00000000  00000000  00132118  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	@ (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	@ (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	200001d4 	.word	0x200001d4
 80001fc:	00000000 	.word	0x00000000
 8000200:	0800ad0c 	.word	0x0800ad0c

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	@ (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	@ (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	@ (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	200001d8 	.word	0x200001d8
 800021c:	0800ad0c 	.word	0x0800ad0c

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	@ 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2uiz>:
 8000b98:	004a      	lsls	r2, r1, #1
 8000b9a:	d211      	bcs.n	8000bc0 <__aeabi_d2uiz+0x28>
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000ba0:	d211      	bcs.n	8000bc6 <__aeabi_d2uiz+0x2e>
 8000ba2:	d50d      	bpl.n	8000bc0 <__aeabi_d2uiz+0x28>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d40e      	bmi.n	8000bcc <__aeabi_d2uiz+0x34>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	fa23 f002 	lsr.w	r0, r3, r2
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bca:	d102      	bne.n	8000bd2 <__aeabi_d2uiz+0x3a>
 8000bcc:	f04f 30ff 	mov.w	r0, #4294967295
 8000bd0:	4770      	bx	lr
 8000bd2:	f04f 0000 	mov.w	r0, #0
 8000bd6:	4770      	bx	lr

08000bd8 <__aeabi_d2f>:
 8000bd8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bdc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000be0:	bf24      	itt	cs
 8000be2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000be6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000bea:	d90d      	bls.n	8000c08 <__aeabi_d2f+0x30>
 8000bec:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000bf0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bf4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bf8:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000bfc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c00:	bf08      	it	eq
 8000c02:	f020 0001 	biceq.w	r0, r0, #1
 8000c06:	4770      	bx	lr
 8000c08:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c0c:	d121      	bne.n	8000c52 <__aeabi_d2f+0x7a>
 8000c0e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c12:	bfbc      	itt	lt
 8000c14:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c18:	4770      	bxlt	lr
 8000c1a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c1e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c22:	f1c2 0218 	rsb	r2, r2, #24
 8000c26:	f1c2 0c20 	rsb	ip, r2, #32
 8000c2a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c2e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c32:	bf18      	it	ne
 8000c34:	f040 0001 	orrne.w	r0, r0, #1
 8000c38:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c3c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c40:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c44:	ea40 000c 	orr.w	r0, r0, ip
 8000c48:	fa23 f302 	lsr.w	r3, r3, r2
 8000c4c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c50:	e7cc      	b.n	8000bec <__aeabi_d2f+0x14>
 8000c52:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c56:	d107      	bne.n	8000c68 <__aeabi_d2f+0x90>
 8000c58:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c5c:	bf1e      	ittt	ne
 8000c5e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c62:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c66:	4770      	bxne	lr
 8000c68:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c6c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c70:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c74:	4770      	bx	lr
 8000c76:	bf00      	nop

08000c78 <__aeabi_d2lz>:
 8000c78:	b538      	push	{r3, r4, r5, lr}
 8000c7a:	2200      	movs	r2, #0
 8000c7c:	2300      	movs	r3, #0
 8000c7e:	4604      	mov	r4, r0
 8000c80:	460d      	mov	r5, r1
 8000c82:	f7ff ff4b 	bl	8000b1c <__aeabi_dcmplt>
 8000c86:	b928      	cbnz	r0, 8000c94 <__aeabi_d2lz+0x1c>
 8000c88:	4620      	mov	r0, r4
 8000c8a:	4629      	mov	r1, r5
 8000c8c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000c90:	f000 b80a 	b.w	8000ca8 <__aeabi_d2ulz>
 8000c94:	4620      	mov	r0, r4
 8000c96:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000c9a:	f000 f805 	bl	8000ca8 <__aeabi_d2ulz>
 8000c9e:	4240      	negs	r0, r0
 8000ca0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ca4:	bd38      	pop	{r3, r4, r5, pc}
 8000ca6:	bf00      	nop

08000ca8 <__aeabi_d2ulz>:
 8000ca8:	b5d0      	push	{r4, r6, r7, lr}
 8000caa:	4b0c      	ldr	r3, [pc, #48]	@ (8000cdc <__aeabi_d2ulz+0x34>)
 8000cac:	2200      	movs	r2, #0
 8000cae:	4606      	mov	r6, r0
 8000cb0:	460f      	mov	r7, r1
 8000cb2:	f7ff fcc1 	bl	8000638 <__aeabi_dmul>
 8000cb6:	f7ff ff6f 	bl	8000b98 <__aeabi_d2uiz>
 8000cba:	4604      	mov	r4, r0
 8000cbc:	f7ff fc42 	bl	8000544 <__aeabi_ui2d>
 8000cc0:	4b07      	ldr	r3, [pc, #28]	@ (8000ce0 <__aeabi_d2ulz+0x38>)
 8000cc2:	2200      	movs	r2, #0
 8000cc4:	f7ff fcb8 	bl	8000638 <__aeabi_dmul>
 8000cc8:	4602      	mov	r2, r0
 8000cca:	460b      	mov	r3, r1
 8000ccc:	4630      	mov	r0, r6
 8000cce:	4639      	mov	r1, r7
 8000cd0:	f7ff fafa 	bl	80002c8 <__aeabi_dsub>
 8000cd4:	f7ff ff60 	bl	8000b98 <__aeabi_d2uiz>
 8000cd8:	4621      	mov	r1, r4
 8000cda:	bdd0      	pop	{r4, r6, r7, pc}
 8000cdc:	3df00000 	.word	0x3df00000
 8000ce0:	41f00000 	.word	0x41f00000

08000ce4 <DC_MOTOR_Init>:
#include "../DC_MOTOR/DC_MOTOR.h"
#include "../DC_MOTOR/DC_MOTOR_cfg.h"
#include "../../Inc/main.h"

void DC_MOTOR_Init(uint8_t au8_MOTOR_Instance, motor_parameters *motor)
{
 8000ce4:	b480      	push	{r7}
 8000ce6:	b083      	sub	sp, #12
 8000ce8:	af00      	add	r7, sp, #0
 8000cea:	4603      	mov	r3, r0
 8000cec:	6039      	str	r1, [r7, #0]
 8000cee:	71fb      	strb	r3, [r7, #7]
	//htim.Instance = DC_MOTOR_CfgParam[au8_MOTOR_Instance].TIM_Instance;
	/* Write To The 2 Direction Control Pins */
	motor->dir = DIR_CCW;
 8000cf0:	683b      	ldr	r3, [r7, #0]
 8000cf2:	2201      	movs	r2, #1
 8000cf4:	701a      	strb	r2, [r3, #0]
	motor->speed = 0;
 8000cf6:	683b      	ldr	r3, [r7, #0]
 8000cf8:	2200      	movs	r2, #0
 8000cfa:	805a      	strh	r2, [r3, #2]
	motor->stop_mode =0;
 8000cfc:	683b      	ldr	r3, [r7, #0]
 8000cfe:	2200      	movs	r2, #0
 8000d00:	711a      	strb	r2, [r3, #4]
	/* Write The Speed Value To The PWM CH DutyCycle Register */

}
 8000d02:	bf00      	nop
 8000d04:	370c      	adds	r7, #12
 8000d06:	46bd      	mov	sp, r7
 8000d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d0c:	4770      	bx	lr
	...

08000d10 <DC_MOTOR_Set_Speed>:

void DC_MOTOR_Set_Speed(uint8_t au8_MOTOR_Instance, motor_parameters *motor)
{
 8000d10:	b480      	push	{r7}
 8000d12:	b083      	sub	sp, #12
 8000d14:	af00      	add	r7, sp, #0
 8000d16:	4603      	mov	r3, r0
 8000d18:	6039      	str	r1, [r7, #0]
 8000d1a:	71fb      	strb	r3, [r7, #7]
	DC_MOTOR_CfgParam[au8_MOTOR_Instance].TIM_Instance->CCR1 = motor->speed;
 8000d1c:	683b      	ldr	r3, [r7, #0]
 8000d1e:	8858      	ldrh	r0, [r3, #2]
 8000d20:	79fa      	ldrb	r2, [r7, #7]
 8000d22:	490d      	ldr	r1, [pc, #52]	@ (8000d58 <DC_MOTOR_Set_Speed+0x48>)
 8000d24:	4613      	mov	r3, r2
 8000d26:	005b      	lsls	r3, r3, #1
 8000d28:	4413      	add	r3, r2
 8000d2a:	00db      	lsls	r3, r3, #3
 8000d2c:	440b      	add	r3, r1
 8000d2e:	681b      	ldr	r3, [r3, #0]
 8000d30:	4602      	mov	r2, r0
 8000d32:	635a      	str	r2, [r3, #52]	@ 0x34
	DC_MOTOR_CfgParam[au8_MOTOR_Instance].TIM_Instance->CCR2 = motor->speed;;
 8000d34:	683b      	ldr	r3, [r7, #0]
 8000d36:	8858      	ldrh	r0, [r3, #2]
 8000d38:	79fa      	ldrb	r2, [r7, #7]
 8000d3a:	4907      	ldr	r1, [pc, #28]	@ (8000d58 <DC_MOTOR_Set_Speed+0x48>)
 8000d3c:	4613      	mov	r3, r2
 8000d3e:	005b      	lsls	r3, r3, #1
 8000d40:	4413      	add	r3, r2
 8000d42:	00db      	lsls	r3, r3, #3
 8000d44:	440b      	add	r3, r1
 8000d46:	681b      	ldr	r3, [r3, #0]
 8000d48:	4602      	mov	r2, r0
 8000d4a:	639a      	str	r2, [r3, #56]	@ 0x38

}
 8000d4c:	bf00      	nop
 8000d4e:	370c      	adds	r7, #12
 8000d50:	46bd      	mov	sp, r7
 8000d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d56:	4770      	bx	lr
 8000d58:	0800ad28 	.word	0x0800ad28

08000d5c <DC_MOTOR_Set_Dir>:

void DC_MOTOR_Set_Dir(uint8_t au8_MOTOR_Instance, TIM_HandleTypeDef *htim, motor_parameters *motor)
{
 8000d5c:	b580      	push	{r7, lr}
 8000d5e:	b084      	sub	sp, #16
 8000d60:	af00      	add	r7, sp, #0
 8000d62:	4603      	mov	r3, r0
 8000d64:	60b9      	str	r1, [r7, #8]
 8000d66:	607a      	str	r2, [r7, #4]
 8000d68:	73fb      	strb	r3, [r7, #15]

	/* Write To The 2 Direction Control Pins */
	if(motor->dir == DIR_CW)
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	781b      	ldrb	r3, [r3, #0]
 8000d6e:	2b00      	cmp	r3, #0
 8000d70:	d11a      	bne.n	8000da8 <DC_MOTOR_Set_Dir+0x4c>
	{
		HAL_TIM_PWM_Start(htim, DC_MOTOR_CfgParam[au8_MOTOR_Instance].PWM_TIM_CH2);
 8000d72:	7bfa      	ldrb	r2, [r7, #15]
 8000d74:	491d      	ldr	r1, [pc, #116]	@ (8000dec <DC_MOTOR_Set_Dir+0x90>)
 8000d76:	4613      	mov	r3, r2
 8000d78:	005b      	lsls	r3, r3, #1
 8000d7a:	4413      	add	r3, r2
 8000d7c:	00db      	lsls	r3, r3, #3
 8000d7e:	440b      	add	r3, r1
 8000d80:	3308      	adds	r3, #8
 8000d82:	681b      	ldr	r3, [r3, #0]
 8000d84:	4619      	mov	r1, r3
 8000d86:	68b8      	ldr	r0, [r7, #8]
 8000d88:	f005 fb2e 	bl	80063e8 <HAL_TIM_PWM_Start>
		HAL_TIM_PWM_Stop(htim, DC_MOTOR_CfgParam[au8_MOTOR_Instance].PWM_TIM_CH1);
 8000d8c:	7bfa      	ldrb	r2, [r7, #15]
 8000d8e:	4917      	ldr	r1, [pc, #92]	@ (8000dec <DC_MOTOR_Set_Dir+0x90>)
 8000d90:	4613      	mov	r3, r2
 8000d92:	005b      	lsls	r3, r3, #1
 8000d94:	4413      	add	r3, r2
 8000d96:	00db      	lsls	r3, r3, #3
 8000d98:	440b      	add	r3, r1
 8000d9a:	3304      	adds	r3, #4
 8000d9c:	681b      	ldr	r3, [r3, #0]
 8000d9e:	4619      	mov	r1, r3
 8000da0:	68b8      	ldr	r0, [r7, #8]
 8000da2:	f005 fc21 	bl	80065e8 <HAL_TIM_PWM_Stop>
	{
		HAL_TIM_PWM_Stop(htim, DC_MOTOR_CfgParam[au8_MOTOR_Instance].PWM_TIM_CH2);
		HAL_TIM_PWM_Start(htim, DC_MOTOR_CfgParam[au8_MOTOR_Instance].PWM_TIM_CH1);

	}
}
 8000da6:	e01d      	b.n	8000de4 <DC_MOTOR_Set_Dir+0x88>
	else if(motor->dir == DIR_CCW)
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	781b      	ldrb	r3, [r3, #0]
 8000dac:	2b01      	cmp	r3, #1
 8000dae:	d119      	bne.n	8000de4 <DC_MOTOR_Set_Dir+0x88>
		HAL_TIM_PWM_Stop(htim, DC_MOTOR_CfgParam[au8_MOTOR_Instance].PWM_TIM_CH2);
 8000db0:	7bfa      	ldrb	r2, [r7, #15]
 8000db2:	490e      	ldr	r1, [pc, #56]	@ (8000dec <DC_MOTOR_Set_Dir+0x90>)
 8000db4:	4613      	mov	r3, r2
 8000db6:	005b      	lsls	r3, r3, #1
 8000db8:	4413      	add	r3, r2
 8000dba:	00db      	lsls	r3, r3, #3
 8000dbc:	440b      	add	r3, r1
 8000dbe:	3308      	adds	r3, #8
 8000dc0:	681b      	ldr	r3, [r3, #0]
 8000dc2:	4619      	mov	r1, r3
 8000dc4:	68b8      	ldr	r0, [r7, #8]
 8000dc6:	f005 fc0f 	bl	80065e8 <HAL_TIM_PWM_Stop>
		HAL_TIM_PWM_Start(htim, DC_MOTOR_CfgParam[au8_MOTOR_Instance].PWM_TIM_CH1);
 8000dca:	7bfa      	ldrb	r2, [r7, #15]
 8000dcc:	4907      	ldr	r1, [pc, #28]	@ (8000dec <DC_MOTOR_Set_Dir+0x90>)
 8000dce:	4613      	mov	r3, r2
 8000dd0:	005b      	lsls	r3, r3, #1
 8000dd2:	4413      	add	r3, r2
 8000dd4:	00db      	lsls	r3, r3, #3
 8000dd6:	440b      	add	r3, r1
 8000dd8:	3304      	adds	r3, #4
 8000dda:	681b      	ldr	r3, [r3, #0]
 8000ddc:	4619      	mov	r1, r3
 8000dde:	68b8      	ldr	r0, [r7, #8]
 8000de0:	f005 fb02 	bl	80063e8 <HAL_TIM_PWM_Start>
}
 8000de4:	bf00      	nop
 8000de6:	3710      	adds	r7, #16
 8000de8:	46bd      	mov	sp, r7
 8000dea:	bd80      	pop	{r7, pc}
 8000dec:	0800ad28 	.word	0x0800ad28

08000df0 <DC_MOTOR_Stop>:

void DC_MOTOR_Stop(uint8_t au8_MOTOR_Instance,  TIM_HandleTypeDef *htim, motor_parameters *motor)
{
 8000df0:	b580      	push	{r7, lr}
 8000df2:	b084      	sub	sp, #16
 8000df4:	af00      	add	r7, sp, #0
 8000df6:	4603      	mov	r3, r0
 8000df8:	60b9      	str	r1, [r7, #8]
 8000dfa:	607a      	str	r2, [r7, #4]
 8000dfc:	73fb      	strb	r3, [r7, #15]
	/* Write To The 2 Direction Control Pins */


	if (motor->stop_mode == COAST){
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	791b      	ldrb	r3, [r3, #4]
 8000e02:	2b00      	cmp	r3, #0
 8000e04:	d12d      	bne.n	8000e62 <DC_MOTOR_Stop+0x72>
		HAL_TIM_PWM_Stop(htim, DC_MOTOR_CfgParam[au8_MOTOR_Instance].PWM_TIM_CH2);
 8000e06:	7bfa      	ldrb	r2, [r7, #15]
 8000e08:	4931      	ldr	r1, [pc, #196]	@ (8000ed0 <DC_MOTOR_Stop+0xe0>)
 8000e0a:	4613      	mov	r3, r2
 8000e0c:	005b      	lsls	r3, r3, #1
 8000e0e:	4413      	add	r3, r2
 8000e10:	00db      	lsls	r3, r3, #3
 8000e12:	440b      	add	r3, r1
 8000e14:	3308      	adds	r3, #8
 8000e16:	681b      	ldr	r3, [r3, #0]
 8000e18:	4619      	mov	r1, r3
 8000e1a:	68b8      	ldr	r0, [r7, #8]
 8000e1c:	f005 fbe4 	bl	80065e8 <HAL_TIM_PWM_Stop>
		HAL_TIM_PWM_Stop(htim, DC_MOTOR_CfgParam[au8_MOTOR_Instance].PWM_TIM_CH1);
 8000e20:	7bfa      	ldrb	r2, [r7, #15]
 8000e22:	492b      	ldr	r1, [pc, #172]	@ (8000ed0 <DC_MOTOR_Stop+0xe0>)
 8000e24:	4613      	mov	r3, r2
 8000e26:	005b      	lsls	r3, r3, #1
 8000e28:	4413      	add	r3, r2
 8000e2a:	00db      	lsls	r3, r3, #3
 8000e2c:	440b      	add	r3, r1
 8000e2e:	3304      	adds	r3, #4
 8000e30:	681b      	ldr	r3, [r3, #0]
 8000e32:	4619      	mov	r1, r3
 8000e34:	68b8      	ldr	r0, [r7, #8]
 8000e36:	f005 fbd7 	bl	80065e8 <HAL_TIM_PWM_Stop>
		DC_MOTOR_CfgParam[au8_MOTOR_Instance].TIM_Instance->CCR1 = 0;
 8000e3a:	7bfa      	ldrb	r2, [r7, #15]
 8000e3c:	4924      	ldr	r1, [pc, #144]	@ (8000ed0 <DC_MOTOR_Stop+0xe0>)
 8000e3e:	4613      	mov	r3, r2
 8000e40:	005b      	lsls	r3, r3, #1
 8000e42:	4413      	add	r3, r2
 8000e44:	00db      	lsls	r3, r3, #3
 8000e46:	440b      	add	r3, r1
 8000e48:	681b      	ldr	r3, [r3, #0]
 8000e4a:	2200      	movs	r2, #0
 8000e4c:	635a      	str	r2, [r3, #52]	@ 0x34
		DC_MOTOR_CfgParam[au8_MOTOR_Instance].TIM_Instance->CCR2 = 0;
 8000e4e:	7bfa      	ldrb	r2, [r7, #15]
 8000e50:	491f      	ldr	r1, [pc, #124]	@ (8000ed0 <DC_MOTOR_Stop+0xe0>)
 8000e52:	4613      	mov	r3, r2
 8000e54:	005b      	lsls	r3, r3, #1
 8000e56:	4413      	add	r3, r2
 8000e58:	00db      	lsls	r3, r3, #3
 8000e5a:	440b      	add	r3, r1
 8000e5c:	681b      	ldr	r3, [r3, #0]
 8000e5e:	2200      	movs	r2, #0
 8000e60:	639a      	str	r2, [r3, #56]	@ 0x38

	}
	if (motor->stop_mode == BREAK ){
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	791b      	ldrb	r3, [r3, #4]
 8000e66:	2b01      	cmp	r3, #1
 8000e68:	d12d      	bne.n	8000ec6 <DC_MOTOR_Stop+0xd6>
		HAL_TIM_PWM_Start(htim, DC_MOTOR_CfgParam[au8_MOTOR_Instance].PWM_TIM_CH2);
 8000e6a:	7bfa      	ldrb	r2, [r7, #15]
 8000e6c:	4918      	ldr	r1, [pc, #96]	@ (8000ed0 <DC_MOTOR_Stop+0xe0>)
 8000e6e:	4613      	mov	r3, r2
 8000e70:	005b      	lsls	r3, r3, #1
 8000e72:	4413      	add	r3, r2
 8000e74:	00db      	lsls	r3, r3, #3
 8000e76:	440b      	add	r3, r1
 8000e78:	3308      	adds	r3, #8
 8000e7a:	681b      	ldr	r3, [r3, #0]
 8000e7c:	4619      	mov	r1, r3
 8000e7e:	68b8      	ldr	r0, [r7, #8]
 8000e80:	f005 fab2 	bl	80063e8 <HAL_TIM_PWM_Start>
		HAL_TIM_PWM_Start(htim, DC_MOTOR_CfgParam[au8_MOTOR_Instance].PWM_TIM_CH1);
 8000e84:	7bfa      	ldrb	r2, [r7, #15]
 8000e86:	4912      	ldr	r1, [pc, #72]	@ (8000ed0 <DC_MOTOR_Stop+0xe0>)
 8000e88:	4613      	mov	r3, r2
 8000e8a:	005b      	lsls	r3, r3, #1
 8000e8c:	4413      	add	r3, r2
 8000e8e:	00db      	lsls	r3, r3, #3
 8000e90:	440b      	add	r3, r1
 8000e92:	3304      	adds	r3, #4
 8000e94:	681b      	ldr	r3, [r3, #0]
 8000e96:	4619      	mov	r1, r3
 8000e98:	68b8      	ldr	r0, [r7, #8]
 8000e9a:	f005 faa5 	bl	80063e8 <HAL_TIM_PWM_Start>
		DC_MOTOR_CfgParam[au8_MOTOR_Instance].TIM_Instance->CCR1 = 200;
 8000e9e:	7bfa      	ldrb	r2, [r7, #15]
 8000ea0:	490b      	ldr	r1, [pc, #44]	@ (8000ed0 <DC_MOTOR_Stop+0xe0>)
 8000ea2:	4613      	mov	r3, r2
 8000ea4:	005b      	lsls	r3, r3, #1
 8000ea6:	4413      	add	r3, r2
 8000ea8:	00db      	lsls	r3, r3, #3
 8000eaa:	440b      	add	r3, r1
 8000eac:	681b      	ldr	r3, [r3, #0]
 8000eae:	22c8      	movs	r2, #200	@ 0xc8
 8000eb0:	635a      	str	r2, [r3, #52]	@ 0x34
		DC_MOTOR_CfgParam[au8_MOTOR_Instance].TIM_Instance->CCR2 = 200;
 8000eb2:	7bfa      	ldrb	r2, [r7, #15]
 8000eb4:	4906      	ldr	r1, [pc, #24]	@ (8000ed0 <DC_MOTOR_Stop+0xe0>)
 8000eb6:	4613      	mov	r3, r2
 8000eb8:	005b      	lsls	r3, r3, #1
 8000eba:	4413      	add	r3, r2
 8000ebc:	00db      	lsls	r3, r3, #3
 8000ebe:	440b      	add	r3, r1
 8000ec0:	681b      	ldr	r3, [r3, #0]
 8000ec2:	22c8      	movs	r2, #200	@ 0xc8
 8000ec4:	639a      	str	r2, [r3, #56]	@ 0x38
	}
	/* Write ZERO To The PWM Ch DutyCycle Register */

}
 8000ec6:	bf00      	nop
 8000ec8:	3710      	adds	r7, #16
 8000eca:	46bd      	mov	sp, r7
 8000ecc:	bd80      	pop	{r7, pc}
 8000ece:	bf00      	nop
 8000ed0:	0800ad28 	.word	0x0800ad28

08000ed4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ed4:	b580      	push	{r7, lr}
 8000ed6:	b082      	sub	sp, #8
 8000ed8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000eda:	f000 ff4e 	bl	8001d7a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000ede:	f000 f885 	bl	8000fec <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000ee2:	f000 fab7 	bl	8001454 <MX_GPIO_Init>
  MX_DMA_Init();
 8000ee6:	f000 fa8b 	bl	8001400 <MX_DMA_Init>
  MX_ADC1_Init();
 8000eea:	f000 f8c9 	bl	8001080 <MX_ADC1_Init>
  MX_FDCAN1_Init();
 8000eee:	f000 f93f 	bl	8001170 <MX_FDCAN1_Init>
  MX_I2C1_Init();
 8000ef2:	f000 f983 	bl	80011fc <MX_I2C1_Init>
  MX_I2C3_Init();
 8000ef6:	f000 f9c1 	bl	800127c <MX_I2C3_Init>
  MX_TIM2_Init();
 8000efa:	f000 f9ff 	bl	80012fc <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_GPIO_WritePin(nSLEEP_GPIO_Port, nSLEEP_Pin, 1);
 8000efe:	2201      	movs	r2, #1
 8000f00:	2104      	movs	r1, #4
 8000f02:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000f06:	f003 fa51 	bl	80043ac <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LED_R_GPIO_Port, LED_R_Pin, 1);
 8000f0a:	2201      	movs	r2, #1
 8000f0c:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000f10:	4832      	ldr	r0, [pc, #200]	@ (8000fdc <main+0x108>)
 8000f12:	f003 fa4b 	bl	80043ac <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LED_G_GPIO_Port, LED_G_Pin, 0);
 8000f16:	2200      	movs	r2, #0
 8000f18:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000f1c:	482f      	ldr	r0, [pc, #188]	@ (8000fdc <main+0x108>)
 8000f1e:	f003 fa45 	bl	80043ac <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LED_B_GPIO_Port, LED_B_Pin, 0);
 8000f22:	2200      	movs	r2, #0
 8000f24:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000f28:	482c      	ldr	r0, [pc, #176]	@ (8000fdc <main+0x108>)
 8000f2a:	f003 fa3f 	bl	80043ac <HAL_GPIO_WritePin>




  volatile static uint16_t voltage_value;
  HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED);
 8000f2e:	217f      	movs	r1, #127	@ 0x7f
 8000f30:	482b      	ldr	r0, [pc, #172]	@ (8000fe0 <main+0x10c>)
 8000f32:	f002 fa0b 	bl	800334c <HAL_ADCEx_Calibration_Start>
  HAL_ADC_Start_DMA(&hadc1, (uint32_t*)&voltage_value, 1);
 8000f36:	2201      	movs	r2, #1
 8000f38:	492a      	ldr	r1, [pc, #168]	@ (8000fe4 <main+0x110>)
 8000f3a:	4829      	ldr	r0, [pc, #164]	@ (8000fe0 <main+0x10c>)
 8000f3c:	f001 fb78 	bl	8002630 <HAL_ADC_Start_DMA>
  DC_MOTOR_Init(DC_MOTOR1, &motor1);
 8000f40:	463b      	mov	r3, r7
 8000f42:	4619      	mov	r1, r3
 8000f44:	2000      	movs	r0, #0
 8000f46:	f7ff fecd 	bl	8000ce4 <DC_MOTOR_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  while (1)
  {
	  DC_MOTOR_Set_Dir(DC_MOTOR1, &htim2, &motor1);
 8000f4a:	463b      	mov	r3, r7
 8000f4c:	461a      	mov	r2, r3
 8000f4e:	4926      	ldr	r1, [pc, #152]	@ (8000fe8 <main+0x114>)
 8000f50:	2000      	movs	r0, #0
 8000f52:	f7ff ff03 	bl	8000d5c <DC_MOTOR_Set_Dir>
	  DC_MOTOR_Set_Speed(DC_MOTOR1, &motor1);
 8000f56:	463b      	mov	r3, r7
 8000f58:	4619      	mov	r1, r3
 8000f5a:	2000      	movs	r0, #0
 8000f5c:	f7ff fed8 	bl	8000d10 <DC_MOTOR_Set_Speed>


	  while(motor1.speed < 1022)
 8000f60:	e00b      	b.n	8000f7a <main+0xa6>
	          {
	              DC_MOTOR_Set_Speed(DC_MOTOR1, &motor1);
 8000f62:	463b      	mov	r3, r7
 8000f64:	4619      	mov	r1, r3
 8000f66:	2000      	movs	r0, #0
 8000f68:	f7ff fed2 	bl	8000d10 <DC_MOTOR_Set_Speed>
	              motor1.speed += 1;
 8000f6c:	887b      	ldrh	r3, [r7, #2]
 8000f6e:	3301      	adds	r3, #1
 8000f70:	b29b      	uxth	r3, r3
 8000f72:	807b      	strh	r3, [r7, #2]
	              HAL_Delay(1);
 8000f74:	2001      	movs	r0, #1
 8000f76:	f000 ff71 	bl	8001e5c <HAL_Delay>
	  while(motor1.speed < 1022)
 8000f7a:	887b      	ldrh	r3, [r7, #2]
 8000f7c:	f240 32fd 	movw	r2, #1021	@ 0x3fd
 8000f80:	4293      	cmp	r3, r2
 8000f82:	d9ee      	bls.n	8000f62 <main+0x8e>
	          }
	  while(motor1.speed > 100)
 8000f84:	e00b      	b.n	8000f9e <main+0xca>
	  	  	  {
		  DC_MOTOR_Set_Speed(DC_MOTOR1, &motor1);
 8000f86:	463b      	mov	r3, r7
 8000f88:	4619      	mov	r1, r3
 8000f8a:	2000      	movs	r0, #0
 8000f8c:	f7ff fec0 	bl	8000d10 <DC_MOTOR_Set_Speed>
		  motor1.speed -= 1;
 8000f90:	887b      	ldrh	r3, [r7, #2]
 8000f92:	3b01      	subs	r3, #1
 8000f94:	b29b      	uxth	r3, r3
 8000f96:	807b      	strh	r3, [r7, #2]
	      HAL_Delay(1);
 8000f98:	2001      	movs	r0, #1
 8000f9a:	f000 ff5f 	bl	8001e5c <HAL_Delay>
	  while(motor1.speed > 100)
 8000f9e:	887b      	ldrh	r3, [r7, #2]
 8000fa0:	2b64      	cmp	r3, #100	@ 0x64
 8000fa2:	d8f0      	bhi.n	8000f86 <main+0xb2>
	          }


	 if(motor1.dir == DIR_CW){
 8000fa4:	783b      	ldrb	r3, [r7, #0]
 8000fa6:	2b00      	cmp	r3, #0
 8000fa8:	d108      	bne.n	8000fbc <main+0xe8>
		 motor1.dir = DIR_CCW;
 8000faa:	2301      	movs	r3, #1
 8000fac:	703b      	strb	r3, [r7, #0]
		 DC_MOTOR_Stop(DC_MOTOR1, &htim2, &motor1);
 8000fae:	463b      	mov	r3, r7
 8000fb0:	461a      	mov	r2, r3
 8000fb2:	490d      	ldr	r1, [pc, #52]	@ (8000fe8 <main+0x114>)
 8000fb4:	2000      	movs	r0, #0
 8000fb6:	f7ff ff1b 	bl	8000df0 <DC_MOTOR_Stop>
 8000fba:	e00a      	b.n	8000fd2 <main+0xfe>
	 }else if(motor1.dir==DIR_CCW){
 8000fbc:	783b      	ldrb	r3, [r7, #0]
 8000fbe:	2b01      	cmp	r3, #1
 8000fc0:	d107      	bne.n	8000fd2 <main+0xfe>
		 motor1.dir = DIR_CW;
 8000fc2:	2300      	movs	r3, #0
 8000fc4:	703b      	strb	r3, [r7, #0]
		 DC_MOTOR_Stop(DC_MOTOR1, &htim2, &motor1);
 8000fc6:	463b      	mov	r3, r7
 8000fc8:	461a      	mov	r2, r3
 8000fca:	4907      	ldr	r1, [pc, #28]	@ (8000fe8 <main+0x114>)
 8000fcc:	2000      	movs	r0, #0
 8000fce:	f7ff ff0f 	bl	8000df0 <DC_MOTOR_Stop>
	 }
	// DC_MOTOR_Set_Dir(DC_MOTOR1, &htim2, dir);
	 HAL_Delay(2000);
 8000fd2:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8000fd6:	f000 ff41 	bl	8001e5c <HAL_Delay>
	  DC_MOTOR_Set_Dir(DC_MOTOR1, &htim2, &motor1);
 8000fda:	e7b6      	b.n	8000f4a <main+0x76>
 8000fdc:	48000800 	.word	0x48000800
 8000fe0:	200001f0 	.word	0x200001f0
 8000fe4:	20000414 	.word	0x20000414
 8000fe8:	200003c8 	.word	0x200003c8

08000fec <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000fec:	b580      	push	{r7, lr}
 8000fee:	b094      	sub	sp, #80	@ 0x50
 8000ff0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000ff2:	f107 0318 	add.w	r3, r7, #24
 8000ff6:	2238      	movs	r2, #56	@ 0x38
 8000ff8:	2100      	movs	r1, #0
 8000ffa:	4618      	mov	r0, r3
 8000ffc:	f006 ff6f 	bl	8007ede <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001000:	1d3b      	adds	r3, r7, #4
 8001002:	2200      	movs	r2, #0
 8001004:	601a      	str	r2, [r3, #0]
 8001006:	605a      	str	r2, [r3, #4]
 8001008:	609a      	str	r2, [r3, #8]
 800100a:	60da      	str	r2, [r3, #12]
 800100c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 800100e:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8001012:	f004 f93d 	bl	8005290 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001016:	2301      	movs	r3, #1
 8001018:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800101a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800101e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001020:	2302      	movs	r3, #2
 8001022:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001024:	2303      	movs	r3, #3
 8001026:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 8001028:	2304      	movs	r3, #4
 800102a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 24;
 800102c:	2318      	movs	r3, #24
 800102e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001030:	2302      	movs	r3, #2
 8001032:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001034:	2302      	movs	r3, #2
 8001036:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001038:	2302      	movs	r3, #2
 800103a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800103c:	f107 0318 	add.w	r3, r7, #24
 8001040:	4618      	mov	r0, r3
 8001042:	f004 fa33 	bl	80054ac <HAL_RCC_OscConfig>
 8001046:	4603      	mov	r3, r0
 8001048:	2b00      	cmp	r3, #0
 800104a:	d001      	beq.n	8001050 <SystemClock_Config+0x64>
  {
    Error_Handler();
 800104c:	f000 faa8 	bl	80015a0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001050:	230f      	movs	r3, #15
 8001052:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001054:	2303      	movs	r3, #3
 8001056:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001058:	2300      	movs	r3, #0
 800105a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800105c:	2300      	movs	r3, #0
 800105e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001060:	2300      	movs	r3, #0
 8001062:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001064:	1d3b      	adds	r3, r7, #4
 8001066:	2102      	movs	r1, #2
 8001068:	4618      	mov	r0, r3
 800106a:	f004 fd31 	bl	8005ad0 <HAL_RCC_ClockConfig>
 800106e:	4603      	mov	r3, r0
 8001070:	2b00      	cmp	r3, #0
 8001072:	d001      	beq.n	8001078 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 8001074:	f000 fa94 	bl	80015a0 <Error_Handler>
  }
}
 8001078:	bf00      	nop
 800107a:	3750      	adds	r7, #80	@ 0x50
 800107c:	46bd      	mov	sp, r7
 800107e:	bd80      	pop	{r7, pc}

08001080 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001080:	b580      	push	{r7, lr}
 8001082:	b08c      	sub	sp, #48	@ 0x30
 8001084:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8001086:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800108a:	2200      	movs	r2, #0
 800108c:	601a      	str	r2, [r3, #0]
 800108e:	605a      	str	r2, [r3, #4]
 8001090:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8001092:	1d3b      	adds	r3, r7, #4
 8001094:	2220      	movs	r2, #32
 8001096:	2100      	movs	r1, #0
 8001098:	4618      	mov	r0, r3
 800109a:	f006 ff20 	bl	8007ede <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 800109e:	4b32      	ldr	r3, [pc, #200]	@ (8001168 <MX_ADC1_Init+0xe8>)
 80010a0:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 80010a4:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 80010a6:	4b30      	ldr	r3, [pc, #192]	@ (8001168 <MX_ADC1_Init+0xe8>)
 80010a8:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80010ac:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80010ae:	4b2e      	ldr	r3, [pc, #184]	@ (8001168 <MX_ADC1_Init+0xe8>)
 80010b0:	2200      	movs	r2, #0
 80010b2:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80010b4:	4b2c      	ldr	r3, [pc, #176]	@ (8001168 <MX_ADC1_Init+0xe8>)
 80010b6:	2200      	movs	r2, #0
 80010b8:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 80010ba:	4b2b      	ldr	r3, [pc, #172]	@ (8001168 <MX_ADC1_Init+0xe8>)
 80010bc:	2200      	movs	r2, #0
 80010be:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80010c0:	4b29      	ldr	r3, [pc, #164]	@ (8001168 <MX_ADC1_Init+0xe8>)
 80010c2:	2200      	movs	r2, #0
 80010c4:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80010c6:	4b28      	ldr	r3, [pc, #160]	@ (8001168 <MX_ADC1_Init+0xe8>)
 80010c8:	2204      	movs	r2, #4
 80010ca:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80010cc:	4b26      	ldr	r3, [pc, #152]	@ (8001168 <MX_ADC1_Init+0xe8>)
 80010ce:	2200      	movs	r2, #0
 80010d0:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80010d2:	4b25      	ldr	r3, [pc, #148]	@ (8001168 <MX_ADC1_Init+0xe8>)
 80010d4:	2201      	movs	r2, #1
 80010d6:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 1;
 80010d8:	4b23      	ldr	r3, [pc, #140]	@ (8001168 <MX_ADC1_Init+0xe8>)
 80010da:	2201      	movs	r2, #1
 80010dc:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80010de:	4b22      	ldr	r3, [pc, #136]	@ (8001168 <MX_ADC1_Init+0xe8>)
 80010e0:	2200      	movs	r2, #0
 80010e2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80010e6:	4b20      	ldr	r3, [pc, #128]	@ (8001168 <MX_ADC1_Init+0xe8>)
 80010e8:	2200      	movs	r2, #0
 80010ea:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80010ec:	4b1e      	ldr	r3, [pc, #120]	@ (8001168 <MX_ADC1_Init+0xe8>)
 80010ee:	2200      	movs	r2, #0
 80010f0:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.DMAContinuousRequests = ENABLE;
 80010f2:	4b1d      	ldr	r3, [pc, #116]	@ (8001168 <MX_ADC1_Init+0xe8>)
 80010f4:	2201      	movs	r2, #1
 80010f6:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 80010fa:	4b1b      	ldr	r3, [pc, #108]	@ (8001168 <MX_ADC1_Init+0xe8>)
 80010fc:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001100:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 8001102:	4b19      	ldr	r3, [pc, #100]	@ (8001168 <MX_ADC1_Init+0xe8>)
 8001104:	2200      	movs	r2, #0
 8001106:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800110a:	4817      	ldr	r0, [pc, #92]	@ (8001168 <MX_ADC1_Init+0xe8>)
 800110c:	f001 f90c 	bl	8002328 <HAL_ADC_Init>
 8001110:	4603      	mov	r3, r0
 8001112:	2b00      	cmp	r3, #0
 8001114:	d001      	beq.n	800111a <MX_ADC1_Init+0x9a>
  {
    Error_Handler();
 8001116:	f000 fa43 	bl	80015a0 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 800111a:	2300      	movs	r3, #0
 800111c:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 800111e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001122:	4619      	mov	r1, r3
 8001124:	4810      	ldr	r0, [pc, #64]	@ (8001168 <MX_ADC1_Init+0xe8>)
 8001126:	f002 f973 	bl	8003410 <HAL_ADCEx_MultiModeConfigChannel>
 800112a:	4603      	mov	r3, r0
 800112c:	2b00      	cmp	r3, #0
 800112e:	d001      	beq.n	8001134 <MX_ADC1_Init+0xb4>
  {
    Error_Handler();
 8001130:	f000 fa36 	bl	80015a0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_15;
 8001134:	4b0d      	ldr	r3, [pc, #52]	@ (800116c <MX_ADC1_Init+0xec>)
 8001136:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001138:	2306      	movs	r3, #6
 800113a:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_640CYCLES_5;
 800113c:	2307      	movs	r3, #7
 800113e:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001140:	237f      	movs	r3, #127	@ 0x7f
 8001142:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001144:	2304      	movs	r3, #4
 8001146:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8001148:	2300      	movs	r3, #0
 800114a:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800114c:	1d3b      	adds	r3, r7, #4
 800114e:	4619      	mov	r1, r3
 8001150:	4805      	ldr	r0, [pc, #20]	@ (8001168 <MX_ADC1_Init+0xe8>)
 8001152:	f001 fb3f 	bl	80027d4 <HAL_ADC_ConfigChannel>
 8001156:	4603      	mov	r3, r0
 8001158:	2b00      	cmp	r3, #0
 800115a:	d001      	beq.n	8001160 <MX_ADC1_Init+0xe0>
  {
    Error_Handler();
 800115c:	f000 fa20 	bl	80015a0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001160:	bf00      	nop
 8001162:	3730      	adds	r7, #48	@ 0x30
 8001164:	46bd      	mov	sp, r7
 8001166:	bd80      	pop	{r7, pc}
 8001168:	200001f0 	.word	0x200001f0
 800116c:	3ef08000 	.word	0x3ef08000

08001170 <MX_FDCAN1_Init>:
  * @brief FDCAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN1_Init(void)
{
 8001170:	b580      	push	{r7, lr}
 8001172:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 8001174:	4b1f      	ldr	r3, [pc, #124]	@ (80011f4 <MX_FDCAN1_Init+0x84>)
 8001176:	4a20      	ldr	r2, [pc, #128]	@ (80011f8 <MX_FDCAN1_Init+0x88>)
 8001178:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.ClockDivider = FDCAN_CLOCK_DIV1;
 800117a:	4b1e      	ldr	r3, [pc, #120]	@ (80011f4 <MX_FDCAN1_Init+0x84>)
 800117c:	2200      	movs	r2, #0
 800117e:	605a      	str	r2, [r3, #4]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8001180:	4b1c      	ldr	r3, [pc, #112]	@ (80011f4 <MX_FDCAN1_Init+0x84>)
 8001182:	2200      	movs	r2, #0
 8001184:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 8001186:	4b1b      	ldr	r3, [pc, #108]	@ (80011f4 <MX_FDCAN1_Init+0x84>)
 8001188:	2200      	movs	r2, #0
 800118a:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = DISABLE;
 800118c:	4b19      	ldr	r3, [pc, #100]	@ (80011f4 <MX_FDCAN1_Init+0x84>)
 800118e:	2200      	movs	r2, #0
 8001190:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 8001192:	4b18      	ldr	r3, [pc, #96]	@ (80011f4 <MX_FDCAN1_Init+0x84>)
 8001194:	2200      	movs	r2, #0
 8001196:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 8001198:	4b16      	ldr	r3, [pc, #88]	@ (80011f4 <MX_FDCAN1_Init+0x84>)
 800119a:	2200      	movs	r2, #0
 800119c:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 16;
 800119e:	4b15      	ldr	r3, [pc, #84]	@ (80011f4 <MX_FDCAN1_Init+0x84>)
 80011a0:	2210      	movs	r2, #16
 80011a2:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 1;
 80011a4:	4b13      	ldr	r3, [pc, #76]	@ (80011f4 <MX_FDCAN1_Init+0x84>)
 80011a6:	2201      	movs	r2, #1
 80011a8:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 2;
 80011aa:	4b12      	ldr	r3, [pc, #72]	@ (80011f4 <MX_FDCAN1_Init+0x84>)
 80011ac:	2202      	movs	r2, #2
 80011ae:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 2;
 80011b0:	4b10      	ldr	r3, [pc, #64]	@ (80011f4 <MX_FDCAN1_Init+0x84>)
 80011b2:	2202      	movs	r2, #2
 80011b4:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 1;
 80011b6:	4b0f      	ldr	r3, [pc, #60]	@ (80011f4 <MX_FDCAN1_Init+0x84>)
 80011b8:	2201      	movs	r2, #1
 80011ba:	625a      	str	r2, [r3, #36]	@ 0x24
  hfdcan1.Init.DataSyncJumpWidth = 1;
 80011bc:	4b0d      	ldr	r3, [pc, #52]	@ (80011f4 <MX_FDCAN1_Init+0x84>)
 80011be:	2201      	movs	r2, #1
 80011c0:	629a      	str	r2, [r3, #40]	@ 0x28
  hfdcan1.Init.DataTimeSeg1 = 1;
 80011c2:	4b0c      	ldr	r3, [pc, #48]	@ (80011f4 <MX_FDCAN1_Init+0x84>)
 80011c4:	2201      	movs	r2, #1
 80011c6:	62da      	str	r2, [r3, #44]	@ 0x2c
  hfdcan1.Init.DataTimeSeg2 = 1;
 80011c8:	4b0a      	ldr	r3, [pc, #40]	@ (80011f4 <MX_FDCAN1_Init+0x84>)
 80011ca:	2201      	movs	r2, #1
 80011cc:	631a      	str	r2, [r3, #48]	@ 0x30
  hfdcan1.Init.StdFiltersNbr = 0;
 80011ce:	4b09      	ldr	r3, [pc, #36]	@ (80011f4 <MX_FDCAN1_Init+0x84>)
 80011d0:	2200      	movs	r2, #0
 80011d2:	635a      	str	r2, [r3, #52]	@ 0x34
  hfdcan1.Init.ExtFiltersNbr = 0;
 80011d4:	4b07      	ldr	r3, [pc, #28]	@ (80011f4 <MX_FDCAN1_Init+0x84>)
 80011d6:	2200      	movs	r2, #0
 80011d8:	639a      	str	r2, [r3, #56]	@ 0x38
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 80011da:	4b06      	ldr	r3, [pc, #24]	@ (80011f4 <MX_FDCAN1_Init+0x84>)
 80011dc:	2200      	movs	r2, #0
 80011de:	63da      	str	r2, [r3, #60]	@ 0x3c
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 80011e0:	4804      	ldr	r0, [pc, #16]	@ (80011f4 <MX_FDCAN1_Init+0x84>)
 80011e2:	f002 fdb1 	bl	8003d48 <HAL_FDCAN_Init>
 80011e6:	4603      	mov	r3, r0
 80011e8:	2b00      	cmp	r3, #0
 80011ea:	d001      	beq.n	80011f0 <MX_FDCAN1_Init+0x80>
  {
    Error_Handler();
 80011ec:	f000 f9d8 	bl	80015a0 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */

  /* USER CODE END FDCAN1_Init 2 */

}
 80011f0:	bf00      	nop
 80011f2:	bd80      	pop	{r7, pc}
 80011f4:	200002bc 	.word	0x200002bc
 80011f8:	40006400 	.word	0x40006400

080011fc <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80011fc:	b580      	push	{r7, lr}
 80011fe:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001200:	4b1b      	ldr	r3, [pc, #108]	@ (8001270 <MX_I2C1_Init+0x74>)
 8001202:	4a1c      	ldr	r2, [pc, #112]	@ (8001274 <MX_I2C1_Init+0x78>)
 8001204:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10C18DCC;
 8001206:	4b1a      	ldr	r3, [pc, #104]	@ (8001270 <MX_I2C1_Init+0x74>)
 8001208:	4a1b      	ldr	r2, [pc, #108]	@ (8001278 <MX_I2C1_Init+0x7c>)
 800120a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 800120c:	4b18      	ldr	r3, [pc, #96]	@ (8001270 <MX_I2C1_Init+0x74>)
 800120e:	2200      	movs	r2, #0
 8001210:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001212:	4b17      	ldr	r3, [pc, #92]	@ (8001270 <MX_I2C1_Init+0x74>)
 8001214:	2201      	movs	r2, #1
 8001216:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001218:	4b15      	ldr	r3, [pc, #84]	@ (8001270 <MX_I2C1_Init+0x74>)
 800121a:	2200      	movs	r2, #0
 800121c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800121e:	4b14      	ldr	r3, [pc, #80]	@ (8001270 <MX_I2C1_Init+0x74>)
 8001220:	2200      	movs	r2, #0
 8001222:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001224:	4b12      	ldr	r3, [pc, #72]	@ (8001270 <MX_I2C1_Init+0x74>)
 8001226:	2200      	movs	r2, #0
 8001228:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800122a:	4b11      	ldr	r3, [pc, #68]	@ (8001270 <MX_I2C1_Init+0x74>)
 800122c:	2200      	movs	r2, #0
 800122e:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001230:	4b0f      	ldr	r3, [pc, #60]	@ (8001270 <MX_I2C1_Init+0x74>)
 8001232:	2200      	movs	r2, #0
 8001234:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001236:	480e      	ldr	r0, [pc, #56]	@ (8001270 <MX_I2C1_Init+0x74>)
 8001238:	f003 f8f3 	bl	8004422 <HAL_I2C_Init>
 800123c:	4603      	mov	r3, r0
 800123e:	2b00      	cmp	r3, #0
 8001240:	d001      	beq.n	8001246 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8001242:	f000 f9ad 	bl	80015a0 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001246:	2100      	movs	r1, #0
 8001248:	4809      	ldr	r0, [pc, #36]	@ (8001270 <MX_I2C1_Init+0x74>)
 800124a:	f003 ff82 	bl	8005152 <HAL_I2CEx_ConfigAnalogFilter>
 800124e:	4603      	mov	r3, r0
 8001250:	2b00      	cmp	r3, #0
 8001252:	d001      	beq.n	8001258 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001254:	f000 f9a4 	bl	80015a0 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001258:	2100      	movs	r1, #0
 800125a:	4805      	ldr	r0, [pc, #20]	@ (8001270 <MX_I2C1_Init+0x74>)
 800125c:	f003 ffc4 	bl	80051e8 <HAL_I2CEx_ConfigDigitalFilter>
 8001260:	4603      	mov	r3, r0
 8001262:	2b00      	cmp	r3, #0
 8001264:	d001      	beq.n	800126a <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8001266:	f000 f99b 	bl	80015a0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800126a:	bf00      	nop
 800126c:	bd80      	pop	{r7, pc}
 800126e:	bf00      	nop
 8001270:	20000320 	.word	0x20000320
 8001274:	40005400 	.word	0x40005400
 8001278:	10c18dcc 	.word	0x10c18dcc

0800127c <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 800127c:	b580      	push	{r7, lr}
 800127e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8001280:	4b1b      	ldr	r3, [pc, #108]	@ (80012f0 <MX_I2C3_Init+0x74>)
 8001282:	4a1c      	ldr	r2, [pc, #112]	@ (80012f4 <MX_I2C3_Init+0x78>)
 8001284:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x10C18DCC;
 8001286:	4b1a      	ldr	r3, [pc, #104]	@ (80012f0 <MX_I2C3_Init+0x74>)
 8001288:	4a1b      	ldr	r2, [pc, #108]	@ (80012f8 <MX_I2C3_Init+0x7c>)
 800128a:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 800128c:	4b18      	ldr	r3, [pc, #96]	@ (80012f0 <MX_I2C3_Init+0x74>)
 800128e:	2200      	movs	r2, #0
 8001290:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001292:	4b17      	ldr	r3, [pc, #92]	@ (80012f0 <MX_I2C3_Init+0x74>)
 8001294:	2201      	movs	r2, #1
 8001296:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001298:	4b15      	ldr	r3, [pc, #84]	@ (80012f0 <MX_I2C3_Init+0x74>)
 800129a:	2200      	movs	r2, #0
 800129c:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 800129e:	4b14      	ldr	r3, [pc, #80]	@ (80012f0 <MX_I2C3_Init+0x74>)
 80012a0:	2200      	movs	r2, #0
 80012a2:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80012a4:	4b12      	ldr	r3, [pc, #72]	@ (80012f0 <MX_I2C3_Init+0x74>)
 80012a6:	2200      	movs	r2, #0
 80012a8:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80012aa:	4b11      	ldr	r3, [pc, #68]	@ (80012f0 <MX_I2C3_Init+0x74>)
 80012ac:	2200      	movs	r2, #0
 80012ae:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80012b0:	4b0f      	ldr	r3, [pc, #60]	@ (80012f0 <MX_I2C3_Init+0x74>)
 80012b2:	2200      	movs	r2, #0
 80012b4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 80012b6:	480e      	ldr	r0, [pc, #56]	@ (80012f0 <MX_I2C3_Init+0x74>)
 80012b8:	f003 f8b3 	bl	8004422 <HAL_I2C_Init>
 80012bc:	4603      	mov	r3, r0
 80012be:	2b00      	cmp	r3, #0
 80012c0:	d001      	beq.n	80012c6 <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
 80012c2:	f000 f96d 	bl	80015a0 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80012c6:	2100      	movs	r1, #0
 80012c8:	4809      	ldr	r0, [pc, #36]	@ (80012f0 <MX_I2C3_Init+0x74>)
 80012ca:	f003 ff42 	bl	8005152 <HAL_I2CEx_ConfigAnalogFilter>
 80012ce:	4603      	mov	r3, r0
 80012d0:	2b00      	cmp	r3, #0
 80012d2:	d001      	beq.n	80012d8 <MX_I2C3_Init+0x5c>
  {
    Error_Handler();
 80012d4:	f000 f964 	bl	80015a0 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 80012d8:	2100      	movs	r1, #0
 80012da:	4805      	ldr	r0, [pc, #20]	@ (80012f0 <MX_I2C3_Init+0x74>)
 80012dc:	f003 ff84 	bl	80051e8 <HAL_I2CEx_ConfigDigitalFilter>
 80012e0:	4603      	mov	r3, r0
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d001      	beq.n	80012ea <MX_I2C3_Init+0x6e>
  {
    Error_Handler();
 80012e6:	f000 f95b 	bl	80015a0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 80012ea:	bf00      	nop
 80012ec:	bd80      	pop	{r7, pc}
 80012ee:	bf00      	nop
 80012f0:	20000374 	.word	0x20000374
 80012f4:	40007800 	.word	0x40007800
 80012f8:	10c18dcc 	.word	0x10c18dcc

080012fc <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80012fc:	b580      	push	{r7, lr}
 80012fe:	b08e      	sub	sp, #56	@ 0x38
 8001300:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001302:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001306:	2200      	movs	r2, #0
 8001308:	601a      	str	r2, [r3, #0]
 800130a:	605a      	str	r2, [r3, #4]
 800130c:	609a      	str	r2, [r3, #8]
 800130e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001310:	f107 031c 	add.w	r3, r7, #28
 8001314:	2200      	movs	r2, #0
 8001316:	601a      	str	r2, [r3, #0]
 8001318:	605a      	str	r2, [r3, #4]
 800131a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800131c:	463b      	mov	r3, r7
 800131e:	2200      	movs	r2, #0
 8001320:	601a      	str	r2, [r3, #0]
 8001322:	605a      	str	r2, [r3, #4]
 8001324:	609a      	str	r2, [r3, #8]
 8001326:	60da      	str	r2, [r3, #12]
 8001328:	611a      	str	r2, [r3, #16]
 800132a:	615a      	str	r2, [r3, #20]
 800132c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800132e:	4b33      	ldr	r3, [pc, #204]	@ (80013fc <MX_TIM2_Init+0x100>)
 8001330:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001334:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 139;
 8001336:	4b31      	ldr	r3, [pc, #196]	@ (80013fc <MX_TIM2_Init+0x100>)
 8001338:	228b      	movs	r2, #139	@ 0x8b
 800133a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800133c:	4b2f      	ldr	r3, [pc, #188]	@ (80013fc <MX_TIM2_Init+0x100>)
 800133e:	2200      	movs	r2, #0
 8001340:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1022;
 8001342:	4b2e      	ldr	r3, [pc, #184]	@ (80013fc <MX_TIM2_Init+0x100>)
 8001344:	f240 32fe 	movw	r2, #1022	@ 0x3fe
 8001348:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800134a:	4b2c      	ldr	r3, [pc, #176]	@ (80013fc <MX_TIM2_Init+0x100>)
 800134c:	2200      	movs	r2, #0
 800134e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001350:	4b2a      	ldr	r3, [pc, #168]	@ (80013fc <MX_TIM2_Init+0x100>)
 8001352:	2280      	movs	r2, #128	@ 0x80
 8001354:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001356:	4829      	ldr	r0, [pc, #164]	@ (80013fc <MX_TIM2_Init+0x100>)
 8001358:	f004 ff8e 	bl	8006278 <HAL_TIM_Base_Init>
 800135c:	4603      	mov	r3, r0
 800135e:	2b00      	cmp	r3, #0
 8001360:	d001      	beq.n	8001366 <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 8001362:	f000 f91d 	bl	80015a0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001366:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800136a:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800136c:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001370:	4619      	mov	r1, r3
 8001372:	4822      	ldr	r0, [pc, #136]	@ (80013fc <MX_TIM2_Init+0x100>)
 8001374:	f005 fc32 	bl	8006bdc <HAL_TIM_ConfigClockSource>
 8001378:	4603      	mov	r3, r0
 800137a:	2b00      	cmp	r3, #0
 800137c:	d001      	beq.n	8001382 <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 800137e:	f000 f90f 	bl	80015a0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001382:	481e      	ldr	r0, [pc, #120]	@ (80013fc <MX_TIM2_Init+0x100>)
 8001384:	f004 ffcf 	bl	8006326 <HAL_TIM_PWM_Init>
 8001388:	4603      	mov	r3, r0
 800138a:	2b00      	cmp	r3, #0
 800138c:	d001      	beq.n	8001392 <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 800138e:	f000 f907 	bl	80015a0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001392:	2300      	movs	r3, #0
 8001394:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001396:	2300      	movs	r3, #0
 8001398:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800139a:	f107 031c 	add.w	r3, r7, #28
 800139e:	4619      	mov	r1, r3
 80013a0:	4816      	ldr	r0, [pc, #88]	@ (80013fc <MX_TIM2_Init+0x100>)
 80013a2:	f006 f99b 	bl	80076dc <HAL_TIMEx_MasterConfigSynchronization>
 80013a6:	4603      	mov	r3, r0
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	d001      	beq.n	80013b0 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 80013ac:	f000 f8f8 	bl	80015a0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80013b0:	2360      	movs	r3, #96	@ 0x60
 80013b2:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80013b4:	2300      	movs	r3, #0
 80013b6:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80013b8:	2300      	movs	r3, #0
 80013ba:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80013bc:	2300      	movs	r3, #0
 80013be:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80013c0:	463b      	mov	r3, r7
 80013c2:	2200      	movs	r2, #0
 80013c4:	4619      	mov	r1, r3
 80013c6:	480d      	ldr	r0, [pc, #52]	@ (80013fc <MX_TIM2_Init+0x100>)
 80013c8:	f005 faf4 	bl	80069b4 <HAL_TIM_PWM_ConfigChannel>
 80013cc:	4603      	mov	r3, r0
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	d001      	beq.n	80013d6 <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 80013d2:	f000 f8e5 	bl	80015a0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80013d6:	463b      	mov	r3, r7
 80013d8:	2204      	movs	r2, #4
 80013da:	4619      	mov	r1, r3
 80013dc:	4807      	ldr	r0, [pc, #28]	@ (80013fc <MX_TIM2_Init+0x100>)
 80013de:	f005 fae9 	bl	80069b4 <HAL_TIM_PWM_ConfigChannel>
 80013e2:	4603      	mov	r3, r0
 80013e4:	2b00      	cmp	r3, #0
 80013e6:	d001      	beq.n	80013ec <MX_TIM2_Init+0xf0>
  {
    Error_Handler();
 80013e8:	f000 f8da 	bl	80015a0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80013ec:	4803      	ldr	r0, [pc, #12]	@ (80013fc <MX_TIM2_Init+0x100>)
 80013ee:	f000 fb09 	bl	8001a04 <HAL_TIM_MspPostInit>

}
 80013f2:	bf00      	nop
 80013f4:	3738      	adds	r7, #56	@ 0x38
 80013f6:	46bd      	mov	sp, r7
 80013f8:	bd80      	pop	{r7, pc}
 80013fa:	bf00      	nop
 80013fc:	200003c8 	.word	0x200003c8

08001400 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001400:	b580      	push	{r7, lr}
 8001402:	b082      	sub	sp, #8
 8001404:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8001406:	4b12      	ldr	r3, [pc, #72]	@ (8001450 <MX_DMA_Init+0x50>)
 8001408:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800140a:	4a11      	ldr	r2, [pc, #68]	@ (8001450 <MX_DMA_Init+0x50>)
 800140c:	f043 0304 	orr.w	r3, r3, #4
 8001410:	6493      	str	r3, [r2, #72]	@ 0x48
 8001412:	4b0f      	ldr	r3, [pc, #60]	@ (8001450 <MX_DMA_Init+0x50>)
 8001414:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001416:	f003 0304 	and.w	r3, r3, #4
 800141a:	607b      	str	r3, [r7, #4]
 800141c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 800141e:	4b0c      	ldr	r3, [pc, #48]	@ (8001450 <MX_DMA_Init+0x50>)
 8001420:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001422:	4a0b      	ldr	r2, [pc, #44]	@ (8001450 <MX_DMA_Init+0x50>)
 8001424:	f043 0301 	orr.w	r3, r3, #1
 8001428:	6493      	str	r3, [r2, #72]	@ 0x48
 800142a:	4b09      	ldr	r3, [pc, #36]	@ (8001450 <MX_DMA_Init+0x50>)
 800142c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800142e:	f003 0301 	and.w	r3, r3, #1
 8001432:	603b      	str	r3, [r7, #0]
 8001434:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 2, 0);
 8001436:	2200      	movs	r2, #0
 8001438:	2102      	movs	r1, #2
 800143a:	200b      	movs	r0, #11
 800143c:	f002 f967 	bl	800370e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001440:	200b      	movs	r0, #11
 8001442:	f002 f97e 	bl	8003742 <HAL_NVIC_EnableIRQ>

}
 8001446:	bf00      	nop
 8001448:	3708      	adds	r7, #8
 800144a:	46bd      	mov	sp, r7
 800144c:	bd80      	pop	{r7, pc}
 800144e:	bf00      	nop
 8001450:	40021000 	.word	0x40021000

08001454 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001454:	b580      	push	{r7, lr}
 8001456:	b08a      	sub	sp, #40	@ 0x28
 8001458:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800145a:	f107 0314 	add.w	r3, r7, #20
 800145e:	2200      	movs	r2, #0
 8001460:	601a      	str	r2, [r3, #0]
 8001462:	605a      	str	r2, [r3, #4]
 8001464:	609a      	str	r2, [r3, #8]
 8001466:	60da      	str	r2, [r3, #12]
 8001468:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800146a:	4b4a      	ldr	r3, [pc, #296]	@ (8001594 <MX_GPIO_Init+0x140>)
 800146c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800146e:	4a49      	ldr	r2, [pc, #292]	@ (8001594 <MX_GPIO_Init+0x140>)
 8001470:	f043 0304 	orr.w	r3, r3, #4
 8001474:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001476:	4b47      	ldr	r3, [pc, #284]	@ (8001594 <MX_GPIO_Init+0x140>)
 8001478:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800147a:	f003 0304 	and.w	r3, r3, #4
 800147e:	613b      	str	r3, [r7, #16]
 8001480:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001482:	4b44      	ldr	r3, [pc, #272]	@ (8001594 <MX_GPIO_Init+0x140>)
 8001484:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001486:	4a43      	ldr	r2, [pc, #268]	@ (8001594 <MX_GPIO_Init+0x140>)
 8001488:	f043 0320 	orr.w	r3, r3, #32
 800148c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800148e:	4b41      	ldr	r3, [pc, #260]	@ (8001594 <MX_GPIO_Init+0x140>)
 8001490:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001492:	f003 0320 	and.w	r3, r3, #32
 8001496:	60fb      	str	r3, [r7, #12]
 8001498:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800149a:	4b3e      	ldr	r3, [pc, #248]	@ (8001594 <MX_GPIO_Init+0x140>)
 800149c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800149e:	4a3d      	ldr	r2, [pc, #244]	@ (8001594 <MX_GPIO_Init+0x140>)
 80014a0:	f043 0301 	orr.w	r3, r3, #1
 80014a4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80014a6:	4b3b      	ldr	r3, [pc, #236]	@ (8001594 <MX_GPIO_Init+0x140>)
 80014a8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80014aa:	f003 0301 	and.w	r3, r3, #1
 80014ae:	60bb      	str	r3, [r7, #8]
 80014b0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80014b2:	4b38      	ldr	r3, [pc, #224]	@ (8001594 <MX_GPIO_Init+0x140>)
 80014b4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80014b6:	4a37      	ldr	r2, [pc, #220]	@ (8001594 <MX_GPIO_Init+0x140>)
 80014b8:	f043 0302 	orr.w	r3, r3, #2
 80014bc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80014be:	4b35      	ldr	r3, [pc, #212]	@ (8001594 <MX_GPIO_Init+0x140>)
 80014c0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80014c2:	f003 0302 	and.w	r3, r3, #2
 80014c6:	607b      	str	r3, [r7, #4]
 80014c8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LED_R_Pin|LED_G_Pin|LED_B_Pin, GPIO_PIN_RESET);
 80014ca:	2200      	movs	r2, #0
 80014cc:	f44f 4160 	mov.w	r1, #57344	@ 0xe000
 80014d0:	4831      	ldr	r0, [pc, #196]	@ (8001598 <MX_GPIO_Init+0x144>)
 80014d2:	f002 ff6b 	bl	80043ac <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(nSLEEP_GPIO_Port, nSLEEP_Pin, GPIO_PIN_RESET);
 80014d6:	2200      	movs	r2, #0
 80014d8:	2104      	movs	r1, #4
 80014da:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80014de:	f002 ff65 	bl	80043ac <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LED_R_Pin LED_G_Pin LED_B_Pin */
  GPIO_InitStruct.Pin = LED_R_Pin|LED_G_Pin|LED_B_Pin;
 80014e2:	f44f 4360 	mov.w	r3, #57344	@ 0xe000
 80014e6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014e8:	2301      	movs	r3, #1
 80014ea:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014ec:	2300      	movs	r3, #0
 80014ee:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014f0:	2300      	movs	r3, #0
 80014f2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80014f4:	f107 0314 	add.w	r3, r7, #20
 80014f8:	4619      	mov	r1, r3
 80014fa:	4827      	ldr	r0, [pc, #156]	@ (8001598 <MX_GPIO_Init+0x144>)
 80014fc:	f002 fdd4 	bl	80040a8 <HAL_GPIO_Init>

  /*Configure GPIO pin : nSLEEP_Pin */
  GPIO_InitStruct.Pin = nSLEEP_Pin;
 8001500:	2304      	movs	r3, #4
 8001502:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001504:	2301      	movs	r3, #1
 8001506:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001508:	2300      	movs	r3, #0
 800150a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800150c:	2300      	movs	r3, #0
 800150e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(nSLEEP_GPIO_Port, &GPIO_InitStruct);
 8001510:	f107 0314 	add.w	r3, r7, #20
 8001514:	4619      	mov	r1, r3
 8001516:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800151a:	f002 fdc5 	bl	80040a8 <HAL_GPIO_Init>

  /*Configure GPIO pins : SNOUT_Pin NFAULT_Pin */
  GPIO_InitStruct.Pin = SNOUT_Pin|NFAULT_Pin;
 800151e:	2318      	movs	r3, #24
 8001520:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001522:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001526:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001528:	2301      	movs	r3, #1
 800152a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800152c:	f107 0314 	add.w	r3, r7, #20
 8001530:	4619      	mov	r1, r3
 8001532:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001536:	f002 fdb7 	bl	80040a8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 800153a:	2320      	movs	r3, #32
 800153c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800153e:	2303      	movs	r3, #3
 8001540:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001542:	2300      	movs	r3, #0
 8001544:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001546:	f107 0314 	add.w	r3, r7, #20
 800154a:	4619      	mov	r1, r3
 800154c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001550:	f002 fdaa 	bl	80040a8 <HAL_GPIO_Init>

  /*Configure GPIO pins : SW1_Pin SW2_Pin */
  GPIO_InitStruct.Pin = SW1_Pin|SW2_Pin;
 8001554:	2350      	movs	r3, #80	@ 0x50
 8001556:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001558:	2300      	movs	r3, #0
 800155a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800155c:	2300      	movs	r3, #0
 800155e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001560:	f107 0314 	add.w	r3, r7, #20
 8001564:	4619      	mov	r1, r3
 8001566:	480d      	ldr	r0, [pc, #52]	@ (800159c <MX_GPIO_Init+0x148>)
 8001568:	f002 fd9e 	bl	80040a8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI3_IRQn, 8, 0);
 800156c:	2200      	movs	r2, #0
 800156e:	2108      	movs	r1, #8
 8001570:	2009      	movs	r0, #9
 8001572:	f002 f8cc 	bl	800370e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8001576:	2009      	movs	r0, #9
 8001578:	f002 f8e3 	bl	8003742 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_IRQn, 8, 0);
 800157c:	2200      	movs	r2, #0
 800157e:	2108      	movs	r1, #8
 8001580:	200a      	movs	r0, #10
 8001582:	f002 f8c4 	bl	800370e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8001586:	200a      	movs	r0, #10
 8001588:	f002 f8db 	bl	8003742 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800158c:	bf00      	nop
 800158e:	3728      	adds	r7, #40	@ 0x28
 8001590:	46bd      	mov	sp, r7
 8001592:	bd80      	pop	{r7, pc}
 8001594:	40021000 	.word	0x40021000
 8001598:	48000800 	.word	0x48000800
 800159c:	48000400 	.word	0x48000400

080015a0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80015a0:	b480      	push	{r7}
 80015a2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80015a4:	b672      	cpsid	i
}
 80015a6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80015a8:	bf00      	nop
 80015aa:	e7fd      	b.n	80015a8 <Error_Handler+0x8>

080015ac <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80015ac:	b580      	push	{r7, lr}
 80015ae:	b082      	sub	sp, #8
 80015b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80015b2:	4b17      	ldr	r3, [pc, #92]	@ (8001610 <HAL_MspInit+0x64>)
 80015b4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80015b6:	4a16      	ldr	r2, [pc, #88]	@ (8001610 <HAL_MspInit+0x64>)
 80015b8:	f043 0301 	orr.w	r3, r3, #1
 80015bc:	6613      	str	r3, [r2, #96]	@ 0x60
 80015be:	4b14      	ldr	r3, [pc, #80]	@ (8001610 <HAL_MspInit+0x64>)
 80015c0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80015c2:	f003 0301 	and.w	r3, r3, #1
 80015c6:	607b      	str	r3, [r7, #4]
 80015c8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80015ca:	4b11      	ldr	r3, [pc, #68]	@ (8001610 <HAL_MspInit+0x64>)
 80015cc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80015ce:	4a10      	ldr	r2, [pc, #64]	@ (8001610 <HAL_MspInit+0x64>)
 80015d0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80015d4:	6593      	str	r3, [r2, #88]	@ 0x58
 80015d6:	4b0e      	ldr	r3, [pc, #56]	@ (8001610 <HAL_MspInit+0x64>)
 80015d8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80015da:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80015de:	603b      	str	r3, [r7, #0]
 80015e0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* PVD_PVM_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PVD_PVM_IRQn, 10, 0);
 80015e2:	2200      	movs	r2, #0
 80015e4:	210a      	movs	r1, #10
 80015e6:	2001      	movs	r0, #1
 80015e8:	f002 f891 	bl	800370e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(PVD_PVM_IRQn);
 80015ec:	2001      	movs	r0, #1
 80015ee:	f002 f8a8 	bl	8003742 <HAL_NVIC_EnableIRQ>
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 1, 0);
 80015f2:	2200      	movs	r2, #0
 80015f4:	2101      	movs	r1, #1
 80015f6:	2005      	movs	r0, #5
 80015f8:	f002 f889 	bl	800370e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 80015fc:	2005      	movs	r0, #5
 80015fe:	f002 f8a0 	bl	8003742 <HAL_NVIC_EnableIRQ>

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8001602:	f003 ff43 	bl	800548c <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001606:	bf00      	nop
 8001608:	3708      	adds	r7, #8
 800160a:	46bd      	mov	sp, r7
 800160c:	bd80      	pop	{r7, pc}
 800160e:	bf00      	nop
 8001610:	40021000 	.word	0x40021000

08001614 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001614:	b580      	push	{r7, lr}
 8001616:	b09a      	sub	sp, #104	@ 0x68
 8001618:	af00      	add	r7, sp, #0
 800161a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800161c:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001620:	2200      	movs	r2, #0
 8001622:	601a      	str	r2, [r3, #0]
 8001624:	605a      	str	r2, [r3, #4]
 8001626:	609a      	str	r2, [r3, #8]
 8001628:	60da      	str	r2, [r3, #12]
 800162a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800162c:	f107 0310 	add.w	r3, r7, #16
 8001630:	2244      	movs	r2, #68	@ 0x44
 8001632:	2100      	movs	r1, #0
 8001634:	4618      	mov	r0, r3
 8001636:	f006 fc52 	bl	8007ede <memset>
  if(hadc->Instance==ADC1)
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001642:	d15e      	bne.n	8001702 <HAL_ADC_MspInit+0xee>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8001644:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001648:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 800164a:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 800164e:	64fb      	str	r3, [r7, #76]	@ 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001650:	f107 0310 	add.w	r3, r7, #16
 8001654:	4618      	mov	r0, r3
 8001656:	f004 fc1f 	bl	8005e98 <HAL_RCCEx_PeriphCLKConfig>
 800165a:	4603      	mov	r3, r0
 800165c:	2b00      	cmp	r3, #0
 800165e:	d001      	beq.n	8001664 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 8001660:	f7ff ff9e 	bl	80015a0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8001664:	4b29      	ldr	r3, [pc, #164]	@ (800170c <HAL_ADC_MspInit+0xf8>)
 8001666:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001668:	4a28      	ldr	r2, [pc, #160]	@ (800170c <HAL_ADC_MspInit+0xf8>)
 800166a:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800166e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001670:	4b26      	ldr	r3, [pc, #152]	@ (800170c <HAL_ADC_MspInit+0xf8>)
 8001672:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001674:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001678:	60fb      	str	r3, [r7, #12]
 800167a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800167c:	4b23      	ldr	r3, [pc, #140]	@ (800170c <HAL_ADC_MspInit+0xf8>)
 800167e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001680:	4a22      	ldr	r2, [pc, #136]	@ (800170c <HAL_ADC_MspInit+0xf8>)
 8001682:	f043 0302 	orr.w	r3, r3, #2
 8001686:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001688:	4b20      	ldr	r3, [pc, #128]	@ (800170c <HAL_ADC_MspInit+0xf8>)
 800168a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800168c:	f003 0302 	and.w	r3, r3, #2
 8001690:	60bb      	str	r3, [r7, #8]
 8001692:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PB0     ------> ADC1_IN15
    */
    GPIO_InitStruct.Pin = current_measurement_Pin;
 8001694:	2301      	movs	r3, #1
 8001696:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001698:	2303      	movs	r3, #3
 800169a:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800169c:	2300      	movs	r3, #0
 800169e:	65fb      	str	r3, [r7, #92]	@ 0x5c
    HAL_GPIO_Init(current_measurement_GPIO_Port, &GPIO_InitStruct);
 80016a0:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80016a4:	4619      	mov	r1, r3
 80016a6:	481a      	ldr	r0, [pc, #104]	@ (8001710 <HAL_ADC_MspInit+0xfc>)
 80016a8:	f002 fcfe 	bl	80040a8 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 80016ac:	4b19      	ldr	r3, [pc, #100]	@ (8001714 <HAL_ADC_MspInit+0x100>)
 80016ae:	4a1a      	ldr	r2, [pc, #104]	@ (8001718 <HAL_ADC_MspInit+0x104>)
 80016b0:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 80016b2:	4b18      	ldr	r3, [pc, #96]	@ (8001714 <HAL_ADC_MspInit+0x100>)
 80016b4:	2205      	movs	r2, #5
 80016b6:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80016b8:	4b16      	ldr	r3, [pc, #88]	@ (8001714 <HAL_ADC_MspInit+0x100>)
 80016ba:	2200      	movs	r2, #0
 80016bc:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80016be:	4b15      	ldr	r3, [pc, #84]	@ (8001714 <HAL_ADC_MspInit+0x100>)
 80016c0:	2200      	movs	r2, #0
 80016c2:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80016c4:	4b13      	ldr	r3, [pc, #76]	@ (8001714 <HAL_ADC_MspInit+0x100>)
 80016c6:	2280      	movs	r2, #128	@ 0x80
 80016c8:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80016ca:	4b12      	ldr	r3, [pc, #72]	@ (8001714 <HAL_ADC_MspInit+0x100>)
 80016cc:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80016d0:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80016d2:	4b10      	ldr	r3, [pc, #64]	@ (8001714 <HAL_ADC_MspInit+0x100>)
 80016d4:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80016d8:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80016da:	4b0e      	ldr	r3, [pc, #56]	@ (8001714 <HAL_ADC_MspInit+0x100>)
 80016dc:	2220      	movs	r2, #32
 80016de:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80016e0:	4b0c      	ldr	r3, [pc, #48]	@ (8001714 <HAL_ADC_MspInit+0x100>)
 80016e2:	2200      	movs	r2, #0
 80016e4:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80016e6:	480b      	ldr	r0, [pc, #44]	@ (8001714 <HAL_ADC_MspInit+0x100>)
 80016e8:	f002 f846 	bl	8003778 <HAL_DMA_Init>
 80016ec:	4603      	mov	r3, r0
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d001      	beq.n	80016f6 <HAL_ADC_MspInit+0xe2>
    {
      Error_Handler();
 80016f2:	f7ff ff55 	bl	80015a0 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	4a06      	ldr	r2, [pc, #24]	@ (8001714 <HAL_ADC_MspInit+0x100>)
 80016fa:	655a      	str	r2, [r3, #84]	@ 0x54
 80016fc:	4a05      	ldr	r2, [pc, #20]	@ (8001714 <HAL_ADC_MspInit+0x100>)
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	6293      	str	r3, [r2, #40]	@ 0x28

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 8001702:	bf00      	nop
 8001704:	3768      	adds	r7, #104	@ 0x68
 8001706:	46bd      	mov	sp, r7
 8001708:	bd80      	pop	{r7, pc}
 800170a:	bf00      	nop
 800170c:	40021000 	.word	0x40021000
 8001710:	48000400 	.word	0x48000400
 8001714:	2000025c 	.word	0x2000025c
 8001718:	40020008 	.word	0x40020008

0800171c <HAL_FDCAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hfdcan: FDCAN handle pointer
* @retval None
*/
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 800171c:	b580      	push	{r7, lr}
 800171e:	b09c      	sub	sp, #112	@ 0x70
 8001720:	af00      	add	r7, sp, #0
 8001722:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001724:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8001728:	2200      	movs	r2, #0
 800172a:	601a      	str	r2, [r3, #0]
 800172c:	605a      	str	r2, [r3, #4]
 800172e:	609a      	str	r2, [r3, #8]
 8001730:	60da      	str	r2, [r3, #12]
 8001732:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001734:	f107 0318 	add.w	r3, r7, #24
 8001738:	2244      	movs	r2, #68	@ 0x44
 800173a:	2100      	movs	r1, #0
 800173c:	4618      	mov	r0, r3
 800173e:	f006 fbce 	bl	8007ede <memset>
  if(hfdcan->Instance==FDCAN1)
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	4a2f      	ldr	r2, [pc, #188]	@ (8001804 <HAL_FDCAN_MspInit+0xe8>)
 8001748:	4293      	cmp	r3, r2
 800174a:	d156      	bne.n	80017fa <HAL_FDCAN_MspInit+0xde>

  /* USER CODE END FDCAN1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 800174c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001750:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.FdcanClockSelection = RCC_FDCANCLKSOURCE_PCLK1;
 8001752:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001756:	64bb      	str	r3, [r7, #72]	@ 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001758:	f107 0318 	add.w	r3, r7, #24
 800175c:	4618      	mov	r0, r3
 800175e:	f004 fb9b 	bl	8005e98 <HAL_RCCEx_PeriphCLKConfig>
 8001762:	4603      	mov	r3, r0
 8001764:	2b00      	cmp	r3, #0
 8001766:	d001      	beq.n	800176c <HAL_FDCAN_MspInit+0x50>
    {
      Error_Handler();
 8001768:	f7ff ff1a 	bl	80015a0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 800176c:	4b26      	ldr	r3, [pc, #152]	@ (8001808 <HAL_FDCAN_MspInit+0xec>)
 800176e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001770:	4a25      	ldr	r2, [pc, #148]	@ (8001808 <HAL_FDCAN_MspInit+0xec>)
 8001772:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001776:	6593      	str	r3, [r2, #88]	@ 0x58
 8001778:	4b23      	ldr	r3, [pc, #140]	@ (8001808 <HAL_FDCAN_MspInit+0xec>)
 800177a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800177c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001780:	617b      	str	r3, [r7, #20]
 8001782:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001784:	4b20      	ldr	r3, [pc, #128]	@ (8001808 <HAL_FDCAN_MspInit+0xec>)
 8001786:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001788:	4a1f      	ldr	r2, [pc, #124]	@ (8001808 <HAL_FDCAN_MspInit+0xec>)
 800178a:	f043 0301 	orr.w	r3, r3, #1
 800178e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001790:	4b1d      	ldr	r3, [pc, #116]	@ (8001808 <HAL_FDCAN_MspInit+0xec>)
 8001792:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001794:	f003 0301 	and.w	r3, r3, #1
 8001798:	613b      	str	r3, [r7, #16]
 800179a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800179c:	4b1a      	ldr	r3, [pc, #104]	@ (8001808 <HAL_FDCAN_MspInit+0xec>)
 800179e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80017a0:	4a19      	ldr	r2, [pc, #100]	@ (8001808 <HAL_FDCAN_MspInit+0xec>)
 80017a2:	f043 0302 	orr.w	r3, r3, #2
 80017a6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80017a8:	4b17      	ldr	r3, [pc, #92]	@ (8001808 <HAL_FDCAN_MspInit+0xec>)
 80017aa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80017ac:	f003 0302 	and.w	r3, r3, #2
 80017b0:	60fb      	str	r3, [r7, #12]
 80017b2:	68fb      	ldr	r3, [r7, #12]
    /**FDCAN1 GPIO Configuration
    PA11     ------> FDCAN1_RX
    PB9     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 80017b4:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80017b8:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017ba:	2302      	movs	r3, #2
 80017bc:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017be:	2300      	movs	r3, #0
 80017c0:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017c2:	2300      	movs	r3, #0
 80017c4:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 80017c6:	2309      	movs	r3, #9
 80017c8:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017ca:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 80017ce:	4619      	mov	r1, r3
 80017d0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80017d4:	f002 fc68 	bl	80040a8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80017d8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80017dc:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017de:	2302      	movs	r3, #2
 80017e0:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017e2:	2300      	movs	r3, #0
 80017e4:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017e6:	2300      	movs	r3, #0
 80017e8:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 80017ea:	2309      	movs	r3, #9
 80017ec:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80017ee:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 80017f2:	4619      	mov	r1, r3
 80017f4:	4805      	ldr	r0, [pc, #20]	@ (800180c <HAL_FDCAN_MspInit+0xf0>)
 80017f6:	f002 fc57 	bl	80040a8 <HAL_GPIO_Init>

  /* USER CODE END FDCAN1_MspInit 1 */

  }

}
 80017fa:	bf00      	nop
 80017fc:	3770      	adds	r7, #112	@ 0x70
 80017fe:	46bd      	mov	sp, r7
 8001800:	bd80      	pop	{r7, pc}
 8001802:	bf00      	nop
 8001804:	40006400 	.word	0x40006400
 8001808:	40021000 	.word	0x40021000
 800180c:	48000400 	.word	0x48000400

08001810 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001810:	b580      	push	{r7, lr}
 8001812:	b09e      	sub	sp, #120	@ 0x78
 8001814:	af00      	add	r7, sp, #0
 8001816:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001818:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 800181c:	2200      	movs	r2, #0
 800181e:	601a      	str	r2, [r3, #0]
 8001820:	605a      	str	r2, [r3, #4]
 8001822:	609a      	str	r2, [r3, #8]
 8001824:	60da      	str	r2, [r3, #12]
 8001826:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001828:	f107 0320 	add.w	r3, r7, #32
 800182c:	2244      	movs	r2, #68	@ 0x44
 800182e:	2100      	movs	r1, #0
 8001830:	4618      	mov	r0, r3
 8001832:	f006 fb54 	bl	8007ede <memset>
  if(hi2c->Instance==I2C1)
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	4a5c      	ldr	r2, [pc, #368]	@ (80019ac <HAL_I2C_MspInit+0x19c>)
 800183c:	4293      	cmp	r3, r2
 800183e:	d147      	bne.n	80018d0 <HAL_I2C_MspInit+0xc0>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001840:	2340      	movs	r3, #64	@ 0x40
 8001842:	623b      	str	r3, [r7, #32]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001844:	2300      	movs	r3, #0
 8001846:	63bb      	str	r3, [r7, #56]	@ 0x38
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001848:	f107 0320 	add.w	r3, r7, #32
 800184c:	4618      	mov	r0, r3
 800184e:	f004 fb23 	bl	8005e98 <HAL_RCCEx_PeriphCLKConfig>
 8001852:	4603      	mov	r3, r0
 8001854:	2b00      	cmp	r3, #0
 8001856:	d001      	beq.n	800185c <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8001858:	f7ff fea2 	bl	80015a0 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800185c:	4b54      	ldr	r3, [pc, #336]	@ (80019b0 <HAL_I2C_MspInit+0x1a0>)
 800185e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001860:	4a53      	ldr	r2, [pc, #332]	@ (80019b0 <HAL_I2C_MspInit+0x1a0>)
 8001862:	f043 0302 	orr.w	r3, r3, #2
 8001866:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001868:	4b51      	ldr	r3, [pc, #324]	@ (80019b0 <HAL_I2C_MspInit+0x1a0>)
 800186a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800186c:	f003 0302 	and.w	r3, r3, #2
 8001870:	61fb      	str	r3, [r7, #28]
 8001872:	69fb      	ldr	r3, [r7, #28]
    /**I2C1 GPIO Configuration
    PB7     ------> I2C1_SDA
    PB8-BOOT0     ------> I2C1_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 8001874:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 8001878:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800187a:	2312      	movs	r3, #18
 800187c:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800187e:	2300      	movs	r3, #0
 8001880:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001882:	2300      	movs	r3, #0
 8001884:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001886:	2304      	movs	r3, #4
 8001888:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800188a:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 800188e:	4619      	mov	r1, r3
 8001890:	4848      	ldr	r0, [pc, #288]	@ (80019b4 <HAL_I2C_MspInit+0x1a4>)
 8001892:	f002 fc09 	bl	80040a8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001896:	4b46      	ldr	r3, [pc, #280]	@ (80019b0 <HAL_I2C_MspInit+0x1a0>)
 8001898:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800189a:	4a45      	ldr	r2, [pc, #276]	@ (80019b0 <HAL_I2C_MspInit+0x1a0>)
 800189c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80018a0:	6593      	str	r3, [r2, #88]	@ 0x58
 80018a2:	4b43      	ldr	r3, [pc, #268]	@ (80019b0 <HAL_I2C_MspInit+0x1a0>)
 80018a4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80018a6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80018aa:	61bb      	str	r3, [r7, #24]
 80018ac:	69bb      	ldr	r3, [r7, #24]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 4, 0);
 80018ae:	2200      	movs	r2, #0
 80018b0:	2104      	movs	r1, #4
 80018b2:	201f      	movs	r0, #31
 80018b4:	f001 ff2b 	bl	800370e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 80018b8:	201f      	movs	r0, #31
 80018ba:	f001 ff42 	bl	8003742 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 80018be:	2200      	movs	r2, #0
 80018c0:	2100      	movs	r1, #0
 80018c2:	2020      	movs	r0, #32
 80018c4:	f001 ff23 	bl	800370e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 80018c8:	2020      	movs	r0, #32
 80018ca:	f001 ff3a 	bl	8003742 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 80018ce:	e069      	b.n	80019a4 <HAL_I2C_MspInit+0x194>
  else if(hi2c->Instance==I2C3)
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	4a38      	ldr	r2, [pc, #224]	@ (80019b8 <HAL_I2C_MspInit+0x1a8>)
 80018d6:	4293      	cmp	r3, r2
 80018d8:	d164      	bne.n	80019a4 <HAL_I2C_MspInit+0x194>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C3;
 80018da:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80018de:	623b      	str	r3, [r7, #32]
    PeriphClkInit.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 80018e0:	2300      	movs	r3, #0
 80018e2:	643b      	str	r3, [r7, #64]	@ 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80018e4:	f107 0320 	add.w	r3, r7, #32
 80018e8:	4618      	mov	r0, r3
 80018ea:	f004 fad5 	bl	8005e98 <HAL_RCCEx_PeriphCLKConfig>
 80018ee:	4603      	mov	r3, r0
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	d001      	beq.n	80018f8 <HAL_I2C_MspInit+0xe8>
      Error_Handler();
 80018f4:	f7ff fe54 	bl	80015a0 <Error_Handler>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80018f8:	4b2d      	ldr	r3, [pc, #180]	@ (80019b0 <HAL_I2C_MspInit+0x1a0>)
 80018fa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80018fc:	4a2c      	ldr	r2, [pc, #176]	@ (80019b0 <HAL_I2C_MspInit+0x1a0>)
 80018fe:	f043 0301 	orr.w	r3, r3, #1
 8001902:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001904:	4b2a      	ldr	r3, [pc, #168]	@ (80019b0 <HAL_I2C_MspInit+0x1a0>)
 8001906:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001908:	f003 0301 	and.w	r3, r3, #1
 800190c:	617b      	str	r3, [r7, #20]
 800190e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001910:	4b27      	ldr	r3, [pc, #156]	@ (80019b0 <HAL_I2C_MspInit+0x1a0>)
 8001912:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001914:	4a26      	ldr	r2, [pc, #152]	@ (80019b0 <HAL_I2C_MspInit+0x1a0>)
 8001916:	f043 0302 	orr.w	r3, r3, #2
 800191a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800191c:	4b24      	ldr	r3, [pc, #144]	@ (80019b0 <HAL_I2C_MspInit+0x1a0>)
 800191e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001920:	f003 0302 	and.w	r3, r3, #2
 8001924:	613b      	str	r3, [r7, #16]
 8001926:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001928:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800192c:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800192e:	2312      	movs	r3, #18
 8001930:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001932:	2300      	movs	r3, #0
 8001934:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001936:	2300      	movs	r3, #0
 8001938:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF2_I2C3;
 800193a:	2302      	movs	r3, #2
 800193c:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800193e:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8001942:	4619      	mov	r1, r3
 8001944:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001948:	f002 fbae 	bl	80040a8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 800194c:	2320      	movs	r3, #32
 800194e:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001950:	2312      	movs	r3, #18
 8001952:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001954:	2300      	movs	r3, #0
 8001956:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001958:	2300      	movs	r3, #0
 800195a:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF8_I2C3;
 800195c:	2308      	movs	r3, #8
 800195e:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001960:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8001964:	4619      	mov	r1, r3
 8001966:	4813      	ldr	r0, [pc, #76]	@ (80019b4 <HAL_I2C_MspInit+0x1a4>)
 8001968:	f002 fb9e 	bl	80040a8 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 800196c:	4b10      	ldr	r3, [pc, #64]	@ (80019b0 <HAL_I2C_MspInit+0x1a0>)
 800196e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001970:	4a0f      	ldr	r2, [pc, #60]	@ (80019b0 <HAL_I2C_MspInit+0x1a0>)
 8001972:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8001976:	6593      	str	r3, [r2, #88]	@ 0x58
 8001978:	4b0d      	ldr	r3, [pc, #52]	@ (80019b0 <HAL_I2C_MspInit+0x1a0>)
 800197a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800197c:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8001980:	60fb      	str	r3, [r7, #12]
 8001982:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(I2C3_EV_IRQn, 4, 0);
 8001984:	2200      	movs	r2, #0
 8001986:	2104      	movs	r1, #4
 8001988:	205c      	movs	r0, #92	@ 0x5c
 800198a:	f001 fec0 	bl	800370e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C3_EV_IRQn);
 800198e:	205c      	movs	r0, #92	@ 0x5c
 8001990:	f001 fed7 	bl	8003742 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C3_ER_IRQn, 0, 0);
 8001994:	2200      	movs	r2, #0
 8001996:	2100      	movs	r1, #0
 8001998:	205d      	movs	r0, #93	@ 0x5d
 800199a:	f001 feb8 	bl	800370e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C3_ER_IRQn);
 800199e:	205d      	movs	r0, #93	@ 0x5d
 80019a0:	f001 fecf 	bl	8003742 <HAL_NVIC_EnableIRQ>
}
 80019a4:	bf00      	nop
 80019a6:	3778      	adds	r7, #120	@ 0x78
 80019a8:	46bd      	mov	sp, r7
 80019aa:	bd80      	pop	{r7, pc}
 80019ac:	40005400 	.word	0x40005400
 80019b0:	40021000 	.word	0x40021000
 80019b4:	48000400 	.word	0x48000400
 80019b8:	40007800 	.word	0x40007800

080019bc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80019bc:	b580      	push	{r7, lr}
 80019be:	b084      	sub	sp, #16
 80019c0:	af00      	add	r7, sp, #0
 80019c2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80019cc:	d113      	bne.n	80019f6 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80019ce:	4b0c      	ldr	r3, [pc, #48]	@ (8001a00 <HAL_TIM_Base_MspInit+0x44>)
 80019d0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80019d2:	4a0b      	ldr	r2, [pc, #44]	@ (8001a00 <HAL_TIM_Base_MspInit+0x44>)
 80019d4:	f043 0301 	orr.w	r3, r3, #1
 80019d8:	6593      	str	r3, [r2, #88]	@ 0x58
 80019da:	4b09      	ldr	r3, [pc, #36]	@ (8001a00 <HAL_TIM_Base_MspInit+0x44>)
 80019dc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80019de:	f003 0301 	and.w	r3, r3, #1
 80019e2:	60fb      	str	r3, [r7, #12]
 80019e4:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 2, 0);
 80019e6:	2200      	movs	r2, #0
 80019e8:	2102      	movs	r1, #2
 80019ea:	201c      	movs	r0, #28
 80019ec:	f001 fe8f 	bl	800370e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80019f0:	201c      	movs	r0, #28
 80019f2:	f001 fea6 	bl	8003742 <HAL_NVIC_EnableIRQ>

  /* USER CODE END TIM2_MspInit 1 */

  }

}
 80019f6:	bf00      	nop
 80019f8:	3710      	adds	r7, #16
 80019fa:	46bd      	mov	sp, r7
 80019fc:	bd80      	pop	{r7, pc}
 80019fe:	bf00      	nop
 8001a00:	40021000 	.word	0x40021000

08001a04 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001a04:	b580      	push	{r7, lr}
 8001a06:	b088      	sub	sp, #32
 8001a08:	af00      	add	r7, sp, #0
 8001a0a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a0c:	f107 030c 	add.w	r3, r7, #12
 8001a10:	2200      	movs	r2, #0
 8001a12:	601a      	str	r2, [r3, #0]
 8001a14:	605a      	str	r2, [r3, #4]
 8001a16:	609a      	str	r2, [r3, #8]
 8001a18:	60da      	str	r2, [r3, #12]
 8001a1a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001a24:	d11c      	bne.n	8001a60 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a26:	4b10      	ldr	r3, [pc, #64]	@ (8001a68 <HAL_TIM_MspPostInit+0x64>)
 8001a28:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001a2a:	4a0f      	ldr	r2, [pc, #60]	@ (8001a68 <HAL_TIM_MspPostInit+0x64>)
 8001a2c:	f043 0301 	orr.w	r3, r3, #1
 8001a30:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001a32:	4b0d      	ldr	r3, [pc, #52]	@ (8001a68 <HAL_TIM_MspPostInit+0x64>)
 8001a34:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001a36:	f003 0301 	and.w	r3, r3, #1
 8001a3a:	60bb      	str	r3, [r7, #8]
 8001a3c:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = PWM2_Pin|PWM1_Pin;
 8001a3e:	2303      	movs	r3, #3
 8001a40:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a42:	2302      	movs	r3, #2
 8001a44:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a46:	2300      	movs	r3, #0
 8001a48:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a4a:	2300      	movs	r3, #0
 8001a4c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001a4e:	2301      	movs	r3, #1
 8001a50:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a52:	f107 030c 	add.w	r3, r7, #12
 8001a56:	4619      	mov	r1, r3
 8001a58:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001a5c:	f002 fb24 	bl	80040a8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8001a60:	bf00      	nop
 8001a62:	3720      	adds	r7, #32
 8001a64:	46bd      	mov	sp, r7
 8001a66:	bd80      	pop	{r7, pc}
 8001a68:	40021000 	.word	0x40021000

08001a6c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001a6c:	b480      	push	{r7}
 8001a6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001a70:	bf00      	nop
 8001a72:	e7fd      	b.n	8001a70 <NMI_Handler+0x4>

08001a74 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001a74:	b480      	push	{r7}
 8001a76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001a78:	bf00      	nop
 8001a7a:	e7fd      	b.n	8001a78 <HardFault_Handler+0x4>

08001a7c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001a7c:	b480      	push	{r7}
 8001a7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001a80:	bf00      	nop
 8001a82:	e7fd      	b.n	8001a80 <MemManage_Handler+0x4>

08001a84 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001a84:	b480      	push	{r7}
 8001a86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001a88:	bf00      	nop
 8001a8a:	e7fd      	b.n	8001a88 <BusFault_Handler+0x4>

08001a8c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001a8c:	b480      	push	{r7}
 8001a8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001a90:	bf00      	nop
 8001a92:	e7fd      	b.n	8001a90 <UsageFault_Handler+0x4>

08001a94 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001a94:	b480      	push	{r7}
 8001a96:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001a98:	bf00      	nop
 8001a9a:	46bd      	mov	sp, r7
 8001a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa0:	4770      	bx	lr

08001aa2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001aa2:	b480      	push	{r7}
 8001aa4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001aa6:	bf00      	nop
 8001aa8:	46bd      	mov	sp, r7
 8001aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aae:	4770      	bx	lr

08001ab0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001ab0:	b480      	push	{r7}
 8001ab2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001ab4:	bf00      	nop
 8001ab6:	46bd      	mov	sp, r7
 8001ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001abc:	4770      	bx	lr

08001abe <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001abe:	b580      	push	{r7, lr}
 8001ac0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001ac2:	f000 f9ad 	bl	8001e20 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001ac6:	bf00      	nop
 8001ac8:	bd80      	pop	{r7, pc}

08001aca <PVD_PVM_IRQHandler>:

/**
  * @brief This function handles PVD/PVM1/PVM2/PVM3/PVM4 interrupts through EXTI lines 16/38/39/40/41.
  */
void PVD_PVM_IRQHandler(void)
{
 8001aca:	b580      	push	{r7, lr}
 8001acc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN PVD_PVM_IRQn 0 */

  /* USER CODE END PVD_PVM_IRQn 0 */
  HAL_PWREx_PVD_PVM_IRQHandler();
 8001ace:	f003 fc83 	bl	80053d8 <HAL_PWREx_PVD_PVM_IRQHandler>
  /* USER CODE BEGIN PVD_PVM_IRQn 1 */

  /* USER CODE END PVD_PVM_IRQn 1 */
}
 8001ad2:	bf00      	nop
 8001ad4:	bd80      	pop	{r7, pc}

08001ad6 <RCC_IRQHandler>:

/**
  * @brief This function handles RCC global interrupt.
  */
void RCC_IRQHandler(void)
{
 8001ad6:	b480      	push	{r7}
 8001ad8:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 8001ada:	bf00      	nop
 8001adc:	46bd      	mov	sp, r7
 8001ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae2:	4770      	bx	lr

08001ae4 <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 8001ae4:	b580      	push	{r7, lr}
 8001ae6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(SNOUT_Pin);
 8001ae8:	2008      	movs	r0, #8
 8001aea:	f002 fc77 	bl	80043dc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 8001aee:	bf00      	nop
 8001af0:	bd80      	pop	{r7, pc}

08001af2 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8001af2:	b580      	push	{r7, lr}
 8001af4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(NFAULT_Pin);
 8001af6:	2010      	movs	r0, #16
 8001af8:	f002 fc70 	bl	80043dc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8001afc:	bf00      	nop
 8001afe:	bd80      	pop	{r7, pc}

08001b00 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001b00:	b580      	push	{r7, lr}
 8001b02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001b04:	4802      	ldr	r0, [pc, #8]	@ (8001b10 <DMA1_Channel1_IRQHandler+0x10>)
 8001b06:	f001 ffc1 	bl	8003a8c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8001b0a:	bf00      	nop
 8001b0c:	bd80      	pop	{r7, pc}
 8001b0e:	bf00      	nop
 8001b10:	2000025c 	.word	0x2000025c

08001b14 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001b14:	b580      	push	{r7, lr}
 8001b16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001b18:	4802      	ldr	r0, [pc, #8]	@ (8001b24 <TIM2_IRQHandler+0x10>)
 8001b1a:	f004 fdfb 	bl	8006714 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001b1e:	bf00      	nop
 8001b20:	bd80      	pop	{r7, pc}
 8001b22:	bf00      	nop
 8001b24:	200003c8 	.word	0x200003c8

08001b28 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt / I2C1 wake-up interrupt through EXTI line 23.
  */
void I2C1_EV_IRQHandler(void)
{
 8001b28:	b580      	push	{r7, lr}
 8001b2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8001b2c:	4802      	ldr	r0, [pc, #8]	@ (8001b38 <I2C1_EV_IRQHandler+0x10>)
 8001b2e:	f002 fd13 	bl	8004558 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8001b32:	bf00      	nop
 8001b34:	bd80      	pop	{r7, pc}
 8001b36:	bf00      	nop
 8001b38:	20000320 	.word	0x20000320

08001b3c <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8001b3c:	b580      	push	{r7, lr}
 8001b3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8001b40:	4802      	ldr	r0, [pc, #8]	@ (8001b4c <I2C1_ER_IRQHandler+0x10>)
 8001b42:	f002 fd23 	bl	800458c <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8001b46:	bf00      	nop
 8001b48:	bd80      	pop	{r7, pc}
 8001b4a:	bf00      	nop
 8001b4c:	20000320 	.word	0x20000320

08001b50 <I2C3_EV_IRQHandler>:

/**
  * @brief This function handles I2C3 event interrupt / I2C3 wake-up interrupt through EXTI line 27.
  */
void I2C3_EV_IRQHandler(void)
{
 8001b50:	b580      	push	{r7, lr}
 8001b52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C3_EV_IRQn 0 */

  /* USER CODE END I2C3_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c3);
 8001b54:	4802      	ldr	r0, [pc, #8]	@ (8001b60 <I2C3_EV_IRQHandler+0x10>)
 8001b56:	f002 fcff 	bl	8004558 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C3_EV_IRQn 1 */

  /* USER CODE END I2C3_EV_IRQn 1 */
}
 8001b5a:	bf00      	nop
 8001b5c:	bd80      	pop	{r7, pc}
 8001b5e:	bf00      	nop
 8001b60:	20000374 	.word	0x20000374

08001b64 <I2C3_ER_IRQHandler>:

/**
  * @brief This function handles I2C3 error interrupt.
  */
void I2C3_ER_IRQHandler(void)
{
 8001b64:	b580      	push	{r7, lr}
 8001b66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C3_ER_IRQn 0 */

  /* USER CODE END I2C3_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c3);
 8001b68:	4802      	ldr	r0, [pc, #8]	@ (8001b74 <I2C3_ER_IRQHandler+0x10>)
 8001b6a:	f002 fd0f 	bl	800458c <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C3_ER_IRQn 1 */

  /* USER CODE END I2C3_ER_IRQn 1 */
}
 8001b6e:	bf00      	nop
 8001b70:	bd80      	pop	{r7, pc}
 8001b72:	bf00      	nop
 8001b74:	20000374 	.word	0x20000374

08001b78 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001b78:	b480      	push	{r7}
 8001b7a:	af00      	add	r7, sp, #0
  return 1;
 8001b7c:	2301      	movs	r3, #1
}
 8001b7e:	4618      	mov	r0, r3
 8001b80:	46bd      	mov	sp, r7
 8001b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b86:	4770      	bx	lr

08001b88 <_kill>:

int _kill(int pid, int sig)
{
 8001b88:	b580      	push	{r7, lr}
 8001b8a:	b082      	sub	sp, #8
 8001b8c:	af00      	add	r7, sp, #0
 8001b8e:	6078      	str	r0, [r7, #4]
 8001b90:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001b92:	f006 f9f3 	bl	8007f7c <__errno>
 8001b96:	4603      	mov	r3, r0
 8001b98:	2216      	movs	r2, #22
 8001b9a:	601a      	str	r2, [r3, #0]
  return -1;
 8001b9c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001ba0:	4618      	mov	r0, r3
 8001ba2:	3708      	adds	r7, #8
 8001ba4:	46bd      	mov	sp, r7
 8001ba6:	bd80      	pop	{r7, pc}

08001ba8 <_exit>:

void _exit (int status)
{
 8001ba8:	b580      	push	{r7, lr}
 8001baa:	b082      	sub	sp, #8
 8001bac:	af00      	add	r7, sp, #0
 8001bae:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001bb0:	f04f 31ff 	mov.w	r1, #4294967295
 8001bb4:	6878      	ldr	r0, [r7, #4]
 8001bb6:	f7ff ffe7 	bl	8001b88 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001bba:	bf00      	nop
 8001bbc:	e7fd      	b.n	8001bba <_exit+0x12>

08001bbe <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001bbe:	b580      	push	{r7, lr}
 8001bc0:	b086      	sub	sp, #24
 8001bc2:	af00      	add	r7, sp, #0
 8001bc4:	60f8      	str	r0, [r7, #12]
 8001bc6:	60b9      	str	r1, [r7, #8]
 8001bc8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001bca:	2300      	movs	r3, #0
 8001bcc:	617b      	str	r3, [r7, #20]
 8001bce:	e00a      	b.n	8001be6 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001bd0:	f3af 8000 	nop.w
 8001bd4:	4601      	mov	r1, r0
 8001bd6:	68bb      	ldr	r3, [r7, #8]
 8001bd8:	1c5a      	adds	r2, r3, #1
 8001bda:	60ba      	str	r2, [r7, #8]
 8001bdc:	b2ca      	uxtb	r2, r1
 8001bde:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001be0:	697b      	ldr	r3, [r7, #20]
 8001be2:	3301      	adds	r3, #1
 8001be4:	617b      	str	r3, [r7, #20]
 8001be6:	697a      	ldr	r2, [r7, #20]
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	429a      	cmp	r2, r3
 8001bec:	dbf0      	blt.n	8001bd0 <_read+0x12>
  }

  return len;
 8001bee:	687b      	ldr	r3, [r7, #4]
}
 8001bf0:	4618      	mov	r0, r3
 8001bf2:	3718      	adds	r7, #24
 8001bf4:	46bd      	mov	sp, r7
 8001bf6:	bd80      	pop	{r7, pc}

08001bf8 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001bf8:	b580      	push	{r7, lr}
 8001bfa:	b086      	sub	sp, #24
 8001bfc:	af00      	add	r7, sp, #0
 8001bfe:	60f8      	str	r0, [r7, #12]
 8001c00:	60b9      	str	r1, [r7, #8]
 8001c02:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c04:	2300      	movs	r3, #0
 8001c06:	617b      	str	r3, [r7, #20]
 8001c08:	e009      	b.n	8001c1e <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001c0a:	68bb      	ldr	r3, [r7, #8]
 8001c0c:	1c5a      	adds	r2, r3, #1
 8001c0e:	60ba      	str	r2, [r7, #8]
 8001c10:	781b      	ldrb	r3, [r3, #0]
 8001c12:	4618      	mov	r0, r3
 8001c14:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c18:	697b      	ldr	r3, [r7, #20]
 8001c1a:	3301      	adds	r3, #1
 8001c1c:	617b      	str	r3, [r7, #20]
 8001c1e:	697a      	ldr	r2, [r7, #20]
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	429a      	cmp	r2, r3
 8001c24:	dbf1      	blt.n	8001c0a <_write+0x12>
  }
  return len;
 8001c26:	687b      	ldr	r3, [r7, #4]
}
 8001c28:	4618      	mov	r0, r3
 8001c2a:	3718      	adds	r7, #24
 8001c2c:	46bd      	mov	sp, r7
 8001c2e:	bd80      	pop	{r7, pc}

08001c30 <_close>:

int _close(int file)
{
 8001c30:	b480      	push	{r7}
 8001c32:	b083      	sub	sp, #12
 8001c34:	af00      	add	r7, sp, #0
 8001c36:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001c38:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001c3c:	4618      	mov	r0, r3
 8001c3e:	370c      	adds	r7, #12
 8001c40:	46bd      	mov	sp, r7
 8001c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c46:	4770      	bx	lr

08001c48 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001c48:	b480      	push	{r7}
 8001c4a:	b083      	sub	sp, #12
 8001c4c:	af00      	add	r7, sp, #0
 8001c4e:	6078      	str	r0, [r7, #4]
 8001c50:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001c52:	683b      	ldr	r3, [r7, #0]
 8001c54:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001c58:	605a      	str	r2, [r3, #4]
  return 0;
 8001c5a:	2300      	movs	r3, #0
}
 8001c5c:	4618      	mov	r0, r3
 8001c5e:	370c      	adds	r7, #12
 8001c60:	46bd      	mov	sp, r7
 8001c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c66:	4770      	bx	lr

08001c68 <_isatty>:

int _isatty(int file)
{
 8001c68:	b480      	push	{r7}
 8001c6a:	b083      	sub	sp, #12
 8001c6c:	af00      	add	r7, sp, #0
 8001c6e:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001c70:	2301      	movs	r3, #1
}
 8001c72:	4618      	mov	r0, r3
 8001c74:	370c      	adds	r7, #12
 8001c76:	46bd      	mov	sp, r7
 8001c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c7c:	4770      	bx	lr

08001c7e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001c7e:	b480      	push	{r7}
 8001c80:	b085      	sub	sp, #20
 8001c82:	af00      	add	r7, sp, #0
 8001c84:	60f8      	str	r0, [r7, #12]
 8001c86:	60b9      	str	r1, [r7, #8]
 8001c88:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001c8a:	2300      	movs	r3, #0
}
 8001c8c:	4618      	mov	r0, r3
 8001c8e:	3714      	adds	r7, #20
 8001c90:	46bd      	mov	sp, r7
 8001c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c96:	4770      	bx	lr

08001c98 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001c98:	b580      	push	{r7, lr}
 8001c9a:	b086      	sub	sp, #24
 8001c9c:	af00      	add	r7, sp, #0
 8001c9e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001ca0:	4a14      	ldr	r2, [pc, #80]	@ (8001cf4 <_sbrk+0x5c>)
 8001ca2:	4b15      	ldr	r3, [pc, #84]	@ (8001cf8 <_sbrk+0x60>)
 8001ca4:	1ad3      	subs	r3, r2, r3
 8001ca6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001ca8:	697b      	ldr	r3, [r7, #20]
 8001caa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001cac:	4b13      	ldr	r3, [pc, #76]	@ (8001cfc <_sbrk+0x64>)
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	d102      	bne.n	8001cba <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001cb4:	4b11      	ldr	r3, [pc, #68]	@ (8001cfc <_sbrk+0x64>)
 8001cb6:	4a12      	ldr	r2, [pc, #72]	@ (8001d00 <_sbrk+0x68>)
 8001cb8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001cba:	4b10      	ldr	r3, [pc, #64]	@ (8001cfc <_sbrk+0x64>)
 8001cbc:	681a      	ldr	r2, [r3, #0]
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	4413      	add	r3, r2
 8001cc2:	693a      	ldr	r2, [r7, #16]
 8001cc4:	429a      	cmp	r2, r3
 8001cc6:	d207      	bcs.n	8001cd8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001cc8:	f006 f958 	bl	8007f7c <__errno>
 8001ccc:	4603      	mov	r3, r0
 8001cce:	220c      	movs	r2, #12
 8001cd0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001cd2:	f04f 33ff 	mov.w	r3, #4294967295
 8001cd6:	e009      	b.n	8001cec <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001cd8:	4b08      	ldr	r3, [pc, #32]	@ (8001cfc <_sbrk+0x64>)
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001cde:	4b07      	ldr	r3, [pc, #28]	@ (8001cfc <_sbrk+0x64>)
 8001ce0:	681a      	ldr	r2, [r3, #0]
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	4413      	add	r3, r2
 8001ce6:	4a05      	ldr	r2, [pc, #20]	@ (8001cfc <_sbrk+0x64>)
 8001ce8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001cea:	68fb      	ldr	r3, [r7, #12]
}
 8001cec:	4618      	mov	r0, r3
 8001cee:	3718      	adds	r7, #24
 8001cf0:	46bd      	mov	sp, r7
 8001cf2:	bd80      	pop	{r7, pc}
 8001cf4:	20008000 	.word	0x20008000
 8001cf8:	00000400 	.word	0x00000400
 8001cfc:	20000418 	.word	0x20000418
 8001d00:	20000570 	.word	0x20000570

08001d04 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001d04:	b480      	push	{r7}
 8001d06:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001d08:	4b06      	ldr	r3, [pc, #24]	@ (8001d24 <SystemInit+0x20>)
 8001d0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001d0e:	4a05      	ldr	r2, [pc, #20]	@ (8001d24 <SystemInit+0x20>)
 8001d10:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001d14:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001d18:	bf00      	nop
 8001d1a:	46bd      	mov	sp, r7
 8001d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d20:	4770      	bx	lr
 8001d22:	bf00      	nop
 8001d24:	e000ed00 	.word	0xe000ed00

08001d28 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001d28:	480d      	ldr	r0, [pc, #52]	@ (8001d60 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001d2a:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8001d2c:	f7ff ffea 	bl	8001d04 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001d30:	480c      	ldr	r0, [pc, #48]	@ (8001d64 <LoopForever+0x6>)
  ldr r1, =_edata
 8001d32:	490d      	ldr	r1, [pc, #52]	@ (8001d68 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001d34:	4a0d      	ldr	r2, [pc, #52]	@ (8001d6c <LoopForever+0xe>)
  movs r3, #0
 8001d36:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8001d38:	e002      	b.n	8001d40 <LoopCopyDataInit>

08001d3a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001d3a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001d3c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001d3e:	3304      	adds	r3, #4

08001d40 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001d40:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001d42:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001d44:	d3f9      	bcc.n	8001d3a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001d46:	4a0a      	ldr	r2, [pc, #40]	@ (8001d70 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001d48:	4c0a      	ldr	r4, [pc, #40]	@ (8001d74 <LoopForever+0x16>)
  movs r3, #0
 8001d4a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001d4c:	e001      	b.n	8001d52 <LoopFillZerobss>

08001d4e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001d4e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001d50:	3204      	adds	r2, #4

08001d52 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001d52:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001d54:	d3fb      	bcc.n	8001d4e <FillZerobss>
/* Call static constructors */
    bl __libc_init_array
 8001d56:	f006 f917 	bl	8007f88 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001d5a:	f7ff f8bb 	bl	8000ed4 <main>

08001d5e <LoopForever>:

LoopForever:
    b LoopForever
 8001d5e:	e7fe      	b.n	8001d5e <LoopForever>
  ldr   r0, =_estack
 8001d60:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8001d64:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001d68:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 8001d6c:	0800b124 	.word	0x0800b124
  ldr r2, =_sbss
 8001d70:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 8001d74:	2000056c 	.word	0x2000056c

08001d78 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001d78:	e7fe      	b.n	8001d78 <ADC1_2_IRQHandler>

08001d7a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001d7a:	b580      	push	{r7, lr}
 8001d7c:	b082      	sub	sp, #8
 8001d7e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001d80:	2300      	movs	r3, #0
 8001d82:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001d84:	2003      	movs	r0, #3
 8001d86:	f001 fcb7 	bl	80036f8 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001d8a:	200f      	movs	r0, #15
 8001d8c:	f000 f80e 	bl	8001dac <HAL_InitTick>
 8001d90:	4603      	mov	r3, r0
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d002      	beq.n	8001d9c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001d96:	2301      	movs	r3, #1
 8001d98:	71fb      	strb	r3, [r7, #7]
 8001d9a:	e001      	b.n	8001da0 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001d9c:	f7ff fc06 	bl	80015ac <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001da0:	79fb      	ldrb	r3, [r7, #7]

}
 8001da2:	4618      	mov	r0, r3
 8001da4:	3708      	adds	r7, #8
 8001da6:	46bd      	mov	sp, r7
 8001da8:	bd80      	pop	{r7, pc}
	...

08001dac <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001dac:	b580      	push	{r7, lr}
 8001dae:	b084      	sub	sp, #16
 8001db0:	af00      	add	r7, sp, #0
 8001db2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001db4:	2300      	movs	r3, #0
 8001db6:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8001db8:	4b16      	ldr	r3, [pc, #88]	@ (8001e14 <HAL_InitTick+0x68>)
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	d022      	beq.n	8001e06 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8001dc0:	4b15      	ldr	r3, [pc, #84]	@ (8001e18 <HAL_InitTick+0x6c>)
 8001dc2:	681a      	ldr	r2, [r3, #0]
 8001dc4:	4b13      	ldr	r3, [pc, #76]	@ (8001e14 <HAL_InitTick+0x68>)
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8001dcc:	fbb1 f3f3 	udiv	r3, r1, r3
 8001dd0:	fbb2 f3f3 	udiv	r3, r2, r3
 8001dd4:	4618      	mov	r0, r3
 8001dd6:	f001 fcc2 	bl	800375e <HAL_SYSTICK_Config>
 8001dda:	4603      	mov	r3, r0
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d10f      	bne.n	8001e00 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	2b0f      	cmp	r3, #15
 8001de4:	d809      	bhi.n	8001dfa <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001de6:	2200      	movs	r2, #0
 8001de8:	6879      	ldr	r1, [r7, #4]
 8001dea:	f04f 30ff 	mov.w	r0, #4294967295
 8001dee:	f001 fc8e 	bl	800370e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001df2:	4a0a      	ldr	r2, [pc, #40]	@ (8001e1c <HAL_InitTick+0x70>)
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	6013      	str	r3, [r2, #0]
 8001df8:	e007      	b.n	8001e0a <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8001dfa:	2301      	movs	r3, #1
 8001dfc:	73fb      	strb	r3, [r7, #15]
 8001dfe:	e004      	b.n	8001e0a <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001e00:	2301      	movs	r3, #1
 8001e02:	73fb      	strb	r3, [r7, #15]
 8001e04:	e001      	b.n	8001e0a <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001e06:	2301      	movs	r3, #1
 8001e08:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001e0a:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e0c:	4618      	mov	r0, r3
 8001e0e:	3710      	adds	r7, #16
 8001e10:	46bd      	mov	sp, r7
 8001e12:	bd80      	pop	{r7, pc}
 8001e14:	20000008 	.word	0x20000008
 8001e18:	20000000 	.word	0x20000000
 8001e1c:	20000004 	.word	0x20000004

08001e20 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001e20:	b480      	push	{r7}
 8001e22:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001e24:	4b05      	ldr	r3, [pc, #20]	@ (8001e3c <HAL_IncTick+0x1c>)
 8001e26:	681a      	ldr	r2, [r3, #0]
 8001e28:	4b05      	ldr	r3, [pc, #20]	@ (8001e40 <HAL_IncTick+0x20>)
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	4413      	add	r3, r2
 8001e2e:	4a03      	ldr	r2, [pc, #12]	@ (8001e3c <HAL_IncTick+0x1c>)
 8001e30:	6013      	str	r3, [r2, #0]
}
 8001e32:	bf00      	nop
 8001e34:	46bd      	mov	sp, r7
 8001e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e3a:	4770      	bx	lr
 8001e3c:	2000041c 	.word	0x2000041c
 8001e40:	20000008 	.word	0x20000008

08001e44 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001e44:	b480      	push	{r7}
 8001e46:	af00      	add	r7, sp, #0
  return uwTick;
 8001e48:	4b03      	ldr	r3, [pc, #12]	@ (8001e58 <HAL_GetTick+0x14>)
 8001e4a:	681b      	ldr	r3, [r3, #0]
}
 8001e4c:	4618      	mov	r0, r3
 8001e4e:	46bd      	mov	sp, r7
 8001e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e54:	4770      	bx	lr
 8001e56:	bf00      	nop
 8001e58:	2000041c 	.word	0x2000041c

08001e5c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001e5c:	b580      	push	{r7, lr}
 8001e5e:	b084      	sub	sp, #16
 8001e60:	af00      	add	r7, sp, #0
 8001e62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001e64:	f7ff ffee 	bl	8001e44 <HAL_GetTick>
 8001e68:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001e6e:	68fb      	ldr	r3, [r7, #12]
 8001e70:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e74:	d004      	beq.n	8001e80 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8001e76:	4b09      	ldr	r3, [pc, #36]	@ (8001e9c <HAL_Delay+0x40>)
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	68fa      	ldr	r2, [r7, #12]
 8001e7c:	4413      	add	r3, r2
 8001e7e:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001e80:	bf00      	nop
 8001e82:	f7ff ffdf 	bl	8001e44 <HAL_GetTick>
 8001e86:	4602      	mov	r2, r0
 8001e88:	68bb      	ldr	r3, [r7, #8]
 8001e8a:	1ad3      	subs	r3, r2, r3
 8001e8c:	68fa      	ldr	r2, [r7, #12]
 8001e8e:	429a      	cmp	r2, r3
 8001e90:	d8f7      	bhi.n	8001e82 <HAL_Delay+0x26>
  {
  }
}
 8001e92:	bf00      	nop
 8001e94:	bf00      	nop
 8001e96:	3710      	adds	r7, #16
 8001e98:	46bd      	mov	sp, r7
 8001e9a:	bd80      	pop	{r7, pc}
 8001e9c:	20000008 	.word	0x20000008

08001ea0 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001ea0:	b480      	push	{r7}
 8001ea2:	b083      	sub	sp, #12
 8001ea4:	af00      	add	r7, sp, #0
 8001ea6:	6078      	str	r0, [r7, #4]
 8001ea8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	689b      	ldr	r3, [r3, #8]
 8001eae:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8001eb2:	683b      	ldr	r3, [r7, #0]
 8001eb4:	431a      	orrs	r2, r3
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	609a      	str	r2, [r3, #8]
}
 8001eba:	bf00      	nop
 8001ebc:	370c      	adds	r7, #12
 8001ebe:	46bd      	mov	sp, r7
 8001ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec4:	4770      	bx	lr

08001ec6 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001ec6:	b480      	push	{r7}
 8001ec8:	b083      	sub	sp, #12
 8001eca:	af00      	add	r7, sp, #0
 8001ecc:	6078      	str	r0, [r7, #4]
 8001ece:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	689b      	ldr	r3, [r3, #8]
 8001ed4:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8001ed8:	683b      	ldr	r3, [r7, #0]
 8001eda:	431a      	orrs	r2, r3
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	609a      	str	r2, [r3, #8]
}
 8001ee0:	bf00      	nop
 8001ee2:	370c      	adds	r7, #12
 8001ee4:	46bd      	mov	sp, r7
 8001ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eea:	4770      	bx	lr

08001eec <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001eec:	b480      	push	{r7}
 8001eee:	b083      	sub	sp, #12
 8001ef0:	af00      	add	r7, sp, #0
 8001ef2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	689b      	ldr	r3, [r3, #8]
 8001ef8:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8001efc:	4618      	mov	r0, r3
 8001efe:	370c      	adds	r7, #12
 8001f00:	46bd      	mov	sp, r7
 8001f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f06:	4770      	bx	lr

08001f08 <LL_ADC_SetOffset>:
  *             (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001f08:	b480      	push	{r7}
 8001f0a:	b087      	sub	sp, #28
 8001f0c:	af00      	add	r7, sp, #0
 8001f0e:	60f8      	str	r0, [r7, #12]
 8001f10:	60b9      	str	r1, [r7, #8]
 8001f12:	607a      	str	r2, [r7, #4]
 8001f14:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001f16:	68fb      	ldr	r3, [r7, #12]
 8001f18:	3360      	adds	r3, #96	@ 0x60
 8001f1a:	461a      	mov	r2, r3
 8001f1c:	68bb      	ldr	r3, [r7, #8]
 8001f1e:	009b      	lsls	r3, r3, #2
 8001f20:	4413      	add	r3, r2
 8001f22:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001f24:	697b      	ldr	r3, [r7, #20]
 8001f26:	681a      	ldr	r2, [r3, #0]
 8001f28:	4b08      	ldr	r3, [pc, #32]	@ (8001f4c <LL_ADC_SetOffset+0x44>)
 8001f2a:	4013      	ands	r3, r2
 8001f2c:	687a      	ldr	r2, [r7, #4]
 8001f2e:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 8001f32:	683a      	ldr	r2, [r7, #0]
 8001f34:	430a      	orrs	r2, r1
 8001f36:	4313      	orrs	r3, r2
 8001f38:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8001f3c:	697b      	ldr	r3, [r7, #20]
 8001f3e:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8001f40:	bf00      	nop
 8001f42:	371c      	adds	r7, #28
 8001f44:	46bd      	mov	sp, r7
 8001f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f4a:	4770      	bx	lr
 8001f4c:	03fff000 	.word	0x03fff000

08001f50 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8001f50:	b480      	push	{r7}
 8001f52:	b085      	sub	sp, #20
 8001f54:	af00      	add	r7, sp, #0
 8001f56:	6078      	str	r0, [r7, #4]
 8001f58:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	3360      	adds	r3, #96	@ 0x60
 8001f5e:	461a      	mov	r2, r3
 8001f60:	683b      	ldr	r3, [r7, #0]
 8001f62:	009b      	lsls	r3, r3, #2
 8001f64:	4413      	add	r3, r2
 8001f66:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001f68:	68fb      	ldr	r3, [r7, #12]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8001f70:	4618      	mov	r0, r3
 8001f72:	3714      	adds	r7, #20
 8001f74:	46bd      	mov	sp, r7
 8001f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f7a:	4770      	bx	lr

08001f7c <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8001f7c:	b480      	push	{r7}
 8001f7e:	b087      	sub	sp, #28
 8001f80:	af00      	add	r7, sp, #0
 8001f82:	60f8      	str	r0, [r7, #12]
 8001f84:	60b9      	str	r1, [r7, #8]
 8001f86:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	3360      	adds	r3, #96	@ 0x60
 8001f8c:	461a      	mov	r2, r3
 8001f8e:	68bb      	ldr	r3, [r7, #8]
 8001f90:	009b      	lsls	r3, r3, #2
 8001f92:	4413      	add	r3, r2
 8001f94:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001f96:	697b      	ldr	r3, [r7, #20]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	431a      	orrs	r2, r3
 8001fa2:	697b      	ldr	r3, [r7, #20]
 8001fa4:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8001fa6:	bf00      	nop
 8001fa8:	371c      	adds	r7, #28
 8001faa:	46bd      	mov	sp, r7
 8001fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb0:	4770      	bx	lr

08001fb2 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8001fb2:	b480      	push	{r7}
 8001fb4:	b087      	sub	sp, #28
 8001fb6:	af00      	add	r7, sp, #0
 8001fb8:	60f8      	str	r0, [r7, #12]
 8001fba:	60b9      	str	r1, [r7, #8]
 8001fbc:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001fbe:	68fb      	ldr	r3, [r7, #12]
 8001fc0:	3360      	adds	r3, #96	@ 0x60
 8001fc2:	461a      	mov	r2, r3
 8001fc4:	68bb      	ldr	r3, [r7, #8]
 8001fc6:	009b      	lsls	r3, r3, #2
 8001fc8:	4413      	add	r3, r2
 8001fca:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001fcc:	697b      	ldr	r3, [r7, #20]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	431a      	orrs	r2, r3
 8001fd8:	697b      	ldr	r3, [r7, #20]
 8001fda:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8001fdc:	bf00      	nop
 8001fde:	371c      	adds	r7, #28
 8001fe0:	46bd      	mov	sp, r7
 8001fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe6:	4770      	bx	lr

08001fe8 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8001fe8:	b480      	push	{r7}
 8001fea:	b087      	sub	sp, #28
 8001fec:	af00      	add	r7, sp, #0
 8001fee:	60f8      	str	r0, [r7, #12]
 8001ff0:	60b9      	str	r1, [r7, #8]
 8001ff2:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001ff4:	68fb      	ldr	r3, [r7, #12]
 8001ff6:	3360      	adds	r3, #96	@ 0x60
 8001ff8:	461a      	mov	r2, r3
 8001ffa:	68bb      	ldr	r3, [r7, #8]
 8001ffc:	009b      	lsls	r3, r3, #2
 8001ffe:	4413      	add	r3, r2
 8002000:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002002:	697b      	ldr	r3, [r7, #20]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	431a      	orrs	r2, r3
 800200e:	697b      	ldr	r3, [r7, #20]
 8002010:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 8002012:	bf00      	nop
 8002014:	371c      	adds	r7, #28
 8002016:	46bd      	mov	sp, r7
 8002018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800201c:	4770      	bx	lr

0800201e <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 800201e:	b480      	push	{r7}
 8002020:	b083      	sub	sp, #12
 8002022:	af00      	add	r7, sp, #0
 8002024:	6078      	str	r0, [r7, #4]
 8002026:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	695b      	ldr	r3, [r3, #20]
 800202c:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8002030:	683b      	ldr	r3, [r7, #0]
 8002032:	431a      	orrs	r2, r3
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	615a      	str	r2, [r3, #20]
}
 8002038:	bf00      	nop
 800203a:	370c      	adds	r7, #12
 800203c:	46bd      	mov	sp, r7
 800203e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002042:	4770      	bx	lr

08002044 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8002044:	b480      	push	{r7}
 8002046:	b083      	sub	sp, #12
 8002048:	af00      	add	r7, sp, #0
 800204a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	68db      	ldr	r3, [r3, #12]
 8002050:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8002054:	2b00      	cmp	r3, #0
 8002056:	d101      	bne.n	800205c <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8002058:	2301      	movs	r3, #1
 800205a:	e000      	b.n	800205e <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 800205c:	2300      	movs	r3, #0
}
 800205e:	4618      	mov	r0, r3
 8002060:	370c      	adds	r7, #12
 8002062:	46bd      	mov	sp, r7
 8002064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002068:	4770      	bx	lr

0800206a <LL_ADC_REG_SetSequencerRanks>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles
  *             (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 800206a:	b480      	push	{r7}
 800206c:	b087      	sub	sp, #28
 800206e:	af00      	add	r7, sp, #0
 8002070:	60f8      	str	r0, [r7, #12]
 8002072:	60b9      	str	r1, [r7, #8]
 8002074:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8002076:	68fb      	ldr	r3, [r7, #12]
 8002078:	3330      	adds	r3, #48	@ 0x30
 800207a:	461a      	mov	r2, r3
 800207c:	68bb      	ldr	r3, [r7, #8]
 800207e:	0a1b      	lsrs	r3, r3, #8
 8002080:	009b      	lsls	r3, r3, #2
 8002082:	f003 030c 	and.w	r3, r3, #12
 8002086:	4413      	add	r3, r2
 8002088:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 800208a:	697b      	ldr	r3, [r7, #20]
 800208c:	681a      	ldr	r2, [r3, #0]
 800208e:	68bb      	ldr	r3, [r7, #8]
 8002090:	f003 031f 	and.w	r3, r3, #31
 8002094:	211f      	movs	r1, #31
 8002096:	fa01 f303 	lsl.w	r3, r1, r3
 800209a:	43db      	mvns	r3, r3
 800209c:	401a      	ands	r2, r3
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	0e9b      	lsrs	r3, r3, #26
 80020a2:	f003 011f 	and.w	r1, r3, #31
 80020a6:	68bb      	ldr	r3, [r7, #8]
 80020a8:	f003 031f 	and.w	r3, r3, #31
 80020ac:	fa01 f303 	lsl.w	r3, r1, r3
 80020b0:	431a      	orrs	r2, r3
 80020b2:	697b      	ldr	r3, [r7, #20]
 80020b4:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80020b6:	bf00      	nop
 80020b8:	371c      	adds	r7, #28
 80020ba:	46bd      	mov	sp, r7
 80020bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c0:	4770      	bx	lr

080020c2 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80020c2:	b480      	push	{r7}
 80020c4:	b087      	sub	sp, #28
 80020c6:	af00      	add	r7, sp, #0
 80020c8:	60f8      	str	r0, [r7, #12]
 80020ca:	60b9      	str	r1, [r7, #8]
 80020cc:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 80020ce:	68fb      	ldr	r3, [r7, #12]
 80020d0:	3314      	adds	r3, #20
 80020d2:	461a      	mov	r2, r3
 80020d4:	68bb      	ldr	r3, [r7, #8]
 80020d6:	0e5b      	lsrs	r3, r3, #25
 80020d8:	009b      	lsls	r3, r3, #2
 80020da:	f003 0304 	and.w	r3, r3, #4
 80020de:	4413      	add	r3, r2
 80020e0:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 80020e2:	697b      	ldr	r3, [r7, #20]
 80020e4:	681a      	ldr	r2, [r3, #0]
 80020e6:	68bb      	ldr	r3, [r7, #8]
 80020e8:	0d1b      	lsrs	r3, r3, #20
 80020ea:	f003 031f 	and.w	r3, r3, #31
 80020ee:	2107      	movs	r1, #7
 80020f0:	fa01 f303 	lsl.w	r3, r1, r3
 80020f4:	43db      	mvns	r3, r3
 80020f6:	401a      	ands	r2, r3
 80020f8:	68bb      	ldr	r3, [r7, #8]
 80020fa:	0d1b      	lsrs	r3, r3, #20
 80020fc:	f003 031f 	and.w	r3, r3, #31
 8002100:	6879      	ldr	r1, [r7, #4]
 8002102:	fa01 f303 	lsl.w	r3, r1, r3
 8002106:	431a      	orrs	r2, r3
 8002108:	697b      	ldr	r3, [r7, #20]
 800210a:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 800210c:	bf00      	nop
 800210e:	371c      	adds	r7, #28
 8002110:	46bd      	mov	sp, r7
 8002112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002116:	4770      	bx	lr

08002118 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8002118:	b480      	push	{r7}
 800211a:	b085      	sub	sp, #20
 800211c:	af00      	add	r7, sp, #0
 800211e:	60f8      	str	r0, [r7, #12]
 8002120:	60b9      	str	r1, [r7, #8]
 8002122:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 800212a:	68bb      	ldr	r3, [r7, #8]
 800212c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002130:	43db      	mvns	r3, r3
 8002132:	401a      	ands	r2, r3
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	f003 0318 	and.w	r3, r3, #24
 800213a:	4908      	ldr	r1, [pc, #32]	@ (800215c <LL_ADC_SetChannelSingleDiff+0x44>)
 800213c:	40d9      	lsrs	r1, r3
 800213e:	68bb      	ldr	r3, [r7, #8]
 8002140:	400b      	ands	r3, r1
 8002142:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002146:	431a      	orrs	r2, r3
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 800214e:	bf00      	nop
 8002150:	3714      	adds	r7, #20
 8002152:	46bd      	mov	sp, r7
 8002154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002158:	4770      	bx	lr
 800215a:	bf00      	nop
 800215c:	0007ffff 	.word	0x0007ffff

08002160 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002160:	b480      	push	{r7}
 8002162:	b083      	sub	sp, #12
 8002164:	af00      	add	r7, sp, #0
 8002166:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	689b      	ldr	r3, [r3, #8]
 800216c:	f003 031f 	and.w	r3, r3, #31
}
 8002170:	4618      	mov	r0, r3
 8002172:	370c      	adds	r7, #12
 8002174:	46bd      	mov	sp, r7
 8002176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800217a:	4770      	bx	lr

0800217c <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 800217c:	b480      	push	{r7}
 800217e:	b083      	sub	sp, #12
 8002180:	af00      	add	r7, sp, #0
 8002182:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	689b      	ldr	r3, [r3, #8]
 8002188:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 800218c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002190:	687a      	ldr	r2, [r7, #4]
 8002192:	6093      	str	r3, [r2, #8]
}
 8002194:	bf00      	nop
 8002196:	370c      	adds	r7, #12
 8002198:	46bd      	mov	sp, r7
 800219a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800219e:	4770      	bx	lr

080021a0 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 80021a0:	b480      	push	{r7}
 80021a2:	b083      	sub	sp, #12
 80021a4:	af00      	add	r7, sp, #0
 80021a6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	689b      	ldr	r3, [r3, #8]
 80021ac:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80021b0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80021b4:	d101      	bne.n	80021ba <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80021b6:	2301      	movs	r3, #1
 80021b8:	e000      	b.n	80021bc <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80021ba:	2300      	movs	r3, #0
}
 80021bc:	4618      	mov	r0, r3
 80021be:	370c      	adds	r7, #12
 80021c0:	46bd      	mov	sp, r7
 80021c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c6:	4770      	bx	lr

080021c8 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80021c8:	b480      	push	{r7}
 80021ca:	b083      	sub	sp, #12
 80021cc:	af00      	add	r7, sp, #0
 80021ce:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	689b      	ldr	r3, [r3, #8]
 80021d4:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 80021d8:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80021dc:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80021e4:	bf00      	nop
 80021e6:	370c      	adds	r7, #12
 80021e8:	46bd      	mov	sp, r7
 80021ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ee:	4770      	bx	lr

080021f0 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 80021f0:	b480      	push	{r7}
 80021f2:	b083      	sub	sp, #12
 80021f4:	af00      	add	r7, sp, #0
 80021f6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	689b      	ldr	r3, [r3, #8]
 80021fc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002200:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002204:	d101      	bne.n	800220a <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8002206:	2301      	movs	r3, #1
 8002208:	e000      	b.n	800220c <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800220a:	2300      	movs	r3, #0
}
 800220c:	4618      	mov	r0, r3
 800220e:	370c      	adds	r7, #12
 8002210:	46bd      	mov	sp, r7
 8002212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002216:	4770      	bx	lr

08002218 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8002218:	b480      	push	{r7}
 800221a:	b083      	sub	sp, #12
 800221c:	af00      	add	r7, sp, #0
 800221e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	689b      	ldr	r3, [r3, #8]
 8002224:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002228:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800222c:	f043 0201 	orr.w	r2, r3, #1
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8002234:	bf00      	nop
 8002236:	370c      	adds	r7, #12
 8002238:	46bd      	mov	sp, r7
 800223a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800223e:	4770      	bx	lr

08002240 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8002240:	b480      	push	{r7}
 8002242:	b083      	sub	sp, #12
 8002244:	af00      	add	r7, sp, #0
 8002246:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	689b      	ldr	r3, [r3, #8]
 800224c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002250:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002254:	f043 0202 	orr.w	r2, r3, #2
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 800225c:	bf00      	nop
 800225e:	370c      	adds	r7, #12
 8002260:	46bd      	mov	sp, r7
 8002262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002266:	4770      	bx	lr

08002268 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8002268:	b480      	push	{r7}
 800226a:	b083      	sub	sp, #12
 800226c:	af00      	add	r7, sp, #0
 800226e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	689b      	ldr	r3, [r3, #8]
 8002274:	f003 0301 	and.w	r3, r3, #1
 8002278:	2b01      	cmp	r3, #1
 800227a:	d101      	bne.n	8002280 <LL_ADC_IsEnabled+0x18>
 800227c:	2301      	movs	r3, #1
 800227e:	e000      	b.n	8002282 <LL_ADC_IsEnabled+0x1a>
 8002280:	2300      	movs	r3, #0
}
 8002282:	4618      	mov	r0, r3
 8002284:	370c      	adds	r7, #12
 8002286:	46bd      	mov	sp, r7
 8002288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800228c:	4770      	bx	lr

0800228e <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(const ADC_TypeDef *ADCx)
{
 800228e:	b480      	push	{r7}
 8002290:	b083      	sub	sp, #12
 8002292:	af00      	add	r7, sp, #0
 8002294:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	689b      	ldr	r3, [r3, #8]
 800229a:	f003 0302 	and.w	r3, r3, #2
 800229e:	2b02      	cmp	r3, #2
 80022a0:	d101      	bne.n	80022a6 <LL_ADC_IsDisableOngoing+0x18>
 80022a2:	2301      	movs	r3, #1
 80022a4:	e000      	b.n	80022a8 <LL_ADC_IsDisableOngoing+0x1a>
 80022a6:	2300      	movs	r3, #0
}
 80022a8:	4618      	mov	r0, r3
 80022aa:	370c      	adds	r7, #12
 80022ac:	46bd      	mov	sp, r7
 80022ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b2:	4770      	bx	lr

080022b4 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 80022b4:	b480      	push	{r7}
 80022b6:	b083      	sub	sp, #12
 80022b8:	af00      	add	r7, sp, #0
 80022ba:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	689b      	ldr	r3, [r3, #8]
 80022c0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80022c4:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80022c8:	f043 0204 	orr.w	r2, r3, #4
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 80022d0:	bf00      	nop
 80022d2:	370c      	adds	r7, #12
 80022d4:	46bd      	mov	sp, r7
 80022d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022da:	4770      	bx	lr

080022dc <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80022dc:	b480      	push	{r7}
 80022de:	b083      	sub	sp, #12
 80022e0:	af00      	add	r7, sp, #0
 80022e2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	689b      	ldr	r3, [r3, #8]
 80022e8:	f003 0304 	and.w	r3, r3, #4
 80022ec:	2b04      	cmp	r3, #4
 80022ee:	d101      	bne.n	80022f4 <LL_ADC_REG_IsConversionOngoing+0x18>
 80022f0:	2301      	movs	r3, #1
 80022f2:	e000      	b.n	80022f6 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80022f4:	2300      	movs	r3, #0
}
 80022f6:	4618      	mov	r0, r3
 80022f8:	370c      	adds	r7, #12
 80022fa:	46bd      	mov	sp, r7
 80022fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002300:	4770      	bx	lr

08002302 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8002302:	b480      	push	{r7}
 8002304:	b083      	sub	sp, #12
 8002306:	af00      	add	r7, sp, #0
 8002308:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	689b      	ldr	r3, [r3, #8]
 800230e:	f003 0308 	and.w	r3, r3, #8
 8002312:	2b08      	cmp	r3, #8
 8002314:	d101      	bne.n	800231a <LL_ADC_INJ_IsConversionOngoing+0x18>
 8002316:	2301      	movs	r3, #1
 8002318:	e000      	b.n	800231c <LL_ADC_INJ_IsConversionOngoing+0x1a>
 800231a:	2300      	movs	r3, #0
}
 800231c:	4618      	mov	r0, r3
 800231e:	370c      	adds	r7, #12
 8002320:	46bd      	mov	sp, r7
 8002322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002326:	4770      	bx	lr

08002328 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002328:	b590      	push	{r4, r7, lr}
 800232a:	b089      	sub	sp, #36	@ 0x24
 800232c:	af00      	add	r7, sp, #0
 800232e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002330:	2300      	movs	r3, #0
 8002332:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8002334:	2300      	movs	r3, #0
 8002336:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	2b00      	cmp	r3, #0
 800233c:	d101      	bne.n	8002342 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 800233e:	2301      	movs	r3, #1
 8002340:	e167      	b.n	8002612 <HAL_ADC_Init+0x2ea>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	695b      	ldr	r3, [r3, #20]
 8002346:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800234c:	2b00      	cmp	r3, #0
 800234e:	d109      	bne.n	8002364 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002350:	6878      	ldr	r0, [r7, #4]
 8002352:	f7ff f95f 	bl	8001614 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	2200      	movs	r2, #0
 800235a:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	2200      	movs	r2, #0
 8002360:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	4618      	mov	r0, r3
 800236a:	f7ff ff19 	bl	80021a0 <LL_ADC_IsDeepPowerDownEnabled>
 800236e:	4603      	mov	r3, r0
 8002370:	2b00      	cmp	r3, #0
 8002372:	d004      	beq.n	800237e <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	4618      	mov	r0, r3
 800237a:	f7ff feff 	bl	800217c <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	4618      	mov	r0, r3
 8002384:	f7ff ff34 	bl	80021f0 <LL_ADC_IsInternalRegulatorEnabled>
 8002388:	4603      	mov	r3, r0
 800238a:	2b00      	cmp	r3, #0
 800238c:	d115      	bne.n	80023ba <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	4618      	mov	r0, r3
 8002394:	f7ff ff18 	bl	80021c8 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002398:	4ba0      	ldr	r3, [pc, #640]	@ (800261c <HAL_ADC_Init+0x2f4>)
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	099b      	lsrs	r3, r3, #6
 800239e:	4aa0      	ldr	r2, [pc, #640]	@ (8002620 <HAL_ADC_Init+0x2f8>)
 80023a0:	fba2 2303 	umull	r2, r3, r2, r3
 80023a4:	099b      	lsrs	r3, r3, #6
 80023a6:	3301      	adds	r3, #1
 80023a8:	005b      	lsls	r3, r3, #1
 80023aa:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80023ac:	e002      	b.n	80023b4 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	3b01      	subs	r3, #1
 80023b2:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d1f9      	bne.n	80023ae <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	4618      	mov	r0, r3
 80023c0:	f7ff ff16 	bl	80021f0 <LL_ADC_IsInternalRegulatorEnabled>
 80023c4:	4603      	mov	r3, r0
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d10d      	bne.n	80023e6 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80023ce:	f043 0210 	orr.w	r2, r3, #16
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80023da:	f043 0201 	orr.w	r2, r3, #1
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 80023e2:	2301      	movs	r3, #1
 80023e4:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	4618      	mov	r0, r3
 80023ec:	f7ff ff76 	bl	80022dc <LL_ADC_REG_IsConversionOngoing>
 80023f0:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80023f6:	f003 0310 	and.w	r3, r3, #16
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	f040 8100 	bne.w	8002600 <HAL_ADC_Init+0x2d8>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8002400:	697b      	ldr	r3, [r7, #20]
 8002402:	2b00      	cmp	r3, #0
 8002404:	f040 80fc 	bne.w	8002600 <HAL_ADC_Init+0x2d8>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800240c:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8002410:	f043 0202 	orr.w	r2, r3, #2
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	4618      	mov	r0, r3
 800241e:	f7ff ff23 	bl	8002268 <LL_ADC_IsEnabled>
 8002422:	4603      	mov	r3, r0
 8002424:	2b00      	cmp	r3, #0
 8002426:	d111      	bne.n	800244c <HAL_ADC_Init+0x124>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002428:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 800242c:	f7ff ff1c 	bl	8002268 <LL_ADC_IsEnabled>
 8002430:	4604      	mov	r4, r0
 8002432:	487c      	ldr	r0, [pc, #496]	@ (8002624 <HAL_ADC_Init+0x2fc>)
 8002434:	f7ff ff18 	bl	8002268 <LL_ADC_IsEnabled>
 8002438:	4603      	mov	r3, r0
 800243a:	4323      	orrs	r3, r4
 800243c:	2b00      	cmp	r3, #0
 800243e:	d105      	bne.n	800244c <HAL_ADC_Init+0x124>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	685b      	ldr	r3, [r3, #4]
 8002444:	4619      	mov	r1, r3
 8002446:	4878      	ldr	r0, [pc, #480]	@ (8002628 <HAL_ADC_Init+0x300>)
 8002448:	f7ff fd2a 	bl	8001ea0 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	7f5b      	ldrb	r3, [r3, #29]
 8002450:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002456:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 800245c:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8002462:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800246a:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800246c:	4313      	orrs	r3, r2
 800246e:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002476:	2b01      	cmp	r3, #1
 8002478:	d106      	bne.n	8002488 <HAL_ADC_Init+0x160>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800247e:	3b01      	subs	r3, #1
 8002480:	045b      	lsls	r3, r3, #17
 8002482:	69ba      	ldr	r2, [r7, #24]
 8002484:	4313      	orrs	r3, r2
 8002486:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800248c:	2b00      	cmp	r3, #0
 800248e:	d009      	beq.n	80024a4 <HAL_ADC_Init+0x17c>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002494:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800249c:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800249e:	69ba      	ldr	r2, [r7, #24]
 80024a0:	4313      	orrs	r3, r2
 80024a2:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	68da      	ldr	r2, [r3, #12]
 80024aa:	4b60      	ldr	r3, [pc, #384]	@ (800262c <HAL_ADC_Init+0x304>)
 80024ac:	4013      	ands	r3, r2
 80024ae:	687a      	ldr	r2, [r7, #4]
 80024b0:	6812      	ldr	r2, [r2, #0]
 80024b2:	69b9      	ldr	r1, [r7, #24]
 80024b4:	430b      	orrs	r3, r1
 80024b6:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	691b      	ldr	r3, [r3, #16]
 80024be:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	430a      	orrs	r2, r1
 80024cc:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	4618      	mov	r0, r3
 80024d4:	f7ff ff15 	bl	8002302 <LL_ADC_INJ_IsConversionOngoing>
 80024d8:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80024da:	697b      	ldr	r3, [r7, #20]
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d16d      	bne.n	80025bc <HAL_ADC_Init+0x294>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80024e0:	693b      	ldr	r3, [r7, #16]
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d16a      	bne.n	80025bc <HAL_ADC_Init+0x294>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	7f1b      	ldrb	r3, [r3, #28]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 80024ea:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80024f2:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 80024f4:	4313      	orrs	r3, r2
 80024f6:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	68db      	ldr	r3, [r3, #12]
 80024fe:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8002502:	f023 0302 	bic.w	r3, r3, #2
 8002506:	687a      	ldr	r2, [r7, #4]
 8002508:	6812      	ldr	r2, [r2, #0]
 800250a:	69b9      	ldr	r1, [r7, #24]
 800250c:	430b      	orrs	r3, r1
 800250e:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	691b      	ldr	r3, [r3, #16]
 8002514:	2b00      	cmp	r3, #0
 8002516:	d017      	beq.n	8002548 <HAL_ADC_Init+0x220>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	691a      	ldr	r2, [r3, #16]
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8002526:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8002530:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8002534:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002538:	687a      	ldr	r2, [r7, #4]
 800253a:	6911      	ldr	r1, [r2, #16]
 800253c:	687a      	ldr	r2, [r7, #4]
 800253e:	6812      	ldr	r2, [r2, #0]
 8002540:	430b      	orrs	r3, r1
 8002542:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
 8002546:	e013      	b.n	8002570 <HAL_ADC_Init+0x248>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	691a      	ldr	r2, [r3, #16]
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8002556:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8002560:	687a      	ldr	r2, [r7, #4]
 8002562:	6812      	ldr	r2, [r2, #0]
 8002564:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8002568:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800256c:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002576:	2b01      	cmp	r3, #1
 8002578:	d118      	bne.n	80025ac <HAL_ADC_Init+0x284>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	691b      	ldr	r3, [r3, #16]
 8002580:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8002584:	f023 0304 	bic.w	r3, r3, #4
 8002588:	687a      	ldr	r2, [r7, #4]
 800258a:	6c51      	ldr	r1, [r2, #68]	@ 0x44
 800258c:	687a      	ldr	r2, [r7, #4]
 800258e:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8002590:	4311      	orrs	r1, r2
 8002592:	687a      	ldr	r2, [r7, #4]
 8002594:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8002596:	4311      	orrs	r1, r2
 8002598:	687a      	ldr	r2, [r7, #4]
 800259a:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800259c:	430a      	orrs	r2, r1
 800259e:	431a      	orrs	r2, r3
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	f042 0201 	orr.w	r2, r2, #1
 80025a8:	611a      	str	r2, [r3, #16]
 80025aa:	e007      	b.n	80025bc <HAL_ADC_Init+0x294>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	691a      	ldr	r2, [r3, #16]
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	f022 0201 	bic.w	r2, r2, #1
 80025ba:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	695b      	ldr	r3, [r3, #20]
 80025c0:	2b01      	cmp	r3, #1
 80025c2:	d10c      	bne.n	80025de <HAL_ADC_Init+0x2b6>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025ca:	f023 010f 	bic.w	r1, r3, #15
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	6a1b      	ldr	r3, [r3, #32]
 80025d2:	1e5a      	subs	r2, r3, #1
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	430a      	orrs	r2, r1
 80025da:	631a      	str	r2, [r3, #48]	@ 0x30
 80025dc:	e007      	b.n	80025ee <HAL_ADC_Init+0x2c6>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	f022 020f 	bic.w	r2, r2, #15
 80025ec:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80025f2:	f023 0303 	bic.w	r3, r3, #3
 80025f6:	f043 0201 	orr.w	r2, r3, #1
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	65da      	str	r2, [r3, #92]	@ 0x5c
 80025fe:	e007      	b.n	8002610 <HAL_ADC_Init+0x2e8>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002604:	f043 0210 	orr.w	r2, r3, #16
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 800260c:	2301      	movs	r3, #1
 800260e:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8002610:	7ffb      	ldrb	r3, [r7, #31]
}
 8002612:	4618      	mov	r0, r3
 8002614:	3724      	adds	r7, #36	@ 0x24
 8002616:	46bd      	mov	sp, r7
 8002618:	bd90      	pop	{r4, r7, pc}
 800261a:	bf00      	nop
 800261c:	20000000 	.word	0x20000000
 8002620:	053e2d63 	.word	0x053e2d63
 8002624:	50000100 	.word	0x50000100
 8002628:	50000300 	.word	0x50000300
 800262c:	fff04007 	.word	0xfff04007

08002630 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8002630:	b580      	push	{r7, lr}
 8002632:	b086      	sub	sp, #24
 8002634:	af00      	add	r7, sp, #0
 8002636:	60f8      	str	r0, [r7, #12]
 8002638:	60b9      	str	r1, [r7, #8]
 800263a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800263c:	4851      	ldr	r0, [pc, #324]	@ (8002784 <HAL_ADC_Start_DMA+0x154>)
 800263e:	f7ff fd8f 	bl	8002160 <LL_ADC_GetMultimode>
 8002642:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	4618      	mov	r0, r3
 800264a:	f7ff fe47 	bl	80022dc <LL_ADC_REG_IsConversionOngoing>
 800264e:	4603      	mov	r3, r0
 8002650:	2b00      	cmp	r3, #0
 8002652:	f040 808f 	bne.w	8002774 <HAL_ADC_Start_DMA+0x144>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 800265c:	2b01      	cmp	r3, #1
 800265e:	d101      	bne.n	8002664 <HAL_ADC_Start_DMA+0x34>
 8002660:	2302      	movs	r3, #2
 8002662:	e08a      	b.n	800277a <HAL_ADC_Start_DMA+0x14a>
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	2201      	movs	r2, #1
 8002668:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 800266c:	693b      	ldr	r3, [r7, #16]
 800266e:	2b00      	cmp	r3, #0
 8002670:	d005      	beq.n	800267e <HAL_ADC_Start_DMA+0x4e>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8002672:	693b      	ldr	r3, [r7, #16]
 8002674:	2b05      	cmp	r3, #5
 8002676:	d002      	beq.n	800267e <HAL_ADC_Start_DMA+0x4e>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002678:	693b      	ldr	r3, [r7, #16]
 800267a:	2b09      	cmp	r3, #9
 800267c:	d173      	bne.n	8002766 <HAL_ADC_Start_DMA+0x136>
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 800267e:	68f8      	ldr	r0, [r7, #12]
 8002680:	f000 fc98 	bl	8002fb4 <ADC_Enable>
 8002684:	4603      	mov	r3, r0
 8002686:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8002688:	7dfb      	ldrb	r3, [r7, #23]
 800268a:	2b00      	cmp	r3, #0
 800268c:	d166      	bne.n	800275c <HAL_ADC_Start_DMA+0x12c>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002692:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8002696:	f023 0301 	bic.w	r3, r3, #1
 800269a:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	65da      	str	r2, [r3, #92]	@ 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	4a38      	ldr	r2, [pc, #224]	@ (8002788 <HAL_ADC_Start_DMA+0x158>)
 80026a8:	4293      	cmp	r3, r2
 80026aa:	d002      	beq.n	80026b2 <HAL_ADC_Start_DMA+0x82>
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	e001      	b.n	80026b6 <HAL_ADC_Start_DMA+0x86>
 80026b2:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 80026b6:	68fa      	ldr	r2, [r7, #12]
 80026b8:	6812      	ldr	r2, [r2, #0]
 80026ba:	4293      	cmp	r3, r2
 80026bc:	d002      	beq.n	80026c4 <HAL_ADC_Start_DMA+0x94>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80026be:	693b      	ldr	r3, [r7, #16]
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d105      	bne.n	80026d0 <HAL_ADC_Start_DMA+0xa0>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80026c8:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	65da      	str	r2, [r3, #92]	@ 0x5c
        }
#endif /* ADC_MULTIMODE_SUPPORT */

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80026d4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d006      	beq.n	80026ea <HAL_ADC_Start_DMA+0xba>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80026e0:	f023 0206 	bic.w	r2, r3, #6
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	661a      	str	r2, [r3, #96]	@ 0x60
 80026e8:	e002      	b.n	80026f0 <HAL_ADC_Start_DMA+0xc0>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	2200      	movs	r2, #0
 80026ee:	661a      	str	r2, [r3, #96]	@ 0x60
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80026f4:	4a25      	ldr	r2, [pc, #148]	@ (800278c <HAL_ADC_Start_DMA+0x15c>)
 80026f6:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80026fc:	4a24      	ldr	r2, [pc, #144]	@ (8002790 <HAL_ADC_Start_DMA+0x160>)
 80026fe:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002704:	4a23      	ldr	r2, [pc, #140]	@ (8002794 <HAL_ADC_Start_DMA+0x164>)
 8002706:	635a      	str	r2, [r3, #52]	@ 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	221c      	movs	r2, #28
 800270e:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	2200      	movs	r2, #0
 8002714:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	685a      	ldr	r2, [r3, #4]
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	f042 0210 	orr.w	r2, r2, #16
 8002726:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	68da      	ldr	r2, [r3, #12]
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	f042 0201 	orr.w	r2, r2, #1
 8002736:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	6d58      	ldr	r0, [r3, #84]	@ 0x54
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	3340      	adds	r3, #64	@ 0x40
 8002742:	4619      	mov	r1, r3
 8002744:	68ba      	ldr	r2, [r7, #8]
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	f001 f8be 	bl	80038c8 <HAL_DMA_Start_IT>
 800274c:	4603      	mov	r3, r0
 800274e:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	4618      	mov	r0, r3
 8002756:	f7ff fdad 	bl	80022b4 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 800275a:	e00d      	b.n	8002778 <HAL_ADC_Start_DMA+0x148>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	2200      	movs	r2, #0
 8002760:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
      if (tmp_hal_status == HAL_OK)
 8002764:	e008      	b.n	8002778 <HAL_ADC_Start_DMA+0x148>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 8002766:	2301      	movs	r3, #1
 8002768:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	2200      	movs	r2, #0
 800276e:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
 8002772:	e001      	b.n	8002778 <HAL_ADC_Start_DMA+0x148>
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8002774:	2302      	movs	r3, #2
 8002776:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8002778:	7dfb      	ldrb	r3, [r7, #23]
}
 800277a:	4618      	mov	r0, r3
 800277c:	3718      	adds	r7, #24
 800277e:	46bd      	mov	sp, r7
 8002780:	bd80      	pop	{r7, pc}
 8002782:	bf00      	nop
 8002784:	50000300 	.word	0x50000300
 8002788:	50000100 	.word	0x50000100
 800278c:	0800317f 	.word	0x0800317f
 8002790:	08003257 	.word	0x08003257
 8002794:	08003273 	.word	0x08003273

08002798 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002798:	b480      	push	{r7}
 800279a:	b083      	sub	sp, #12
 800279c:	af00      	add	r7, sp, #0
 800279e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 80027a0:	bf00      	nop
 80027a2:	370c      	adds	r7, #12
 80027a4:	46bd      	mov	sp, r7
 80027a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027aa:	4770      	bx	lr

080027ac <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 80027ac:	b480      	push	{r7}
 80027ae:	b083      	sub	sp, #12
 80027b0:	af00      	add	r7, sp, #0
 80027b2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 80027b4:	bf00      	nop
 80027b6:	370c      	adds	r7, #12
 80027b8:	46bd      	mov	sp, r7
 80027ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027be:	4770      	bx	lr

080027c0 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80027c0:	b480      	push	{r7}
 80027c2:	b083      	sub	sp, #12
 80027c4:	af00      	add	r7, sp, #0
 80027c6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80027c8:	bf00      	nop
 80027ca:	370c      	adds	r7, #12
 80027cc:	46bd      	mov	sp, r7
 80027ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027d2:	4770      	bx	lr

080027d4 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 80027d4:	b580      	push	{r7, lr}
 80027d6:	b0b6      	sub	sp, #216	@ 0xd8
 80027d8:	af00      	add	r7, sp, #0
 80027da:	6078      	str	r0, [r7, #4]
 80027dc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80027de:	2300      	movs	r3, #0
 80027e0:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80027e4:	2300      	movs	r3, #0
 80027e6:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 80027ee:	2b01      	cmp	r3, #1
 80027f0:	d101      	bne.n	80027f6 <HAL_ADC_ConfigChannel+0x22>
 80027f2:	2302      	movs	r3, #2
 80027f4:	e3c8      	b.n	8002f88 <HAL_ADC_ConfigChannel+0x7b4>
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	2201      	movs	r2, #1
 80027fa:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	4618      	mov	r0, r3
 8002804:	f7ff fd6a 	bl	80022dc <LL_ADC_REG_IsConversionOngoing>
 8002808:	4603      	mov	r3, r0
 800280a:	2b00      	cmp	r3, #0
 800280c:	f040 83ad 	bne.w	8002f6a <HAL_ADC_ConfigChannel+0x796>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	6818      	ldr	r0, [r3, #0]
 8002814:	683b      	ldr	r3, [r7, #0]
 8002816:	6859      	ldr	r1, [r3, #4]
 8002818:	683b      	ldr	r3, [r7, #0]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	461a      	mov	r2, r3
 800281e:	f7ff fc24 	bl	800206a <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	4618      	mov	r0, r3
 8002828:	f7ff fd58 	bl	80022dc <LL_ADC_REG_IsConversionOngoing>
 800282c:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	4618      	mov	r0, r3
 8002836:	f7ff fd64 	bl	8002302 <LL_ADC_INJ_IsConversionOngoing>
 800283a:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800283e:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8002842:	2b00      	cmp	r3, #0
 8002844:	f040 81d9 	bne.w	8002bfa <HAL_ADC_ConfigChannel+0x426>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002848:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800284c:	2b00      	cmp	r3, #0
 800284e:	f040 81d4 	bne.w	8002bfa <HAL_ADC_ConfigChannel+0x426>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8002852:	683b      	ldr	r3, [r7, #0]
 8002854:	689b      	ldr	r3, [r3, #8]
 8002856:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800285a:	d10f      	bne.n	800287c <HAL_ADC_ConfigChannel+0xa8>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	6818      	ldr	r0, [r3, #0]
 8002860:	683b      	ldr	r3, [r7, #0]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	2200      	movs	r2, #0
 8002866:	4619      	mov	r1, r3
 8002868:	f7ff fc2b 	bl	80020c2 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 8002874:	4618      	mov	r0, r3
 8002876:	f7ff fbd2 	bl	800201e <LL_ADC_SetSamplingTimeCommonConfig>
 800287a:	e00e      	b.n	800289a <HAL_ADC_ConfigChannel+0xc6>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	6818      	ldr	r0, [r3, #0]
 8002880:	683b      	ldr	r3, [r7, #0]
 8002882:	6819      	ldr	r1, [r3, #0]
 8002884:	683b      	ldr	r3, [r7, #0]
 8002886:	689b      	ldr	r3, [r3, #8]
 8002888:	461a      	mov	r2, r3
 800288a:	f7ff fc1a 	bl	80020c2 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	2100      	movs	r1, #0
 8002894:	4618      	mov	r0, r3
 8002896:	f7ff fbc2 	bl	800201e <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 800289a:	683b      	ldr	r3, [r7, #0]
 800289c:	695a      	ldr	r2, [r3, #20]
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	68db      	ldr	r3, [r3, #12]
 80028a4:	08db      	lsrs	r3, r3, #3
 80028a6:	f003 0303 	and.w	r3, r3, #3
 80028aa:	005b      	lsls	r3, r3, #1
 80028ac:	fa02 f303 	lsl.w	r3, r2, r3
 80028b0:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 80028b4:	683b      	ldr	r3, [r7, #0]
 80028b6:	691b      	ldr	r3, [r3, #16]
 80028b8:	2b04      	cmp	r3, #4
 80028ba:	d022      	beq.n	8002902 <HAL_ADC_ConfigChannel+0x12e>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	6818      	ldr	r0, [r3, #0]
 80028c0:	683b      	ldr	r3, [r7, #0]
 80028c2:	6919      	ldr	r1, [r3, #16]
 80028c4:	683b      	ldr	r3, [r7, #0]
 80028c6:	681a      	ldr	r2, [r3, #0]
 80028c8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80028cc:	f7ff fb1c 	bl	8001f08 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	6818      	ldr	r0, [r3, #0]
 80028d4:	683b      	ldr	r3, [r7, #0]
 80028d6:	6919      	ldr	r1, [r3, #16]
 80028d8:	683b      	ldr	r3, [r7, #0]
 80028da:	699b      	ldr	r3, [r3, #24]
 80028dc:	461a      	mov	r2, r3
 80028de:	f7ff fb68 	bl	8001fb2 <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	6818      	ldr	r0, [r3, #0]
 80028e6:	683b      	ldr	r3, [r7, #0]
 80028e8:	6919      	ldr	r1, [r3, #16]
                                   (pConfig->OffsetSaturation == ENABLE) ?
 80028ea:	683b      	ldr	r3, [r7, #0]
 80028ec:	7f1b      	ldrb	r3, [r3, #28]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 80028ee:	2b01      	cmp	r3, #1
 80028f0:	d102      	bne.n	80028f8 <HAL_ADC_ConfigChannel+0x124>
 80028f2:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80028f6:	e000      	b.n	80028fa <HAL_ADC_ConfigChannel+0x126>
 80028f8:	2300      	movs	r3, #0
 80028fa:	461a      	mov	r2, r3
 80028fc:	f7ff fb74 	bl	8001fe8 <LL_ADC_SetOffsetSaturation>
 8002900:	e17b      	b.n	8002bfa <HAL_ADC_ConfigChannel+0x426>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	2100      	movs	r1, #0
 8002908:	4618      	mov	r0, r3
 800290a:	f7ff fb21 	bl	8001f50 <LL_ADC_GetOffsetChannel>
 800290e:	4603      	mov	r3, r0
 8002910:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002914:	2b00      	cmp	r3, #0
 8002916:	d10a      	bne.n	800292e <HAL_ADC_ConfigChannel+0x15a>
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	2100      	movs	r1, #0
 800291e:	4618      	mov	r0, r3
 8002920:	f7ff fb16 	bl	8001f50 <LL_ADC_GetOffsetChannel>
 8002924:	4603      	mov	r3, r0
 8002926:	0e9b      	lsrs	r3, r3, #26
 8002928:	f003 021f 	and.w	r2, r3, #31
 800292c:	e01e      	b.n	800296c <HAL_ADC_ConfigChannel+0x198>
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	2100      	movs	r1, #0
 8002934:	4618      	mov	r0, r3
 8002936:	f7ff fb0b 	bl	8001f50 <LL_ADC_GetOffsetChannel>
 800293a:	4603      	mov	r3, r0
 800293c:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002940:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8002944:	fa93 f3a3 	rbit	r3, r3
 8002948:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800294c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8002950:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8002954:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002958:	2b00      	cmp	r3, #0
 800295a:	d101      	bne.n	8002960 <HAL_ADC_ConfigChannel+0x18c>
  {
    return 32U;
 800295c:	2320      	movs	r3, #32
 800295e:	e004      	b.n	800296a <HAL_ADC_ConfigChannel+0x196>
  }
  return __builtin_clz(value);
 8002960:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002964:	fab3 f383 	clz	r3, r3
 8002968:	b2db      	uxtb	r3, r3
 800296a:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800296c:	683b      	ldr	r3, [r7, #0]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002974:	2b00      	cmp	r3, #0
 8002976:	d105      	bne.n	8002984 <HAL_ADC_ConfigChannel+0x1b0>
 8002978:	683b      	ldr	r3, [r7, #0]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	0e9b      	lsrs	r3, r3, #26
 800297e:	f003 031f 	and.w	r3, r3, #31
 8002982:	e018      	b.n	80029b6 <HAL_ADC_ConfigChannel+0x1e2>
 8002984:	683b      	ldr	r3, [r7, #0]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800298c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8002990:	fa93 f3a3 	rbit	r3, r3
 8002994:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  return result;
 8002998:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800299c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  if (value == 0U)
 80029a0:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d101      	bne.n	80029ac <HAL_ADC_ConfigChannel+0x1d8>
    return 32U;
 80029a8:	2320      	movs	r3, #32
 80029aa:	e004      	b.n	80029b6 <HAL_ADC_ConfigChannel+0x1e2>
  return __builtin_clz(value);
 80029ac:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80029b0:	fab3 f383 	clz	r3, r3
 80029b4:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80029b6:	429a      	cmp	r2, r3
 80029b8:	d106      	bne.n	80029c8 <HAL_ADC_ConfigChannel+0x1f4>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	2200      	movs	r2, #0
 80029c0:	2100      	movs	r1, #0
 80029c2:	4618      	mov	r0, r3
 80029c4:	f7ff fada 	bl	8001f7c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	2101      	movs	r1, #1
 80029ce:	4618      	mov	r0, r3
 80029d0:	f7ff fabe 	bl	8001f50 <LL_ADC_GetOffsetChannel>
 80029d4:	4603      	mov	r3, r0
 80029d6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d10a      	bne.n	80029f4 <HAL_ADC_ConfigChannel+0x220>
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	2101      	movs	r1, #1
 80029e4:	4618      	mov	r0, r3
 80029e6:	f7ff fab3 	bl	8001f50 <LL_ADC_GetOffsetChannel>
 80029ea:	4603      	mov	r3, r0
 80029ec:	0e9b      	lsrs	r3, r3, #26
 80029ee:	f003 021f 	and.w	r2, r3, #31
 80029f2:	e01e      	b.n	8002a32 <HAL_ADC_ConfigChannel+0x25e>
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	2101      	movs	r1, #1
 80029fa:	4618      	mov	r0, r3
 80029fc:	f7ff faa8 	bl	8001f50 <LL_ADC_GetOffsetChannel>
 8002a00:	4603      	mov	r3, r0
 8002a02:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a06:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8002a0a:	fa93 f3a3 	rbit	r3, r3
 8002a0e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  return result;
 8002a12:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8002a16:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (value == 0U)
 8002a1a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d101      	bne.n	8002a26 <HAL_ADC_ConfigChannel+0x252>
    return 32U;
 8002a22:	2320      	movs	r3, #32
 8002a24:	e004      	b.n	8002a30 <HAL_ADC_ConfigChannel+0x25c>
  return __builtin_clz(value);
 8002a26:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8002a2a:	fab3 f383 	clz	r3, r3
 8002a2e:	b2db      	uxtb	r3, r3
 8002a30:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002a32:	683b      	ldr	r3, [r7, #0]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d105      	bne.n	8002a4a <HAL_ADC_ConfigChannel+0x276>
 8002a3e:	683b      	ldr	r3, [r7, #0]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	0e9b      	lsrs	r3, r3, #26
 8002a44:	f003 031f 	and.w	r3, r3, #31
 8002a48:	e018      	b.n	8002a7c <HAL_ADC_ConfigChannel+0x2a8>
 8002a4a:	683b      	ldr	r3, [r7, #0]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a52:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002a56:	fa93 f3a3 	rbit	r3, r3
 8002a5a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  return result;
 8002a5e:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8002a62:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  if (value == 0U)
 8002a66:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d101      	bne.n	8002a72 <HAL_ADC_ConfigChannel+0x29e>
    return 32U;
 8002a6e:	2320      	movs	r3, #32
 8002a70:	e004      	b.n	8002a7c <HAL_ADC_ConfigChannel+0x2a8>
  return __builtin_clz(value);
 8002a72:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002a76:	fab3 f383 	clz	r3, r3
 8002a7a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002a7c:	429a      	cmp	r2, r3
 8002a7e:	d106      	bne.n	8002a8e <HAL_ADC_ConfigChannel+0x2ba>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	2200      	movs	r2, #0
 8002a86:	2101      	movs	r1, #1
 8002a88:	4618      	mov	r0, r3
 8002a8a:	f7ff fa77 	bl	8001f7c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	2102      	movs	r1, #2
 8002a94:	4618      	mov	r0, r3
 8002a96:	f7ff fa5b 	bl	8001f50 <LL_ADC_GetOffsetChannel>
 8002a9a:	4603      	mov	r3, r0
 8002a9c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d10a      	bne.n	8002aba <HAL_ADC_ConfigChannel+0x2e6>
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	2102      	movs	r1, #2
 8002aaa:	4618      	mov	r0, r3
 8002aac:	f7ff fa50 	bl	8001f50 <LL_ADC_GetOffsetChannel>
 8002ab0:	4603      	mov	r3, r0
 8002ab2:	0e9b      	lsrs	r3, r3, #26
 8002ab4:	f003 021f 	and.w	r2, r3, #31
 8002ab8:	e01e      	b.n	8002af8 <HAL_ADC_ConfigChannel+0x324>
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	2102      	movs	r1, #2
 8002ac0:	4618      	mov	r0, r3
 8002ac2:	f7ff fa45 	bl	8001f50 <LL_ADC_GetOffsetChannel>
 8002ac6:	4603      	mov	r3, r0
 8002ac8:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002acc:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002ad0:	fa93 f3a3 	rbit	r3, r3
 8002ad4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  return result;
 8002ad8:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002adc:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  if (value == 0U)
 8002ae0:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d101      	bne.n	8002aec <HAL_ADC_ConfigChannel+0x318>
    return 32U;
 8002ae8:	2320      	movs	r3, #32
 8002aea:	e004      	b.n	8002af6 <HAL_ADC_ConfigChannel+0x322>
  return __builtin_clz(value);
 8002aec:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8002af0:	fab3 f383 	clz	r3, r3
 8002af4:	b2db      	uxtb	r3, r3
 8002af6:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002af8:	683b      	ldr	r3, [r7, #0]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d105      	bne.n	8002b10 <HAL_ADC_ConfigChannel+0x33c>
 8002b04:	683b      	ldr	r3, [r7, #0]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	0e9b      	lsrs	r3, r3, #26
 8002b0a:	f003 031f 	and.w	r3, r3, #31
 8002b0e:	e016      	b.n	8002b3e <HAL_ADC_ConfigChannel+0x36a>
 8002b10:	683b      	ldr	r3, [r7, #0]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b18:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002b1c:	fa93 f3a3 	rbit	r3, r3
 8002b20:	67fb      	str	r3, [r7, #124]	@ 0x7c
  return result;
 8002b22:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8002b24:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  if (value == 0U)
 8002b28:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d101      	bne.n	8002b34 <HAL_ADC_ConfigChannel+0x360>
    return 32U;
 8002b30:	2320      	movs	r3, #32
 8002b32:	e004      	b.n	8002b3e <HAL_ADC_ConfigChannel+0x36a>
  return __builtin_clz(value);
 8002b34:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002b38:	fab3 f383 	clz	r3, r3
 8002b3c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002b3e:	429a      	cmp	r2, r3
 8002b40:	d106      	bne.n	8002b50 <HAL_ADC_ConfigChannel+0x37c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	2200      	movs	r2, #0
 8002b48:	2102      	movs	r1, #2
 8002b4a:	4618      	mov	r0, r3
 8002b4c:	f7ff fa16 	bl	8001f7c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	2103      	movs	r1, #3
 8002b56:	4618      	mov	r0, r3
 8002b58:	f7ff f9fa 	bl	8001f50 <LL_ADC_GetOffsetChannel>
 8002b5c:	4603      	mov	r3, r0
 8002b5e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d10a      	bne.n	8002b7c <HAL_ADC_ConfigChannel+0x3a8>
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	2103      	movs	r1, #3
 8002b6c:	4618      	mov	r0, r3
 8002b6e:	f7ff f9ef 	bl	8001f50 <LL_ADC_GetOffsetChannel>
 8002b72:	4603      	mov	r3, r0
 8002b74:	0e9b      	lsrs	r3, r3, #26
 8002b76:	f003 021f 	and.w	r2, r3, #31
 8002b7a:	e017      	b.n	8002bac <HAL_ADC_ConfigChannel+0x3d8>
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	2103      	movs	r1, #3
 8002b82:	4618      	mov	r0, r3
 8002b84:	f7ff f9e4 	bl	8001f50 <LL_ADC_GetOffsetChannel>
 8002b88:	4603      	mov	r3, r0
 8002b8a:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b8c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002b8e:	fa93 f3a3 	rbit	r3, r3
 8002b92:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 8002b94:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002b96:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (value == 0U)
 8002b98:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d101      	bne.n	8002ba2 <HAL_ADC_ConfigChannel+0x3ce>
    return 32U;
 8002b9e:	2320      	movs	r3, #32
 8002ba0:	e003      	b.n	8002baa <HAL_ADC_ConfigChannel+0x3d6>
  return __builtin_clz(value);
 8002ba2:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002ba4:	fab3 f383 	clz	r3, r3
 8002ba8:	b2db      	uxtb	r3, r3
 8002baa:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002bac:	683b      	ldr	r3, [r7, #0]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d105      	bne.n	8002bc4 <HAL_ADC_ConfigChannel+0x3f0>
 8002bb8:	683b      	ldr	r3, [r7, #0]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	0e9b      	lsrs	r3, r3, #26
 8002bbe:	f003 031f 	and.w	r3, r3, #31
 8002bc2:	e011      	b.n	8002be8 <HAL_ADC_ConfigChannel+0x414>
 8002bc4:	683b      	ldr	r3, [r7, #0]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bca:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002bcc:	fa93 f3a3 	rbit	r3, r3
 8002bd0:	667b      	str	r3, [r7, #100]	@ 0x64
  return result;
 8002bd2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002bd4:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (value == 0U)
 8002bd6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d101      	bne.n	8002be0 <HAL_ADC_ConfigChannel+0x40c>
    return 32U;
 8002bdc:	2320      	movs	r3, #32
 8002bde:	e003      	b.n	8002be8 <HAL_ADC_ConfigChannel+0x414>
  return __builtin_clz(value);
 8002be0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002be2:	fab3 f383 	clz	r3, r3
 8002be6:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002be8:	429a      	cmp	r2, r3
 8002bea:	d106      	bne.n	8002bfa <HAL_ADC_ConfigChannel+0x426>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	2200      	movs	r2, #0
 8002bf2:	2103      	movs	r1, #3
 8002bf4:	4618      	mov	r0, r3
 8002bf6:	f7ff f9c1 	bl	8001f7c <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	4618      	mov	r0, r3
 8002c00:	f7ff fb32 	bl	8002268 <LL_ADC_IsEnabled>
 8002c04:	4603      	mov	r3, r0
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	f040 8140 	bne.w	8002e8c <HAL_ADC_ConfigChannel+0x6b8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	6818      	ldr	r0, [r3, #0]
 8002c10:	683b      	ldr	r3, [r7, #0]
 8002c12:	6819      	ldr	r1, [r3, #0]
 8002c14:	683b      	ldr	r3, [r7, #0]
 8002c16:	68db      	ldr	r3, [r3, #12]
 8002c18:	461a      	mov	r2, r3
 8002c1a:	f7ff fa7d 	bl	8002118 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002c1e:	683b      	ldr	r3, [r7, #0]
 8002c20:	68db      	ldr	r3, [r3, #12]
 8002c22:	4a8f      	ldr	r2, [pc, #572]	@ (8002e60 <HAL_ADC_ConfigChannel+0x68c>)
 8002c24:	4293      	cmp	r3, r2
 8002c26:	f040 8131 	bne.w	8002e8c <HAL_ADC_ConfigChannel+0x6b8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002c2e:	683b      	ldr	r3, [r7, #0]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d10b      	bne.n	8002c52 <HAL_ADC_ConfigChannel+0x47e>
 8002c3a:	683b      	ldr	r3, [r7, #0]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	0e9b      	lsrs	r3, r3, #26
 8002c40:	3301      	adds	r3, #1
 8002c42:	f003 031f 	and.w	r3, r3, #31
 8002c46:	2b09      	cmp	r3, #9
 8002c48:	bf94      	ite	ls
 8002c4a:	2301      	movls	r3, #1
 8002c4c:	2300      	movhi	r3, #0
 8002c4e:	b2db      	uxtb	r3, r3
 8002c50:	e019      	b.n	8002c86 <HAL_ADC_ConfigChannel+0x4b2>
 8002c52:	683b      	ldr	r3, [r7, #0]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c58:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002c5a:	fa93 f3a3 	rbit	r3, r3
 8002c5e:	65bb      	str	r3, [r7, #88]	@ 0x58
  return result;
 8002c60:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002c62:	663b      	str	r3, [r7, #96]	@ 0x60
  if (value == 0U)
 8002c64:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d101      	bne.n	8002c6e <HAL_ADC_ConfigChannel+0x49a>
    return 32U;
 8002c6a:	2320      	movs	r3, #32
 8002c6c:	e003      	b.n	8002c76 <HAL_ADC_ConfigChannel+0x4a2>
  return __builtin_clz(value);
 8002c6e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002c70:	fab3 f383 	clz	r3, r3
 8002c74:	b2db      	uxtb	r3, r3
 8002c76:	3301      	adds	r3, #1
 8002c78:	f003 031f 	and.w	r3, r3, #31
 8002c7c:	2b09      	cmp	r3, #9
 8002c7e:	bf94      	ite	ls
 8002c80:	2301      	movls	r3, #1
 8002c82:	2300      	movhi	r3, #0
 8002c84:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d079      	beq.n	8002d7e <HAL_ADC_ConfigChannel+0x5aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002c8a:	683b      	ldr	r3, [r7, #0]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d107      	bne.n	8002ca6 <HAL_ADC_ConfigChannel+0x4d2>
 8002c96:	683b      	ldr	r3, [r7, #0]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	0e9b      	lsrs	r3, r3, #26
 8002c9c:	3301      	adds	r3, #1
 8002c9e:	069b      	lsls	r3, r3, #26
 8002ca0:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002ca4:	e015      	b.n	8002cd2 <HAL_ADC_ConfigChannel+0x4fe>
 8002ca6:	683b      	ldr	r3, [r7, #0]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cac:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002cae:	fa93 f3a3 	rbit	r3, r3
 8002cb2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8002cb4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002cb6:	657b      	str	r3, [r7, #84]	@ 0x54
  if (value == 0U)
 8002cb8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d101      	bne.n	8002cc2 <HAL_ADC_ConfigChannel+0x4ee>
    return 32U;
 8002cbe:	2320      	movs	r3, #32
 8002cc0:	e003      	b.n	8002cca <HAL_ADC_ConfigChannel+0x4f6>
  return __builtin_clz(value);
 8002cc2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002cc4:	fab3 f383 	clz	r3, r3
 8002cc8:	b2db      	uxtb	r3, r3
 8002cca:	3301      	adds	r3, #1
 8002ccc:	069b      	lsls	r3, r3, #26
 8002cce:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002cd2:	683b      	ldr	r3, [r7, #0]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d109      	bne.n	8002cf2 <HAL_ADC_ConfigChannel+0x51e>
 8002cde:	683b      	ldr	r3, [r7, #0]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	0e9b      	lsrs	r3, r3, #26
 8002ce4:	3301      	adds	r3, #1
 8002ce6:	f003 031f 	and.w	r3, r3, #31
 8002cea:	2101      	movs	r1, #1
 8002cec:	fa01 f303 	lsl.w	r3, r1, r3
 8002cf0:	e017      	b.n	8002d22 <HAL_ADC_ConfigChannel+0x54e>
 8002cf2:	683b      	ldr	r3, [r7, #0]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cf8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002cfa:	fa93 f3a3 	rbit	r3, r3
 8002cfe:	643b      	str	r3, [r7, #64]	@ 0x40
  return result;
 8002d00:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002d02:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (value == 0U)
 8002d04:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d101      	bne.n	8002d0e <HAL_ADC_ConfigChannel+0x53a>
    return 32U;
 8002d0a:	2320      	movs	r3, #32
 8002d0c:	e003      	b.n	8002d16 <HAL_ADC_ConfigChannel+0x542>
  return __builtin_clz(value);
 8002d0e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002d10:	fab3 f383 	clz	r3, r3
 8002d14:	b2db      	uxtb	r3, r3
 8002d16:	3301      	adds	r3, #1
 8002d18:	f003 031f 	and.w	r3, r3, #31
 8002d1c:	2101      	movs	r1, #1
 8002d1e:	fa01 f303 	lsl.w	r3, r1, r3
 8002d22:	ea42 0103 	orr.w	r1, r2, r3
 8002d26:	683b      	ldr	r3, [r7, #0]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d10a      	bne.n	8002d48 <HAL_ADC_ConfigChannel+0x574>
 8002d32:	683b      	ldr	r3, [r7, #0]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	0e9b      	lsrs	r3, r3, #26
 8002d38:	3301      	adds	r3, #1
 8002d3a:	f003 021f 	and.w	r2, r3, #31
 8002d3e:	4613      	mov	r3, r2
 8002d40:	005b      	lsls	r3, r3, #1
 8002d42:	4413      	add	r3, r2
 8002d44:	051b      	lsls	r3, r3, #20
 8002d46:	e018      	b.n	8002d7a <HAL_ADC_ConfigChannel+0x5a6>
 8002d48:	683b      	ldr	r3, [r7, #0]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d4e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002d50:	fa93 f3a3 	rbit	r3, r3
 8002d54:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 8002d56:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002d58:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (value == 0U)
 8002d5a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d101      	bne.n	8002d64 <HAL_ADC_ConfigChannel+0x590>
    return 32U;
 8002d60:	2320      	movs	r3, #32
 8002d62:	e003      	b.n	8002d6c <HAL_ADC_ConfigChannel+0x598>
  return __builtin_clz(value);
 8002d64:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002d66:	fab3 f383 	clz	r3, r3
 8002d6a:	b2db      	uxtb	r3, r3
 8002d6c:	3301      	adds	r3, #1
 8002d6e:	f003 021f 	and.w	r2, r3, #31
 8002d72:	4613      	mov	r3, r2
 8002d74:	005b      	lsls	r3, r3, #1
 8002d76:	4413      	add	r3, r2
 8002d78:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002d7a:	430b      	orrs	r3, r1
 8002d7c:	e081      	b.n	8002e82 <HAL_ADC_ConfigChannel+0x6ae>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002d7e:	683b      	ldr	r3, [r7, #0]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d107      	bne.n	8002d9a <HAL_ADC_ConfigChannel+0x5c6>
 8002d8a:	683b      	ldr	r3, [r7, #0]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	0e9b      	lsrs	r3, r3, #26
 8002d90:	3301      	adds	r3, #1
 8002d92:	069b      	lsls	r3, r3, #26
 8002d94:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002d98:	e015      	b.n	8002dc6 <HAL_ADC_ConfigChannel+0x5f2>
 8002d9a:	683b      	ldr	r3, [r7, #0]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002da0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002da2:	fa93 f3a3 	rbit	r3, r3
 8002da6:	62bb      	str	r3, [r7, #40]	@ 0x28
  return result;
 8002da8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002daa:	633b      	str	r3, [r7, #48]	@ 0x30
  if (value == 0U)
 8002dac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d101      	bne.n	8002db6 <HAL_ADC_ConfigChannel+0x5e2>
    return 32U;
 8002db2:	2320      	movs	r3, #32
 8002db4:	e003      	b.n	8002dbe <HAL_ADC_ConfigChannel+0x5ea>
  return __builtin_clz(value);
 8002db6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002db8:	fab3 f383 	clz	r3, r3
 8002dbc:	b2db      	uxtb	r3, r3
 8002dbe:	3301      	adds	r3, #1
 8002dc0:	069b      	lsls	r3, r3, #26
 8002dc2:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002dc6:	683b      	ldr	r3, [r7, #0]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d109      	bne.n	8002de6 <HAL_ADC_ConfigChannel+0x612>
 8002dd2:	683b      	ldr	r3, [r7, #0]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	0e9b      	lsrs	r3, r3, #26
 8002dd8:	3301      	adds	r3, #1
 8002dda:	f003 031f 	and.w	r3, r3, #31
 8002dde:	2101      	movs	r1, #1
 8002de0:	fa01 f303 	lsl.w	r3, r1, r3
 8002de4:	e017      	b.n	8002e16 <HAL_ADC_ConfigChannel+0x642>
 8002de6:	683b      	ldr	r3, [r7, #0]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002dec:	6a3b      	ldr	r3, [r7, #32]
 8002dee:	fa93 f3a3 	rbit	r3, r3
 8002df2:	61fb      	str	r3, [r7, #28]
  return result;
 8002df4:	69fb      	ldr	r3, [r7, #28]
 8002df6:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8002df8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d101      	bne.n	8002e02 <HAL_ADC_ConfigChannel+0x62e>
    return 32U;
 8002dfe:	2320      	movs	r3, #32
 8002e00:	e003      	b.n	8002e0a <HAL_ADC_ConfigChannel+0x636>
  return __builtin_clz(value);
 8002e02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e04:	fab3 f383 	clz	r3, r3
 8002e08:	b2db      	uxtb	r3, r3
 8002e0a:	3301      	adds	r3, #1
 8002e0c:	f003 031f 	and.w	r3, r3, #31
 8002e10:	2101      	movs	r1, #1
 8002e12:	fa01 f303 	lsl.w	r3, r1, r3
 8002e16:	ea42 0103 	orr.w	r1, r2, r3
 8002e1a:	683b      	ldr	r3, [r7, #0]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d10d      	bne.n	8002e42 <HAL_ADC_ConfigChannel+0x66e>
 8002e26:	683b      	ldr	r3, [r7, #0]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	0e9b      	lsrs	r3, r3, #26
 8002e2c:	3301      	adds	r3, #1
 8002e2e:	f003 021f 	and.w	r2, r3, #31
 8002e32:	4613      	mov	r3, r2
 8002e34:	005b      	lsls	r3, r3, #1
 8002e36:	4413      	add	r3, r2
 8002e38:	3b1e      	subs	r3, #30
 8002e3a:	051b      	lsls	r3, r3, #20
 8002e3c:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8002e40:	e01e      	b.n	8002e80 <HAL_ADC_ConfigChannel+0x6ac>
 8002e42:	683b      	ldr	r3, [r7, #0]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e48:	697b      	ldr	r3, [r7, #20]
 8002e4a:	fa93 f3a3 	rbit	r3, r3
 8002e4e:	613b      	str	r3, [r7, #16]
  return result;
 8002e50:	693b      	ldr	r3, [r7, #16]
 8002e52:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8002e54:	69bb      	ldr	r3, [r7, #24]
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d104      	bne.n	8002e64 <HAL_ADC_ConfigChannel+0x690>
    return 32U;
 8002e5a:	2320      	movs	r3, #32
 8002e5c:	e006      	b.n	8002e6c <HAL_ADC_ConfigChannel+0x698>
 8002e5e:	bf00      	nop
 8002e60:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8002e64:	69bb      	ldr	r3, [r7, #24]
 8002e66:	fab3 f383 	clz	r3, r3
 8002e6a:	b2db      	uxtb	r3, r3
 8002e6c:	3301      	adds	r3, #1
 8002e6e:	f003 021f 	and.w	r2, r3, #31
 8002e72:	4613      	mov	r3, r2
 8002e74:	005b      	lsls	r3, r3, #1
 8002e76:	4413      	add	r3, r2
 8002e78:	3b1e      	subs	r3, #30
 8002e7a:	051b      	lsls	r3, r3, #20
 8002e7c:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002e80:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 8002e82:	683a      	ldr	r2, [r7, #0]
 8002e84:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002e86:	4619      	mov	r1, r3
 8002e88:	f7ff f91b 	bl	80020c2 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8002e8c:	683b      	ldr	r3, [r7, #0]
 8002e8e:	681a      	ldr	r2, [r3, #0]
 8002e90:	4b3f      	ldr	r3, [pc, #252]	@ (8002f90 <HAL_ADC_ConfigChannel+0x7bc>)
 8002e92:	4013      	ands	r3, r2
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d071      	beq.n	8002f7c <HAL_ADC_ConfigChannel+0x7a8>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002e98:	483e      	ldr	r0, [pc, #248]	@ (8002f94 <HAL_ADC_ConfigChannel+0x7c0>)
 8002e9a:	f7ff f827 	bl	8001eec <LL_ADC_GetCommonPathInternalCh>
 8002e9e:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8002ea2:	683b      	ldr	r3, [r7, #0]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	4a3c      	ldr	r2, [pc, #240]	@ (8002f98 <HAL_ADC_ConfigChannel+0x7c4>)
 8002ea8:	4293      	cmp	r3, r2
 8002eaa:	d004      	beq.n	8002eb6 <HAL_ADC_ConfigChannel+0x6e2>
 8002eac:	683b      	ldr	r3, [r7, #0]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	4a3a      	ldr	r2, [pc, #232]	@ (8002f9c <HAL_ADC_ConfigChannel+0x7c8>)
 8002eb2:	4293      	cmp	r3, r2
 8002eb4:	d127      	bne.n	8002f06 <HAL_ADC_ConfigChannel+0x732>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002eb6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002eba:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d121      	bne.n	8002f06 <HAL_ADC_ConfigChannel+0x732>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002eca:	d157      	bne.n	8002f7c <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002ecc:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002ed0:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8002ed4:	4619      	mov	r1, r3
 8002ed6:	482f      	ldr	r0, [pc, #188]	@ (8002f94 <HAL_ADC_ConfigChannel+0x7c0>)
 8002ed8:	f7fe fff5 	bl	8001ec6 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002edc:	4b30      	ldr	r3, [pc, #192]	@ (8002fa0 <HAL_ADC_ConfigChannel+0x7cc>)
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	099b      	lsrs	r3, r3, #6
 8002ee2:	4a30      	ldr	r2, [pc, #192]	@ (8002fa4 <HAL_ADC_ConfigChannel+0x7d0>)
 8002ee4:	fba2 2303 	umull	r2, r3, r2, r3
 8002ee8:	099b      	lsrs	r3, r3, #6
 8002eea:	1c5a      	adds	r2, r3, #1
 8002eec:	4613      	mov	r3, r2
 8002eee:	005b      	lsls	r3, r3, #1
 8002ef0:	4413      	add	r3, r2
 8002ef2:	009b      	lsls	r3, r3, #2
 8002ef4:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002ef6:	e002      	b.n	8002efe <HAL_ADC_ConfigChannel+0x72a>
          {
            wait_loop_index--;
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	3b01      	subs	r3, #1
 8002efc:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d1f9      	bne.n	8002ef8 <HAL_ADC_ConfigChannel+0x724>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002f04:	e03a      	b.n	8002f7c <HAL_ADC_ConfigChannel+0x7a8>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8002f06:	683b      	ldr	r3, [r7, #0]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	4a27      	ldr	r2, [pc, #156]	@ (8002fa8 <HAL_ADC_ConfigChannel+0x7d4>)
 8002f0c:	4293      	cmp	r3, r2
 8002f0e:	d113      	bne.n	8002f38 <HAL_ADC_ConfigChannel+0x764>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002f10:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002f14:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d10d      	bne.n	8002f38 <HAL_ADC_ConfigChannel+0x764>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	4a22      	ldr	r2, [pc, #136]	@ (8002fac <HAL_ADC_ConfigChannel+0x7d8>)
 8002f22:	4293      	cmp	r3, r2
 8002f24:	d02a      	beq.n	8002f7c <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002f26:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002f2a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002f2e:	4619      	mov	r1, r3
 8002f30:	4818      	ldr	r0, [pc, #96]	@ (8002f94 <HAL_ADC_ConfigChannel+0x7c0>)
 8002f32:	f7fe ffc8 	bl	8001ec6 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002f36:	e021      	b.n	8002f7c <HAL_ADC_ConfigChannel+0x7a8>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8002f38:	683b      	ldr	r3, [r7, #0]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	4a1c      	ldr	r2, [pc, #112]	@ (8002fb0 <HAL_ADC_ConfigChannel+0x7dc>)
 8002f3e:	4293      	cmp	r3, r2
 8002f40:	d11c      	bne.n	8002f7c <HAL_ADC_ConfigChannel+0x7a8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002f42:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002f46:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d116      	bne.n	8002f7c <HAL_ADC_ConfigChannel+0x7a8>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	4a16      	ldr	r2, [pc, #88]	@ (8002fac <HAL_ADC_ConfigChannel+0x7d8>)
 8002f54:	4293      	cmp	r3, r2
 8002f56:	d011      	beq.n	8002f7c <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002f58:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002f5c:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002f60:	4619      	mov	r1, r3
 8002f62:	480c      	ldr	r0, [pc, #48]	@ (8002f94 <HAL_ADC_ConfigChannel+0x7c0>)
 8002f64:	f7fe ffaf 	bl	8001ec6 <LL_ADC_SetCommonPathInternalCh>
 8002f68:	e008      	b.n	8002f7c <HAL_ADC_ConfigChannel+0x7a8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002f6e:	f043 0220 	orr.w	r2, r3, #32
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8002f76:	2301      	movs	r3, #1
 8002f78:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	2200      	movs	r2, #0
 8002f80:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8002f84:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 8002f88:	4618      	mov	r0, r3
 8002f8a:	37d8      	adds	r7, #216	@ 0xd8
 8002f8c:	46bd      	mov	sp, r7
 8002f8e:	bd80      	pop	{r7, pc}
 8002f90:	80080000 	.word	0x80080000
 8002f94:	50000300 	.word	0x50000300
 8002f98:	c3210000 	.word	0xc3210000
 8002f9c:	90c00010 	.word	0x90c00010
 8002fa0:	20000000 	.word	0x20000000
 8002fa4:	053e2d63 	.word	0x053e2d63
 8002fa8:	c7520000 	.word	0xc7520000
 8002fac:	50000100 	.word	0x50000100
 8002fb0:	cb840000 	.word	0xcb840000

08002fb4 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8002fb4:	b580      	push	{r7, lr}
 8002fb6:	b084      	sub	sp, #16
 8002fb8:	af00      	add	r7, sp, #0
 8002fba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8002fbc:	2300      	movs	r3, #0
 8002fbe:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	4618      	mov	r0, r3
 8002fc6:	f7ff f94f 	bl	8002268 <LL_ADC_IsEnabled>
 8002fca:	4603      	mov	r3, r0
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d169      	bne.n	80030a4 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	689a      	ldr	r2, [r3, #8]
 8002fd6:	4b36      	ldr	r3, [pc, #216]	@ (80030b0 <ADC_Enable+0xfc>)
 8002fd8:	4013      	ands	r3, r2
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d00d      	beq.n	8002ffa <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002fe2:	f043 0210 	orr.w	r2, r3, #16
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002fee:	f043 0201 	orr.w	r2, r3, #1
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	661a      	str	r2, [r3, #96]	@ 0x60

      return HAL_ERROR;
 8002ff6:	2301      	movs	r3, #1
 8002ff8:	e055      	b.n	80030a6 <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	4618      	mov	r0, r3
 8003000:	f7ff f90a 	bl	8002218 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8003004:	482b      	ldr	r0, [pc, #172]	@ (80030b4 <ADC_Enable+0x100>)
 8003006:	f7fe ff71 	bl	8001eec <LL_ADC_GetCommonPathInternalCh>
 800300a:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 800300c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8003010:	2b00      	cmp	r3, #0
 8003012:	d013      	beq.n	800303c <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003014:	4b28      	ldr	r3, [pc, #160]	@ (80030b8 <ADC_Enable+0x104>)
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	099b      	lsrs	r3, r3, #6
 800301a:	4a28      	ldr	r2, [pc, #160]	@ (80030bc <ADC_Enable+0x108>)
 800301c:	fba2 2303 	umull	r2, r3, r2, r3
 8003020:	099b      	lsrs	r3, r3, #6
 8003022:	1c5a      	adds	r2, r3, #1
 8003024:	4613      	mov	r3, r2
 8003026:	005b      	lsls	r3, r3, #1
 8003028:	4413      	add	r3, r2
 800302a:	009b      	lsls	r3, r3, #2
 800302c:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 800302e:	e002      	b.n	8003036 <ADC_Enable+0x82>
      {
        wait_loop_index--;
 8003030:	68bb      	ldr	r3, [r7, #8]
 8003032:	3b01      	subs	r3, #1
 8003034:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8003036:	68bb      	ldr	r3, [r7, #8]
 8003038:	2b00      	cmp	r3, #0
 800303a:	d1f9      	bne.n	8003030 <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 800303c:	f7fe ff02 	bl	8001e44 <HAL_GetTick>
 8003040:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003042:	e028      	b.n	8003096 <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	4618      	mov	r0, r3
 800304a:	f7ff f90d 	bl	8002268 <LL_ADC_IsEnabled>
 800304e:	4603      	mov	r3, r0
 8003050:	2b00      	cmp	r3, #0
 8003052:	d104      	bne.n	800305e <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	4618      	mov	r0, r3
 800305a:	f7ff f8dd 	bl	8002218 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800305e:	f7fe fef1 	bl	8001e44 <HAL_GetTick>
 8003062:	4602      	mov	r2, r0
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	1ad3      	subs	r3, r2, r3
 8003068:	2b02      	cmp	r3, #2
 800306a:	d914      	bls.n	8003096 <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	f003 0301 	and.w	r3, r3, #1
 8003076:	2b01      	cmp	r3, #1
 8003078:	d00d      	beq.n	8003096 <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800307e:	f043 0210 	orr.w	r2, r3, #16
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800308a:	f043 0201 	orr.w	r2, r3, #1
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	661a      	str	r2, [r3, #96]	@ 0x60

          return HAL_ERROR;
 8003092:	2301      	movs	r3, #1
 8003094:	e007      	b.n	80030a6 <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	f003 0301 	and.w	r3, r3, #1
 80030a0:	2b01      	cmp	r3, #1
 80030a2:	d1cf      	bne.n	8003044 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80030a4:	2300      	movs	r3, #0
}
 80030a6:	4618      	mov	r0, r3
 80030a8:	3710      	adds	r7, #16
 80030aa:	46bd      	mov	sp, r7
 80030ac:	bd80      	pop	{r7, pc}
 80030ae:	bf00      	nop
 80030b0:	8000003f 	.word	0x8000003f
 80030b4:	50000300 	.word	0x50000300
 80030b8:	20000000 	.word	0x20000000
 80030bc:	053e2d63 	.word	0x053e2d63

080030c0 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 80030c0:	b580      	push	{r7, lr}
 80030c2:	b084      	sub	sp, #16
 80030c4:	af00      	add	r7, sp, #0
 80030c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	4618      	mov	r0, r3
 80030ce:	f7ff f8de 	bl	800228e <LL_ADC_IsDisableOngoing>
 80030d2:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	4618      	mov	r0, r3
 80030da:	f7ff f8c5 	bl	8002268 <LL_ADC_IsEnabled>
 80030de:	4603      	mov	r3, r0
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d047      	beq.n	8003174 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d144      	bne.n	8003174 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	689b      	ldr	r3, [r3, #8]
 80030f0:	f003 030d 	and.w	r3, r3, #13
 80030f4:	2b01      	cmp	r3, #1
 80030f6:	d10c      	bne.n	8003112 <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	4618      	mov	r0, r3
 80030fe:	f7ff f89f 	bl	8002240 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	2203      	movs	r2, #3
 8003108:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 800310a:	f7fe fe9b 	bl	8001e44 <HAL_GetTick>
 800310e:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003110:	e029      	b.n	8003166 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003116:	f043 0210 	orr.w	r2, r3, #16
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	65da      	str	r2, [r3, #92]	@ 0x5c
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003122:	f043 0201 	orr.w	r2, r3, #1
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_ERROR;
 800312a:	2301      	movs	r3, #1
 800312c:	e023      	b.n	8003176 <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800312e:	f7fe fe89 	bl	8001e44 <HAL_GetTick>
 8003132:	4602      	mov	r2, r0
 8003134:	68bb      	ldr	r3, [r7, #8]
 8003136:	1ad3      	subs	r3, r2, r3
 8003138:	2b02      	cmp	r3, #2
 800313a:	d914      	bls.n	8003166 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	689b      	ldr	r3, [r3, #8]
 8003142:	f003 0301 	and.w	r3, r3, #1
 8003146:	2b00      	cmp	r3, #0
 8003148:	d00d      	beq.n	8003166 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800314e:	f043 0210 	orr.w	r2, r3, #16
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800315a:	f043 0201 	orr.w	r2, r3, #1
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	661a      	str	r2, [r3, #96]	@ 0x60

          return HAL_ERROR;
 8003162:	2301      	movs	r3, #1
 8003164:	e007      	b.n	8003176 <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	689b      	ldr	r3, [r3, #8]
 800316c:	f003 0301 	and.w	r3, r3, #1
 8003170:	2b00      	cmp	r3, #0
 8003172:	d1dc      	bne.n	800312e <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003174:	2300      	movs	r3, #0
}
 8003176:	4618      	mov	r0, r3
 8003178:	3710      	adds	r7, #16
 800317a:	46bd      	mov	sp, r7
 800317c:	bd80      	pop	{r7, pc}

0800317e <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 800317e:	b580      	push	{r7, lr}
 8003180:	b084      	sub	sp, #16
 8003182:	af00      	add	r7, sp, #0
 8003184:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800318a:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003190:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8003194:	2b00      	cmp	r3, #0
 8003196:	d14b      	bne.n	8003230 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800319c:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	f003 0308 	and.w	r3, r3, #8
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d021      	beq.n	80031f6 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	4618      	mov	r0, r3
 80031b8:	f7fe ff44 	bl	8002044 <LL_ADC_REG_IsTriggerSourceSWStart>
 80031bc:	4603      	mov	r3, r0
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d032      	beq.n	8003228 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	68db      	ldr	r3, [r3, #12]
 80031c8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d12b      	bne.n	8003228 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80031d4:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	65da      	str	r2, [r3, #92]	@ 0x5c
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80031e0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	d11f      	bne.n	8003228 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80031ec:	f043 0201 	orr.w	r2, r3, #1
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	65da      	str	r2, [r3, #92]	@ 0x5c
 80031f4:	e018      	b.n	8003228 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	68db      	ldr	r3, [r3, #12]
 80031fc:	f003 0302 	and.w	r3, r3, #2
 8003200:	2b00      	cmp	r3, #0
 8003202:	d111      	bne.n	8003228 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003208:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	65da      	str	r2, [r3, #92]	@ 0x5c
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003214:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003218:	2b00      	cmp	r3, #0
 800321a:	d105      	bne.n	8003228 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003220:	f043 0201 	orr.w	r2, r3, #1
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003228:	68f8      	ldr	r0, [r7, #12]
 800322a:	f7ff fab5 	bl	8002798 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 800322e:	e00e      	b.n	800324e <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003234:	f003 0310 	and.w	r3, r3, #16
 8003238:	2b00      	cmp	r3, #0
 800323a:	d003      	beq.n	8003244 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 800323c:	68f8      	ldr	r0, [r7, #12]
 800323e:	f7ff fabf 	bl	80027c0 <HAL_ADC_ErrorCallback>
}
 8003242:	e004      	b.n	800324e <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003248:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800324a:	6878      	ldr	r0, [r7, #4]
 800324c:	4798      	blx	r3
}
 800324e:	bf00      	nop
 8003250:	3710      	adds	r7, #16
 8003252:	46bd      	mov	sp, r7
 8003254:	bd80      	pop	{r7, pc}

08003256 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8003256:	b580      	push	{r7, lr}
 8003258:	b084      	sub	sp, #16
 800325a:	af00      	add	r7, sp, #0
 800325c:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003262:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8003264:	68f8      	ldr	r0, [r7, #12]
 8003266:	f7ff faa1 	bl	80027ac <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800326a:	bf00      	nop
 800326c:	3710      	adds	r7, #16
 800326e:	46bd      	mov	sp, r7
 8003270:	bd80      	pop	{r7, pc}

08003272 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8003272:	b580      	push	{r7, lr}
 8003274:	b084      	sub	sp, #16
 8003276:	af00      	add	r7, sp, #0
 8003278:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800327e:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003284:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003290:	f043 0204 	orr.w	r2, r3, #4
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8003298:	68f8      	ldr	r0, [r7, #12]
 800329a:	f7ff fa91 	bl	80027c0 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800329e:	bf00      	nop
 80032a0:	3710      	adds	r7, #16
 80032a2:	46bd      	mov	sp, r7
 80032a4:	bd80      	pop	{r7, pc}

080032a6 <LL_ADC_IsEnabled>:
{
 80032a6:	b480      	push	{r7}
 80032a8:	b083      	sub	sp, #12
 80032aa:	af00      	add	r7, sp, #0
 80032ac:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	689b      	ldr	r3, [r3, #8]
 80032b2:	f003 0301 	and.w	r3, r3, #1
 80032b6:	2b01      	cmp	r3, #1
 80032b8:	d101      	bne.n	80032be <LL_ADC_IsEnabled+0x18>
 80032ba:	2301      	movs	r3, #1
 80032bc:	e000      	b.n	80032c0 <LL_ADC_IsEnabled+0x1a>
 80032be:	2300      	movs	r3, #0
}
 80032c0:	4618      	mov	r0, r3
 80032c2:	370c      	adds	r7, #12
 80032c4:	46bd      	mov	sp, r7
 80032c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ca:	4770      	bx	lr

080032cc <LL_ADC_StartCalibration>:
{
 80032cc:	b480      	push	{r7}
 80032ce:	b083      	sub	sp, #12
 80032d0:	af00      	add	r7, sp, #0
 80032d2:	6078      	str	r0, [r7, #4]
 80032d4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR,
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	689b      	ldr	r3, [r3, #8]
 80032da:	f023 4340 	bic.w	r3, r3, #3221225472	@ 0xc0000000
 80032de:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80032e2:	683a      	ldr	r2, [r7, #0]
 80032e4:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 80032e8:	4313      	orrs	r3, r2
 80032ea:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	609a      	str	r2, [r3, #8]
}
 80032f2:	bf00      	nop
 80032f4:	370c      	adds	r7, #12
 80032f6:	46bd      	mov	sp, r7
 80032f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032fc:	4770      	bx	lr

080032fe <LL_ADC_IsCalibrationOnGoing>:
{
 80032fe:	b480      	push	{r7}
 8003300:	b083      	sub	sp, #12
 8003302:	af00      	add	r7, sp, #0
 8003304:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	689b      	ldr	r3, [r3, #8]
 800330a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800330e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003312:	d101      	bne.n	8003318 <LL_ADC_IsCalibrationOnGoing+0x1a>
 8003314:	2301      	movs	r3, #1
 8003316:	e000      	b.n	800331a <LL_ADC_IsCalibrationOnGoing+0x1c>
 8003318:	2300      	movs	r3, #0
}
 800331a:	4618      	mov	r0, r3
 800331c:	370c      	adds	r7, #12
 800331e:	46bd      	mov	sp, r7
 8003320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003324:	4770      	bx	lr

08003326 <LL_ADC_REG_IsConversionOngoing>:
{
 8003326:	b480      	push	{r7}
 8003328:	b083      	sub	sp, #12
 800332a:	af00      	add	r7, sp, #0
 800332c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	689b      	ldr	r3, [r3, #8]
 8003332:	f003 0304 	and.w	r3, r3, #4
 8003336:	2b04      	cmp	r3, #4
 8003338:	d101      	bne.n	800333e <LL_ADC_REG_IsConversionOngoing+0x18>
 800333a:	2301      	movs	r3, #1
 800333c:	e000      	b.n	8003340 <LL_ADC_REG_IsConversionOngoing+0x1a>
 800333e:	2300      	movs	r3, #0
}
 8003340:	4618      	mov	r0, r3
 8003342:	370c      	adds	r7, #12
 8003344:	46bd      	mov	sp, r7
 8003346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800334a:	4770      	bx	lr

0800334c <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 800334c:	b580      	push	{r7, lr}
 800334e:	b084      	sub	sp, #16
 8003350:	af00      	add	r7, sp, #0
 8003352:	6078      	str	r0, [r7, #4]
 8003354:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 8003356:	2300      	movs	r3, #0
 8003358:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8003360:	2b01      	cmp	r3, #1
 8003362:	d101      	bne.n	8003368 <HAL_ADCEx_Calibration_Start+0x1c>
 8003364:	2302      	movs	r3, #2
 8003366:	e04d      	b.n	8003404 <HAL_ADCEx_Calibration_Start+0xb8>
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	2201      	movs	r2, #1
 800336c:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8003370:	6878      	ldr	r0, [r7, #4]
 8003372:	f7ff fea5 	bl	80030c0 <ADC_Disable>
 8003376:	4603      	mov	r3, r0
 8003378:	73fb      	strb	r3, [r7, #15]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 800337a:	7bfb      	ldrb	r3, [r7, #15]
 800337c:	2b00      	cmp	r3, #0
 800337e:	d136      	bne.n	80033ee <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003384:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8003388:	f023 0302 	bic.w	r3, r3, #2
 800338c:	f043 0202 	orr.w	r2, r3, #2
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	65da      	str	r2, [r3, #92]	@ 0x5c
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, SingleDiff);
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	6839      	ldr	r1, [r7, #0]
 800339a:	4618      	mov	r0, r3
 800339c:	f7ff ff96 	bl	80032cc <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 80033a0:	e014      	b.n	80033cc <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 80033a2:	68bb      	ldr	r3, [r7, #8]
 80033a4:	3301      	adds	r3, #1
 80033a6:	60bb      	str	r3, [r7, #8]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 80033a8:	68bb      	ldr	r3, [r7, #8]
 80033aa:	4a18      	ldr	r2, [pc, #96]	@ (800340c <HAL_ADCEx_Calibration_Start+0xc0>)
 80033ac:	4293      	cmp	r3, r2
 80033ae:	d90d      	bls.n	80033cc <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80033b4:	f023 0312 	bic.w	r3, r3, #18
 80033b8:	f043 0210 	orr.w	r2, r3, #16
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	65da      	str	r2, [r3, #92]	@ 0x5c
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	2200      	movs	r2, #0
 80033c4:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

        return HAL_ERROR;
 80033c8:	2301      	movs	r3, #1
 80033ca:	e01b      	b.n	8003404 <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	4618      	mov	r0, r3
 80033d2:	f7ff ff94 	bl	80032fe <LL_ADC_IsCalibrationOnGoing>
 80033d6:	4603      	mov	r3, r0
 80033d8:	2b00      	cmp	r3, #0
 80033da:	d1e2      	bne.n	80033a2 <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80033e0:	f023 0303 	bic.w	r3, r3, #3
 80033e4:	f043 0201 	orr.w	r2, r3, #1
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	65da      	str	r2, [r3, #92]	@ 0x5c
 80033ec:	e005      	b.n	80033fa <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80033f2:	f043 0210 	orr.w	r2, r3, #16
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	2200      	movs	r2, #0
 80033fe:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8003402:	7bfb      	ldrb	r3, [r7, #15]
}
 8003404:	4618      	mov	r0, r3
 8003406:	3710      	adds	r7, #16
 8003408:	46bd      	mov	sp, r7
 800340a:	bd80      	pop	{r7, pc}
 800340c:	0004de01 	.word	0x0004de01

08003410 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 8003410:	b590      	push	{r4, r7, lr}
 8003412:	b0a1      	sub	sp, #132	@ 0x84
 8003414:	af00      	add	r7, sp, #0
 8003416:	6078      	str	r0, [r7, #4]
 8003418:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800341a:	2300      	movs	r3, #0
 800341c:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8003426:	2b01      	cmp	r3, #1
 8003428:	d101      	bne.n	800342e <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 800342a:	2302      	movs	r3, #2
 800342c:	e08b      	b.n	8003546 <HAL_ADCEx_MultiModeConfigChannel+0x136>
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	2201      	movs	r2, #1
 8003432:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 8003436:	2300      	movs	r3, #0
 8003438:	667b      	str	r3, [r7, #100]	@ 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 800343a:	2300      	movs	r3, #0
 800343c:	66bb      	str	r3, [r7, #104]	@ 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003446:	d102      	bne.n	800344e <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8003448:	4b41      	ldr	r3, [pc, #260]	@ (8003550 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 800344a:	60bb      	str	r3, [r7, #8]
 800344c:	e001      	b.n	8003452 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 800344e:	2300      	movs	r3, #0
 8003450:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 8003452:	68bb      	ldr	r3, [r7, #8]
 8003454:	2b00      	cmp	r3, #0
 8003456:	d10b      	bne.n	8003470 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800345c:	f043 0220 	orr.w	r2, r3, #32
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	2200      	movs	r2, #0
 8003468:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

    return HAL_ERROR;
 800346c:	2301      	movs	r3, #1
 800346e:	e06a      	b.n	8003546 <HAL_ADCEx_MultiModeConfigChannel+0x136>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 8003470:	68bb      	ldr	r3, [r7, #8]
 8003472:	4618      	mov	r0, r3
 8003474:	f7ff ff57 	bl	8003326 <LL_ADC_REG_IsConversionOngoing>
 8003478:	67b8      	str	r0, [r7, #120]	@ 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	4618      	mov	r0, r3
 8003480:	f7ff ff51 	bl	8003326 <LL_ADC_REG_IsConversionOngoing>
 8003484:	4603      	mov	r3, r0
 8003486:	2b00      	cmp	r3, #0
 8003488:	d14c      	bne.n	8003524 <HAL_ADCEx_MultiModeConfigChannel+0x114>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 800348a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800348c:	2b00      	cmp	r3, #0
 800348e:	d149      	bne.n	8003524 <HAL_ADCEx_MultiModeConfigChannel+0x114>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8003490:	4b30      	ldr	r3, [pc, #192]	@ (8003554 <HAL_ADCEx_MultiModeConfigChannel+0x144>)
 8003492:	677b      	str	r3, [r7, #116]	@ 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8003494:	683b      	ldr	r3, [r7, #0]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	2b00      	cmp	r3, #0
 800349a:	d028      	beq.n	80034ee <HAL_ADCEx_MultiModeConfigChannel+0xde>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 800349c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800349e:	689b      	ldr	r3, [r3, #8]
 80034a0:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80034a4:	683b      	ldr	r3, [r7, #0]
 80034a6:	6859      	ldr	r1, [r3, #4]
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80034ae:	035b      	lsls	r3, r3, #13
 80034b0:	430b      	orrs	r3, r1
 80034b2:	431a      	orrs	r2, r3
 80034b4:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80034b6:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80034b8:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 80034bc:	f7ff fef3 	bl	80032a6 <LL_ADC_IsEnabled>
 80034c0:	4604      	mov	r4, r0
 80034c2:	4823      	ldr	r0, [pc, #140]	@ (8003550 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 80034c4:	f7ff feef 	bl	80032a6 <LL_ADC_IsEnabled>
 80034c8:	4603      	mov	r3, r0
 80034ca:	4323      	orrs	r3, r4
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d133      	bne.n	8003538 <HAL_ADCEx_MultiModeConfigChannel+0x128>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 80034d0:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80034d2:	689b      	ldr	r3, [r3, #8]
 80034d4:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 80034d8:	f023 030f 	bic.w	r3, r3, #15
 80034dc:	683a      	ldr	r2, [r7, #0]
 80034de:	6811      	ldr	r1, [r2, #0]
 80034e0:	683a      	ldr	r2, [r7, #0]
 80034e2:	6892      	ldr	r2, [r2, #8]
 80034e4:	430a      	orrs	r2, r1
 80034e6:	431a      	orrs	r2, r3
 80034e8:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80034ea:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80034ec:	e024      	b.n	8003538 <HAL_ADCEx_MultiModeConfigChannel+0x128>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 80034ee:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80034f0:	689b      	ldr	r3, [r3, #8]
 80034f2:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80034f6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80034f8:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80034fa:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 80034fe:	f7ff fed2 	bl	80032a6 <LL_ADC_IsEnabled>
 8003502:	4604      	mov	r4, r0
 8003504:	4812      	ldr	r0, [pc, #72]	@ (8003550 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8003506:	f7ff fece 	bl	80032a6 <LL_ADC_IsEnabled>
 800350a:	4603      	mov	r3, r0
 800350c:	4323      	orrs	r3, r4
 800350e:	2b00      	cmp	r3, #0
 8003510:	d112      	bne.n	8003538 <HAL_ADCEx_MultiModeConfigChannel+0x128>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8003512:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003514:	689b      	ldr	r3, [r3, #8]
 8003516:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 800351a:	f023 030f 	bic.w	r3, r3, #15
 800351e:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8003520:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8003522:	e009      	b.n	8003538 <HAL_ADCEx_MultiModeConfigChannel+0x128>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003528:	f043 0220 	orr.w	r2, r3, #32
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8003530:	2301      	movs	r3, #1
 8003532:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 8003536:	e000      	b.n	800353a <HAL_ADCEx_MultiModeConfigChannel+0x12a>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8003538:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	2200      	movs	r2, #0
 800353e:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8003542:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 8003546:	4618      	mov	r0, r3
 8003548:	3784      	adds	r7, #132	@ 0x84
 800354a:	46bd      	mov	sp, r7
 800354c:	bd90      	pop	{r4, r7, pc}
 800354e:	bf00      	nop
 8003550:	50000100 	.word	0x50000100
 8003554:	50000300 	.word	0x50000300

08003558 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003558:	b480      	push	{r7}
 800355a:	b085      	sub	sp, #20
 800355c:	af00      	add	r7, sp, #0
 800355e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	f003 0307 	and.w	r3, r3, #7
 8003566:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003568:	4b0c      	ldr	r3, [pc, #48]	@ (800359c <__NVIC_SetPriorityGrouping+0x44>)
 800356a:	68db      	ldr	r3, [r3, #12]
 800356c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800356e:	68ba      	ldr	r2, [r7, #8]
 8003570:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003574:	4013      	ands	r3, r2
 8003576:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800357c:	68bb      	ldr	r3, [r7, #8]
 800357e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003580:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003584:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003588:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800358a:	4a04      	ldr	r2, [pc, #16]	@ (800359c <__NVIC_SetPriorityGrouping+0x44>)
 800358c:	68bb      	ldr	r3, [r7, #8]
 800358e:	60d3      	str	r3, [r2, #12]
}
 8003590:	bf00      	nop
 8003592:	3714      	adds	r7, #20
 8003594:	46bd      	mov	sp, r7
 8003596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800359a:	4770      	bx	lr
 800359c:	e000ed00 	.word	0xe000ed00

080035a0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80035a0:	b480      	push	{r7}
 80035a2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80035a4:	4b04      	ldr	r3, [pc, #16]	@ (80035b8 <__NVIC_GetPriorityGrouping+0x18>)
 80035a6:	68db      	ldr	r3, [r3, #12]
 80035a8:	0a1b      	lsrs	r3, r3, #8
 80035aa:	f003 0307 	and.w	r3, r3, #7
}
 80035ae:	4618      	mov	r0, r3
 80035b0:	46bd      	mov	sp, r7
 80035b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035b6:	4770      	bx	lr
 80035b8:	e000ed00 	.word	0xe000ed00

080035bc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80035bc:	b480      	push	{r7}
 80035be:	b083      	sub	sp, #12
 80035c0:	af00      	add	r7, sp, #0
 80035c2:	4603      	mov	r3, r0
 80035c4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80035c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	db0b      	blt.n	80035e6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80035ce:	79fb      	ldrb	r3, [r7, #7]
 80035d0:	f003 021f 	and.w	r2, r3, #31
 80035d4:	4907      	ldr	r1, [pc, #28]	@ (80035f4 <__NVIC_EnableIRQ+0x38>)
 80035d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80035da:	095b      	lsrs	r3, r3, #5
 80035dc:	2001      	movs	r0, #1
 80035de:	fa00 f202 	lsl.w	r2, r0, r2
 80035e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80035e6:	bf00      	nop
 80035e8:	370c      	adds	r7, #12
 80035ea:	46bd      	mov	sp, r7
 80035ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035f0:	4770      	bx	lr
 80035f2:	bf00      	nop
 80035f4:	e000e100 	.word	0xe000e100

080035f8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80035f8:	b480      	push	{r7}
 80035fa:	b083      	sub	sp, #12
 80035fc:	af00      	add	r7, sp, #0
 80035fe:	4603      	mov	r3, r0
 8003600:	6039      	str	r1, [r7, #0]
 8003602:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003604:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003608:	2b00      	cmp	r3, #0
 800360a:	db0a      	blt.n	8003622 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800360c:	683b      	ldr	r3, [r7, #0]
 800360e:	b2da      	uxtb	r2, r3
 8003610:	490c      	ldr	r1, [pc, #48]	@ (8003644 <__NVIC_SetPriority+0x4c>)
 8003612:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003616:	0112      	lsls	r2, r2, #4
 8003618:	b2d2      	uxtb	r2, r2
 800361a:	440b      	add	r3, r1
 800361c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003620:	e00a      	b.n	8003638 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003622:	683b      	ldr	r3, [r7, #0]
 8003624:	b2da      	uxtb	r2, r3
 8003626:	4908      	ldr	r1, [pc, #32]	@ (8003648 <__NVIC_SetPriority+0x50>)
 8003628:	79fb      	ldrb	r3, [r7, #7]
 800362a:	f003 030f 	and.w	r3, r3, #15
 800362e:	3b04      	subs	r3, #4
 8003630:	0112      	lsls	r2, r2, #4
 8003632:	b2d2      	uxtb	r2, r2
 8003634:	440b      	add	r3, r1
 8003636:	761a      	strb	r2, [r3, #24]
}
 8003638:	bf00      	nop
 800363a:	370c      	adds	r7, #12
 800363c:	46bd      	mov	sp, r7
 800363e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003642:	4770      	bx	lr
 8003644:	e000e100 	.word	0xe000e100
 8003648:	e000ed00 	.word	0xe000ed00

0800364c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800364c:	b480      	push	{r7}
 800364e:	b089      	sub	sp, #36	@ 0x24
 8003650:	af00      	add	r7, sp, #0
 8003652:	60f8      	str	r0, [r7, #12]
 8003654:	60b9      	str	r1, [r7, #8]
 8003656:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	f003 0307 	and.w	r3, r3, #7
 800365e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003660:	69fb      	ldr	r3, [r7, #28]
 8003662:	f1c3 0307 	rsb	r3, r3, #7
 8003666:	2b04      	cmp	r3, #4
 8003668:	bf28      	it	cs
 800366a:	2304      	movcs	r3, #4
 800366c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800366e:	69fb      	ldr	r3, [r7, #28]
 8003670:	3304      	adds	r3, #4
 8003672:	2b06      	cmp	r3, #6
 8003674:	d902      	bls.n	800367c <NVIC_EncodePriority+0x30>
 8003676:	69fb      	ldr	r3, [r7, #28]
 8003678:	3b03      	subs	r3, #3
 800367a:	e000      	b.n	800367e <NVIC_EncodePriority+0x32>
 800367c:	2300      	movs	r3, #0
 800367e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003680:	f04f 32ff 	mov.w	r2, #4294967295
 8003684:	69bb      	ldr	r3, [r7, #24]
 8003686:	fa02 f303 	lsl.w	r3, r2, r3
 800368a:	43da      	mvns	r2, r3
 800368c:	68bb      	ldr	r3, [r7, #8]
 800368e:	401a      	ands	r2, r3
 8003690:	697b      	ldr	r3, [r7, #20]
 8003692:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003694:	f04f 31ff 	mov.w	r1, #4294967295
 8003698:	697b      	ldr	r3, [r7, #20]
 800369a:	fa01 f303 	lsl.w	r3, r1, r3
 800369e:	43d9      	mvns	r1, r3
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80036a4:	4313      	orrs	r3, r2
         );
}
 80036a6:	4618      	mov	r0, r3
 80036a8:	3724      	adds	r7, #36	@ 0x24
 80036aa:	46bd      	mov	sp, r7
 80036ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036b0:	4770      	bx	lr
	...

080036b4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80036b4:	b580      	push	{r7, lr}
 80036b6:	b082      	sub	sp, #8
 80036b8:	af00      	add	r7, sp, #0
 80036ba:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	3b01      	subs	r3, #1
 80036c0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80036c4:	d301      	bcc.n	80036ca <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80036c6:	2301      	movs	r3, #1
 80036c8:	e00f      	b.n	80036ea <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80036ca:	4a0a      	ldr	r2, [pc, #40]	@ (80036f4 <SysTick_Config+0x40>)
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	3b01      	subs	r3, #1
 80036d0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80036d2:	210f      	movs	r1, #15
 80036d4:	f04f 30ff 	mov.w	r0, #4294967295
 80036d8:	f7ff ff8e 	bl	80035f8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80036dc:	4b05      	ldr	r3, [pc, #20]	@ (80036f4 <SysTick_Config+0x40>)
 80036de:	2200      	movs	r2, #0
 80036e0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80036e2:	4b04      	ldr	r3, [pc, #16]	@ (80036f4 <SysTick_Config+0x40>)
 80036e4:	2207      	movs	r2, #7
 80036e6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80036e8:	2300      	movs	r3, #0
}
 80036ea:	4618      	mov	r0, r3
 80036ec:	3708      	adds	r7, #8
 80036ee:	46bd      	mov	sp, r7
 80036f0:	bd80      	pop	{r7, pc}
 80036f2:	bf00      	nop
 80036f4:	e000e010 	.word	0xe000e010

080036f8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80036f8:	b580      	push	{r7, lr}
 80036fa:	b082      	sub	sp, #8
 80036fc:	af00      	add	r7, sp, #0
 80036fe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003700:	6878      	ldr	r0, [r7, #4]
 8003702:	f7ff ff29 	bl	8003558 <__NVIC_SetPriorityGrouping>
}
 8003706:	bf00      	nop
 8003708:	3708      	adds	r7, #8
 800370a:	46bd      	mov	sp, r7
 800370c:	bd80      	pop	{r7, pc}

0800370e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800370e:	b580      	push	{r7, lr}
 8003710:	b086      	sub	sp, #24
 8003712:	af00      	add	r7, sp, #0
 8003714:	4603      	mov	r3, r0
 8003716:	60b9      	str	r1, [r7, #8]
 8003718:	607a      	str	r2, [r7, #4]
 800371a:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800371c:	f7ff ff40 	bl	80035a0 <__NVIC_GetPriorityGrouping>
 8003720:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003722:	687a      	ldr	r2, [r7, #4]
 8003724:	68b9      	ldr	r1, [r7, #8]
 8003726:	6978      	ldr	r0, [r7, #20]
 8003728:	f7ff ff90 	bl	800364c <NVIC_EncodePriority>
 800372c:	4602      	mov	r2, r0
 800372e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003732:	4611      	mov	r1, r2
 8003734:	4618      	mov	r0, r3
 8003736:	f7ff ff5f 	bl	80035f8 <__NVIC_SetPriority>
}
 800373a:	bf00      	nop
 800373c:	3718      	adds	r7, #24
 800373e:	46bd      	mov	sp, r7
 8003740:	bd80      	pop	{r7, pc}

08003742 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003742:	b580      	push	{r7, lr}
 8003744:	b082      	sub	sp, #8
 8003746:	af00      	add	r7, sp, #0
 8003748:	4603      	mov	r3, r0
 800374a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800374c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003750:	4618      	mov	r0, r3
 8003752:	f7ff ff33 	bl	80035bc <__NVIC_EnableIRQ>
}
 8003756:	bf00      	nop
 8003758:	3708      	adds	r7, #8
 800375a:	46bd      	mov	sp, r7
 800375c:	bd80      	pop	{r7, pc}

0800375e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800375e:	b580      	push	{r7, lr}
 8003760:	b082      	sub	sp, #8
 8003762:	af00      	add	r7, sp, #0
 8003764:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003766:	6878      	ldr	r0, [r7, #4]
 8003768:	f7ff ffa4 	bl	80036b4 <SysTick_Config>
 800376c:	4603      	mov	r3, r0
}
 800376e:	4618      	mov	r0, r3
 8003770:	3708      	adds	r7, #8
 8003772:	46bd      	mov	sp, r7
 8003774:	bd80      	pop	{r7, pc}
	...

08003778 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003778:	b580      	push	{r7, lr}
 800377a:	b084      	sub	sp, #16
 800377c:	af00      	add	r7, sp, #0
 800377e:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	2b00      	cmp	r3, #0
 8003784:	d101      	bne.n	800378a <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8003786:	2301      	movs	r3, #1
 8003788:	e08d      	b.n	80038a6 <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	461a      	mov	r2, r3
 8003790:	4b47      	ldr	r3, [pc, #284]	@ (80038b0 <HAL_DMA_Init+0x138>)
 8003792:	429a      	cmp	r2, r3
 8003794:	d80f      	bhi.n	80037b6 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	461a      	mov	r2, r3
 800379c:	4b45      	ldr	r3, [pc, #276]	@ (80038b4 <HAL_DMA_Init+0x13c>)
 800379e:	4413      	add	r3, r2
 80037a0:	4a45      	ldr	r2, [pc, #276]	@ (80038b8 <HAL_DMA_Init+0x140>)
 80037a2:	fba2 2303 	umull	r2, r3, r2, r3
 80037a6:	091b      	lsrs	r3, r3, #4
 80037a8:	009a      	lsls	r2, r3, #2
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	4a42      	ldr	r2, [pc, #264]	@ (80038bc <HAL_DMA_Init+0x144>)
 80037b2:	641a      	str	r2, [r3, #64]	@ 0x40
 80037b4:	e00e      	b.n	80037d4 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	461a      	mov	r2, r3
 80037bc:	4b40      	ldr	r3, [pc, #256]	@ (80038c0 <HAL_DMA_Init+0x148>)
 80037be:	4413      	add	r3, r2
 80037c0:	4a3d      	ldr	r2, [pc, #244]	@ (80038b8 <HAL_DMA_Init+0x140>)
 80037c2:	fba2 2303 	umull	r2, r3, r2, r3
 80037c6:	091b      	lsrs	r3, r3, #4
 80037c8:	009a      	lsls	r2, r3, #2
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	4a3c      	ldr	r2, [pc, #240]	@ (80038c4 <HAL_DMA_Init+0x14c>)
 80037d2:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	2202      	movs	r2, #2
 80037d8:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 80037ea:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80037ee:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 80037f8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	691b      	ldr	r3, [r3, #16]
 80037fe:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003804:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	699b      	ldr	r3, [r3, #24]
 800380a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003810:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	6a1b      	ldr	r3, [r3, #32]
 8003816:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8003818:	68fa      	ldr	r2, [r7, #12]
 800381a:	4313      	orrs	r3, r2
 800381c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	68fa      	ldr	r2, [r7, #12]
 8003824:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8003826:	6878      	ldr	r0, [r7, #4]
 8003828:	f000 fa2c 	bl	8003c84 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	689b      	ldr	r3, [r3, #8]
 8003830:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003834:	d102      	bne.n	800383c <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	2200      	movs	r2, #0
 800383a:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	685a      	ldr	r2, [r3, #4]
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003844:	b2d2      	uxtb	r2, r2
 8003846:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800384c:	687a      	ldr	r2, [r7, #4]
 800384e:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8003850:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	685b      	ldr	r3, [r3, #4]
 8003856:	2b00      	cmp	r3, #0
 8003858:	d010      	beq.n	800387c <HAL_DMA_Init+0x104>
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	685b      	ldr	r3, [r3, #4]
 800385e:	2b04      	cmp	r3, #4
 8003860:	d80c      	bhi.n	800387c <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8003862:	6878      	ldr	r0, [r7, #4]
 8003864:	f000 fa4c 	bl	8003d00 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800386c:	2200      	movs	r2, #0
 800386e:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003874:	687a      	ldr	r2, [r7, #4]
 8003876:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8003878:	605a      	str	r2, [r3, #4]
 800387a:	e008      	b.n	800388e <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	2200      	movs	r2, #0
 8003880:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	2200      	movs	r2, #0
 8003886:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	2200      	movs	r2, #0
 800388c:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	2200      	movs	r2, #0
 8003892:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	2201      	movs	r2, #1
 8003898:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	2200      	movs	r2, #0
 80038a0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 80038a4:	2300      	movs	r3, #0
}
 80038a6:	4618      	mov	r0, r3
 80038a8:	3710      	adds	r7, #16
 80038aa:	46bd      	mov	sp, r7
 80038ac:	bd80      	pop	{r7, pc}
 80038ae:	bf00      	nop
 80038b0:	40020407 	.word	0x40020407
 80038b4:	bffdfff8 	.word	0xbffdfff8
 80038b8:	cccccccd 	.word	0xcccccccd
 80038bc:	40020000 	.word	0x40020000
 80038c0:	bffdfbf8 	.word	0xbffdfbf8
 80038c4:	40020400 	.word	0x40020400

080038c8 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 80038c8:	b580      	push	{r7, lr}
 80038ca:	b086      	sub	sp, #24
 80038cc:	af00      	add	r7, sp, #0
 80038ce:	60f8      	str	r0, [r7, #12]
 80038d0:	60b9      	str	r1, [r7, #8]
 80038d2:	607a      	str	r2, [r7, #4]
 80038d4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80038d6:	2300      	movs	r3, #0
 80038d8:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80038e0:	2b01      	cmp	r3, #1
 80038e2:	d101      	bne.n	80038e8 <HAL_DMA_Start_IT+0x20>
 80038e4:	2302      	movs	r3, #2
 80038e6:	e066      	b.n	80039b6 <HAL_DMA_Start_IT+0xee>
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	2201      	movs	r2, #1
 80038ec:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80038f6:	b2db      	uxtb	r3, r3
 80038f8:	2b01      	cmp	r3, #1
 80038fa:	d155      	bne.n	80039a8 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	2202      	movs	r2, #2
 8003900:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	2200      	movs	r2, #0
 8003908:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	681a      	ldr	r2, [r3, #0]
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	f022 0201 	bic.w	r2, r2, #1
 8003918:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800391a:	683b      	ldr	r3, [r7, #0]
 800391c:	687a      	ldr	r2, [r7, #4]
 800391e:	68b9      	ldr	r1, [r7, #8]
 8003920:	68f8      	ldr	r0, [r7, #12]
 8003922:	f000 f970 	bl	8003c06 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800392a:	2b00      	cmp	r3, #0
 800392c:	d008      	beq.n	8003940 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	681a      	ldr	r2, [r3, #0]
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	f042 020e 	orr.w	r2, r2, #14
 800393c:	601a      	str	r2, [r3, #0]
 800393e:	e00f      	b.n	8003960 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	681a      	ldr	r2, [r3, #0]
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	f022 0204 	bic.w	r2, r2, #4
 800394e:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	681a      	ldr	r2, [r3, #0]
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	f042 020a 	orr.w	r2, r2, #10
 800395e:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800396a:	2b00      	cmp	r3, #0
 800396c:	d007      	beq.n	800397e <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003972:	681a      	ldr	r2, [r3, #0]
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003978:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800397c:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003982:	2b00      	cmp	r3, #0
 8003984:	d007      	beq.n	8003996 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800398a:	681a      	ldr	r2, [r3, #0]
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003990:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003994:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	681a      	ldr	r2, [r3, #0]
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	f042 0201 	orr.w	r2, r2, #1
 80039a4:	601a      	str	r2, [r3, #0]
 80039a6:	e005      	b.n	80039b4 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	2200      	movs	r2, #0
 80039ac:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 80039b0:	2302      	movs	r3, #2
 80039b2:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 80039b4:	7dfb      	ldrb	r3, [r7, #23]
}
 80039b6:	4618      	mov	r0, r3
 80039b8:	3718      	adds	r7, #24
 80039ba:	46bd      	mov	sp, r7
 80039bc:	bd80      	pop	{r7, pc}

080039be <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80039be:	b580      	push	{r7, lr}
 80039c0:	b084      	sub	sp, #16
 80039c2:	af00      	add	r7, sp, #0
 80039c4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80039c6:	2300      	movs	r3, #0
 80039c8:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80039d0:	b2db      	uxtb	r3, r3
 80039d2:	2b02      	cmp	r3, #2
 80039d4:	d00d      	beq.n	80039f2 <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	2204      	movs	r2, #4
 80039da:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	2201      	movs	r2, #1
 80039e0:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	2200      	movs	r2, #0
 80039e8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    status = HAL_ERROR;
 80039ec:	2301      	movs	r3, #1
 80039ee:	73fb      	strb	r3, [r7, #15]
 80039f0:	e047      	b.n	8003a82 <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	681a      	ldr	r2, [r3, #0]
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	f022 020e 	bic.w	r2, r2, #14
 8003a00:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	681a      	ldr	r2, [r3, #0]
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	f022 0201 	bic.w	r2, r2, #1
 8003a10:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003a16:	681a      	ldr	r2, [r3, #0]
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003a1c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003a20:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003a26:	f003 021f 	and.w	r2, r3, #31
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a2e:	2101      	movs	r1, #1
 8003a30:	fa01 f202 	lsl.w	r2, r1, r2
 8003a34:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003a3a:	687a      	ldr	r2, [r7, #4]
 8003a3c:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8003a3e:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	d00c      	beq.n	8003a62 <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003a4c:	681a      	ldr	r2, [r3, #0]
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003a52:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003a56:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003a5c:	687a      	ldr	r2, [r7, #4]
 8003a5e:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8003a60:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	2201      	movs	r2, #1
 8003a66:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	2200      	movs	r2, #0
 8003a6e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d003      	beq.n	8003a82 <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003a7e:	6878      	ldr	r0, [r7, #4]
 8003a80:	4798      	blx	r3
    }
  }
  return status;
 8003a82:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a84:	4618      	mov	r0, r3
 8003a86:	3710      	adds	r7, #16
 8003a88:	46bd      	mov	sp, r7
 8003a8a:	bd80      	pop	{r7, pc}

08003a8c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003a8c:	b580      	push	{r7, lr}
 8003a8e:	b084      	sub	sp, #16
 8003a90:	af00      	add	r7, sp, #0
 8003a92:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003aa8:	f003 031f 	and.w	r3, r3, #31
 8003aac:	2204      	movs	r2, #4
 8003aae:	409a      	lsls	r2, r3
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	4013      	ands	r3, r2
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	d026      	beq.n	8003b06 <HAL_DMA_IRQHandler+0x7a>
 8003ab8:	68bb      	ldr	r3, [r7, #8]
 8003aba:	f003 0304 	and.w	r3, r3, #4
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d021      	beq.n	8003b06 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	f003 0320 	and.w	r3, r3, #32
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d107      	bne.n	8003ae0 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	681a      	ldr	r2, [r3, #0]
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	f022 0204 	bic.w	r2, r2, #4
 8003ade:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003ae4:	f003 021f 	and.w	r2, r3, #31
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003aec:	2104      	movs	r1, #4
 8003aee:	fa01 f202 	lsl.w	r2, r1, r2
 8003af2:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d071      	beq.n	8003be0 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b00:	6878      	ldr	r0, [r7, #4]
 8003b02:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8003b04:	e06c      	b.n	8003be0 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003b0a:	f003 031f 	and.w	r3, r3, #31
 8003b0e:	2202      	movs	r2, #2
 8003b10:	409a      	lsls	r2, r3
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	4013      	ands	r3, r2
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d02e      	beq.n	8003b78 <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 8003b1a:	68bb      	ldr	r3, [r7, #8]
 8003b1c:	f003 0302 	and.w	r3, r3, #2
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d029      	beq.n	8003b78 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	f003 0320 	and.w	r3, r3, #32
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d10b      	bne.n	8003b4a <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	681a      	ldr	r2, [r3, #0]
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	f022 020a 	bic.w	r2, r2, #10
 8003b40:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	2201      	movs	r2, #1
 8003b46:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003b4e:	f003 021f 	and.w	r2, r3, #31
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b56:	2102      	movs	r1, #2
 8003b58:	fa01 f202 	lsl.w	r2, r1, r2
 8003b5c:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	2200      	movs	r2, #0
 8003b62:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d038      	beq.n	8003be0 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b72:	6878      	ldr	r0, [r7, #4]
 8003b74:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8003b76:	e033      	b.n	8003be0 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003b7c:	f003 031f 	and.w	r3, r3, #31
 8003b80:	2208      	movs	r2, #8
 8003b82:	409a      	lsls	r2, r3
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	4013      	ands	r3, r2
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	d02a      	beq.n	8003be2 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 8003b8c:	68bb      	ldr	r3, [r7, #8]
 8003b8e:	f003 0308 	and.w	r3, r3, #8
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d025      	beq.n	8003be2 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	681a      	ldr	r2, [r3, #0]
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	f022 020e 	bic.w	r2, r2, #14
 8003ba4:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003baa:	f003 021f 	and.w	r2, r3, #31
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003bb2:	2101      	movs	r1, #1
 8003bb4:	fa01 f202 	lsl.w	r2, r1, r2
 8003bb8:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	2201      	movs	r2, #1
 8003bbe:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	2201      	movs	r2, #1
 8003bc4:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	2200      	movs	r2, #0
 8003bcc:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d004      	beq.n	8003be2 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003bdc:	6878      	ldr	r0, [r7, #4]
 8003bde:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8003be0:	bf00      	nop
 8003be2:	bf00      	nop
}
 8003be4:	3710      	adds	r7, #16
 8003be6:	46bd      	mov	sp, r7
 8003be8:	bd80      	pop	{r7, pc}

08003bea <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8003bea:	b480      	push	{r7}
 8003bec:	b083      	sub	sp, #12
 8003bee:	af00      	add	r7, sp, #0
 8003bf0:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8003bf8:	b2db      	uxtb	r3, r3
}
 8003bfa:	4618      	mov	r0, r3
 8003bfc:	370c      	adds	r7, #12
 8003bfe:	46bd      	mov	sp, r7
 8003c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c04:	4770      	bx	lr

08003c06 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003c06:	b480      	push	{r7}
 8003c08:	b085      	sub	sp, #20
 8003c0a:	af00      	add	r7, sp, #0
 8003c0c:	60f8      	str	r0, [r7, #12]
 8003c0e:	60b9      	str	r1, [r7, #8]
 8003c10:	607a      	str	r2, [r7, #4]
 8003c12:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003c18:	68fa      	ldr	r2, [r7, #12]
 8003c1a:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8003c1c:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d004      	beq.n	8003c30 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003c2a:	68fa      	ldr	r2, [r7, #12]
 8003c2c:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8003c2e:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003c34:	f003 021f 	and.w	r2, r3, #31
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c3c:	2101      	movs	r1, #1
 8003c3e:	fa01 f202 	lsl.w	r2, r1, r2
 8003c42:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	683a      	ldr	r2, [r7, #0]
 8003c4a:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	689b      	ldr	r3, [r3, #8]
 8003c50:	2b10      	cmp	r3, #16
 8003c52:	d108      	bne.n	8003c66 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	687a      	ldr	r2, [r7, #4]
 8003c5a:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	68ba      	ldr	r2, [r7, #8]
 8003c62:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8003c64:	e007      	b.n	8003c76 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	68ba      	ldr	r2, [r7, #8]
 8003c6c:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	687a      	ldr	r2, [r7, #4]
 8003c74:	60da      	str	r2, [r3, #12]
}
 8003c76:	bf00      	nop
 8003c78:	3714      	adds	r7, #20
 8003c7a:	46bd      	mov	sp, r7
 8003c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c80:	4770      	bx	lr
	...

08003c84 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003c84:	b480      	push	{r7}
 8003c86:	b087      	sub	sp, #28
 8003c88:	af00      	add	r7, sp, #0
 8003c8a:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	461a      	mov	r2, r3
 8003c92:	4b16      	ldr	r3, [pc, #88]	@ (8003cec <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 8003c94:	429a      	cmp	r2, r3
 8003c96:	d802      	bhi.n	8003c9e <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 8003c98:	4b15      	ldr	r3, [pc, #84]	@ (8003cf0 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8003c9a:	617b      	str	r3, [r7, #20]
 8003c9c:	e001      	b.n	8003ca2 <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G414xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
#elif defined (STM32G431xx) || defined (STM32G441xx) || defined (STM32GBK1CB)
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
 8003c9e:	4b15      	ldr	r3, [pc, #84]	@ (8003cf4 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8003ca0:	617b      	str	r3, [r7, #20]
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 8003ca2:	697b      	ldr	r3, [r7, #20]
 8003ca4:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	b2db      	uxtb	r3, r3
 8003cac:	3b08      	subs	r3, #8
 8003cae:	4a12      	ldr	r2, [pc, #72]	@ (8003cf8 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8003cb0:	fba2 2303 	umull	r2, r3, r2, r3
 8003cb4:	091b      	lsrs	r3, r3, #4
 8003cb6:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003cbc:	089b      	lsrs	r3, r3, #2
 8003cbe:	009a      	lsls	r2, r3, #2
 8003cc0:	693b      	ldr	r3, [r7, #16]
 8003cc2:	4413      	add	r3, r2
 8003cc4:	461a      	mov	r2, r3
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	4a0b      	ldr	r2, [pc, #44]	@ (8003cfc <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8003cce:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	f003 031f 	and.w	r3, r3, #31
 8003cd6:	2201      	movs	r2, #1
 8003cd8:	409a      	lsls	r2, r3
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8003cde:	bf00      	nop
 8003ce0:	371c      	adds	r7, #28
 8003ce2:	46bd      	mov	sp, r7
 8003ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ce8:	4770      	bx	lr
 8003cea:	bf00      	nop
 8003cec:	40020407 	.word	0x40020407
 8003cf0:	40020800 	.word	0x40020800
 8003cf4:	40020820 	.word	0x40020820
 8003cf8:	cccccccd 	.word	0xcccccccd
 8003cfc:	40020880 	.word	0x40020880

08003d00 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003d00:	b480      	push	{r7}
 8003d02:	b085      	sub	sp, #20
 8003d04:	af00      	add	r7, sp, #0
 8003d06:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	685b      	ldr	r3, [r3, #4]
 8003d0c:	b2db      	uxtb	r3, r3
 8003d0e:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8003d10:	68fa      	ldr	r2, [r7, #12]
 8003d12:	4b0b      	ldr	r3, [pc, #44]	@ (8003d40 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8003d14:	4413      	add	r3, r2
 8003d16:	009b      	lsls	r3, r3, #2
 8003d18:	461a      	mov	r2, r3
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	4a08      	ldr	r2, [pc, #32]	@ (8003d44 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8003d22:	659a      	str	r2, [r3, #88]	@ 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	3b01      	subs	r3, #1
 8003d28:	f003 031f 	and.w	r3, r3, #31
 8003d2c:	2201      	movs	r2, #1
 8003d2e:	409a      	lsls	r2, r3
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 8003d34:	bf00      	nop
 8003d36:	3714      	adds	r7, #20
 8003d38:	46bd      	mov	sp, r7
 8003d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d3e:	4770      	bx	lr
 8003d40:	1000823f 	.word	0x1000823f
 8003d44:	40020940 	.word	0x40020940

08003d48 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 8003d48:	b580      	push	{r7, lr}
 8003d4a:	b084      	sub	sp, #16
 8003d4c:	af00      	add	r7, sp, #0
 8003d4e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d101      	bne.n	8003d5a <HAL_FDCAN_Init+0x12>
  {
    return HAL_ERROR;
 8003d56:	2301      	movs	r3, #1
 8003d58:	e147      	b.n	8003fea <HAL_FDCAN_Init+0x2a2>

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8003d60:	b2db      	uxtb	r3, r3
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d106      	bne.n	8003d74 <HAL_FDCAN_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	2200      	movs	r2, #0
 8003d6a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 8003d6e:	6878      	ldr	r0, [r7, #4]
 8003d70:	f7fd fcd4 	bl	800171c <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	699a      	ldr	r2, [r3, #24]
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	f022 0210 	bic.w	r2, r2, #16
 8003d82:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003d84:	f7fe f85e 	bl	8001e44 <HAL_GetTick>
 8003d88:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8003d8a:	e012      	b.n	8003db2 <HAL_FDCAN_Init+0x6a>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8003d8c:	f7fe f85a 	bl	8001e44 <HAL_GetTick>
 8003d90:	4602      	mov	r2, r0
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	1ad3      	subs	r3, r2, r3
 8003d96:	2b0a      	cmp	r3, #10
 8003d98:	d90b      	bls.n	8003db2 <HAL_FDCAN_Init+0x6a>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003d9e:	f043 0201 	orr.w	r2, r3, #1
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	2203      	movs	r2, #3
 8003daa:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 8003dae:	2301      	movs	r3, #1
 8003db0:	e11b      	b.n	8003fea <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	699b      	ldr	r3, [r3, #24]
 8003db8:	f003 0308 	and.w	r3, r3, #8
 8003dbc:	2b08      	cmp	r3, #8
 8003dbe:	d0e5      	beq.n	8003d8c <HAL_FDCAN_Init+0x44>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	699a      	ldr	r2, [r3, #24]
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	f042 0201 	orr.w	r2, r2, #1
 8003dce:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003dd0:	f7fe f838 	bl	8001e44 <HAL_GetTick>
 8003dd4:	60f8      	str	r0, [r7, #12]

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8003dd6:	e012      	b.n	8003dfe <HAL_FDCAN_Init+0xb6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8003dd8:	f7fe f834 	bl	8001e44 <HAL_GetTick>
 8003ddc:	4602      	mov	r2, r0
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	1ad3      	subs	r3, r2, r3
 8003de2:	2b0a      	cmp	r3, #10
 8003de4:	d90b      	bls.n	8003dfe <HAL_FDCAN_Init+0xb6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003dea:	f043 0201 	orr.w	r2, r3, #1
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	2203      	movs	r2, #3
 8003df6:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 8003dfa:	2301      	movs	r3, #1
 8003dfc:	e0f5      	b.n	8003fea <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	699b      	ldr	r3, [r3, #24]
 8003e04:	f003 0301 	and.w	r3, r3, #1
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	d0e5      	beq.n	8003dd8 <HAL_FDCAN_Init+0x90>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	699a      	ldr	r2, [r3, #24]
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	f042 0202 	orr.w	r2, r2, #2
 8003e1a:	619a      	str	r2, [r3, #24]

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	4a74      	ldr	r2, [pc, #464]	@ (8003ff4 <HAL_FDCAN_Init+0x2ac>)
 8003e22:	4293      	cmp	r3, r2
 8003e24:	d103      	bne.n	8003e2e <HAL_FDCAN_Init+0xe6>
  {
    /* Configure Clock divider */
    FDCAN_CONFIG->CKDIV = hfdcan->Init.ClockDivider;
 8003e26:	4a74      	ldr	r2, [pc, #464]	@ (8003ff8 <HAL_FDCAN_Init+0x2b0>)
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	685b      	ldr	r3, [r3, #4]
 8003e2c:	6013      	str	r3, [r2, #0]
  }

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	7c1b      	ldrb	r3, [r3, #16]
 8003e32:	2b01      	cmp	r3, #1
 8003e34:	d108      	bne.n	8003e48 <HAL_FDCAN_Init+0x100>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	699a      	ldr	r2, [r3, #24]
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003e44:	619a      	str	r2, [r3, #24]
 8003e46:	e007      	b.n	8003e58 <HAL_FDCAN_Init+0x110>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	699a      	ldr	r2, [r3, #24]
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003e56:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	7c5b      	ldrb	r3, [r3, #17]
 8003e5c:	2b01      	cmp	r3, #1
 8003e5e:	d108      	bne.n	8003e72 <HAL_FDCAN_Init+0x12a>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	699a      	ldr	r2, [r3, #24]
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003e6e:	619a      	str	r2, [r3, #24]
 8003e70:	e007      	b.n	8003e82 <HAL_FDCAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	699a      	ldr	r2, [r3, #24]
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8003e80:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	7c9b      	ldrb	r3, [r3, #18]
 8003e86:	2b01      	cmp	r3, #1
 8003e88:	d108      	bne.n	8003e9c <HAL_FDCAN_Init+0x154>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	699a      	ldr	r2, [r3, #24]
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8003e98:	619a      	str	r2, [r3, #24]
 8003e9a:	e007      	b.n	8003eac <HAL_FDCAN_Init+0x164>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	699a      	ldr	r2, [r3, #24]
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8003eaa:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	699b      	ldr	r3, [r3, #24]
 8003eb2:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	689a      	ldr	r2, [r3, #8]
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	430a      	orrs	r2, r1
 8003ec0:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	699a      	ldr	r2, [r3, #24]
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	f022 02a4 	bic.w	r2, r2, #164	@ 0xa4
 8003ed0:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	691a      	ldr	r2, [r3, #16]
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	f022 0210 	bic.w	r2, r2, #16
 8003ee0:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	68db      	ldr	r3, [r3, #12]
 8003ee6:	2b01      	cmp	r3, #1
 8003ee8:	d108      	bne.n	8003efc <HAL_FDCAN_Init+0x1b4>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	699a      	ldr	r2, [r3, #24]
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	f042 0204 	orr.w	r2, r2, #4
 8003ef8:	619a      	str	r2, [r3, #24]
 8003efa:	e02c      	b.n	8003f56 <HAL_FDCAN_Init+0x20e>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	68db      	ldr	r3, [r3, #12]
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d028      	beq.n	8003f56 <HAL_FDCAN_Init+0x20e>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	68db      	ldr	r3, [r3, #12]
 8003f08:	2b02      	cmp	r3, #2
 8003f0a:	d01c      	beq.n	8003f46 <HAL_FDCAN_Init+0x1fe>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	699a      	ldr	r2, [r3, #24]
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8003f1a:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	691a      	ldr	r2, [r3, #16]
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	f042 0210 	orr.w	r2, r2, #16
 8003f2a:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	68db      	ldr	r3, [r3, #12]
 8003f30:	2b03      	cmp	r3, #3
 8003f32:	d110      	bne.n	8003f56 <HAL_FDCAN_Init+0x20e>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	699a      	ldr	r2, [r3, #24]
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	f042 0220 	orr.w	r2, r2, #32
 8003f42:	619a      	str	r2, [r3, #24]
 8003f44:	e007      	b.n	8003f56 <HAL_FDCAN_Init+0x20e>
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	699a      	ldr	r2, [r3, #24]
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	f042 0220 	orr.w	r2, r2, #32
 8003f54:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	699b      	ldr	r3, [r3, #24]
 8003f5a:	3b01      	subs	r3, #1
 8003f5c:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	69db      	ldr	r3, [r3, #28]
 8003f62:	3b01      	subs	r3, #1
 8003f64:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8003f66:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	6a1b      	ldr	r3, [r3, #32]
 8003f6c:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8003f6e:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	695b      	ldr	r3, [r3, #20]
 8003f76:	3b01      	subs	r3, #1
 8003f78:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8003f7e:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8003f80:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	689b      	ldr	r3, [r3, #8]
 8003f86:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003f8a:	d115      	bne.n	8003fb8 <HAL_FDCAN_Init+0x270>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f90:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f96:	3b01      	subs	r3, #1
 8003f98:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8003f9a:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003fa0:	3b01      	subs	r3, #1
 8003fa2:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8003fa4:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003fac:	3b01      	subs	r3, #1
 8003fae:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8003fb4:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8003fb6:	60da      	str	r2, [r3, #12]
  }

  /* Select between Tx FIFO and Tx Queue operation modes */
  SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	f8d3 10c0 	ldr.w	r1, [r3, #192]	@ 0xc0
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	430a      	orrs	r2, r1
 8003fca:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0

  /* Calculate each RAM block address */
  FDCAN_CalcultateRamBlockAddresses(hfdcan);
 8003fce:	6878      	ldr	r0, [r7, #4]
 8003fd0:	f000 f814 	bl	8003ffc <FDCAN_CalcultateRamBlockAddresses>

  /* Initialize the Latest Tx request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	2200      	movs	r2, #0
 8003fd8:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	2200      	movs	r2, #0
 8003fde:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	2201      	movs	r2, #1
 8003fe4:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Return function status */
  return HAL_OK;
 8003fe8:	2300      	movs	r3, #0
}
 8003fea:	4618      	mov	r0, r3
 8003fec:	3710      	adds	r7, #16
 8003fee:	46bd      	mov	sp, r7
 8003ff0:	bd80      	pop	{r7, pc}
 8003ff2:	bf00      	nop
 8003ff4:	40006400 	.word	0x40006400
 8003ff8:	40006500 	.word	0x40006500

08003ffc <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval none
 */
static void FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 8003ffc:	b480      	push	{r7}
 8003ffe:	b085      	sub	sp, #20
 8004000:	af00      	add	r7, sp, #0
 8004002:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t SramCanInstanceBase = SRAMCAN_BASE;
 8004004:	4b27      	ldr	r3, [pc, #156]	@ (80040a4 <FDCAN_CalcultateRamBlockAddresses+0xa8>)
 8004006:	60bb      	str	r3, [r7, #8]
    SramCanInstanceBase += SRAMCAN_SIZE * 2U;
  }
#endif /* FDCAN3 */

  /* Standard filter list start address */
  hfdcan->msgRam.StandardFilterSA = SramCanInstanceBase + SRAMCAN_FLSSA;
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	68ba      	ldr	r2, [r7, #8]
 800400c:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_RXGFC_LSS_Pos));
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004016:	f423 11f8 	bic.w	r1, r3, #2031616	@ 0x1f0000
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800401e:	041a      	lsls	r2, r3, #16
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	430a      	orrs	r2, r1
 8004026:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Extended filter list start address */
  hfdcan->msgRam.ExtendedFilterSA = SramCanInstanceBase + SRAMCAN_FLESA;
 800402a:	68bb      	ldr	r3, [r7, #8]
 800402c:	f103 0270 	add.w	r2, r3, #112	@ 0x70
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_RXGFC_LSE_Pos));
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800403c:	f023 6170 	bic.w	r1, r3, #251658240	@ 0xf000000
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004044:	061a      	lsls	r2, r3, #24
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	430a      	orrs	r2, r1
 800404c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Rx FIFO 0 start address */
  hfdcan->msgRam.RxFIFO0SA = SramCanInstanceBase + SRAMCAN_RF0SA;
 8004050:	68bb      	ldr	r3, [r7, #8]
 8004052:	f103 02b0 	add.w	r2, r3, #176	@ 0xb0
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Rx FIFO 1 start address */
  hfdcan->msgRam.RxFIFO1SA = SramCanInstanceBase + SRAMCAN_RF1SA;
 800405a:	68bb      	ldr	r3, [r7, #8]
 800405c:	f503 72c4 	add.w	r2, r3, #392	@ 0x188
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Tx event FIFO start address */
  hfdcan->msgRam.TxEventFIFOSA = SramCanInstanceBase + SRAMCAN_TEFSA;
 8004064:	68bb      	ldr	r3, [r7, #8]
 8004066:	f503 7218 	add.w	r2, r3, #608	@ 0x260
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Tx FIFO/queue start address */
  hfdcan->msgRam.TxFIFOQSA = SramCanInstanceBase + SRAMCAN_TFQSA;
 800406e:	68bb      	ldr	r3, [r7, #8]
 8004070:	f503 721e 	add.w	r2, r3, #632	@ 0x278
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Flush the allocated Message RAM area */
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8004078:	68bb      	ldr	r3, [r7, #8]
 800407a:	60fb      	str	r3, [r7, #12]
 800407c:	e005      	b.n	800408a <FDCAN_CalcultateRamBlockAddresses+0x8e>
  {
    *(uint32_t *)(RAMcounter) = 0x00000000U;
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	2200      	movs	r2, #0
 8004082:	601a      	str	r2, [r3, #0]
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	3304      	adds	r3, #4
 8004088:	60fb      	str	r3, [r7, #12]
 800408a:	68bb      	ldr	r3, [r7, #8]
 800408c:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 8004090:	68fa      	ldr	r2, [r7, #12]
 8004092:	429a      	cmp	r2, r3
 8004094:	d3f3      	bcc.n	800407e <FDCAN_CalcultateRamBlockAddresses+0x82>
  }
}
 8004096:	bf00      	nop
 8004098:	bf00      	nop
 800409a:	3714      	adds	r7, #20
 800409c:	46bd      	mov	sp, r7
 800409e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040a2:	4770      	bx	lr
 80040a4:	4000a400 	.word	0x4000a400

080040a8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80040a8:	b480      	push	{r7}
 80040aa:	b087      	sub	sp, #28
 80040ac:	af00      	add	r7, sp, #0
 80040ae:	6078      	str	r0, [r7, #4]
 80040b0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80040b2:	2300      	movs	r3, #0
 80040b4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 80040b6:	e15a      	b.n	800436e <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80040b8:	683b      	ldr	r3, [r7, #0]
 80040ba:	681a      	ldr	r2, [r3, #0]
 80040bc:	2101      	movs	r1, #1
 80040be:	697b      	ldr	r3, [r7, #20]
 80040c0:	fa01 f303 	lsl.w	r3, r1, r3
 80040c4:	4013      	ands	r3, r2
 80040c6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	f000 814c 	beq.w	8004368 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80040d0:	683b      	ldr	r3, [r7, #0]
 80040d2:	685b      	ldr	r3, [r3, #4]
 80040d4:	f003 0303 	and.w	r3, r3, #3
 80040d8:	2b01      	cmp	r3, #1
 80040da:	d005      	beq.n	80040e8 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80040dc:	683b      	ldr	r3, [r7, #0]
 80040de:	685b      	ldr	r3, [r3, #4]
 80040e0:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80040e4:	2b02      	cmp	r3, #2
 80040e6:	d130      	bne.n	800414a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	689b      	ldr	r3, [r3, #8]
 80040ec:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80040ee:	697b      	ldr	r3, [r7, #20]
 80040f0:	005b      	lsls	r3, r3, #1
 80040f2:	2203      	movs	r2, #3
 80040f4:	fa02 f303 	lsl.w	r3, r2, r3
 80040f8:	43db      	mvns	r3, r3
 80040fa:	693a      	ldr	r2, [r7, #16]
 80040fc:	4013      	ands	r3, r2
 80040fe:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004100:	683b      	ldr	r3, [r7, #0]
 8004102:	68da      	ldr	r2, [r3, #12]
 8004104:	697b      	ldr	r3, [r7, #20]
 8004106:	005b      	lsls	r3, r3, #1
 8004108:	fa02 f303 	lsl.w	r3, r2, r3
 800410c:	693a      	ldr	r2, [r7, #16]
 800410e:	4313      	orrs	r3, r2
 8004110:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	693a      	ldr	r2, [r7, #16]
 8004116:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	685b      	ldr	r3, [r3, #4]
 800411c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800411e:	2201      	movs	r2, #1
 8004120:	697b      	ldr	r3, [r7, #20]
 8004122:	fa02 f303 	lsl.w	r3, r2, r3
 8004126:	43db      	mvns	r3, r3
 8004128:	693a      	ldr	r2, [r7, #16]
 800412a:	4013      	ands	r3, r2
 800412c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800412e:	683b      	ldr	r3, [r7, #0]
 8004130:	685b      	ldr	r3, [r3, #4]
 8004132:	091b      	lsrs	r3, r3, #4
 8004134:	f003 0201 	and.w	r2, r3, #1
 8004138:	697b      	ldr	r3, [r7, #20]
 800413a:	fa02 f303 	lsl.w	r3, r2, r3
 800413e:	693a      	ldr	r2, [r7, #16]
 8004140:	4313      	orrs	r3, r2
 8004142:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	693a      	ldr	r2, [r7, #16]
 8004148:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800414a:	683b      	ldr	r3, [r7, #0]
 800414c:	685b      	ldr	r3, [r3, #4]
 800414e:	f003 0303 	and.w	r3, r3, #3
 8004152:	2b03      	cmp	r3, #3
 8004154:	d017      	beq.n	8004186 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	68db      	ldr	r3, [r3, #12]
 800415a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800415c:	697b      	ldr	r3, [r7, #20]
 800415e:	005b      	lsls	r3, r3, #1
 8004160:	2203      	movs	r2, #3
 8004162:	fa02 f303 	lsl.w	r3, r2, r3
 8004166:	43db      	mvns	r3, r3
 8004168:	693a      	ldr	r2, [r7, #16]
 800416a:	4013      	ands	r3, r2
 800416c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800416e:	683b      	ldr	r3, [r7, #0]
 8004170:	689a      	ldr	r2, [r3, #8]
 8004172:	697b      	ldr	r3, [r7, #20]
 8004174:	005b      	lsls	r3, r3, #1
 8004176:	fa02 f303 	lsl.w	r3, r2, r3
 800417a:	693a      	ldr	r2, [r7, #16]
 800417c:	4313      	orrs	r3, r2
 800417e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	693a      	ldr	r2, [r7, #16]
 8004184:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004186:	683b      	ldr	r3, [r7, #0]
 8004188:	685b      	ldr	r3, [r3, #4]
 800418a:	f003 0303 	and.w	r3, r3, #3
 800418e:	2b02      	cmp	r3, #2
 8004190:	d123      	bne.n	80041da <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004192:	697b      	ldr	r3, [r7, #20]
 8004194:	08da      	lsrs	r2, r3, #3
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	3208      	adds	r2, #8
 800419a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800419e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80041a0:	697b      	ldr	r3, [r7, #20]
 80041a2:	f003 0307 	and.w	r3, r3, #7
 80041a6:	009b      	lsls	r3, r3, #2
 80041a8:	220f      	movs	r2, #15
 80041aa:	fa02 f303 	lsl.w	r3, r2, r3
 80041ae:	43db      	mvns	r3, r3
 80041b0:	693a      	ldr	r2, [r7, #16]
 80041b2:	4013      	ands	r3, r2
 80041b4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80041b6:	683b      	ldr	r3, [r7, #0]
 80041b8:	691a      	ldr	r2, [r3, #16]
 80041ba:	697b      	ldr	r3, [r7, #20]
 80041bc:	f003 0307 	and.w	r3, r3, #7
 80041c0:	009b      	lsls	r3, r3, #2
 80041c2:	fa02 f303 	lsl.w	r3, r2, r3
 80041c6:	693a      	ldr	r2, [r7, #16]
 80041c8:	4313      	orrs	r3, r2
 80041ca:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80041cc:	697b      	ldr	r3, [r7, #20]
 80041ce:	08da      	lsrs	r2, r3, #3
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	3208      	adds	r2, #8
 80041d4:	6939      	ldr	r1, [r7, #16]
 80041d6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80041e0:	697b      	ldr	r3, [r7, #20]
 80041e2:	005b      	lsls	r3, r3, #1
 80041e4:	2203      	movs	r2, #3
 80041e6:	fa02 f303 	lsl.w	r3, r2, r3
 80041ea:	43db      	mvns	r3, r3
 80041ec:	693a      	ldr	r2, [r7, #16]
 80041ee:	4013      	ands	r3, r2
 80041f0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80041f2:	683b      	ldr	r3, [r7, #0]
 80041f4:	685b      	ldr	r3, [r3, #4]
 80041f6:	f003 0203 	and.w	r2, r3, #3
 80041fa:	697b      	ldr	r3, [r7, #20]
 80041fc:	005b      	lsls	r3, r3, #1
 80041fe:	fa02 f303 	lsl.w	r3, r2, r3
 8004202:	693a      	ldr	r2, [r7, #16]
 8004204:	4313      	orrs	r3, r2
 8004206:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	693a      	ldr	r2, [r7, #16]
 800420c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800420e:	683b      	ldr	r3, [r7, #0]
 8004210:	685b      	ldr	r3, [r3, #4]
 8004212:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004216:	2b00      	cmp	r3, #0
 8004218:	f000 80a6 	beq.w	8004368 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800421c:	4b5b      	ldr	r3, [pc, #364]	@ (800438c <HAL_GPIO_Init+0x2e4>)
 800421e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004220:	4a5a      	ldr	r2, [pc, #360]	@ (800438c <HAL_GPIO_Init+0x2e4>)
 8004222:	f043 0301 	orr.w	r3, r3, #1
 8004226:	6613      	str	r3, [r2, #96]	@ 0x60
 8004228:	4b58      	ldr	r3, [pc, #352]	@ (800438c <HAL_GPIO_Init+0x2e4>)
 800422a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800422c:	f003 0301 	and.w	r3, r3, #1
 8004230:	60bb      	str	r3, [r7, #8]
 8004232:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004234:	4a56      	ldr	r2, [pc, #344]	@ (8004390 <HAL_GPIO_Init+0x2e8>)
 8004236:	697b      	ldr	r3, [r7, #20]
 8004238:	089b      	lsrs	r3, r3, #2
 800423a:	3302      	adds	r3, #2
 800423c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004240:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8004242:	697b      	ldr	r3, [r7, #20]
 8004244:	f003 0303 	and.w	r3, r3, #3
 8004248:	009b      	lsls	r3, r3, #2
 800424a:	220f      	movs	r2, #15
 800424c:	fa02 f303 	lsl.w	r3, r2, r3
 8004250:	43db      	mvns	r3, r3
 8004252:	693a      	ldr	r2, [r7, #16]
 8004254:	4013      	ands	r3, r2
 8004256:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 800425e:	d01f      	beq.n	80042a0 <HAL_GPIO_Init+0x1f8>
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	4a4c      	ldr	r2, [pc, #304]	@ (8004394 <HAL_GPIO_Init+0x2ec>)
 8004264:	4293      	cmp	r3, r2
 8004266:	d019      	beq.n	800429c <HAL_GPIO_Init+0x1f4>
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	4a4b      	ldr	r2, [pc, #300]	@ (8004398 <HAL_GPIO_Init+0x2f0>)
 800426c:	4293      	cmp	r3, r2
 800426e:	d013      	beq.n	8004298 <HAL_GPIO_Init+0x1f0>
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	4a4a      	ldr	r2, [pc, #296]	@ (800439c <HAL_GPIO_Init+0x2f4>)
 8004274:	4293      	cmp	r3, r2
 8004276:	d00d      	beq.n	8004294 <HAL_GPIO_Init+0x1ec>
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	4a49      	ldr	r2, [pc, #292]	@ (80043a0 <HAL_GPIO_Init+0x2f8>)
 800427c:	4293      	cmp	r3, r2
 800427e:	d007      	beq.n	8004290 <HAL_GPIO_Init+0x1e8>
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	4a48      	ldr	r2, [pc, #288]	@ (80043a4 <HAL_GPIO_Init+0x2fc>)
 8004284:	4293      	cmp	r3, r2
 8004286:	d101      	bne.n	800428c <HAL_GPIO_Init+0x1e4>
 8004288:	2305      	movs	r3, #5
 800428a:	e00a      	b.n	80042a2 <HAL_GPIO_Init+0x1fa>
 800428c:	2306      	movs	r3, #6
 800428e:	e008      	b.n	80042a2 <HAL_GPIO_Init+0x1fa>
 8004290:	2304      	movs	r3, #4
 8004292:	e006      	b.n	80042a2 <HAL_GPIO_Init+0x1fa>
 8004294:	2303      	movs	r3, #3
 8004296:	e004      	b.n	80042a2 <HAL_GPIO_Init+0x1fa>
 8004298:	2302      	movs	r3, #2
 800429a:	e002      	b.n	80042a2 <HAL_GPIO_Init+0x1fa>
 800429c:	2301      	movs	r3, #1
 800429e:	e000      	b.n	80042a2 <HAL_GPIO_Init+0x1fa>
 80042a0:	2300      	movs	r3, #0
 80042a2:	697a      	ldr	r2, [r7, #20]
 80042a4:	f002 0203 	and.w	r2, r2, #3
 80042a8:	0092      	lsls	r2, r2, #2
 80042aa:	4093      	lsls	r3, r2
 80042ac:	693a      	ldr	r2, [r7, #16]
 80042ae:	4313      	orrs	r3, r2
 80042b0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80042b2:	4937      	ldr	r1, [pc, #220]	@ (8004390 <HAL_GPIO_Init+0x2e8>)
 80042b4:	697b      	ldr	r3, [r7, #20]
 80042b6:	089b      	lsrs	r3, r3, #2
 80042b8:	3302      	adds	r3, #2
 80042ba:	693a      	ldr	r2, [r7, #16]
 80042bc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80042c0:	4b39      	ldr	r3, [pc, #228]	@ (80043a8 <HAL_GPIO_Init+0x300>)
 80042c2:	689b      	ldr	r3, [r3, #8]
 80042c4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	43db      	mvns	r3, r3
 80042ca:	693a      	ldr	r2, [r7, #16]
 80042cc:	4013      	ands	r3, r2
 80042ce:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80042d0:	683b      	ldr	r3, [r7, #0]
 80042d2:	685b      	ldr	r3, [r3, #4]
 80042d4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80042d8:	2b00      	cmp	r3, #0
 80042da:	d003      	beq.n	80042e4 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 80042dc:	693a      	ldr	r2, [r7, #16]
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	4313      	orrs	r3, r2
 80042e2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80042e4:	4a30      	ldr	r2, [pc, #192]	@ (80043a8 <HAL_GPIO_Init+0x300>)
 80042e6:	693b      	ldr	r3, [r7, #16]
 80042e8:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80042ea:	4b2f      	ldr	r3, [pc, #188]	@ (80043a8 <HAL_GPIO_Init+0x300>)
 80042ec:	68db      	ldr	r3, [r3, #12]
 80042ee:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	43db      	mvns	r3, r3
 80042f4:	693a      	ldr	r2, [r7, #16]
 80042f6:	4013      	ands	r3, r2
 80042f8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80042fa:	683b      	ldr	r3, [r7, #0]
 80042fc:	685b      	ldr	r3, [r3, #4]
 80042fe:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004302:	2b00      	cmp	r3, #0
 8004304:	d003      	beq.n	800430e <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8004306:	693a      	ldr	r2, [r7, #16]
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	4313      	orrs	r3, r2
 800430c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800430e:	4a26      	ldr	r2, [pc, #152]	@ (80043a8 <HAL_GPIO_Init+0x300>)
 8004310:	693b      	ldr	r3, [r7, #16]
 8004312:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8004314:	4b24      	ldr	r3, [pc, #144]	@ (80043a8 <HAL_GPIO_Init+0x300>)
 8004316:	685b      	ldr	r3, [r3, #4]
 8004318:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	43db      	mvns	r3, r3
 800431e:	693a      	ldr	r2, [r7, #16]
 8004320:	4013      	ands	r3, r2
 8004322:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004324:	683b      	ldr	r3, [r7, #0]
 8004326:	685b      	ldr	r3, [r3, #4]
 8004328:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800432c:	2b00      	cmp	r3, #0
 800432e:	d003      	beq.n	8004338 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8004330:	693a      	ldr	r2, [r7, #16]
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	4313      	orrs	r3, r2
 8004336:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8004338:	4a1b      	ldr	r2, [pc, #108]	@ (80043a8 <HAL_GPIO_Init+0x300>)
 800433a:	693b      	ldr	r3, [r7, #16]
 800433c:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800433e:	4b1a      	ldr	r3, [pc, #104]	@ (80043a8 <HAL_GPIO_Init+0x300>)
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	43db      	mvns	r3, r3
 8004348:	693a      	ldr	r2, [r7, #16]
 800434a:	4013      	ands	r3, r2
 800434c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800434e:	683b      	ldr	r3, [r7, #0]
 8004350:	685b      	ldr	r3, [r3, #4]
 8004352:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004356:	2b00      	cmp	r3, #0
 8004358:	d003      	beq.n	8004362 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 800435a:	693a      	ldr	r2, [r7, #16]
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	4313      	orrs	r3, r2
 8004360:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8004362:	4a11      	ldr	r2, [pc, #68]	@ (80043a8 <HAL_GPIO_Init+0x300>)
 8004364:	693b      	ldr	r3, [r7, #16]
 8004366:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8004368:	697b      	ldr	r3, [r7, #20]
 800436a:	3301      	adds	r3, #1
 800436c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 800436e:	683b      	ldr	r3, [r7, #0]
 8004370:	681a      	ldr	r2, [r3, #0]
 8004372:	697b      	ldr	r3, [r7, #20]
 8004374:	fa22 f303 	lsr.w	r3, r2, r3
 8004378:	2b00      	cmp	r3, #0
 800437a:	f47f ae9d 	bne.w	80040b8 <HAL_GPIO_Init+0x10>
  }
}
 800437e:	bf00      	nop
 8004380:	bf00      	nop
 8004382:	371c      	adds	r7, #28
 8004384:	46bd      	mov	sp, r7
 8004386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800438a:	4770      	bx	lr
 800438c:	40021000 	.word	0x40021000
 8004390:	40010000 	.word	0x40010000
 8004394:	48000400 	.word	0x48000400
 8004398:	48000800 	.word	0x48000800
 800439c:	48000c00 	.word	0x48000c00
 80043a0:	48001000 	.word	0x48001000
 80043a4:	48001400 	.word	0x48001400
 80043a8:	40010400 	.word	0x40010400

080043ac <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80043ac:	b480      	push	{r7}
 80043ae:	b083      	sub	sp, #12
 80043b0:	af00      	add	r7, sp, #0
 80043b2:	6078      	str	r0, [r7, #4]
 80043b4:	460b      	mov	r3, r1
 80043b6:	807b      	strh	r3, [r7, #2]
 80043b8:	4613      	mov	r3, r2
 80043ba:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80043bc:	787b      	ldrb	r3, [r7, #1]
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d003      	beq.n	80043ca <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80043c2:	887a      	ldrh	r2, [r7, #2]
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80043c8:	e002      	b.n	80043d0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80043ca:	887a      	ldrh	r2, [r7, #2]
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80043d0:	bf00      	nop
 80043d2:	370c      	adds	r7, #12
 80043d4:	46bd      	mov	sp, r7
 80043d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043da:	4770      	bx	lr

080043dc <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80043dc:	b580      	push	{r7, lr}
 80043de:	b082      	sub	sp, #8
 80043e0:	af00      	add	r7, sp, #0
 80043e2:	4603      	mov	r3, r0
 80043e4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80043e6:	4b08      	ldr	r3, [pc, #32]	@ (8004408 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80043e8:	695a      	ldr	r2, [r3, #20]
 80043ea:	88fb      	ldrh	r3, [r7, #6]
 80043ec:	4013      	ands	r3, r2
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d006      	beq.n	8004400 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80043f2:	4a05      	ldr	r2, [pc, #20]	@ (8004408 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80043f4:	88fb      	ldrh	r3, [r7, #6]
 80043f6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80043f8:	88fb      	ldrh	r3, [r7, #6]
 80043fa:	4618      	mov	r0, r3
 80043fc:	f000 f806 	bl	800440c <HAL_GPIO_EXTI_Callback>
  }
}
 8004400:	bf00      	nop
 8004402:	3708      	adds	r7, #8
 8004404:	46bd      	mov	sp, r7
 8004406:	bd80      	pop	{r7, pc}
 8004408:	40010400 	.word	0x40010400

0800440c <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800440c:	b480      	push	{r7}
 800440e:	b083      	sub	sp, #12
 8004410:	af00      	add	r7, sp, #0
 8004412:	4603      	mov	r3, r0
 8004414:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8004416:	bf00      	nop
 8004418:	370c      	adds	r7, #12
 800441a:	46bd      	mov	sp, r7
 800441c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004420:	4770      	bx	lr

08004422 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004422:	b580      	push	{r7, lr}
 8004424:	b082      	sub	sp, #8
 8004426:	af00      	add	r7, sp, #0
 8004428:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	2b00      	cmp	r3, #0
 800442e:	d101      	bne.n	8004434 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004430:	2301      	movs	r3, #1
 8004432:	e08d      	b.n	8004550 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800443a:	b2db      	uxtb	r3, r3
 800443c:	2b00      	cmp	r3, #0
 800443e:	d106      	bne.n	800444e <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	2200      	movs	r2, #0
 8004444:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8004448:	6878      	ldr	r0, [r7, #4]
 800444a:	f7fd f9e1 	bl	8001810 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	2224      	movs	r2, #36	@ 0x24
 8004452:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	681a      	ldr	r2, [r3, #0]
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	f022 0201 	bic.w	r2, r2, #1
 8004464:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	685a      	ldr	r2, [r3, #4]
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8004472:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	689a      	ldr	r2, [r3, #8]
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8004482:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	68db      	ldr	r3, [r3, #12]
 8004488:	2b01      	cmp	r3, #1
 800448a:	d107      	bne.n	800449c <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	689a      	ldr	r2, [r3, #8]
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004498:	609a      	str	r2, [r3, #8]
 800449a:	e006      	b.n	80044aa <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	689a      	ldr	r2, [r3, #8]
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 80044a8:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	68db      	ldr	r3, [r3, #12]
 80044ae:	2b02      	cmp	r3, #2
 80044b0:	d108      	bne.n	80044c4 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	685a      	ldr	r2, [r3, #4]
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80044c0:	605a      	str	r2, [r3, #4]
 80044c2:	e007      	b.n	80044d4 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	685a      	ldr	r2, [r3, #4]
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80044d2:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	685b      	ldr	r3, [r3, #4]
 80044da:	687a      	ldr	r2, [r7, #4]
 80044dc:	6812      	ldr	r2, [r2, #0]
 80044de:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80044e2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80044e6:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	68da      	ldr	r2, [r3, #12]
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80044f6:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	691a      	ldr	r2, [r3, #16]
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	695b      	ldr	r3, [r3, #20]
 8004500:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	699b      	ldr	r3, [r3, #24]
 8004508:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	430a      	orrs	r2, r1
 8004510:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	69d9      	ldr	r1, [r3, #28]
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	6a1a      	ldr	r2, [r3, #32]
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	430a      	orrs	r2, r1
 8004520:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	681a      	ldr	r2, [r3, #0]
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	f042 0201 	orr.w	r2, r2, #1
 8004530:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	2200      	movs	r2, #0
 8004536:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	2220      	movs	r2, #32
 800453c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	2200      	movs	r2, #0
 8004544:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	2200      	movs	r2, #0
 800454a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 800454e:	2300      	movs	r3, #0
}
 8004550:	4618      	mov	r0, r3
 8004552:	3708      	adds	r7, #8
 8004554:	46bd      	mov	sp, r7
 8004556:	bd80      	pop	{r7, pc}

08004558 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c) /* Derogation MISRAC2012-Rule-8.13 */
{
 8004558:	b580      	push	{r7, lr}
 800455a:	b084      	sub	sp, #16
 800455c:	af00      	add	r7, sp, #0
 800455e:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	699b      	ldr	r3, [r3, #24]
 8004566:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004574:	2b00      	cmp	r3, #0
 8004576:	d005      	beq.n	8004584 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800457c:	68ba      	ldr	r2, [r7, #8]
 800457e:	68f9      	ldr	r1, [r7, #12]
 8004580:	6878      	ldr	r0, [r7, #4]
 8004582:	4798      	blx	r3
  }
}
 8004584:	bf00      	nop
 8004586:	3710      	adds	r7, #16
 8004588:	46bd      	mov	sp, r7
 800458a:	bd80      	pop	{r7, pc}

0800458c <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 800458c:	b580      	push	{r7, lr}
 800458e:	b086      	sub	sp, #24
 8004590:	af00      	add	r7, sp, #0
 8004592:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	699b      	ldr	r3, [r3, #24]
 800459a:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 80045a4:	697b      	ldr	r3, [r7, #20]
 80045a6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	d00f      	beq.n	80045ce <HAL_I2C_ER_IRQHandler+0x42>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 80045ae:	693b      	ldr	r3, [r7, #16]
 80045b0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	d00a      	beq.n	80045ce <HAL_I2C_ER_IRQHandler+0x42>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80045bc:	f043 0201 	orr.w	r2, r3, #1
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80045cc:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 80045ce:	697b      	ldr	r3, [r7, #20]
 80045d0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80045d4:	2b00      	cmp	r3, #0
 80045d6:	d00f      	beq.n	80045f8 <HAL_I2C_ER_IRQHandler+0x6c>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 80045d8:	693b      	ldr	r3, [r7, #16]
 80045da:	f003 0380 	and.w	r3, r3, #128	@ 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 80045de:	2b00      	cmp	r3, #0
 80045e0:	d00a      	beq.n	80045f8 <HAL_I2C_ER_IRQHandler+0x6c>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80045e6:	f043 0208 	orr.w	r2, r3, #8
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80045f6:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 80045f8:	697b      	ldr	r3, [r7, #20]
 80045fa:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80045fe:	2b00      	cmp	r3, #0
 8004600:	d00f      	beq.n	8004622 <HAL_I2C_ER_IRQHandler+0x96>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8004602:	693b      	ldr	r3, [r7, #16]
 8004604:	f003 0380 	and.w	r3, r3, #128	@ 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8004608:	2b00      	cmp	r3, #0
 800460a:	d00a      	beq.n	8004622 <HAL_I2C_ER_IRQHandler+0x96>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004610:	f043 0202 	orr.w	r2, r3, #2
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004620:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004626:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	f003 030b 	and.w	r3, r3, #11
 800462e:	2b00      	cmp	r3, #0
 8004630:	d003      	beq.n	800463a <HAL_I2C_ER_IRQHandler+0xae>
  {
    I2C_ITError(hi2c, tmperror);
 8004632:	68f9      	ldr	r1, [r7, #12]
 8004634:	6878      	ldr	r0, [r7, #4]
 8004636:	f000 fbd5 	bl	8004de4 <I2C_ITError>
  }
}
 800463a:	bf00      	nop
 800463c:	3718      	adds	r7, #24
 800463e:	46bd      	mov	sp, r7
 8004640:	bd80      	pop	{r7, pc}

08004642 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004642:	b480      	push	{r7}
 8004644:	b083      	sub	sp, #12
 8004646:	af00      	add	r7, sp, #0
 8004648:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 800464a:	bf00      	nop
 800464c:	370c      	adds	r7, #12
 800464e:	46bd      	mov	sp, r7
 8004650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004654:	4770      	bx	lr

08004656 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004656:	b480      	push	{r7}
 8004658:	b083      	sub	sp, #12
 800465a:	af00      	add	r7, sp, #0
 800465c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 800465e:	bf00      	nop
 8004660:	370c      	adds	r7, #12
 8004662:	46bd      	mov	sp, r7
 8004664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004668:	4770      	bx	lr

0800466a <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 800466a:	b480      	push	{r7}
 800466c:	b083      	sub	sp, #12
 800466e:	af00      	add	r7, sp, #0
 8004670:	6078      	str	r0, [r7, #4]
 8004672:	460b      	mov	r3, r1
 8004674:	70fb      	strb	r3, [r7, #3]
 8004676:	4613      	mov	r3, r2
 8004678:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 800467a:	bf00      	nop
 800467c:	370c      	adds	r7, #12
 800467e:	46bd      	mov	sp, r7
 8004680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004684:	4770      	bx	lr

08004686 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004686:	b480      	push	{r7}
 8004688:	b083      	sub	sp, #12
 800468a:	af00      	add	r7, sp, #0
 800468c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 800468e:	bf00      	nop
 8004690:	370c      	adds	r7, #12
 8004692:	46bd      	mov	sp, r7
 8004694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004698:	4770      	bx	lr

0800469a <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 800469a:	b480      	push	{r7}
 800469c:	b083      	sub	sp, #12
 800469e:	af00      	add	r7, sp, #0
 80046a0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 80046a2:	bf00      	nop
 80046a4:	370c      	adds	r7, #12
 80046a6:	46bd      	mov	sp, r7
 80046a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ac:	4770      	bx	lr

080046ae <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80046ae:	b480      	push	{r7}
 80046b0:	b083      	sub	sp, #12
 80046b2:	af00      	add	r7, sp, #0
 80046b4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 80046b6:	bf00      	nop
 80046b8:	370c      	adds	r7, #12
 80046ba:	46bd      	mov	sp, r7
 80046bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046c0:	4770      	bx	lr

080046c2 <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 80046c2:	b580      	push	{r7, lr}
 80046c4:	b086      	sub	sp, #24
 80046c6:	af00      	add	r7, sp, #0
 80046c8:	60f8      	str	r0, [r7, #12]
 80046ca:	60b9      	str	r1, [r7, #8]
 80046cc:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80046d2:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 80046d4:	68bb      	ldr	r3, [r7, #8]
 80046d6:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80046de:	2b01      	cmp	r3, #1
 80046e0:	d101      	bne.n	80046e6 <I2C_Slave_ISR_IT+0x24>
 80046e2:	2302      	movs	r3, #2
 80046e4:	e0e2      	b.n	80048ac <I2C_Slave_ISR_IT+0x1ea>
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	2201      	movs	r2, #1
 80046ea:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 80046ee:	693b      	ldr	r3, [r7, #16]
 80046f0:	f003 0320 	and.w	r3, r3, #32
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	d009      	beq.n	800470c <I2C_Slave_ISR_IT+0x4a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	f003 0320 	and.w	r3, r3, #32
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d004      	beq.n	800470c <I2C_Slave_ISR_IT+0x4a>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 8004702:	6939      	ldr	r1, [r7, #16]
 8004704:	68f8      	ldr	r0, [r7, #12]
 8004706:	f000 f9b5 	bl	8004a74 <I2C_ITSlaveCplt>
 800470a:	e0ca      	b.n	80048a2 <I2C_Slave_ISR_IT+0x1e0>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800470c:	693b      	ldr	r3, [r7, #16]
 800470e:	f003 0310 	and.w	r3, r3, #16
 8004712:	2b00      	cmp	r3, #0
 8004714:	d04b      	beq.n	80047ae <I2C_Slave_ISR_IT+0xec>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	f003 0310 	and.w	r3, r3, #16
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800471c:	2b00      	cmp	r3, #0
 800471e:	d046      	beq.n	80047ae <I2C_Slave_ISR_IT+0xec>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004724:	b29b      	uxth	r3, r3
 8004726:	2b00      	cmp	r3, #0
 8004728:	d128      	bne.n	800477c <I2C_Slave_ISR_IT+0xba>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004730:	b2db      	uxtb	r3, r3
 8004732:	2b28      	cmp	r3, #40	@ 0x28
 8004734:	d108      	bne.n	8004748 <I2C_Slave_ISR_IT+0x86>
 8004736:	697b      	ldr	r3, [r7, #20]
 8004738:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800473c:	d104      	bne.n	8004748 <I2C_Slave_ISR_IT+0x86>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 800473e:	6939      	ldr	r1, [r7, #16]
 8004740:	68f8      	ldr	r0, [r7, #12]
 8004742:	f000 fafb 	bl	8004d3c <I2C_ITListenCplt>
 8004746:	e031      	b.n	80047ac <I2C_Slave_ISR_IT+0xea>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800474e:	b2db      	uxtb	r3, r3
 8004750:	2b29      	cmp	r3, #41	@ 0x29
 8004752:	d10e      	bne.n	8004772 <I2C_Slave_ISR_IT+0xb0>
 8004754:	697b      	ldr	r3, [r7, #20]
 8004756:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800475a:	d00a      	beq.n	8004772 <I2C_Slave_ISR_IT+0xb0>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	2210      	movs	r2, #16
 8004762:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8004764:	68f8      	ldr	r0, [r7, #12]
 8004766:	f000 fc54 	bl	8005012 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 800476a:	68f8      	ldr	r0, [r7, #12]
 800476c:	f000 f926 	bl	80049bc <I2C_ITSlaveSeqCplt>
 8004770:	e01c      	b.n	80047ac <I2C_Slave_ISR_IT+0xea>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	2210      	movs	r2, #16
 8004778:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 800477a:	e08f      	b.n	800489c <I2C_Slave_ISR_IT+0x1da>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	2210      	movs	r2, #16
 8004782:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004788:	f043 0204 	orr.w	r2, r3, #4
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8004790:	697b      	ldr	r3, [r7, #20]
 8004792:	2b00      	cmp	r3, #0
 8004794:	d003      	beq.n	800479e <I2C_Slave_ISR_IT+0xdc>
 8004796:	697b      	ldr	r3, [r7, #20]
 8004798:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800479c:	d17e      	bne.n	800489c <I2C_Slave_ISR_IT+0x1da>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80047a2:	4619      	mov	r1, r3
 80047a4:	68f8      	ldr	r0, [r7, #12]
 80047a6:	f000 fb1d 	bl	8004de4 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 80047aa:	e077      	b.n	800489c <I2C_Slave_ISR_IT+0x1da>
 80047ac:	e076      	b.n	800489c <I2C_Slave_ISR_IT+0x1da>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 80047ae:	693b      	ldr	r3, [r7, #16]
 80047b0:	f003 0304 	and.w	r3, r3, #4
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	d02f      	beq.n	8004818 <I2C_Slave_ISR_IT+0x156>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	f003 0304 	and.w	r3, r3, #4
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 80047be:	2b00      	cmp	r3, #0
 80047c0:	d02a      	beq.n	8004818 <I2C_Slave_ISR_IT+0x156>
  {
    if (hi2c->XferCount > 0U)
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80047c6:	b29b      	uxth	r3, r3
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	d018      	beq.n	80047fe <I2C_Slave_ISR_IT+0x13c>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80047d6:	b2d2      	uxtb	r2, r2
 80047d8:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80047de:	1c5a      	adds	r2, r3, #1
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80047e8:	3b01      	subs	r3, #1
 80047ea:	b29a      	uxth	r2, r3
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80047f4:	b29b      	uxth	r3, r3
 80047f6:	3b01      	subs	r3, #1
 80047f8:	b29a      	uxth	r2, r3
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004802:	b29b      	uxth	r3, r3
 8004804:	2b00      	cmp	r3, #0
 8004806:	d14b      	bne.n	80048a0 <I2C_Slave_ISR_IT+0x1de>
 8004808:	697b      	ldr	r3, [r7, #20]
 800480a:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800480e:	d047      	beq.n	80048a0 <I2C_Slave_ISR_IT+0x1de>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 8004810:	68f8      	ldr	r0, [r7, #12]
 8004812:	f000 f8d3 	bl	80049bc <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 8004816:	e043      	b.n	80048a0 <I2C_Slave_ISR_IT+0x1de>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8004818:	693b      	ldr	r3, [r7, #16]
 800481a:	f003 0308 	and.w	r3, r3, #8
 800481e:	2b00      	cmp	r3, #0
 8004820:	d009      	beq.n	8004836 <I2C_Slave_ISR_IT+0x174>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	f003 0308 	and.w	r3, r3, #8
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8004828:	2b00      	cmp	r3, #0
 800482a:	d004      	beq.n	8004836 <I2C_Slave_ISR_IT+0x174>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 800482c:	6939      	ldr	r1, [r7, #16]
 800482e:	68f8      	ldr	r0, [r7, #12]
 8004830:	f000 f840 	bl	80048b4 <I2C_ITAddrCplt>
 8004834:	e035      	b.n	80048a2 <I2C_Slave_ISR_IT+0x1e0>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8004836:	693b      	ldr	r3, [r7, #16]
 8004838:	f003 0302 	and.w	r3, r3, #2
 800483c:	2b00      	cmp	r3, #0
 800483e:	d030      	beq.n	80048a2 <I2C_Slave_ISR_IT+0x1e0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	f003 0302 	and.w	r3, r3, #2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8004846:	2b00      	cmp	r3, #0
 8004848:	d02b      	beq.n	80048a2 <I2C_Slave_ISR_IT+0x1e0>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800484e:	b29b      	uxth	r3, r3
 8004850:	2b00      	cmp	r3, #0
 8004852:	d018      	beq.n	8004886 <I2C_Slave_ISR_IT+0x1c4>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004858:	781a      	ldrb	r2, [r3, #0]
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004864:	1c5a      	adds	r2, r3, #1
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800486e:	b29b      	uxth	r3, r3
 8004870:	3b01      	subs	r3, #1
 8004872:	b29a      	uxth	r2, r3
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800487c:	3b01      	subs	r3, #1
 800487e:	b29a      	uxth	r2, r3
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	851a      	strh	r2, [r3, #40]	@ 0x28
 8004884:	e00d      	b.n	80048a2 <I2C_Slave_ISR_IT+0x1e0>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 8004886:	697b      	ldr	r3, [r7, #20]
 8004888:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800488c:	d002      	beq.n	8004894 <I2C_Slave_ISR_IT+0x1d2>
 800488e:	697b      	ldr	r3, [r7, #20]
 8004890:	2b00      	cmp	r3, #0
 8004892:	d106      	bne.n	80048a2 <I2C_Slave_ISR_IT+0x1e0>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8004894:	68f8      	ldr	r0, [r7, #12]
 8004896:	f000 f891 	bl	80049bc <I2C_ITSlaveSeqCplt>
 800489a:	e002      	b.n	80048a2 <I2C_Slave_ISR_IT+0x1e0>
    if (hi2c->XferCount == 0U)
 800489c:	bf00      	nop
 800489e:	e000      	b.n	80048a2 <I2C_Slave_ISR_IT+0x1e0>
    if ((hi2c->XferCount == 0U) && \
 80048a0:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	2200      	movs	r2, #0
 80048a6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 80048aa:	2300      	movs	r3, #0
}
 80048ac:	4618      	mov	r0, r3
 80048ae:	3718      	adds	r7, #24
 80048b0:	46bd      	mov	sp, r7
 80048b2:	bd80      	pop	{r7, pc}

080048b4 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80048b4:	b580      	push	{r7, lr}
 80048b6:	b084      	sub	sp, #16
 80048b8:	af00      	add	r7, sp, #0
 80048ba:	6078      	str	r0, [r7, #4]
 80048bc:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80048c4:	b2db      	uxtb	r3, r3
 80048c6:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 80048ca:	2b28      	cmp	r3, #40	@ 0x28
 80048cc:	d16a      	bne.n	80049a4 <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	699b      	ldr	r3, [r3, #24]
 80048d4:	0c1b      	lsrs	r3, r3, #16
 80048d6:	b2db      	uxtb	r3, r3
 80048d8:	f003 0301 	and.w	r3, r3, #1
 80048dc:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	699b      	ldr	r3, [r3, #24]
 80048e4:	0c1b      	lsrs	r3, r3, #16
 80048e6:	b29b      	uxth	r3, r3
 80048e8:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 80048ec:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	689b      	ldr	r3, [r3, #8]
 80048f4:	b29b      	uxth	r3, r3
 80048f6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80048fa:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	68db      	ldr	r3, [r3, #12]
 8004902:	b29b      	uxth	r3, r3
 8004904:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 8004908:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	68db      	ldr	r3, [r3, #12]
 800490e:	2b02      	cmp	r3, #2
 8004910:	d138      	bne.n	8004984 <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 8004912:	897b      	ldrh	r3, [r7, #10]
 8004914:	09db      	lsrs	r3, r3, #7
 8004916:	b29a      	uxth	r2, r3
 8004918:	89bb      	ldrh	r3, [r7, #12]
 800491a:	4053      	eors	r3, r2
 800491c:	b29b      	uxth	r3, r3
 800491e:	f003 0306 	and.w	r3, r3, #6
 8004922:	2b00      	cmp	r3, #0
 8004924:	d11c      	bne.n	8004960 <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 8004926:	897b      	ldrh	r3, [r7, #10]
 8004928:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800492e:	1c5a      	adds	r2, r3, #1
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	649a      	str	r2, [r3, #72]	@ 0x48
        if (hi2c->AddrEventCount == 2U)
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004938:	2b02      	cmp	r3, #2
 800493a:	d13b      	bne.n	80049b4 <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	2200      	movs	r2, #0
 8004940:	649a      	str	r2, [r3, #72]	@ 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	2208      	movs	r2, #8
 8004948:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	2200      	movs	r2, #0
 800494e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8004952:	89ba      	ldrh	r2, [r7, #12]
 8004954:	7bfb      	ldrb	r3, [r7, #15]
 8004956:	4619      	mov	r1, r3
 8004958:	6878      	ldr	r0, [r7, #4]
 800495a:	f7ff fe86 	bl	800466a <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 800495e:	e029      	b.n	80049b4 <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 8004960:	893b      	ldrh	r3, [r7, #8]
 8004962:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8004964:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8004968:	6878      	ldr	r0, [r7, #4]
 800496a:	f000 fb94 	bl	8005096 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	2200      	movs	r2, #0
 8004972:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8004976:	89ba      	ldrh	r2, [r7, #12]
 8004978:	7bfb      	ldrb	r3, [r7, #15]
 800497a:	4619      	mov	r1, r3
 800497c:	6878      	ldr	r0, [r7, #4]
 800497e:	f7ff fe74 	bl	800466a <HAL_I2C_AddrCallback>
}
 8004982:	e017      	b.n	80049b4 <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8004984:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8004988:	6878      	ldr	r0, [r7, #4]
 800498a:	f000 fb84 	bl	8005096 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	2200      	movs	r2, #0
 8004992:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8004996:	89ba      	ldrh	r2, [r7, #12]
 8004998:	7bfb      	ldrb	r3, [r7, #15]
 800499a:	4619      	mov	r1, r3
 800499c:	6878      	ldr	r0, [r7, #4]
 800499e:	f7ff fe64 	bl	800466a <HAL_I2C_AddrCallback>
}
 80049a2:	e007      	b.n	80049b4 <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	2208      	movs	r2, #8
 80049aa:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	2200      	movs	r2, #0
 80049b0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
}
 80049b4:	bf00      	nop
 80049b6:	3710      	adds	r7, #16
 80049b8:	46bd      	mov	sp, r7
 80049ba:	bd80      	pop	{r7, pc}

080049bc <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 80049bc:	b580      	push	{r7, lr}
 80049be:	b084      	sub	sp, #16
 80049c0:	af00      	add	r7, sp, #0
 80049c2:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	2200      	movs	r2, #0
 80049d0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80049da:	2b00      	cmp	r3, #0
 80049dc:	d008      	beq.n	80049f0 <I2C_ITSlaveSeqCplt+0x34>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	681a      	ldr	r2, [r3, #0]
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80049ec:	601a      	str	r2, [r3, #0]
 80049ee:	e00c      	b.n	8004a0a <I2C_ITSlaveSeqCplt+0x4e>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	d007      	beq.n	8004a0a <I2C_ITSlaveSeqCplt+0x4e>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	681a      	ldr	r2, [r3, #0]
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8004a08:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004a10:	b2db      	uxtb	r3, r3
 8004a12:	2b29      	cmp	r3, #41	@ 0x29
 8004a14:	d112      	bne.n	8004a3c <I2C_ITSlaveSeqCplt+0x80>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	2228      	movs	r2, #40	@ 0x28
 8004a1a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	2221      	movs	r2, #33	@ 0x21
 8004a22:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8004a24:	2101      	movs	r1, #1
 8004a26:	6878      	ldr	r0, [r7, #4]
 8004a28:	f000 fb35 	bl	8005096 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	2200      	movs	r2, #0
 8004a30:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8004a34:	6878      	ldr	r0, [r7, #4]
 8004a36:	f7ff fe04 	bl	8004642 <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8004a3a:	e017      	b.n	8004a6c <I2C_ITSlaveSeqCplt+0xb0>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004a42:	b2db      	uxtb	r3, r3
 8004a44:	2b2a      	cmp	r3, #42	@ 0x2a
 8004a46:	d111      	bne.n	8004a6c <I2C_ITSlaveSeqCplt+0xb0>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	2228      	movs	r2, #40	@ 0x28
 8004a4c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	2222      	movs	r2, #34	@ 0x22
 8004a54:	631a      	str	r2, [r3, #48]	@ 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8004a56:	2102      	movs	r1, #2
 8004a58:	6878      	ldr	r0, [r7, #4]
 8004a5a:	f000 fb1c 	bl	8005096 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	2200      	movs	r2, #0
 8004a62:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004a66:	6878      	ldr	r0, [r7, #4]
 8004a68:	f7ff fdf5 	bl	8004656 <HAL_I2C_SlaveRxCpltCallback>
}
 8004a6c:	bf00      	nop
 8004a6e:	3710      	adds	r7, #16
 8004a70:	46bd      	mov	sp, r7
 8004a72:	bd80      	pop	{r7, pc}

08004a74 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8004a74:	b580      	push	{r7, lr}
 8004a76:	b086      	sub	sp, #24
 8004a78:	af00      	add	r7, sp, #0
 8004a7a:	6078      	str	r0, [r7, #4]
 8004a7c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 8004a86:	683b      	ldr	r3, [r7, #0]
 8004a88:	617b      	str	r3, [r7, #20]
  uint32_t tmpoptions = hi2c->XferOptions;
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a8e:	60fb      	str	r3, [r7, #12]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004a96:	72fb      	strb	r3, [r7, #11]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	2220      	movs	r2, #32
 8004a9e:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8004aa0:	7afb      	ldrb	r3, [r7, #11]
 8004aa2:	2b21      	cmp	r3, #33	@ 0x21
 8004aa4:	d002      	beq.n	8004aac <I2C_ITSlaveCplt+0x38>
 8004aa6:	7afb      	ldrb	r3, [r7, #11]
 8004aa8:	2b29      	cmp	r3, #41	@ 0x29
 8004aaa:	d108      	bne.n	8004abe <I2C_ITSlaveCplt+0x4a>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 8004aac:	f248 0101 	movw	r1, #32769	@ 0x8001
 8004ab0:	6878      	ldr	r0, [r7, #4]
 8004ab2:	f000 faf0 	bl	8005096 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	2221      	movs	r2, #33	@ 0x21
 8004aba:	631a      	str	r2, [r3, #48]	@ 0x30
 8004abc:	e019      	b.n	8004af2 <I2C_ITSlaveCplt+0x7e>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8004abe:	7afb      	ldrb	r3, [r7, #11]
 8004ac0:	2b22      	cmp	r3, #34	@ 0x22
 8004ac2:	d002      	beq.n	8004aca <I2C_ITSlaveCplt+0x56>
 8004ac4:	7afb      	ldrb	r3, [r7, #11]
 8004ac6:	2b2a      	cmp	r3, #42	@ 0x2a
 8004ac8:	d108      	bne.n	8004adc <I2C_ITSlaveCplt+0x68>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 8004aca:	f248 0102 	movw	r1, #32770	@ 0x8002
 8004ace:	6878      	ldr	r0, [r7, #4]
 8004ad0:	f000 fae1 	bl	8005096 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	2222      	movs	r2, #34	@ 0x22
 8004ad8:	631a      	str	r2, [r3, #48]	@ 0x30
 8004ada:	e00a      	b.n	8004af2 <I2C_ITSlaveCplt+0x7e>
  }
  else if (tmpstate == HAL_I2C_STATE_LISTEN)
 8004adc:	7afb      	ldrb	r3, [r7, #11]
 8004ade:	2b28      	cmp	r3, #40	@ 0x28
 8004ae0:	d107      	bne.n	8004af2 <I2C_ITSlaveCplt+0x7e>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT | I2C_XFER_RX_IT);
 8004ae2:	f248 0103 	movw	r1, #32771	@ 0x8003
 8004ae6:	6878      	ldr	r0, [r7, #4]
 8004ae8:	f000 fad5 	bl	8005096 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_NONE;
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	2200      	movs	r2, #0
 8004af0:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	685a      	ldr	r2, [r3, #4]
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004b00:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	6859      	ldr	r1, [r3, #4]
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	681a      	ldr	r2, [r3, #0]
 8004b0c:	4b89      	ldr	r3, [pc, #548]	@ (8004d34 <I2C_ITSlaveCplt+0x2c0>)
 8004b0e:	400b      	ands	r3, r1
 8004b10:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8004b12:	6878      	ldr	r0, [r7, #4]
 8004b14:	f000 fa7d 	bl	8005012 <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8004b18:	693b      	ldr	r3, [r7, #16]
 8004b1a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	d013      	beq.n	8004b4a <I2C_ITSlaveCplt+0xd6>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	681a      	ldr	r2, [r3, #0]
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8004b30:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d01f      	beq.n	8004b7a <I2C_ITSlaveCplt+0x106>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	685b      	ldr	r3, [r3, #4]
 8004b42:	b29a      	uxth	r2, r3
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8004b48:	e017      	b.n	8004b7a <I2C_ITSlaveCplt+0x106>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8004b4a:	693b      	ldr	r3, [r7, #16]
 8004b4c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004b50:	2b00      	cmp	r3, #0
 8004b52:	d012      	beq.n	8004b7a <I2C_ITSlaveCplt+0x106>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	681a      	ldr	r2, [r3, #0]
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8004b62:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004b68:	2b00      	cmp	r3, #0
 8004b6a:	d006      	beq.n	8004b7a <I2C_ITSlaveCplt+0x106>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	685b      	ldr	r3, [r3, #4]
 8004b74:	b29a      	uxth	r2, r3
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	855a      	strh	r2, [r3, #42]	@ 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 8004b7a:	697b      	ldr	r3, [r7, #20]
 8004b7c:	f003 0304 	and.w	r3, r3, #4
 8004b80:	2b00      	cmp	r3, #0
 8004b82:	d020      	beq.n	8004bc6 <I2C_ITSlaveCplt+0x152>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8004b84:	697b      	ldr	r3, [r7, #20]
 8004b86:	f023 0304 	bic.w	r3, r3, #4
 8004b8a:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b96:	b2d2      	uxtb	r2, r2
 8004b98:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b9e:	1c5a      	adds	r2, r3, #1
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004ba8:	2b00      	cmp	r3, #0
 8004baa:	d00c      	beq.n	8004bc6 <I2C_ITSlaveCplt+0x152>
    {
      hi2c->XferSize--;
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004bb0:	3b01      	subs	r3, #1
 8004bb2:	b29a      	uxth	r2, r3
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004bbc:	b29b      	uxth	r3, r3
 8004bbe:	3b01      	subs	r3, #1
 8004bc0:	b29a      	uxth	r2, r3
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004bca:	b29b      	uxth	r3, r3
 8004bcc:	2b00      	cmp	r3, #0
 8004bce:	d005      	beq.n	8004bdc <I2C_ITSlaveCplt+0x168>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004bd4:	f043 0204 	orr.w	r2, r3, #4
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8004bdc:	697b      	ldr	r3, [r7, #20]
 8004bde:	f003 0310 	and.w	r3, r3, #16
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	d049      	beq.n	8004c7a <I2C_ITSlaveCplt+0x206>
      (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_IT_NACKI) != RESET))
 8004be6:	693b      	ldr	r3, [r7, #16]
 8004be8:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	d044      	beq.n	8004c7a <I2C_ITSlaveCplt+0x206>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004bf4:	b29b      	uxth	r3, r3
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	d128      	bne.n	8004c4c <I2C_ITSlaveCplt+0x1d8>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004c00:	b2db      	uxtb	r3, r3
 8004c02:	2b28      	cmp	r3, #40	@ 0x28
 8004c04:	d108      	bne.n	8004c18 <I2C_ITSlaveCplt+0x1a4>
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004c0c:	d104      	bne.n	8004c18 <I2C_ITSlaveCplt+0x1a4>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8004c0e:	6979      	ldr	r1, [r7, #20]
 8004c10:	6878      	ldr	r0, [r7, #4]
 8004c12:	f000 f893 	bl	8004d3c <I2C_ITListenCplt>
 8004c16:	e030      	b.n	8004c7a <I2C_ITSlaveCplt+0x206>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004c1e:	b2db      	uxtb	r3, r3
 8004c20:	2b29      	cmp	r3, #41	@ 0x29
 8004c22:	d10e      	bne.n	8004c42 <I2C_ITSlaveCplt+0x1ce>
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8004c2a:	d00a      	beq.n	8004c42 <I2C_ITSlaveCplt+0x1ce>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	2210      	movs	r2, #16
 8004c32:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8004c34:	6878      	ldr	r0, [r7, #4]
 8004c36:	f000 f9ec 	bl	8005012 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8004c3a:	6878      	ldr	r0, [r7, #4]
 8004c3c:	f7ff febe 	bl	80049bc <I2C_ITSlaveSeqCplt>
 8004c40:	e01b      	b.n	8004c7a <I2C_ITSlaveCplt+0x206>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	2210      	movs	r2, #16
 8004c48:	61da      	str	r2, [r3, #28]
 8004c4a:	e016      	b.n	8004c7a <I2C_ITSlaveCplt+0x206>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	2210      	movs	r2, #16
 8004c52:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004c58:	f043 0204 	orr.w	r2, r3, #4
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	d003      	beq.n	8004c6e <I2C_ITSlaveCplt+0x1fa>
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004c6c:	d105      	bne.n	8004c7a <I2C_ITSlaveCplt+0x206>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004c72:	4619      	mov	r1, r3
 8004c74:	6878      	ldr	r0, [r7, #4]
 8004c76:	f000 f8b5 	bl	8004de4 <I2C_ITError>
      }
    }
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	2200      	movs	r2, #0
 8004c7e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferISR = NULL;
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	2200      	movs	r2, #0
 8004c86:	635a      	str	r2, [r3, #52]	@ 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004c8c:	2b00      	cmp	r3, #0
 8004c8e:	d010      	beq.n	8004cb2 <I2C_ITSlaveCplt+0x23e>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004c94:	4619      	mov	r1, r3
 8004c96:	6878      	ldr	r0, [r7, #4]
 8004c98:	f000 f8a4 	bl	8004de4 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004ca2:	b2db      	uxtb	r3, r3
 8004ca4:	2b28      	cmp	r3, #40	@ 0x28
 8004ca6:	d141      	bne.n	8004d2c <I2C_ITSlaveCplt+0x2b8>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 8004ca8:	6979      	ldr	r1, [r7, #20]
 8004caa:	6878      	ldr	r0, [r7, #4]
 8004cac:	f000 f846 	bl	8004d3c <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8004cb0:	e03c      	b.n	8004d2c <I2C_ITSlaveCplt+0x2b8>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004cb6:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8004cba:	d014      	beq.n	8004ce6 <I2C_ITSlaveCplt+0x272>
    I2C_ITSlaveSeqCplt(hi2c);
 8004cbc:	6878      	ldr	r0, [r7, #4]
 8004cbe:	f7ff fe7d 	bl	80049bc <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	4a1c      	ldr	r2, [pc, #112]	@ (8004d38 <I2C_ITSlaveCplt+0x2c4>)
 8004cc6:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	2220      	movs	r2, #32
 8004ccc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	2200      	movs	r2, #0
 8004cd4:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	2200      	movs	r2, #0
 8004cda:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 8004cde:	6878      	ldr	r0, [r7, #4]
 8004ce0:	f7ff fcd1 	bl	8004686 <HAL_I2C_ListenCpltCallback>
}
 8004ce4:	e022      	b.n	8004d2c <I2C_ITSlaveCplt+0x2b8>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004cec:	b2db      	uxtb	r3, r3
 8004cee:	2b22      	cmp	r3, #34	@ 0x22
 8004cf0:	d10e      	bne.n	8004d10 <I2C_ITSlaveCplt+0x29c>
    hi2c->State = HAL_I2C_STATE_READY;
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	2220      	movs	r2, #32
 8004cf6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	2200      	movs	r2, #0
 8004cfe:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	2200      	movs	r2, #0
 8004d04:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004d08:	6878      	ldr	r0, [r7, #4]
 8004d0a:	f7ff fca4 	bl	8004656 <HAL_I2C_SlaveRxCpltCallback>
}
 8004d0e:	e00d      	b.n	8004d2c <I2C_ITSlaveCplt+0x2b8>
    hi2c->State = HAL_I2C_STATE_READY;
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	2220      	movs	r2, #32
 8004d14:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	2200      	movs	r2, #0
 8004d1c:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	2200      	movs	r2, #0
 8004d22:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8004d26:	6878      	ldr	r0, [r7, #4]
 8004d28:	f7ff fc8b 	bl	8004642 <HAL_I2C_SlaveTxCpltCallback>
}
 8004d2c:	bf00      	nop
 8004d2e:	3718      	adds	r7, #24
 8004d30:	46bd      	mov	sp, r7
 8004d32:	bd80      	pop	{r7, pc}
 8004d34:	fe00e800 	.word	0xfe00e800
 8004d38:	ffff0000 	.word	0xffff0000

08004d3c <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8004d3c:	b580      	push	{r7, lr}
 8004d3e:	b082      	sub	sp, #8
 8004d40:	af00      	add	r7, sp, #0
 8004d42:	6078      	str	r0, [r7, #4]
 8004d44:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	4a25      	ldr	r2, [pc, #148]	@ (8004de0 <I2C_ITListenCplt+0xa4>)
 8004d4a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	2200      	movs	r2, #0
 8004d50:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	2220      	movs	r2, #32
 8004d56:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	2200      	movs	r2, #0
 8004d5e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferISR = NULL;
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	2200      	movs	r2, #0
 8004d66:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 8004d68:	683b      	ldr	r3, [r7, #0]
 8004d6a:	f003 0304 	and.w	r3, r3, #4
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	d022      	beq.n	8004db8 <I2C_ITListenCplt+0x7c>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d7c:	b2d2      	uxtb	r2, r2
 8004d7e:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d84:	1c5a      	adds	r2, r3, #1
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004d8e:	2b00      	cmp	r3, #0
 8004d90:	d012      	beq.n	8004db8 <I2C_ITListenCplt+0x7c>
    {
      hi2c->XferSize--;
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004d96:	3b01      	subs	r3, #1
 8004d98:	b29a      	uxth	r2, r3
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004da2:	b29b      	uxth	r3, r3
 8004da4:	3b01      	subs	r3, #1
 8004da6:	b29a      	uxth	r2, r3
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004db0:	f043 0204 	orr.w	r2, r3, #4
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	645a      	str	r2, [r3, #68]	@ 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8004db8:	f248 0103 	movw	r1, #32771	@ 0x8003
 8004dbc:	6878      	ldr	r0, [r7, #4]
 8004dbe:	f000 f96a 	bl	8005096 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	2210      	movs	r2, #16
 8004dc8:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	2200      	movs	r2, #0
 8004dce:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 8004dd2:	6878      	ldr	r0, [r7, #4]
 8004dd4:	f7ff fc57 	bl	8004686 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 8004dd8:	bf00      	nop
 8004dda:	3708      	adds	r7, #8
 8004ddc:	46bd      	mov	sp, r7
 8004dde:	bd80      	pop	{r7, pc}
 8004de0:	ffff0000 	.word	0xffff0000

08004de4 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 8004de4:	b580      	push	{r7, lr}
 8004de6:	b084      	sub	sp, #16
 8004de8:	af00      	add	r7, sp, #0
 8004dea:	6078      	str	r0, [r7, #4]
 8004dec:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004df4:	73fb      	strb	r3, [r7, #15]

  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	2200      	movs	r2, #0
 8004dfa:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	4a6d      	ldr	r2, [pc, #436]	@ (8004fb8 <I2C_ITError+0x1d4>)
 8004e02:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->XferCount     = 0U;
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	2200      	movs	r2, #0
 8004e08:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004e0e:	683b      	ldr	r3, [r7, #0]
 8004e10:	431a      	orrs	r2, r3
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 8004e16:	7bfb      	ldrb	r3, [r7, #15]
 8004e18:	2b28      	cmp	r3, #40	@ 0x28
 8004e1a:	d005      	beq.n	8004e28 <I2C_ITError+0x44>
 8004e1c:	7bfb      	ldrb	r3, [r7, #15]
 8004e1e:	2b29      	cmp	r3, #41	@ 0x29
 8004e20:	d002      	beq.n	8004e28 <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 8004e22:	7bfb      	ldrb	r3, [r7, #15]
 8004e24:	2b2a      	cmp	r3, #42	@ 0x2a
 8004e26:	d10b      	bne.n	8004e40 <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8004e28:	2103      	movs	r1, #3
 8004e2a:	6878      	ldr	r0, [r7, #4]
 8004e2c:	f000 f933 	bl	8005096 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	2228      	movs	r2, #40	@ 0x28
 8004e34:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	4a60      	ldr	r2, [pc, #384]	@ (8004fbc <I2C_ITError+0x1d8>)
 8004e3c:	635a      	str	r2, [r3, #52]	@ 0x34
 8004e3e:	e030      	b.n	8004ea2 <I2C_ITError+0xbe>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8004e40:	f248 0103 	movw	r1, #32771	@ 0x8003
 8004e44:	6878      	ldr	r0, [r7, #4]
 8004e46:	f000 f926 	bl	8005096 <I2C_Disable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8004e4a:	6878      	ldr	r0, [r7, #4]
 8004e4c:	f000 f8e1 	bl	8005012 <I2C_Flush_TXDR>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004e56:	b2db      	uxtb	r3, r3
 8004e58:	2b60      	cmp	r3, #96	@ 0x60
 8004e5a:	d01f      	beq.n	8004e9c <I2C_ITError+0xb8>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	2220      	movs	r2, #32
 8004e60:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Check if a STOPF is detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	699b      	ldr	r3, [r3, #24]
 8004e6a:	f003 0320 	and.w	r3, r3, #32
 8004e6e:	2b20      	cmp	r3, #32
 8004e70:	d114      	bne.n	8004e9c <I2C_ITError+0xb8>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	699b      	ldr	r3, [r3, #24]
 8004e78:	f003 0310 	and.w	r3, r3, #16
 8004e7c:	2b10      	cmp	r3, #16
 8004e7e:	d109      	bne.n	8004e94 <I2C_ITError+0xb0>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	2210      	movs	r2, #16
 8004e86:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004e8c:	f043 0204 	orr.w	r2, r3, #4
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	645a      	str	r2, [r3, #68]	@ 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	2220      	movs	r2, #32
 8004e9a:	61da      	str	r2, [r3, #28]
      }

    }
    hi2c->XferISR       = NULL;
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	2200      	movs	r2, #0
 8004ea0:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004ea6:	60bb      	str	r3, [r7, #8]

  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004eac:	2b00      	cmp	r3, #0
 8004eae:	d039      	beq.n	8004f24 <I2C_ITError+0x140>
 8004eb0:	68bb      	ldr	r3, [r7, #8]
 8004eb2:	2b11      	cmp	r3, #17
 8004eb4:	d002      	beq.n	8004ebc <I2C_ITError+0xd8>
 8004eb6:	68bb      	ldr	r3, [r7, #8]
 8004eb8:	2b21      	cmp	r3, #33	@ 0x21
 8004eba:	d133      	bne.n	8004f24 <I2C_ITError+0x140>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004ec6:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004eca:	d107      	bne.n	8004edc <I2C_ITError+0xf8>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	681a      	ldr	r2, [r3, #0]
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8004eda:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004ee0:	4618      	mov	r0, r3
 8004ee2:	f7fe fe82 	bl	8003bea <HAL_DMA_GetState>
 8004ee6:	4603      	mov	r3, r0
 8004ee8:	2b01      	cmp	r3, #1
 8004eea:	d017      	beq.n	8004f1c <I2C_ITError+0x138>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004ef0:	4a33      	ldr	r2, [pc, #204]	@ (8004fc0 <I2C_ITError+0x1dc>)
 8004ef2:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	2200      	movs	r2, #0
 8004ef8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004f00:	4618      	mov	r0, r3
 8004f02:	f7fe fd5c 	bl	80039be <HAL_DMA_Abort_IT>
 8004f06:	4603      	mov	r3, r0
 8004f08:	2b00      	cmp	r3, #0
 8004f0a:	d04d      	beq.n	8004fa8 <I2C_ITError+0x1c4>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004f10:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004f12:	687a      	ldr	r2, [r7, #4]
 8004f14:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8004f16:	4610      	mov	r0, r2
 8004f18:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8004f1a:	e045      	b.n	8004fa8 <I2C_ITError+0x1c4>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8004f1c:	6878      	ldr	r0, [r7, #4]
 8004f1e:	f000 f851 	bl	8004fc4 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8004f22:	e041      	b.n	8004fa8 <I2C_ITError+0x1c4>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004f28:	2b00      	cmp	r3, #0
 8004f2a:	d039      	beq.n	8004fa0 <I2C_ITError+0x1bc>
 8004f2c:	68bb      	ldr	r3, [r7, #8]
 8004f2e:	2b12      	cmp	r3, #18
 8004f30:	d002      	beq.n	8004f38 <I2C_ITError+0x154>
 8004f32:	68bb      	ldr	r3, [r7, #8]
 8004f34:	2b22      	cmp	r3, #34	@ 0x22
 8004f36:	d133      	bne.n	8004fa0 <I2C_ITError+0x1bc>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004f42:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004f46:	d107      	bne.n	8004f58 <I2C_ITError+0x174>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	681a      	ldr	r2, [r3, #0]
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8004f56:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004f5c:	4618      	mov	r0, r3
 8004f5e:	f7fe fe44 	bl	8003bea <HAL_DMA_GetState>
 8004f62:	4603      	mov	r3, r0
 8004f64:	2b01      	cmp	r3, #1
 8004f66:	d017      	beq.n	8004f98 <I2C_ITError+0x1b4>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004f6c:	4a14      	ldr	r2, [pc, #80]	@ (8004fc0 <I2C_ITError+0x1dc>)
 8004f6e:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	2200      	movs	r2, #0
 8004f74:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004f7c:	4618      	mov	r0, r3
 8004f7e:	f7fe fd1e 	bl	80039be <HAL_DMA_Abort_IT>
 8004f82:	4603      	mov	r3, r0
 8004f84:	2b00      	cmp	r3, #0
 8004f86:	d011      	beq.n	8004fac <I2C_ITError+0x1c8>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004f8c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004f8e:	687a      	ldr	r2, [r7, #4]
 8004f90:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8004f92:	4610      	mov	r0, r2
 8004f94:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004f96:	e009      	b.n	8004fac <I2C_ITError+0x1c8>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8004f98:	6878      	ldr	r0, [r7, #4]
 8004f9a:	f000 f813 	bl	8004fc4 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004f9e:	e005      	b.n	8004fac <I2C_ITError+0x1c8>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 8004fa0:	6878      	ldr	r0, [r7, #4]
 8004fa2:	f000 f80f 	bl	8004fc4 <I2C_TreatErrorCallback>
  }
}
 8004fa6:	e002      	b.n	8004fae <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8004fa8:	bf00      	nop
 8004faa:	e000      	b.n	8004fae <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004fac:	bf00      	nop
}
 8004fae:	bf00      	nop
 8004fb0:	3710      	adds	r7, #16
 8004fb2:	46bd      	mov	sp, r7
 8004fb4:	bd80      	pop	{r7, pc}
 8004fb6:	bf00      	nop
 8004fb8:	ffff0000 	.word	0xffff0000
 8004fbc:	080046c3 	.word	0x080046c3
 8004fc0:	0800505b 	.word	0x0800505b

08004fc4 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8004fc4:	b580      	push	{r7, lr}
 8004fc6:	b082      	sub	sp, #8
 8004fc8:	af00      	add	r7, sp, #0
 8004fca:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004fd2:	b2db      	uxtb	r3, r3
 8004fd4:	2b60      	cmp	r3, #96	@ 0x60
 8004fd6:	d10e      	bne.n	8004ff6 <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	2220      	movs	r2, #32
 8004fdc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	2200      	movs	r2, #0
 8004fe4:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	2200      	movs	r2, #0
 8004fea:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8004fee:	6878      	ldr	r0, [r7, #4]
 8004ff0:	f7ff fb5d 	bl	80046ae <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8004ff4:	e009      	b.n	800500a <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	2200      	movs	r2, #0
 8004ffa:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	2200      	movs	r2, #0
 8005000:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_ErrorCallback(hi2c);
 8005004:	6878      	ldr	r0, [r7, #4]
 8005006:	f7ff fb48 	bl	800469a <HAL_I2C_ErrorCallback>
}
 800500a:	bf00      	nop
 800500c:	3708      	adds	r7, #8
 800500e:	46bd      	mov	sp, r7
 8005010:	bd80      	pop	{r7, pc}

08005012 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8005012:	b480      	push	{r7}
 8005014:	b083      	sub	sp, #12
 8005016:	af00      	add	r7, sp, #0
 8005018:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	699b      	ldr	r3, [r3, #24]
 8005020:	f003 0302 	and.w	r3, r3, #2
 8005024:	2b02      	cmp	r3, #2
 8005026:	d103      	bne.n	8005030 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	2200      	movs	r2, #0
 800502e:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	699b      	ldr	r3, [r3, #24]
 8005036:	f003 0301 	and.w	r3, r3, #1
 800503a:	2b01      	cmp	r3, #1
 800503c:	d007      	beq.n	800504e <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	699a      	ldr	r2, [r3, #24]
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	f042 0201 	orr.w	r2, r2, #1
 800504c:	619a      	str	r2, [r3, #24]
  }
}
 800504e:	bf00      	nop
 8005050:	370c      	adds	r7, #12
 8005052:	46bd      	mov	sp, r7
 8005054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005058:	4770      	bx	lr

0800505a <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 800505a:	b580      	push	{r7, lr}
 800505c:	b084      	sub	sp, #16
 800505e:	af00      	add	r7, sp, #0
 8005060:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005066:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 8005068:	68fb      	ldr	r3, [r7, #12]
 800506a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800506c:	2b00      	cmp	r3, #0
 800506e:	d003      	beq.n	8005078 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005074:	2200      	movs	r2, #0
 8005076:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  if (hi2c->hdmarx != NULL)
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800507c:	2b00      	cmp	r3, #0
 800507e:	d003      	beq.n	8005088 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005084:	2200      	movs	r2, #0
 8005086:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  I2C_TreatErrorCallback(hi2c);
 8005088:	68f8      	ldr	r0, [r7, #12]
 800508a:	f7ff ff9b 	bl	8004fc4 <I2C_TreatErrorCallback>
}
 800508e:	bf00      	nop
 8005090:	3710      	adds	r7, #16
 8005092:	46bd      	mov	sp, r7
 8005094:	bd80      	pop	{r7, pc}

08005096 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8005096:	b480      	push	{r7}
 8005098:	b085      	sub	sp, #20
 800509a:	af00      	add	r7, sp, #0
 800509c:	6078      	str	r0, [r7, #4]
 800509e:	460b      	mov	r3, r1
 80050a0:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 80050a2:	2300      	movs	r3, #0
 80050a4:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 80050a6:	887b      	ldrh	r3, [r7, #2]
 80050a8:	f003 0301 	and.w	r3, r3, #1
 80050ac:	2b00      	cmp	r3, #0
 80050ae:	d00f      	beq.n	80050d0 <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	f043 0342 	orr.w	r3, r3, #66	@ 0x42
 80050b6:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80050be:	b2db      	uxtb	r3, r3
 80050c0:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 80050c4:	2b28      	cmp	r3, #40	@ 0x28
 80050c6:	d003      	beq.n	80050d0 <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 80050ce:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 80050d0:	887b      	ldrh	r3, [r7, #2]
 80050d2:	f003 0302 	and.w	r3, r3, #2
 80050d6:	2b00      	cmp	r3, #0
 80050d8:	d00f      	beq.n	80050fa <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	f043 0344 	orr.w	r3, r3, #68	@ 0x44
 80050e0:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80050e8:	b2db      	uxtb	r3, r3
 80050ea:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 80050ee:	2b28      	cmp	r3, #40	@ 0x28
 80050f0:	d003      	beq.n	80050fa <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 80050f8:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 80050fa:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80050fe:	2b00      	cmp	r3, #0
 8005100:	da03      	bge.n	800510a <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	f043 03b8 	orr.w	r3, r3, #184	@ 0xb8
 8005108:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 800510a:	887b      	ldrh	r3, [r7, #2]
 800510c:	2b10      	cmp	r3, #16
 800510e:	d103      	bne.n	8005118 <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	f043 0390 	orr.w	r3, r3, #144	@ 0x90
 8005116:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 8005118:	887b      	ldrh	r3, [r7, #2]
 800511a:	2b20      	cmp	r3, #32
 800511c:	d103      	bne.n	8005126 <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 800511e:	68fb      	ldr	r3, [r7, #12]
 8005120:	f043 0320 	orr.w	r3, r3, #32
 8005124:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8005126:	887b      	ldrh	r3, [r7, #2]
 8005128:	2b40      	cmp	r3, #64	@ 0x40
 800512a:	d103      	bne.n	8005134 <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005132:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	6819      	ldr	r1, [r3, #0]
 800513a:	68fb      	ldr	r3, [r7, #12]
 800513c:	43da      	mvns	r2, r3
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	400a      	ands	r2, r1
 8005144:	601a      	str	r2, [r3, #0]
}
 8005146:	bf00      	nop
 8005148:	3714      	adds	r7, #20
 800514a:	46bd      	mov	sp, r7
 800514c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005150:	4770      	bx	lr

08005152 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8005152:	b480      	push	{r7}
 8005154:	b083      	sub	sp, #12
 8005156:	af00      	add	r7, sp, #0
 8005158:	6078      	str	r0, [r7, #4]
 800515a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005162:	b2db      	uxtb	r3, r3
 8005164:	2b20      	cmp	r3, #32
 8005166:	d138      	bne.n	80051da <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800516e:	2b01      	cmp	r3, #1
 8005170:	d101      	bne.n	8005176 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8005172:	2302      	movs	r3, #2
 8005174:	e032      	b.n	80051dc <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	2201      	movs	r2, #1
 800517a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	2224      	movs	r2, #36	@ 0x24
 8005182:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	681a      	ldr	r2, [r3, #0]
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	f022 0201 	bic.w	r2, r2, #1
 8005194:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	681a      	ldr	r2, [r3, #0]
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80051a4:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	6819      	ldr	r1, [r3, #0]
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	683a      	ldr	r2, [r7, #0]
 80051b2:	430a      	orrs	r2, r1
 80051b4:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	681a      	ldr	r2, [r3, #0]
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	f042 0201 	orr.w	r2, r2, #1
 80051c4:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	2220      	movs	r2, #32
 80051ca:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	2200      	movs	r2, #0
 80051d2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80051d6:	2300      	movs	r3, #0
 80051d8:	e000      	b.n	80051dc <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80051da:	2302      	movs	r3, #2
  }
}
 80051dc:	4618      	mov	r0, r3
 80051de:	370c      	adds	r7, #12
 80051e0:	46bd      	mov	sp, r7
 80051e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051e6:	4770      	bx	lr

080051e8 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80051e8:	b480      	push	{r7}
 80051ea:	b085      	sub	sp, #20
 80051ec:	af00      	add	r7, sp, #0
 80051ee:	6078      	str	r0, [r7, #4]
 80051f0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80051f8:	b2db      	uxtb	r3, r3
 80051fa:	2b20      	cmp	r3, #32
 80051fc:	d139      	bne.n	8005272 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005204:	2b01      	cmp	r3, #1
 8005206:	d101      	bne.n	800520c <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8005208:	2302      	movs	r3, #2
 800520a:	e033      	b.n	8005274 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	2201      	movs	r2, #1
 8005210:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	2224      	movs	r2, #36	@ 0x24
 8005218:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	681a      	ldr	r2, [r3, #0]
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	f022 0201 	bic.w	r2, r2, #1
 800522a:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8005234:	68fb      	ldr	r3, [r7, #12]
 8005236:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800523a:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800523c:	683b      	ldr	r3, [r7, #0]
 800523e:	021b      	lsls	r3, r3, #8
 8005240:	68fa      	ldr	r2, [r7, #12]
 8005242:	4313      	orrs	r3, r2
 8005244:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	68fa      	ldr	r2, [r7, #12]
 800524c:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	681a      	ldr	r2, [r3, #0]
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	f042 0201 	orr.w	r2, r2, #1
 800525c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	2220      	movs	r2, #32
 8005262:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	2200      	movs	r2, #0
 800526a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800526e:	2300      	movs	r3, #0
 8005270:	e000      	b.n	8005274 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8005272:	2302      	movs	r3, #2
  }
}
 8005274:	4618      	mov	r0, r3
 8005276:	3714      	adds	r7, #20
 8005278:	46bd      	mov	sp, r7
 800527a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800527e:	4770      	bx	lr

08005280 <HAL_PWR_PVDCallback>:
/**
  * @brief PWR PVD interrupt callback
  * @retval None
  */
__weak void HAL_PWR_PVDCallback(void)
{
 8005280:	b480      	push	{r7}
 8005282:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_PWR_PVDCallback can be implemented in the user file
   */
}
 8005284:	bf00      	nop
 8005286:	46bd      	mov	sp, r7
 8005288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800528c:	4770      	bx	lr
	...

08005290 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8005290:	b480      	push	{r7}
 8005292:	b085      	sub	sp, #20
 8005294:	af00      	add	r7, sp, #0
 8005296:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	2b00      	cmp	r3, #0
 800529c:	d141      	bne.n	8005322 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800529e:	4b4b      	ldr	r3, [pc, #300]	@ (80053cc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80052a6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80052aa:	d131      	bne.n	8005310 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80052ac:	4b47      	ldr	r3, [pc, #284]	@ (80053cc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80052ae:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80052b2:	4a46      	ldr	r2, [pc, #280]	@ (80053cc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80052b4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80052b8:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80052bc:	4b43      	ldr	r3, [pc, #268]	@ (80053cc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80052c4:	4a41      	ldr	r2, [pc, #260]	@ (80053cc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80052c6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80052ca:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80052cc:	4b40      	ldr	r3, [pc, #256]	@ (80053d0 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	2232      	movs	r2, #50	@ 0x32
 80052d2:	fb02 f303 	mul.w	r3, r2, r3
 80052d6:	4a3f      	ldr	r2, [pc, #252]	@ (80053d4 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80052d8:	fba2 2303 	umull	r2, r3, r2, r3
 80052dc:	0c9b      	lsrs	r3, r3, #18
 80052de:	3301      	adds	r3, #1
 80052e0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80052e2:	e002      	b.n	80052ea <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	3b01      	subs	r3, #1
 80052e8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80052ea:	4b38      	ldr	r3, [pc, #224]	@ (80053cc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80052ec:	695b      	ldr	r3, [r3, #20]
 80052ee:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80052f2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80052f6:	d102      	bne.n	80052fe <HAL_PWREx_ControlVoltageScaling+0x6e>
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	2b00      	cmp	r3, #0
 80052fc:	d1f2      	bne.n	80052e4 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80052fe:	4b33      	ldr	r3, [pc, #204]	@ (80053cc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005300:	695b      	ldr	r3, [r3, #20]
 8005302:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005306:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800530a:	d158      	bne.n	80053be <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800530c:	2303      	movs	r3, #3
 800530e:	e057      	b.n	80053c0 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005310:	4b2e      	ldr	r3, [pc, #184]	@ (80053cc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005312:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005316:	4a2d      	ldr	r2, [pc, #180]	@ (80053cc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005318:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800531c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8005320:	e04d      	b.n	80053be <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005328:	d141      	bne.n	80053ae <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800532a:	4b28      	ldr	r3, [pc, #160]	@ (80053cc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8005332:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005336:	d131      	bne.n	800539c <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005338:	4b24      	ldr	r3, [pc, #144]	@ (80053cc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800533a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800533e:	4a23      	ldr	r2, [pc, #140]	@ (80053cc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005340:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005344:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8005348:	4b20      	ldr	r3, [pc, #128]	@ (80053cc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8005350:	4a1e      	ldr	r2, [pc, #120]	@ (80053cc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005352:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8005356:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8005358:	4b1d      	ldr	r3, [pc, #116]	@ (80053d0 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	2232      	movs	r2, #50	@ 0x32
 800535e:	fb02 f303 	mul.w	r3, r2, r3
 8005362:	4a1c      	ldr	r2, [pc, #112]	@ (80053d4 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8005364:	fba2 2303 	umull	r2, r3, r2, r3
 8005368:	0c9b      	lsrs	r3, r3, #18
 800536a:	3301      	adds	r3, #1
 800536c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800536e:	e002      	b.n	8005376 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8005370:	68fb      	ldr	r3, [r7, #12]
 8005372:	3b01      	subs	r3, #1
 8005374:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005376:	4b15      	ldr	r3, [pc, #84]	@ (80053cc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005378:	695b      	ldr	r3, [r3, #20]
 800537a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800537e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005382:	d102      	bne.n	800538a <HAL_PWREx_ControlVoltageScaling+0xfa>
 8005384:	68fb      	ldr	r3, [r7, #12]
 8005386:	2b00      	cmp	r3, #0
 8005388:	d1f2      	bne.n	8005370 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800538a:	4b10      	ldr	r3, [pc, #64]	@ (80053cc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800538c:	695b      	ldr	r3, [r3, #20]
 800538e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005392:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005396:	d112      	bne.n	80053be <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8005398:	2303      	movs	r3, #3
 800539a:	e011      	b.n	80053c0 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800539c:	4b0b      	ldr	r3, [pc, #44]	@ (80053cc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800539e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80053a2:	4a0a      	ldr	r2, [pc, #40]	@ (80053cc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80053a4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80053a8:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 80053ac:	e007      	b.n	80053be <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80053ae:	4b07      	ldr	r3, [pc, #28]	@ (80053cc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80053b6:	4a05      	ldr	r2, [pc, #20]	@ (80053cc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80053b8:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80053bc:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 80053be:	2300      	movs	r3, #0
}
 80053c0:	4618      	mov	r0, r3
 80053c2:	3714      	adds	r7, #20
 80053c4:	46bd      	mov	sp, r7
 80053c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ca:	4770      	bx	lr
 80053cc:	40007000 	.word	0x40007000
 80053d0:	20000000 	.word	0x20000000
 80053d4:	431bde83 	.word	0x431bde83

080053d8 <HAL_PWREx_PVD_PVM_IRQHandler>:
  * @brief This function handles the PWR PVD/PVMx interrupt request.
  * @note This API should be called under the PVD_PVM_IRQHandler().
  * @retval None
  */
void HAL_PWREx_PVD_PVM_IRQHandler(void)
{
 80053d8:	b580      	push	{r7, lr}
 80053da:	af00      	add	r7, sp, #0
  /* Check PWR exti flag */
  if(__HAL_PWR_PVD_EXTI_GET_FLAG() != 0U)
 80053dc:	4b1c      	ldr	r3, [pc, #112]	@ (8005450 <HAL_PWREx_PVD_PVM_IRQHandler+0x78>)
 80053de:	695b      	ldr	r3, [r3, #20]
 80053e0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80053e4:	2b00      	cmp	r3, #0
 80053e6:	d005      	beq.n	80053f4 <HAL_PWREx_PVD_PVM_IRQHandler+0x1c>
  {
    /* PWR PVD interrupt user callback */
    HAL_PWR_PVDCallback();
 80053e8:	f7ff ff4a 	bl	8005280 <HAL_PWR_PVDCallback>

    /* Clear PVD exti pending bit */
    __HAL_PWR_PVD_EXTI_CLEAR_FLAG();
 80053ec:	4b18      	ldr	r3, [pc, #96]	@ (8005450 <HAL_PWREx_PVD_PVM_IRQHandler+0x78>)
 80053ee:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80053f2:	615a      	str	r2, [r3, #20]
  }
  /* Next, successively check PVMx exti flags */
#if defined(PWR_CR2_PVME1)
  if(__HAL_PWR_PVM1_EXTI_GET_FLAG() != 0U)
 80053f4:	4b16      	ldr	r3, [pc, #88]	@ (8005450 <HAL_PWREx_PVD_PVM_IRQHandler+0x78>)
 80053f6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80053f8:	f003 0308 	and.w	r3, r3, #8
 80053fc:	2b00      	cmp	r3, #0
 80053fe:	d004      	beq.n	800540a <HAL_PWREx_PVD_PVM_IRQHandler+0x32>
  {
    /* PWR PVM1 interrupt user callback */
    HAL_PWREx_PVM1Callback();
 8005400:	f000 f828 	bl	8005454 <HAL_PWREx_PVM1Callback>

    /* Clear PVM1 exti pending bit */
    __HAL_PWR_PVM1_EXTI_CLEAR_FLAG();
 8005404:	4b12      	ldr	r3, [pc, #72]	@ (8005450 <HAL_PWREx_PVD_PVM_IRQHandler+0x78>)
 8005406:	2208      	movs	r2, #8
 8005408:	635a      	str	r2, [r3, #52]	@ 0x34
  }
#endif /* PWR_CR2_PVME1 */
#if defined(PWR_CR2_PVME2)
  if(__HAL_PWR_PVM2_EXTI_GET_FLAG() != 0U)
 800540a:	4b11      	ldr	r3, [pc, #68]	@ (8005450 <HAL_PWREx_PVD_PVM_IRQHandler+0x78>)
 800540c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800540e:	f003 0310 	and.w	r3, r3, #16
 8005412:	2b00      	cmp	r3, #0
 8005414:	d004      	beq.n	8005420 <HAL_PWREx_PVD_PVM_IRQHandler+0x48>
  {
    /* PWR PVM2 interrupt user callback */
    HAL_PWREx_PVM2Callback();
 8005416:	f000 f824 	bl	8005462 <HAL_PWREx_PVM2Callback>

    /* Clear PVM2 exti pending bit */
    __HAL_PWR_PVM2_EXTI_CLEAR_FLAG();
 800541a:	4b0d      	ldr	r3, [pc, #52]	@ (8005450 <HAL_PWREx_PVD_PVM_IRQHandler+0x78>)
 800541c:	2210      	movs	r2, #16
 800541e:	635a      	str	r2, [r3, #52]	@ 0x34
  }
#endif /* PWR_CR2_PVME2 */
  if(__HAL_PWR_PVM3_EXTI_GET_FLAG() != 0U)
 8005420:	4b0b      	ldr	r3, [pc, #44]	@ (8005450 <HAL_PWREx_PVD_PVM_IRQHandler+0x78>)
 8005422:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005424:	f003 0320 	and.w	r3, r3, #32
 8005428:	2b00      	cmp	r3, #0
 800542a:	d004      	beq.n	8005436 <HAL_PWREx_PVD_PVM_IRQHandler+0x5e>
  {
    /* PWR PVM3 interrupt user callback */
    HAL_PWREx_PVM3Callback();
 800542c:	f000 f820 	bl	8005470 <HAL_PWREx_PVM3Callback>

    /* Clear PVM3 exti pending bit */
    __HAL_PWR_PVM3_EXTI_CLEAR_FLAG();
 8005430:	4b07      	ldr	r3, [pc, #28]	@ (8005450 <HAL_PWREx_PVD_PVM_IRQHandler+0x78>)
 8005432:	2220      	movs	r2, #32
 8005434:	635a      	str	r2, [r3, #52]	@ 0x34
  }
  if(__HAL_PWR_PVM4_EXTI_GET_FLAG() != 0U)
 8005436:	4b06      	ldr	r3, [pc, #24]	@ (8005450 <HAL_PWREx_PVD_PVM_IRQHandler+0x78>)
 8005438:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800543a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800543e:	2b00      	cmp	r3, #0
 8005440:	d004      	beq.n	800544c <HAL_PWREx_PVD_PVM_IRQHandler+0x74>
  {
    /* PWR PVM4 interrupt user callback */
    HAL_PWREx_PVM4Callback();
 8005442:	f000 f81c 	bl	800547e <HAL_PWREx_PVM4Callback>

    /* Clear PVM4 exti pending bit */
    __HAL_PWR_PVM4_EXTI_CLEAR_FLAG();
 8005446:	4b02      	ldr	r3, [pc, #8]	@ (8005450 <HAL_PWREx_PVD_PVM_IRQHandler+0x78>)
 8005448:	2240      	movs	r2, #64	@ 0x40
 800544a:	635a      	str	r2, [r3, #52]	@ 0x34
  }
}
 800544c:	bf00      	nop
 800544e:	bd80      	pop	{r7, pc}
 8005450:	40010400 	.word	0x40010400

08005454 <HAL_PWREx_PVM1Callback>:
/**
  * @brief PWR PVM1 interrupt callback
  * @retval None
  */
__weak void HAL_PWREx_PVM1Callback(void)
{
 8005454:	b480      	push	{r7}
 8005456:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified; when the callback is needed,
            HAL_PWREx_PVM1Callback() API can be implemented in the user file
   */
}
 8005458:	bf00      	nop
 800545a:	46bd      	mov	sp, r7
 800545c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005460:	4770      	bx	lr

08005462 <HAL_PWREx_PVM2Callback>:
/**
  * @brief PWR PVM2 interrupt callback
  * @retval None
  */
__weak void HAL_PWREx_PVM2Callback(void)
{
 8005462:	b480      	push	{r7}
 8005464:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified; when the callback is needed,
            HAL_PWREx_PVM2Callback() API can be implemented in the user file
   */
}
 8005466:	bf00      	nop
 8005468:	46bd      	mov	sp, r7
 800546a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800546e:	4770      	bx	lr

08005470 <HAL_PWREx_PVM3Callback>:
/**
  * @brief PWR PVM3 interrupt callback
  * @retval None
  */
__weak void HAL_PWREx_PVM3Callback(void)
{
 8005470:	b480      	push	{r7}
 8005472:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified; when the callback is needed,
            HAL_PWREx_PVM3Callback() API can be implemented in the user file
   */
}
 8005474:	bf00      	nop
 8005476:	46bd      	mov	sp, r7
 8005478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800547c:	4770      	bx	lr

0800547e <HAL_PWREx_PVM4Callback>:
/**
  * @brief PWR PVM4 interrupt callback
  * @retval None
  */
__weak void HAL_PWREx_PVM4Callback(void)
{
 800547e:	b480      	push	{r7}
 8005480:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified; when the callback is needed,
            HAL_PWREx_PVM4Callback() API can be implemented in the user file
   */
}
 8005482:	bf00      	nop
 8005484:	46bd      	mov	sp, r7
 8005486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800548a:	4770      	bx	lr

0800548c <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 800548c:	b480      	push	{r7}
 800548e:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8005490:	4b05      	ldr	r3, [pc, #20]	@ (80054a8 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8005492:	689b      	ldr	r3, [r3, #8]
 8005494:	4a04      	ldr	r2, [pc, #16]	@ (80054a8 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8005496:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800549a:	6093      	str	r3, [r2, #8]
}
 800549c:	bf00      	nop
 800549e:	46bd      	mov	sp, r7
 80054a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054a4:	4770      	bx	lr
 80054a6:	bf00      	nop
 80054a8:	40007000 	.word	0x40007000

080054ac <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80054ac:	b580      	push	{r7, lr}
 80054ae:	b088      	sub	sp, #32
 80054b0:	af00      	add	r7, sp, #0
 80054b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	2b00      	cmp	r3, #0
 80054b8:	d101      	bne.n	80054be <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80054ba:	2301      	movs	r3, #1
 80054bc:	e2fe      	b.n	8005abc <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	f003 0301 	and.w	r3, r3, #1
 80054c6:	2b00      	cmp	r3, #0
 80054c8:	d075      	beq.n	80055b6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80054ca:	4b97      	ldr	r3, [pc, #604]	@ (8005728 <HAL_RCC_OscConfig+0x27c>)
 80054cc:	689b      	ldr	r3, [r3, #8]
 80054ce:	f003 030c 	and.w	r3, r3, #12
 80054d2:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80054d4:	4b94      	ldr	r3, [pc, #592]	@ (8005728 <HAL_RCC_OscConfig+0x27c>)
 80054d6:	68db      	ldr	r3, [r3, #12]
 80054d8:	f003 0303 	and.w	r3, r3, #3
 80054dc:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 80054de:	69bb      	ldr	r3, [r7, #24]
 80054e0:	2b0c      	cmp	r3, #12
 80054e2:	d102      	bne.n	80054ea <HAL_RCC_OscConfig+0x3e>
 80054e4:	697b      	ldr	r3, [r7, #20]
 80054e6:	2b03      	cmp	r3, #3
 80054e8:	d002      	beq.n	80054f0 <HAL_RCC_OscConfig+0x44>
 80054ea:	69bb      	ldr	r3, [r7, #24]
 80054ec:	2b08      	cmp	r3, #8
 80054ee:	d10b      	bne.n	8005508 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80054f0:	4b8d      	ldr	r3, [pc, #564]	@ (8005728 <HAL_RCC_OscConfig+0x27c>)
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80054f8:	2b00      	cmp	r3, #0
 80054fa:	d05b      	beq.n	80055b4 <HAL_RCC_OscConfig+0x108>
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	685b      	ldr	r3, [r3, #4]
 8005500:	2b00      	cmp	r3, #0
 8005502:	d157      	bne.n	80055b4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005504:	2301      	movs	r3, #1
 8005506:	e2d9      	b.n	8005abc <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	685b      	ldr	r3, [r3, #4]
 800550c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005510:	d106      	bne.n	8005520 <HAL_RCC_OscConfig+0x74>
 8005512:	4b85      	ldr	r3, [pc, #532]	@ (8005728 <HAL_RCC_OscConfig+0x27c>)
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	4a84      	ldr	r2, [pc, #528]	@ (8005728 <HAL_RCC_OscConfig+0x27c>)
 8005518:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800551c:	6013      	str	r3, [r2, #0]
 800551e:	e01d      	b.n	800555c <HAL_RCC_OscConfig+0xb0>
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	685b      	ldr	r3, [r3, #4]
 8005524:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005528:	d10c      	bne.n	8005544 <HAL_RCC_OscConfig+0x98>
 800552a:	4b7f      	ldr	r3, [pc, #508]	@ (8005728 <HAL_RCC_OscConfig+0x27c>)
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	4a7e      	ldr	r2, [pc, #504]	@ (8005728 <HAL_RCC_OscConfig+0x27c>)
 8005530:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005534:	6013      	str	r3, [r2, #0]
 8005536:	4b7c      	ldr	r3, [pc, #496]	@ (8005728 <HAL_RCC_OscConfig+0x27c>)
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	4a7b      	ldr	r2, [pc, #492]	@ (8005728 <HAL_RCC_OscConfig+0x27c>)
 800553c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005540:	6013      	str	r3, [r2, #0]
 8005542:	e00b      	b.n	800555c <HAL_RCC_OscConfig+0xb0>
 8005544:	4b78      	ldr	r3, [pc, #480]	@ (8005728 <HAL_RCC_OscConfig+0x27c>)
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	4a77      	ldr	r2, [pc, #476]	@ (8005728 <HAL_RCC_OscConfig+0x27c>)
 800554a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800554e:	6013      	str	r3, [r2, #0]
 8005550:	4b75      	ldr	r3, [pc, #468]	@ (8005728 <HAL_RCC_OscConfig+0x27c>)
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	4a74      	ldr	r2, [pc, #464]	@ (8005728 <HAL_RCC_OscConfig+0x27c>)
 8005556:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800555a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	685b      	ldr	r3, [r3, #4]
 8005560:	2b00      	cmp	r3, #0
 8005562:	d013      	beq.n	800558c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005564:	f7fc fc6e 	bl	8001e44 <HAL_GetTick>
 8005568:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800556a:	e008      	b.n	800557e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800556c:	f7fc fc6a 	bl	8001e44 <HAL_GetTick>
 8005570:	4602      	mov	r2, r0
 8005572:	693b      	ldr	r3, [r7, #16]
 8005574:	1ad3      	subs	r3, r2, r3
 8005576:	2b64      	cmp	r3, #100	@ 0x64
 8005578:	d901      	bls.n	800557e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800557a:	2303      	movs	r3, #3
 800557c:	e29e      	b.n	8005abc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800557e:	4b6a      	ldr	r3, [pc, #424]	@ (8005728 <HAL_RCC_OscConfig+0x27c>)
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005586:	2b00      	cmp	r3, #0
 8005588:	d0f0      	beq.n	800556c <HAL_RCC_OscConfig+0xc0>
 800558a:	e014      	b.n	80055b6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800558c:	f7fc fc5a 	bl	8001e44 <HAL_GetTick>
 8005590:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005592:	e008      	b.n	80055a6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005594:	f7fc fc56 	bl	8001e44 <HAL_GetTick>
 8005598:	4602      	mov	r2, r0
 800559a:	693b      	ldr	r3, [r7, #16]
 800559c:	1ad3      	subs	r3, r2, r3
 800559e:	2b64      	cmp	r3, #100	@ 0x64
 80055a0:	d901      	bls.n	80055a6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80055a2:	2303      	movs	r3, #3
 80055a4:	e28a      	b.n	8005abc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80055a6:	4b60      	ldr	r3, [pc, #384]	@ (8005728 <HAL_RCC_OscConfig+0x27c>)
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80055ae:	2b00      	cmp	r3, #0
 80055b0:	d1f0      	bne.n	8005594 <HAL_RCC_OscConfig+0xe8>
 80055b2:	e000      	b.n	80055b6 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80055b4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	f003 0302 	and.w	r3, r3, #2
 80055be:	2b00      	cmp	r3, #0
 80055c0:	d075      	beq.n	80056ae <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80055c2:	4b59      	ldr	r3, [pc, #356]	@ (8005728 <HAL_RCC_OscConfig+0x27c>)
 80055c4:	689b      	ldr	r3, [r3, #8]
 80055c6:	f003 030c 	and.w	r3, r3, #12
 80055ca:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80055cc:	4b56      	ldr	r3, [pc, #344]	@ (8005728 <HAL_RCC_OscConfig+0x27c>)
 80055ce:	68db      	ldr	r3, [r3, #12]
 80055d0:	f003 0303 	and.w	r3, r3, #3
 80055d4:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 80055d6:	69bb      	ldr	r3, [r7, #24]
 80055d8:	2b0c      	cmp	r3, #12
 80055da:	d102      	bne.n	80055e2 <HAL_RCC_OscConfig+0x136>
 80055dc:	697b      	ldr	r3, [r7, #20]
 80055de:	2b02      	cmp	r3, #2
 80055e0:	d002      	beq.n	80055e8 <HAL_RCC_OscConfig+0x13c>
 80055e2:	69bb      	ldr	r3, [r7, #24]
 80055e4:	2b04      	cmp	r3, #4
 80055e6:	d11f      	bne.n	8005628 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80055e8:	4b4f      	ldr	r3, [pc, #316]	@ (8005728 <HAL_RCC_OscConfig+0x27c>)
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80055f0:	2b00      	cmp	r3, #0
 80055f2:	d005      	beq.n	8005600 <HAL_RCC_OscConfig+0x154>
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	68db      	ldr	r3, [r3, #12]
 80055f8:	2b00      	cmp	r3, #0
 80055fa:	d101      	bne.n	8005600 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 80055fc:	2301      	movs	r3, #1
 80055fe:	e25d      	b.n	8005abc <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005600:	4b49      	ldr	r3, [pc, #292]	@ (8005728 <HAL_RCC_OscConfig+0x27c>)
 8005602:	685b      	ldr	r3, [r3, #4]
 8005604:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	691b      	ldr	r3, [r3, #16]
 800560c:	061b      	lsls	r3, r3, #24
 800560e:	4946      	ldr	r1, [pc, #280]	@ (8005728 <HAL_RCC_OscConfig+0x27c>)
 8005610:	4313      	orrs	r3, r2
 8005612:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8005614:	4b45      	ldr	r3, [pc, #276]	@ (800572c <HAL_RCC_OscConfig+0x280>)
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	4618      	mov	r0, r3
 800561a:	f7fc fbc7 	bl	8001dac <HAL_InitTick>
 800561e:	4603      	mov	r3, r0
 8005620:	2b00      	cmp	r3, #0
 8005622:	d043      	beq.n	80056ac <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8005624:	2301      	movs	r3, #1
 8005626:	e249      	b.n	8005abc <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	68db      	ldr	r3, [r3, #12]
 800562c:	2b00      	cmp	r3, #0
 800562e:	d023      	beq.n	8005678 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005630:	4b3d      	ldr	r3, [pc, #244]	@ (8005728 <HAL_RCC_OscConfig+0x27c>)
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	4a3c      	ldr	r2, [pc, #240]	@ (8005728 <HAL_RCC_OscConfig+0x27c>)
 8005636:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800563a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800563c:	f7fc fc02 	bl	8001e44 <HAL_GetTick>
 8005640:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005642:	e008      	b.n	8005656 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005644:	f7fc fbfe 	bl	8001e44 <HAL_GetTick>
 8005648:	4602      	mov	r2, r0
 800564a:	693b      	ldr	r3, [r7, #16]
 800564c:	1ad3      	subs	r3, r2, r3
 800564e:	2b02      	cmp	r3, #2
 8005650:	d901      	bls.n	8005656 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8005652:	2303      	movs	r3, #3
 8005654:	e232      	b.n	8005abc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005656:	4b34      	ldr	r3, [pc, #208]	@ (8005728 <HAL_RCC_OscConfig+0x27c>)
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800565e:	2b00      	cmp	r3, #0
 8005660:	d0f0      	beq.n	8005644 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005662:	4b31      	ldr	r3, [pc, #196]	@ (8005728 <HAL_RCC_OscConfig+0x27c>)
 8005664:	685b      	ldr	r3, [r3, #4]
 8005666:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	691b      	ldr	r3, [r3, #16]
 800566e:	061b      	lsls	r3, r3, #24
 8005670:	492d      	ldr	r1, [pc, #180]	@ (8005728 <HAL_RCC_OscConfig+0x27c>)
 8005672:	4313      	orrs	r3, r2
 8005674:	604b      	str	r3, [r1, #4]
 8005676:	e01a      	b.n	80056ae <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005678:	4b2b      	ldr	r3, [pc, #172]	@ (8005728 <HAL_RCC_OscConfig+0x27c>)
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	4a2a      	ldr	r2, [pc, #168]	@ (8005728 <HAL_RCC_OscConfig+0x27c>)
 800567e:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005682:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005684:	f7fc fbde 	bl	8001e44 <HAL_GetTick>
 8005688:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800568a:	e008      	b.n	800569e <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800568c:	f7fc fbda 	bl	8001e44 <HAL_GetTick>
 8005690:	4602      	mov	r2, r0
 8005692:	693b      	ldr	r3, [r7, #16]
 8005694:	1ad3      	subs	r3, r2, r3
 8005696:	2b02      	cmp	r3, #2
 8005698:	d901      	bls.n	800569e <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 800569a:	2303      	movs	r3, #3
 800569c:	e20e      	b.n	8005abc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800569e:	4b22      	ldr	r3, [pc, #136]	@ (8005728 <HAL_RCC_OscConfig+0x27c>)
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80056a6:	2b00      	cmp	r3, #0
 80056a8:	d1f0      	bne.n	800568c <HAL_RCC_OscConfig+0x1e0>
 80056aa:	e000      	b.n	80056ae <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80056ac:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	f003 0308 	and.w	r3, r3, #8
 80056b6:	2b00      	cmp	r3, #0
 80056b8:	d041      	beq.n	800573e <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	695b      	ldr	r3, [r3, #20]
 80056be:	2b00      	cmp	r3, #0
 80056c0:	d01c      	beq.n	80056fc <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80056c2:	4b19      	ldr	r3, [pc, #100]	@ (8005728 <HAL_RCC_OscConfig+0x27c>)
 80056c4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80056c8:	4a17      	ldr	r2, [pc, #92]	@ (8005728 <HAL_RCC_OscConfig+0x27c>)
 80056ca:	f043 0301 	orr.w	r3, r3, #1
 80056ce:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80056d2:	f7fc fbb7 	bl	8001e44 <HAL_GetTick>
 80056d6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80056d8:	e008      	b.n	80056ec <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80056da:	f7fc fbb3 	bl	8001e44 <HAL_GetTick>
 80056de:	4602      	mov	r2, r0
 80056e0:	693b      	ldr	r3, [r7, #16]
 80056e2:	1ad3      	subs	r3, r2, r3
 80056e4:	2b02      	cmp	r3, #2
 80056e6:	d901      	bls.n	80056ec <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80056e8:	2303      	movs	r3, #3
 80056ea:	e1e7      	b.n	8005abc <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80056ec:	4b0e      	ldr	r3, [pc, #56]	@ (8005728 <HAL_RCC_OscConfig+0x27c>)
 80056ee:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80056f2:	f003 0302 	and.w	r3, r3, #2
 80056f6:	2b00      	cmp	r3, #0
 80056f8:	d0ef      	beq.n	80056da <HAL_RCC_OscConfig+0x22e>
 80056fa:	e020      	b.n	800573e <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80056fc:	4b0a      	ldr	r3, [pc, #40]	@ (8005728 <HAL_RCC_OscConfig+0x27c>)
 80056fe:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005702:	4a09      	ldr	r2, [pc, #36]	@ (8005728 <HAL_RCC_OscConfig+0x27c>)
 8005704:	f023 0301 	bic.w	r3, r3, #1
 8005708:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800570c:	f7fc fb9a 	bl	8001e44 <HAL_GetTick>
 8005710:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005712:	e00d      	b.n	8005730 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005714:	f7fc fb96 	bl	8001e44 <HAL_GetTick>
 8005718:	4602      	mov	r2, r0
 800571a:	693b      	ldr	r3, [r7, #16]
 800571c:	1ad3      	subs	r3, r2, r3
 800571e:	2b02      	cmp	r3, #2
 8005720:	d906      	bls.n	8005730 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8005722:	2303      	movs	r3, #3
 8005724:	e1ca      	b.n	8005abc <HAL_RCC_OscConfig+0x610>
 8005726:	bf00      	nop
 8005728:	40021000 	.word	0x40021000
 800572c:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005730:	4b8c      	ldr	r3, [pc, #560]	@ (8005964 <HAL_RCC_OscConfig+0x4b8>)
 8005732:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005736:	f003 0302 	and.w	r3, r3, #2
 800573a:	2b00      	cmp	r3, #0
 800573c:	d1ea      	bne.n	8005714 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	f003 0304 	and.w	r3, r3, #4
 8005746:	2b00      	cmp	r3, #0
 8005748:	f000 80a6 	beq.w	8005898 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 800574c:	2300      	movs	r3, #0
 800574e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8005750:	4b84      	ldr	r3, [pc, #528]	@ (8005964 <HAL_RCC_OscConfig+0x4b8>)
 8005752:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005754:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005758:	2b00      	cmp	r3, #0
 800575a:	d101      	bne.n	8005760 <HAL_RCC_OscConfig+0x2b4>
 800575c:	2301      	movs	r3, #1
 800575e:	e000      	b.n	8005762 <HAL_RCC_OscConfig+0x2b6>
 8005760:	2300      	movs	r3, #0
 8005762:	2b00      	cmp	r3, #0
 8005764:	d00d      	beq.n	8005782 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005766:	4b7f      	ldr	r3, [pc, #508]	@ (8005964 <HAL_RCC_OscConfig+0x4b8>)
 8005768:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800576a:	4a7e      	ldr	r2, [pc, #504]	@ (8005964 <HAL_RCC_OscConfig+0x4b8>)
 800576c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005770:	6593      	str	r3, [r2, #88]	@ 0x58
 8005772:	4b7c      	ldr	r3, [pc, #496]	@ (8005964 <HAL_RCC_OscConfig+0x4b8>)
 8005774:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005776:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800577a:	60fb      	str	r3, [r7, #12]
 800577c:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800577e:	2301      	movs	r3, #1
 8005780:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005782:	4b79      	ldr	r3, [pc, #484]	@ (8005968 <HAL_RCC_OscConfig+0x4bc>)
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800578a:	2b00      	cmp	r3, #0
 800578c:	d118      	bne.n	80057c0 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800578e:	4b76      	ldr	r3, [pc, #472]	@ (8005968 <HAL_RCC_OscConfig+0x4bc>)
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	4a75      	ldr	r2, [pc, #468]	@ (8005968 <HAL_RCC_OscConfig+0x4bc>)
 8005794:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005798:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800579a:	f7fc fb53 	bl	8001e44 <HAL_GetTick>
 800579e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80057a0:	e008      	b.n	80057b4 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80057a2:	f7fc fb4f 	bl	8001e44 <HAL_GetTick>
 80057a6:	4602      	mov	r2, r0
 80057a8:	693b      	ldr	r3, [r7, #16]
 80057aa:	1ad3      	subs	r3, r2, r3
 80057ac:	2b02      	cmp	r3, #2
 80057ae:	d901      	bls.n	80057b4 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 80057b0:	2303      	movs	r3, #3
 80057b2:	e183      	b.n	8005abc <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80057b4:	4b6c      	ldr	r3, [pc, #432]	@ (8005968 <HAL_RCC_OscConfig+0x4bc>)
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80057bc:	2b00      	cmp	r3, #0
 80057be:	d0f0      	beq.n	80057a2 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	689b      	ldr	r3, [r3, #8]
 80057c4:	2b01      	cmp	r3, #1
 80057c6:	d108      	bne.n	80057da <HAL_RCC_OscConfig+0x32e>
 80057c8:	4b66      	ldr	r3, [pc, #408]	@ (8005964 <HAL_RCC_OscConfig+0x4b8>)
 80057ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80057ce:	4a65      	ldr	r2, [pc, #404]	@ (8005964 <HAL_RCC_OscConfig+0x4b8>)
 80057d0:	f043 0301 	orr.w	r3, r3, #1
 80057d4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80057d8:	e024      	b.n	8005824 <HAL_RCC_OscConfig+0x378>
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	689b      	ldr	r3, [r3, #8]
 80057de:	2b05      	cmp	r3, #5
 80057e0:	d110      	bne.n	8005804 <HAL_RCC_OscConfig+0x358>
 80057e2:	4b60      	ldr	r3, [pc, #384]	@ (8005964 <HAL_RCC_OscConfig+0x4b8>)
 80057e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80057e8:	4a5e      	ldr	r2, [pc, #376]	@ (8005964 <HAL_RCC_OscConfig+0x4b8>)
 80057ea:	f043 0304 	orr.w	r3, r3, #4
 80057ee:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80057f2:	4b5c      	ldr	r3, [pc, #368]	@ (8005964 <HAL_RCC_OscConfig+0x4b8>)
 80057f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80057f8:	4a5a      	ldr	r2, [pc, #360]	@ (8005964 <HAL_RCC_OscConfig+0x4b8>)
 80057fa:	f043 0301 	orr.w	r3, r3, #1
 80057fe:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8005802:	e00f      	b.n	8005824 <HAL_RCC_OscConfig+0x378>
 8005804:	4b57      	ldr	r3, [pc, #348]	@ (8005964 <HAL_RCC_OscConfig+0x4b8>)
 8005806:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800580a:	4a56      	ldr	r2, [pc, #344]	@ (8005964 <HAL_RCC_OscConfig+0x4b8>)
 800580c:	f023 0301 	bic.w	r3, r3, #1
 8005810:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8005814:	4b53      	ldr	r3, [pc, #332]	@ (8005964 <HAL_RCC_OscConfig+0x4b8>)
 8005816:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800581a:	4a52      	ldr	r2, [pc, #328]	@ (8005964 <HAL_RCC_OscConfig+0x4b8>)
 800581c:	f023 0304 	bic.w	r3, r3, #4
 8005820:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	689b      	ldr	r3, [r3, #8]
 8005828:	2b00      	cmp	r3, #0
 800582a:	d016      	beq.n	800585a <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800582c:	f7fc fb0a 	bl	8001e44 <HAL_GetTick>
 8005830:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005832:	e00a      	b.n	800584a <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005834:	f7fc fb06 	bl	8001e44 <HAL_GetTick>
 8005838:	4602      	mov	r2, r0
 800583a:	693b      	ldr	r3, [r7, #16]
 800583c:	1ad3      	subs	r3, r2, r3
 800583e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005842:	4293      	cmp	r3, r2
 8005844:	d901      	bls.n	800584a <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8005846:	2303      	movs	r3, #3
 8005848:	e138      	b.n	8005abc <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800584a:	4b46      	ldr	r3, [pc, #280]	@ (8005964 <HAL_RCC_OscConfig+0x4b8>)
 800584c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005850:	f003 0302 	and.w	r3, r3, #2
 8005854:	2b00      	cmp	r3, #0
 8005856:	d0ed      	beq.n	8005834 <HAL_RCC_OscConfig+0x388>
 8005858:	e015      	b.n	8005886 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800585a:	f7fc faf3 	bl	8001e44 <HAL_GetTick>
 800585e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005860:	e00a      	b.n	8005878 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005862:	f7fc faef 	bl	8001e44 <HAL_GetTick>
 8005866:	4602      	mov	r2, r0
 8005868:	693b      	ldr	r3, [r7, #16]
 800586a:	1ad3      	subs	r3, r2, r3
 800586c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005870:	4293      	cmp	r3, r2
 8005872:	d901      	bls.n	8005878 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8005874:	2303      	movs	r3, #3
 8005876:	e121      	b.n	8005abc <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005878:	4b3a      	ldr	r3, [pc, #232]	@ (8005964 <HAL_RCC_OscConfig+0x4b8>)
 800587a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800587e:	f003 0302 	and.w	r3, r3, #2
 8005882:	2b00      	cmp	r3, #0
 8005884:	d1ed      	bne.n	8005862 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8005886:	7ffb      	ldrb	r3, [r7, #31]
 8005888:	2b01      	cmp	r3, #1
 800588a:	d105      	bne.n	8005898 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800588c:	4b35      	ldr	r3, [pc, #212]	@ (8005964 <HAL_RCC_OscConfig+0x4b8>)
 800588e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005890:	4a34      	ldr	r2, [pc, #208]	@ (8005964 <HAL_RCC_OscConfig+0x4b8>)
 8005892:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005896:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	f003 0320 	and.w	r3, r3, #32
 80058a0:	2b00      	cmp	r3, #0
 80058a2:	d03c      	beq.n	800591e <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	699b      	ldr	r3, [r3, #24]
 80058a8:	2b00      	cmp	r3, #0
 80058aa:	d01c      	beq.n	80058e6 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80058ac:	4b2d      	ldr	r3, [pc, #180]	@ (8005964 <HAL_RCC_OscConfig+0x4b8>)
 80058ae:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80058b2:	4a2c      	ldr	r2, [pc, #176]	@ (8005964 <HAL_RCC_OscConfig+0x4b8>)
 80058b4:	f043 0301 	orr.w	r3, r3, #1
 80058b8:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80058bc:	f7fc fac2 	bl	8001e44 <HAL_GetTick>
 80058c0:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80058c2:	e008      	b.n	80058d6 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80058c4:	f7fc fabe 	bl	8001e44 <HAL_GetTick>
 80058c8:	4602      	mov	r2, r0
 80058ca:	693b      	ldr	r3, [r7, #16]
 80058cc:	1ad3      	subs	r3, r2, r3
 80058ce:	2b02      	cmp	r3, #2
 80058d0:	d901      	bls.n	80058d6 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 80058d2:	2303      	movs	r3, #3
 80058d4:	e0f2      	b.n	8005abc <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80058d6:	4b23      	ldr	r3, [pc, #140]	@ (8005964 <HAL_RCC_OscConfig+0x4b8>)
 80058d8:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80058dc:	f003 0302 	and.w	r3, r3, #2
 80058e0:	2b00      	cmp	r3, #0
 80058e2:	d0ef      	beq.n	80058c4 <HAL_RCC_OscConfig+0x418>
 80058e4:	e01b      	b.n	800591e <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80058e6:	4b1f      	ldr	r3, [pc, #124]	@ (8005964 <HAL_RCC_OscConfig+0x4b8>)
 80058e8:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80058ec:	4a1d      	ldr	r2, [pc, #116]	@ (8005964 <HAL_RCC_OscConfig+0x4b8>)
 80058ee:	f023 0301 	bic.w	r3, r3, #1
 80058f2:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80058f6:	f7fc faa5 	bl	8001e44 <HAL_GetTick>
 80058fa:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80058fc:	e008      	b.n	8005910 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80058fe:	f7fc faa1 	bl	8001e44 <HAL_GetTick>
 8005902:	4602      	mov	r2, r0
 8005904:	693b      	ldr	r3, [r7, #16]
 8005906:	1ad3      	subs	r3, r2, r3
 8005908:	2b02      	cmp	r3, #2
 800590a:	d901      	bls.n	8005910 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 800590c:	2303      	movs	r3, #3
 800590e:	e0d5      	b.n	8005abc <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8005910:	4b14      	ldr	r3, [pc, #80]	@ (8005964 <HAL_RCC_OscConfig+0x4b8>)
 8005912:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005916:	f003 0302 	and.w	r3, r3, #2
 800591a:	2b00      	cmp	r3, #0
 800591c:	d1ef      	bne.n	80058fe <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	69db      	ldr	r3, [r3, #28]
 8005922:	2b00      	cmp	r3, #0
 8005924:	f000 80c9 	beq.w	8005aba <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005928:	4b0e      	ldr	r3, [pc, #56]	@ (8005964 <HAL_RCC_OscConfig+0x4b8>)
 800592a:	689b      	ldr	r3, [r3, #8]
 800592c:	f003 030c 	and.w	r3, r3, #12
 8005930:	2b0c      	cmp	r3, #12
 8005932:	f000 8083 	beq.w	8005a3c <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	69db      	ldr	r3, [r3, #28]
 800593a:	2b02      	cmp	r3, #2
 800593c:	d15e      	bne.n	80059fc <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800593e:	4b09      	ldr	r3, [pc, #36]	@ (8005964 <HAL_RCC_OscConfig+0x4b8>)
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	4a08      	ldr	r2, [pc, #32]	@ (8005964 <HAL_RCC_OscConfig+0x4b8>)
 8005944:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005948:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800594a:	f7fc fa7b 	bl	8001e44 <HAL_GetTick>
 800594e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005950:	e00c      	b.n	800596c <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005952:	f7fc fa77 	bl	8001e44 <HAL_GetTick>
 8005956:	4602      	mov	r2, r0
 8005958:	693b      	ldr	r3, [r7, #16]
 800595a:	1ad3      	subs	r3, r2, r3
 800595c:	2b02      	cmp	r3, #2
 800595e:	d905      	bls.n	800596c <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8005960:	2303      	movs	r3, #3
 8005962:	e0ab      	b.n	8005abc <HAL_RCC_OscConfig+0x610>
 8005964:	40021000 	.word	0x40021000
 8005968:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800596c:	4b55      	ldr	r3, [pc, #340]	@ (8005ac4 <HAL_RCC_OscConfig+0x618>)
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005974:	2b00      	cmp	r3, #0
 8005976:	d1ec      	bne.n	8005952 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005978:	4b52      	ldr	r3, [pc, #328]	@ (8005ac4 <HAL_RCC_OscConfig+0x618>)
 800597a:	68da      	ldr	r2, [r3, #12]
 800597c:	4b52      	ldr	r3, [pc, #328]	@ (8005ac8 <HAL_RCC_OscConfig+0x61c>)
 800597e:	4013      	ands	r3, r2
 8005980:	687a      	ldr	r2, [r7, #4]
 8005982:	6a11      	ldr	r1, [r2, #32]
 8005984:	687a      	ldr	r2, [r7, #4]
 8005986:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8005988:	3a01      	subs	r2, #1
 800598a:	0112      	lsls	r2, r2, #4
 800598c:	4311      	orrs	r1, r2
 800598e:	687a      	ldr	r2, [r7, #4]
 8005990:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8005992:	0212      	lsls	r2, r2, #8
 8005994:	4311      	orrs	r1, r2
 8005996:	687a      	ldr	r2, [r7, #4]
 8005998:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800599a:	0852      	lsrs	r2, r2, #1
 800599c:	3a01      	subs	r2, #1
 800599e:	0552      	lsls	r2, r2, #21
 80059a0:	4311      	orrs	r1, r2
 80059a2:	687a      	ldr	r2, [r7, #4]
 80059a4:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80059a6:	0852      	lsrs	r2, r2, #1
 80059a8:	3a01      	subs	r2, #1
 80059aa:	0652      	lsls	r2, r2, #25
 80059ac:	4311      	orrs	r1, r2
 80059ae:	687a      	ldr	r2, [r7, #4]
 80059b0:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80059b2:	06d2      	lsls	r2, r2, #27
 80059b4:	430a      	orrs	r2, r1
 80059b6:	4943      	ldr	r1, [pc, #268]	@ (8005ac4 <HAL_RCC_OscConfig+0x618>)
 80059b8:	4313      	orrs	r3, r2
 80059ba:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80059bc:	4b41      	ldr	r3, [pc, #260]	@ (8005ac4 <HAL_RCC_OscConfig+0x618>)
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	4a40      	ldr	r2, [pc, #256]	@ (8005ac4 <HAL_RCC_OscConfig+0x618>)
 80059c2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80059c6:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80059c8:	4b3e      	ldr	r3, [pc, #248]	@ (8005ac4 <HAL_RCC_OscConfig+0x618>)
 80059ca:	68db      	ldr	r3, [r3, #12]
 80059cc:	4a3d      	ldr	r2, [pc, #244]	@ (8005ac4 <HAL_RCC_OscConfig+0x618>)
 80059ce:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80059d2:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80059d4:	f7fc fa36 	bl	8001e44 <HAL_GetTick>
 80059d8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80059da:	e008      	b.n	80059ee <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80059dc:	f7fc fa32 	bl	8001e44 <HAL_GetTick>
 80059e0:	4602      	mov	r2, r0
 80059e2:	693b      	ldr	r3, [r7, #16]
 80059e4:	1ad3      	subs	r3, r2, r3
 80059e6:	2b02      	cmp	r3, #2
 80059e8:	d901      	bls.n	80059ee <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 80059ea:	2303      	movs	r3, #3
 80059ec:	e066      	b.n	8005abc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80059ee:	4b35      	ldr	r3, [pc, #212]	@ (8005ac4 <HAL_RCC_OscConfig+0x618>)
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80059f6:	2b00      	cmp	r3, #0
 80059f8:	d0f0      	beq.n	80059dc <HAL_RCC_OscConfig+0x530>
 80059fa:	e05e      	b.n	8005aba <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80059fc:	4b31      	ldr	r3, [pc, #196]	@ (8005ac4 <HAL_RCC_OscConfig+0x618>)
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	4a30      	ldr	r2, [pc, #192]	@ (8005ac4 <HAL_RCC_OscConfig+0x618>)
 8005a02:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005a06:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005a08:	f7fc fa1c 	bl	8001e44 <HAL_GetTick>
 8005a0c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005a0e:	e008      	b.n	8005a22 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005a10:	f7fc fa18 	bl	8001e44 <HAL_GetTick>
 8005a14:	4602      	mov	r2, r0
 8005a16:	693b      	ldr	r3, [r7, #16]
 8005a18:	1ad3      	subs	r3, r2, r3
 8005a1a:	2b02      	cmp	r3, #2
 8005a1c:	d901      	bls.n	8005a22 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8005a1e:	2303      	movs	r3, #3
 8005a20:	e04c      	b.n	8005abc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005a22:	4b28      	ldr	r3, [pc, #160]	@ (8005ac4 <HAL_RCC_OscConfig+0x618>)
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005a2a:	2b00      	cmp	r3, #0
 8005a2c:	d1f0      	bne.n	8005a10 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8005a2e:	4b25      	ldr	r3, [pc, #148]	@ (8005ac4 <HAL_RCC_OscConfig+0x618>)
 8005a30:	68da      	ldr	r2, [r3, #12]
 8005a32:	4924      	ldr	r1, [pc, #144]	@ (8005ac4 <HAL_RCC_OscConfig+0x618>)
 8005a34:	4b25      	ldr	r3, [pc, #148]	@ (8005acc <HAL_RCC_OscConfig+0x620>)
 8005a36:	4013      	ands	r3, r2
 8005a38:	60cb      	str	r3, [r1, #12]
 8005a3a:	e03e      	b.n	8005aba <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	69db      	ldr	r3, [r3, #28]
 8005a40:	2b01      	cmp	r3, #1
 8005a42:	d101      	bne.n	8005a48 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8005a44:	2301      	movs	r3, #1
 8005a46:	e039      	b.n	8005abc <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8005a48:	4b1e      	ldr	r3, [pc, #120]	@ (8005ac4 <HAL_RCC_OscConfig+0x618>)
 8005a4a:	68db      	ldr	r3, [r3, #12]
 8005a4c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005a4e:	697b      	ldr	r3, [r7, #20]
 8005a50:	f003 0203 	and.w	r2, r3, #3
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	6a1b      	ldr	r3, [r3, #32]
 8005a58:	429a      	cmp	r2, r3
 8005a5a:	d12c      	bne.n	8005ab6 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005a5c:	697b      	ldr	r3, [r7, #20]
 8005a5e:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a66:	3b01      	subs	r3, #1
 8005a68:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005a6a:	429a      	cmp	r2, r3
 8005a6c:	d123      	bne.n	8005ab6 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8005a6e:	697b      	ldr	r3, [r7, #20]
 8005a70:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005a78:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005a7a:	429a      	cmp	r2, r3
 8005a7c:	d11b      	bne.n	8005ab6 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8005a7e:	697b      	ldr	r3, [r7, #20]
 8005a80:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005a88:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8005a8a:	429a      	cmp	r2, r3
 8005a8c:	d113      	bne.n	8005ab6 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005a8e:	697b      	ldr	r3, [r7, #20]
 8005a90:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005a98:	085b      	lsrs	r3, r3, #1
 8005a9a:	3b01      	subs	r3, #1
 8005a9c:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8005a9e:	429a      	cmp	r2, r3
 8005aa0:	d109      	bne.n	8005ab6 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8005aa2:	697b      	ldr	r3, [r7, #20]
 8005aa4:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005aac:	085b      	lsrs	r3, r3, #1
 8005aae:	3b01      	subs	r3, #1
 8005ab0:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005ab2:	429a      	cmp	r2, r3
 8005ab4:	d001      	beq.n	8005aba <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8005ab6:	2301      	movs	r3, #1
 8005ab8:	e000      	b.n	8005abc <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8005aba:	2300      	movs	r3, #0
}
 8005abc:	4618      	mov	r0, r3
 8005abe:	3720      	adds	r7, #32
 8005ac0:	46bd      	mov	sp, r7
 8005ac2:	bd80      	pop	{r7, pc}
 8005ac4:	40021000 	.word	0x40021000
 8005ac8:	019f800c 	.word	0x019f800c
 8005acc:	feeefffc 	.word	0xfeeefffc

08005ad0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005ad0:	b580      	push	{r7, lr}
 8005ad2:	b086      	sub	sp, #24
 8005ad4:	af00      	add	r7, sp, #0
 8005ad6:	6078      	str	r0, [r7, #4]
 8005ad8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8005ada:	2300      	movs	r3, #0
 8005adc:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	2b00      	cmp	r3, #0
 8005ae2:	d101      	bne.n	8005ae8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8005ae4:	2301      	movs	r3, #1
 8005ae6:	e11e      	b.n	8005d26 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005ae8:	4b91      	ldr	r3, [pc, #580]	@ (8005d30 <HAL_RCC_ClockConfig+0x260>)
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	f003 030f 	and.w	r3, r3, #15
 8005af0:	683a      	ldr	r2, [r7, #0]
 8005af2:	429a      	cmp	r2, r3
 8005af4:	d910      	bls.n	8005b18 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005af6:	4b8e      	ldr	r3, [pc, #568]	@ (8005d30 <HAL_RCC_ClockConfig+0x260>)
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	f023 020f 	bic.w	r2, r3, #15
 8005afe:	498c      	ldr	r1, [pc, #560]	@ (8005d30 <HAL_RCC_ClockConfig+0x260>)
 8005b00:	683b      	ldr	r3, [r7, #0]
 8005b02:	4313      	orrs	r3, r2
 8005b04:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005b06:	4b8a      	ldr	r3, [pc, #552]	@ (8005d30 <HAL_RCC_ClockConfig+0x260>)
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	f003 030f 	and.w	r3, r3, #15
 8005b0e:	683a      	ldr	r2, [r7, #0]
 8005b10:	429a      	cmp	r2, r3
 8005b12:	d001      	beq.n	8005b18 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8005b14:	2301      	movs	r3, #1
 8005b16:	e106      	b.n	8005d26 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	f003 0301 	and.w	r3, r3, #1
 8005b20:	2b00      	cmp	r3, #0
 8005b22:	d073      	beq.n	8005c0c <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	685b      	ldr	r3, [r3, #4]
 8005b28:	2b03      	cmp	r3, #3
 8005b2a:	d129      	bne.n	8005b80 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005b2c:	4b81      	ldr	r3, [pc, #516]	@ (8005d34 <HAL_RCC_ClockConfig+0x264>)
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005b34:	2b00      	cmp	r3, #0
 8005b36:	d101      	bne.n	8005b3c <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8005b38:	2301      	movs	r3, #1
 8005b3a:	e0f4      	b.n	8005d26 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8005b3c:	f000 f966 	bl	8005e0c <RCC_GetSysClockFreqFromPLLSource>
 8005b40:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8005b42:	693b      	ldr	r3, [r7, #16]
 8005b44:	4a7c      	ldr	r2, [pc, #496]	@ (8005d38 <HAL_RCC_ClockConfig+0x268>)
 8005b46:	4293      	cmp	r3, r2
 8005b48:	d93f      	bls.n	8005bca <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8005b4a:	4b7a      	ldr	r3, [pc, #488]	@ (8005d34 <HAL_RCC_ClockConfig+0x264>)
 8005b4c:	689b      	ldr	r3, [r3, #8]
 8005b4e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005b52:	2b00      	cmp	r3, #0
 8005b54:	d009      	beq.n	8005b6a <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8005b5e:	2b00      	cmp	r3, #0
 8005b60:	d033      	beq.n	8005bca <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8005b66:	2b00      	cmp	r3, #0
 8005b68:	d12f      	bne.n	8005bca <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8005b6a:	4b72      	ldr	r3, [pc, #456]	@ (8005d34 <HAL_RCC_ClockConfig+0x264>)
 8005b6c:	689b      	ldr	r3, [r3, #8]
 8005b6e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005b72:	4a70      	ldr	r2, [pc, #448]	@ (8005d34 <HAL_RCC_ClockConfig+0x264>)
 8005b74:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005b78:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8005b7a:	2380      	movs	r3, #128	@ 0x80
 8005b7c:	617b      	str	r3, [r7, #20]
 8005b7e:	e024      	b.n	8005bca <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	685b      	ldr	r3, [r3, #4]
 8005b84:	2b02      	cmp	r3, #2
 8005b86:	d107      	bne.n	8005b98 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005b88:	4b6a      	ldr	r3, [pc, #424]	@ (8005d34 <HAL_RCC_ClockConfig+0x264>)
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005b90:	2b00      	cmp	r3, #0
 8005b92:	d109      	bne.n	8005ba8 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8005b94:	2301      	movs	r3, #1
 8005b96:	e0c6      	b.n	8005d26 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005b98:	4b66      	ldr	r3, [pc, #408]	@ (8005d34 <HAL_RCC_ClockConfig+0x264>)
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005ba0:	2b00      	cmp	r3, #0
 8005ba2:	d101      	bne.n	8005ba8 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8005ba4:	2301      	movs	r3, #1
 8005ba6:	e0be      	b.n	8005d26 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8005ba8:	f000 f8ce 	bl	8005d48 <HAL_RCC_GetSysClockFreq>
 8005bac:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8005bae:	693b      	ldr	r3, [r7, #16]
 8005bb0:	4a61      	ldr	r2, [pc, #388]	@ (8005d38 <HAL_RCC_ClockConfig+0x268>)
 8005bb2:	4293      	cmp	r3, r2
 8005bb4:	d909      	bls.n	8005bca <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8005bb6:	4b5f      	ldr	r3, [pc, #380]	@ (8005d34 <HAL_RCC_ClockConfig+0x264>)
 8005bb8:	689b      	ldr	r3, [r3, #8]
 8005bba:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005bbe:	4a5d      	ldr	r2, [pc, #372]	@ (8005d34 <HAL_RCC_ClockConfig+0x264>)
 8005bc0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005bc4:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8005bc6:	2380      	movs	r3, #128	@ 0x80
 8005bc8:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005bca:	4b5a      	ldr	r3, [pc, #360]	@ (8005d34 <HAL_RCC_ClockConfig+0x264>)
 8005bcc:	689b      	ldr	r3, [r3, #8]
 8005bce:	f023 0203 	bic.w	r2, r3, #3
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	685b      	ldr	r3, [r3, #4]
 8005bd6:	4957      	ldr	r1, [pc, #348]	@ (8005d34 <HAL_RCC_ClockConfig+0x264>)
 8005bd8:	4313      	orrs	r3, r2
 8005bda:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005bdc:	f7fc f932 	bl	8001e44 <HAL_GetTick>
 8005be0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005be2:	e00a      	b.n	8005bfa <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005be4:	f7fc f92e 	bl	8001e44 <HAL_GetTick>
 8005be8:	4602      	mov	r2, r0
 8005bea:	68fb      	ldr	r3, [r7, #12]
 8005bec:	1ad3      	subs	r3, r2, r3
 8005bee:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005bf2:	4293      	cmp	r3, r2
 8005bf4:	d901      	bls.n	8005bfa <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8005bf6:	2303      	movs	r3, #3
 8005bf8:	e095      	b.n	8005d26 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005bfa:	4b4e      	ldr	r3, [pc, #312]	@ (8005d34 <HAL_RCC_ClockConfig+0x264>)
 8005bfc:	689b      	ldr	r3, [r3, #8]
 8005bfe:	f003 020c 	and.w	r2, r3, #12
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	685b      	ldr	r3, [r3, #4]
 8005c06:	009b      	lsls	r3, r3, #2
 8005c08:	429a      	cmp	r2, r3
 8005c0a:	d1eb      	bne.n	8005be4 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	f003 0302 	and.w	r3, r3, #2
 8005c14:	2b00      	cmp	r3, #0
 8005c16:	d023      	beq.n	8005c60 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	f003 0304 	and.w	r3, r3, #4
 8005c20:	2b00      	cmp	r3, #0
 8005c22:	d005      	beq.n	8005c30 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005c24:	4b43      	ldr	r3, [pc, #268]	@ (8005d34 <HAL_RCC_ClockConfig+0x264>)
 8005c26:	689b      	ldr	r3, [r3, #8]
 8005c28:	4a42      	ldr	r2, [pc, #264]	@ (8005d34 <HAL_RCC_ClockConfig+0x264>)
 8005c2a:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8005c2e:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	f003 0308 	and.w	r3, r3, #8
 8005c38:	2b00      	cmp	r3, #0
 8005c3a:	d007      	beq.n	8005c4c <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8005c3c:	4b3d      	ldr	r3, [pc, #244]	@ (8005d34 <HAL_RCC_ClockConfig+0x264>)
 8005c3e:	689b      	ldr	r3, [r3, #8]
 8005c40:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8005c44:	4a3b      	ldr	r2, [pc, #236]	@ (8005d34 <HAL_RCC_ClockConfig+0x264>)
 8005c46:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8005c4a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005c4c:	4b39      	ldr	r3, [pc, #228]	@ (8005d34 <HAL_RCC_ClockConfig+0x264>)
 8005c4e:	689b      	ldr	r3, [r3, #8]
 8005c50:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	689b      	ldr	r3, [r3, #8]
 8005c58:	4936      	ldr	r1, [pc, #216]	@ (8005d34 <HAL_RCC_ClockConfig+0x264>)
 8005c5a:	4313      	orrs	r3, r2
 8005c5c:	608b      	str	r3, [r1, #8]
 8005c5e:	e008      	b.n	8005c72 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8005c60:	697b      	ldr	r3, [r7, #20]
 8005c62:	2b80      	cmp	r3, #128	@ 0x80
 8005c64:	d105      	bne.n	8005c72 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8005c66:	4b33      	ldr	r3, [pc, #204]	@ (8005d34 <HAL_RCC_ClockConfig+0x264>)
 8005c68:	689b      	ldr	r3, [r3, #8]
 8005c6a:	4a32      	ldr	r2, [pc, #200]	@ (8005d34 <HAL_RCC_ClockConfig+0x264>)
 8005c6c:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005c70:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005c72:	4b2f      	ldr	r3, [pc, #188]	@ (8005d30 <HAL_RCC_ClockConfig+0x260>)
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	f003 030f 	and.w	r3, r3, #15
 8005c7a:	683a      	ldr	r2, [r7, #0]
 8005c7c:	429a      	cmp	r2, r3
 8005c7e:	d21d      	bcs.n	8005cbc <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005c80:	4b2b      	ldr	r3, [pc, #172]	@ (8005d30 <HAL_RCC_ClockConfig+0x260>)
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	f023 020f 	bic.w	r2, r3, #15
 8005c88:	4929      	ldr	r1, [pc, #164]	@ (8005d30 <HAL_RCC_ClockConfig+0x260>)
 8005c8a:	683b      	ldr	r3, [r7, #0]
 8005c8c:	4313      	orrs	r3, r2
 8005c8e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8005c90:	f7fc f8d8 	bl	8001e44 <HAL_GetTick>
 8005c94:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005c96:	e00a      	b.n	8005cae <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005c98:	f7fc f8d4 	bl	8001e44 <HAL_GetTick>
 8005c9c:	4602      	mov	r2, r0
 8005c9e:	68fb      	ldr	r3, [r7, #12]
 8005ca0:	1ad3      	subs	r3, r2, r3
 8005ca2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005ca6:	4293      	cmp	r3, r2
 8005ca8:	d901      	bls.n	8005cae <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8005caa:	2303      	movs	r3, #3
 8005cac:	e03b      	b.n	8005d26 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005cae:	4b20      	ldr	r3, [pc, #128]	@ (8005d30 <HAL_RCC_ClockConfig+0x260>)
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	f003 030f 	and.w	r3, r3, #15
 8005cb6:	683a      	ldr	r2, [r7, #0]
 8005cb8:	429a      	cmp	r2, r3
 8005cba:	d1ed      	bne.n	8005c98 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	f003 0304 	and.w	r3, r3, #4
 8005cc4:	2b00      	cmp	r3, #0
 8005cc6:	d008      	beq.n	8005cda <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005cc8:	4b1a      	ldr	r3, [pc, #104]	@ (8005d34 <HAL_RCC_ClockConfig+0x264>)
 8005cca:	689b      	ldr	r3, [r3, #8]
 8005ccc:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	68db      	ldr	r3, [r3, #12]
 8005cd4:	4917      	ldr	r1, [pc, #92]	@ (8005d34 <HAL_RCC_ClockConfig+0x264>)
 8005cd6:	4313      	orrs	r3, r2
 8005cd8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	f003 0308 	and.w	r3, r3, #8
 8005ce2:	2b00      	cmp	r3, #0
 8005ce4:	d009      	beq.n	8005cfa <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005ce6:	4b13      	ldr	r3, [pc, #76]	@ (8005d34 <HAL_RCC_ClockConfig+0x264>)
 8005ce8:	689b      	ldr	r3, [r3, #8]
 8005cea:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	691b      	ldr	r3, [r3, #16]
 8005cf2:	00db      	lsls	r3, r3, #3
 8005cf4:	490f      	ldr	r1, [pc, #60]	@ (8005d34 <HAL_RCC_ClockConfig+0x264>)
 8005cf6:	4313      	orrs	r3, r2
 8005cf8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8005cfa:	f000 f825 	bl	8005d48 <HAL_RCC_GetSysClockFreq>
 8005cfe:	4602      	mov	r2, r0
 8005d00:	4b0c      	ldr	r3, [pc, #48]	@ (8005d34 <HAL_RCC_ClockConfig+0x264>)
 8005d02:	689b      	ldr	r3, [r3, #8]
 8005d04:	091b      	lsrs	r3, r3, #4
 8005d06:	f003 030f 	and.w	r3, r3, #15
 8005d0a:	490c      	ldr	r1, [pc, #48]	@ (8005d3c <HAL_RCC_ClockConfig+0x26c>)
 8005d0c:	5ccb      	ldrb	r3, [r1, r3]
 8005d0e:	f003 031f 	and.w	r3, r3, #31
 8005d12:	fa22 f303 	lsr.w	r3, r2, r3
 8005d16:	4a0a      	ldr	r2, [pc, #40]	@ (8005d40 <HAL_RCC_ClockConfig+0x270>)
 8005d18:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8005d1a:	4b0a      	ldr	r3, [pc, #40]	@ (8005d44 <HAL_RCC_ClockConfig+0x274>)
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	4618      	mov	r0, r3
 8005d20:	f7fc f844 	bl	8001dac <HAL_InitTick>
 8005d24:	4603      	mov	r3, r0
}
 8005d26:	4618      	mov	r0, r3
 8005d28:	3718      	adds	r7, #24
 8005d2a:	46bd      	mov	sp, r7
 8005d2c:	bd80      	pop	{r7, pc}
 8005d2e:	bf00      	nop
 8005d30:	40022000 	.word	0x40022000
 8005d34:	40021000 	.word	0x40021000
 8005d38:	04c4b400 	.word	0x04c4b400
 8005d3c:	0800ad40 	.word	0x0800ad40
 8005d40:	20000000 	.word	0x20000000
 8005d44:	20000004 	.word	0x20000004

08005d48 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005d48:	b480      	push	{r7}
 8005d4a:	b087      	sub	sp, #28
 8005d4c:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8005d4e:	4b2c      	ldr	r3, [pc, #176]	@ (8005e00 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005d50:	689b      	ldr	r3, [r3, #8]
 8005d52:	f003 030c 	and.w	r3, r3, #12
 8005d56:	2b04      	cmp	r3, #4
 8005d58:	d102      	bne.n	8005d60 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8005d5a:	4b2a      	ldr	r3, [pc, #168]	@ (8005e04 <HAL_RCC_GetSysClockFreq+0xbc>)
 8005d5c:	613b      	str	r3, [r7, #16]
 8005d5e:	e047      	b.n	8005df0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8005d60:	4b27      	ldr	r3, [pc, #156]	@ (8005e00 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005d62:	689b      	ldr	r3, [r3, #8]
 8005d64:	f003 030c 	and.w	r3, r3, #12
 8005d68:	2b08      	cmp	r3, #8
 8005d6a:	d102      	bne.n	8005d72 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8005d6c:	4b26      	ldr	r3, [pc, #152]	@ (8005e08 <HAL_RCC_GetSysClockFreq+0xc0>)
 8005d6e:	613b      	str	r3, [r7, #16]
 8005d70:	e03e      	b.n	8005df0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8005d72:	4b23      	ldr	r3, [pc, #140]	@ (8005e00 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005d74:	689b      	ldr	r3, [r3, #8]
 8005d76:	f003 030c 	and.w	r3, r3, #12
 8005d7a:	2b0c      	cmp	r3, #12
 8005d7c:	d136      	bne.n	8005dec <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8005d7e:	4b20      	ldr	r3, [pc, #128]	@ (8005e00 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005d80:	68db      	ldr	r3, [r3, #12]
 8005d82:	f003 0303 	and.w	r3, r3, #3
 8005d86:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005d88:	4b1d      	ldr	r3, [pc, #116]	@ (8005e00 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005d8a:	68db      	ldr	r3, [r3, #12]
 8005d8c:	091b      	lsrs	r3, r3, #4
 8005d8e:	f003 030f 	and.w	r3, r3, #15
 8005d92:	3301      	adds	r3, #1
 8005d94:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8005d96:	68fb      	ldr	r3, [r7, #12]
 8005d98:	2b03      	cmp	r3, #3
 8005d9a:	d10c      	bne.n	8005db6 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005d9c:	4a1a      	ldr	r2, [pc, #104]	@ (8005e08 <HAL_RCC_GetSysClockFreq+0xc0>)
 8005d9e:	68bb      	ldr	r3, [r7, #8]
 8005da0:	fbb2 f3f3 	udiv	r3, r2, r3
 8005da4:	4a16      	ldr	r2, [pc, #88]	@ (8005e00 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005da6:	68d2      	ldr	r2, [r2, #12]
 8005da8:	0a12      	lsrs	r2, r2, #8
 8005daa:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8005dae:	fb02 f303 	mul.w	r3, r2, r3
 8005db2:	617b      	str	r3, [r7, #20]
      break;
 8005db4:	e00c      	b.n	8005dd0 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005db6:	4a13      	ldr	r2, [pc, #76]	@ (8005e04 <HAL_RCC_GetSysClockFreq+0xbc>)
 8005db8:	68bb      	ldr	r3, [r7, #8]
 8005dba:	fbb2 f3f3 	udiv	r3, r2, r3
 8005dbe:	4a10      	ldr	r2, [pc, #64]	@ (8005e00 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005dc0:	68d2      	ldr	r2, [r2, #12]
 8005dc2:	0a12      	lsrs	r2, r2, #8
 8005dc4:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8005dc8:	fb02 f303 	mul.w	r3, r2, r3
 8005dcc:	617b      	str	r3, [r7, #20]
      break;
 8005dce:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005dd0:	4b0b      	ldr	r3, [pc, #44]	@ (8005e00 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005dd2:	68db      	ldr	r3, [r3, #12]
 8005dd4:	0e5b      	lsrs	r3, r3, #25
 8005dd6:	f003 0303 	and.w	r3, r3, #3
 8005dda:	3301      	adds	r3, #1
 8005ddc:	005b      	lsls	r3, r3, #1
 8005dde:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8005de0:	697a      	ldr	r2, [r7, #20]
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	fbb2 f3f3 	udiv	r3, r2, r3
 8005de8:	613b      	str	r3, [r7, #16]
 8005dea:	e001      	b.n	8005df0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8005dec:	2300      	movs	r3, #0
 8005dee:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8005df0:	693b      	ldr	r3, [r7, #16]
}
 8005df2:	4618      	mov	r0, r3
 8005df4:	371c      	adds	r7, #28
 8005df6:	46bd      	mov	sp, r7
 8005df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dfc:	4770      	bx	lr
 8005dfe:	bf00      	nop
 8005e00:	40021000 	.word	0x40021000
 8005e04:	00f42400 	.word	0x00f42400
 8005e08:	016e3600 	.word	0x016e3600

08005e0c <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8005e0c:	b480      	push	{r7}
 8005e0e:	b087      	sub	sp, #28
 8005e10:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8005e12:	4b1e      	ldr	r3, [pc, #120]	@ (8005e8c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005e14:	68db      	ldr	r3, [r3, #12]
 8005e16:	f003 0303 	and.w	r3, r3, #3
 8005e1a:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005e1c:	4b1b      	ldr	r3, [pc, #108]	@ (8005e8c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005e1e:	68db      	ldr	r3, [r3, #12]
 8005e20:	091b      	lsrs	r3, r3, #4
 8005e22:	f003 030f 	and.w	r3, r3, #15
 8005e26:	3301      	adds	r3, #1
 8005e28:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8005e2a:	693b      	ldr	r3, [r7, #16]
 8005e2c:	2b03      	cmp	r3, #3
 8005e2e:	d10c      	bne.n	8005e4a <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005e30:	4a17      	ldr	r2, [pc, #92]	@ (8005e90 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8005e32:	68fb      	ldr	r3, [r7, #12]
 8005e34:	fbb2 f3f3 	udiv	r3, r2, r3
 8005e38:	4a14      	ldr	r2, [pc, #80]	@ (8005e8c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005e3a:	68d2      	ldr	r2, [r2, #12]
 8005e3c:	0a12      	lsrs	r2, r2, #8
 8005e3e:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8005e42:	fb02 f303 	mul.w	r3, r2, r3
 8005e46:	617b      	str	r3, [r7, #20]
    break;
 8005e48:	e00c      	b.n	8005e64 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005e4a:	4a12      	ldr	r2, [pc, #72]	@ (8005e94 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8005e4c:	68fb      	ldr	r3, [r7, #12]
 8005e4e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005e52:	4a0e      	ldr	r2, [pc, #56]	@ (8005e8c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005e54:	68d2      	ldr	r2, [r2, #12]
 8005e56:	0a12      	lsrs	r2, r2, #8
 8005e58:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8005e5c:	fb02 f303 	mul.w	r3, r2, r3
 8005e60:	617b      	str	r3, [r7, #20]
    break;
 8005e62:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005e64:	4b09      	ldr	r3, [pc, #36]	@ (8005e8c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005e66:	68db      	ldr	r3, [r3, #12]
 8005e68:	0e5b      	lsrs	r3, r3, #25
 8005e6a:	f003 0303 	and.w	r3, r3, #3
 8005e6e:	3301      	adds	r3, #1
 8005e70:	005b      	lsls	r3, r3, #1
 8005e72:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8005e74:	697a      	ldr	r2, [r7, #20]
 8005e76:	68bb      	ldr	r3, [r7, #8]
 8005e78:	fbb2 f3f3 	udiv	r3, r2, r3
 8005e7c:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8005e7e:	687b      	ldr	r3, [r7, #4]
}
 8005e80:	4618      	mov	r0, r3
 8005e82:	371c      	adds	r7, #28
 8005e84:	46bd      	mov	sp, r7
 8005e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e8a:	4770      	bx	lr
 8005e8c:	40021000 	.word	0x40021000
 8005e90:	016e3600 	.word	0x016e3600
 8005e94:	00f42400 	.word	0x00f42400

08005e98 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005e98:	b580      	push	{r7, lr}
 8005e9a:	b086      	sub	sp, #24
 8005e9c:	af00      	add	r7, sp, #0
 8005e9e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005ea0:	2300      	movs	r3, #0
 8005ea2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005ea4:	2300      	movs	r3, #0
 8005ea6:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8005eb0:	2b00      	cmp	r3, #0
 8005eb2:	f000 8098 	beq.w	8005fe6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005eb6:	2300      	movs	r3, #0
 8005eb8:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005eba:	4b43      	ldr	r3, [pc, #268]	@ (8005fc8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005ebc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005ebe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005ec2:	2b00      	cmp	r3, #0
 8005ec4:	d10d      	bne.n	8005ee2 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005ec6:	4b40      	ldr	r3, [pc, #256]	@ (8005fc8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005ec8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005eca:	4a3f      	ldr	r2, [pc, #252]	@ (8005fc8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005ecc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005ed0:	6593      	str	r3, [r2, #88]	@ 0x58
 8005ed2:	4b3d      	ldr	r3, [pc, #244]	@ (8005fc8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005ed4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005ed6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005eda:	60bb      	str	r3, [r7, #8]
 8005edc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005ede:	2301      	movs	r3, #1
 8005ee0:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005ee2:	4b3a      	ldr	r3, [pc, #232]	@ (8005fcc <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	4a39      	ldr	r2, [pc, #228]	@ (8005fcc <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8005ee8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005eec:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005eee:	f7fb ffa9 	bl	8001e44 <HAL_GetTick>
 8005ef2:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005ef4:	e009      	b.n	8005f0a <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005ef6:	f7fb ffa5 	bl	8001e44 <HAL_GetTick>
 8005efa:	4602      	mov	r2, r0
 8005efc:	68fb      	ldr	r3, [r7, #12]
 8005efe:	1ad3      	subs	r3, r2, r3
 8005f00:	2b02      	cmp	r3, #2
 8005f02:	d902      	bls.n	8005f0a <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8005f04:	2303      	movs	r3, #3
 8005f06:	74fb      	strb	r3, [r7, #19]
        break;
 8005f08:	e005      	b.n	8005f16 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005f0a:	4b30      	ldr	r3, [pc, #192]	@ (8005fcc <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005f12:	2b00      	cmp	r3, #0
 8005f14:	d0ef      	beq.n	8005ef6 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8005f16:	7cfb      	ldrb	r3, [r7, #19]
 8005f18:	2b00      	cmp	r3, #0
 8005f1a:	d159      	bne.n	8005fd0 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8005f1c:	4b2a      	ldr	r3, [pc, #168]	@ (8005fc8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005f1e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005f22:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005f26:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8005f28:	697b      	ldr	r3, [r7, #20]
 8005f2a:	2b00      	cmp	r3, #0
 8005f2c:	d01e      	beq.n	8005f6c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005f32:	697a      	ldr	r2, [r7, #20]
 8005f34:	429a      	cmp	r2, r3
 8005f36:	d019      	beq.n	8005f6c <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8005f38:	4b23      	ldr	r3, [pc, #140]	@ (8005fc8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005f3a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005f3e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005f42:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005f44:	4b20      	ldr	r3, [pc, #128]	@ (8005fc8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005f46:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005f4a:	4a1f      	ldr	r2, [pc, #124]	@ (8005fc8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005f4c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005f50:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005f54:	4b1c      	ldr	r3, [pc, #112]	@ (8005fc8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005f56:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005f5a:	4a1b      	ldr	r2, [pc, #108]	@ (8005fc8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005f5c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005f60:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8005f64:	4a18      	ldr	r2, [pc, #96]	@ (8005fc8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005f66:	697b      	ldr	r3, [r7, #20]
 8005f68:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8005f6c:	697b      	ldr	r3, [r7, #20]
 8005f6e:	f003 0301 	and.w	r3, r3, #1
 8005f72:	2b00      	cmp	r3, #0
 8005f74:	d016      	beq.n	8005fa4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005f76:	f7fb ff65 	bl	8001e44 <HAL_GetTick>
 8005f7a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005f7c:	e00b      	b.n	8005f96 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005f7e:	f7fb ff61 	bl	8001e44 <HAL_GetTick>
 8005f82:	4602      	mov	r2, r0
 8005f84:	68fb      	ldr	r3, [r7, #12]
 8005f86:	1ad3      	subs	r3, r2, r3
 8005f88:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005f8c:	4293      	cmp	r3, r2
 8005f8e:	d902      	bls.n	8005f96 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8005f90:	2303      	movs	r3, #3
 8005f92:	74fb      	strb	r3, [r7, #19]
            break;
 8005f94:	e006      	b.n	8005fa4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005f96:	4b0c      	ldr	r3, [pc, #48]	@ (8005fc8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005f98:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005f9c:	f003 0302 	and.w	r3, r3, #2
 8005fa0:	2b00      	cmp	r3, #0
 8005fa2:	d0ec      	beq.n	8005f7e <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8005fa4:	7cfb      	ldrb	r3, [r7, #19]
 8005fa6:	2b00      	cmp	r3, #0
 8005fa8:	d10b      	bne.n	8005fc2 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005faa:	4b07      	ldr	r3, [pc, #28]	@ (8005fc8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005fac:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005fb0:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005fb8:	4903      	ldr	r1, [pc, #12]	@ (8005fc8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005fba:	4313      	orrs	r3, r2
 8005fbc:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8005fc0:	e008      	b.n	8005fd4 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005fc2:	7cfb      	ldrb	r3, [r7, #19]
 8005fc4:	74bb      	strb	r3, [r7, #18]
 8005fc6:	e005      	b.n	8005fd4 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8005fc8:	40021000 	.word	0x40021000
 8005fcc:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005fd0:	7cfb      	ldrb	r3, [r7, #19]
 8005fd2:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005fd4:	7c7b      	ldrb	r3, [r7, #17]
 8005fd6:	2b01      	cmp	r3, #1
 8005fd8:	d105      	bne.n	8005fe6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005fda:	4ba6      	ldr	r3, [pc, #664]	@ (8006274 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005fdc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005fde:	4aa5      	ldr	r2, [pc, #660]	@ (8006274 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005fe0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005fe4:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	f003 0301 	and.w	r3, r3, #1
 8005fee:	2b00      	cmp	r3, #0
 8005ff0:	d00a      	beq.n	8006008 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005ff2:	4ba0      	ldr	r3, [pc, #640]	@ (8006274 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005ff4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005ff8:	f023 0203 	bic.w	r2, r3, #3
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	685b      	ldr	r3, [r3, #4]
 8006000:	499c      	ldr	r1, [pc, #624]	@ (8006274 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006002:	4313      	orrs	r3, r2
 8006004:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	f003 0302 	and.w	r3, r3, #2
 8006010:	2b00      	cmp	r3, #0
 8006012:	d00a      	beq.n	800602a <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8006014:	4b97      	ldr	r3, [pc, #604]	@ (8006274 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006016:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800601a:	f023 020c 	bic.w	r2, r3, #12
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	689b      	ldr	r3, [r3, #8]
 8006022:	4994      	ldr	r1, [pc, #592]	@ (8006274 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006024:	4313      	orrs	r3, r2
 8006026:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	f003 0304 	and.w	r3, r3, #4
 8006032:	2b00      	cmp	r3, #0
 8006034:	d00a      	beq.n	800604c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8006036:	4b8f      	ldr	r3, [pc, #572]	@ (8006274 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006038:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800603c:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	68db      	ldr	r3, [r3, #12]
 8006044:	498b      	ldr	r1, [pc, #556]	@ (8006274 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006046:	4313      	orrs	r3, r2
 8006048:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	f003 0308 	and.w	r3, r3, #8
 8006054:	2b00      	cmp	r3, #0
 8006056:	d00a      	beq.n	800606e <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8006058:	4b86      	ldr	r3, [pc, #536]	@ (8006274 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800605a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800605e:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	691b      	ldr	r3, [r3, #16]
 8006066:	4983      	ldr	r1, [pc, #524]	@ (8006274 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006068:	4313      	orrs	r3, r2
 800606a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	f003 0320 	and.w	r3, r3, #32
 8006076:	2b00      	cmp	r3, #0
 8006078:	d00a      	beq.n	8006090 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800607a:	4b7e      	ldr	r3, [pc, #504]	@ (8006274 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800607c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006080:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	695b      	ldr	r3, [r3, #20]
 8006088:	497a      	ldr	r1, [pc, #488]	@ (8006274 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800608a:	4313      	orrs	r3, r2
 800608c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006098:	2b00      	cmp	r3, #0
 800609a:	d00a      	beq.n	80060b2 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800609c:	4b75      	ldr	r3, [pc, #468]	@ (8006274 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800609e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80060a2:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	699b      	ldr	r3, [r3, #24]
 80060aa:	4972      	ldr	r1, [pc, #456]	@ (8006274 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80060ac:	4313      	orrs	r3, r2
 80060ae:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80060ba:	2b00      	cmp	r3, #0
 80060bc:	d00a      	beq.n	80060d4 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80060be:	4b6d      	ldr	r3, [pc, #436]	@ (8006274 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80060c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80060c4:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	69db      	ldr	r3, [r3, #28]
 80060cc:	4969      	ldr	r1, [pc, #420]	@ (8006274 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80060ce:	4313      	orrs	r3, r2
 80060d0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80060dc:	2b00      	cmp	r3, #0
 80060de:	d00a      	beq.n	80060f6 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80060e0:	4b64      	ldr	r3, [pc, #400]	@ (8006274 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80060e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80060e6:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	6a1b      	ldr	r3, [r3, #32]
 80060ee:	4961      	ldr	r1, [pc, #388]	@ (8006274 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80060f0:	4313      	orrs	r3, r2
 80060f2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80060fe:	2b00      	cmp	r3, #0
 8006100:	d00a      	beq.n	8006118 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8006102:	4b5c      	ldr	r3, [pc, #368]	@ (8006274 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006104:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006108:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006110:	4958      	ldr	r1, [pc, #352]	@ (8006274 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006112:	4313      	orrs	r3, r2
 8006114:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006120:	2b00      	cmp	r3, #0
 8006122:	d015      	beq.n	8006150 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006124:	4b53      	ldr	r3, [pc, #332]	@ (8006274 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006126:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800612a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006132:	4950      	ldr	r1, [pc, #320]	@ (8006274 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006134:	4313      	orrs	r3, r2
 8006136:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800613e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006142:	d105      	bne.n	8006150 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006144:	4b4b      	ldr	r3, [pc, #300]	@ (8006274 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006146:	68db      	ldr	r3, [r3, #12]
 8006148:	4a4a      	ldr	r2, [pc, #296]	@ (8006274 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800614a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800614e:	60d3      	str	r3, [r2, #12]

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006158:	2b00      	cmp	r3, #0
 800615a:	d015      	beq.n	8006188 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800615c:	4b45      	ldr	r3, [pc, #276]	@ (8006274 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800615e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006162:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800616a:	4942      	ldr	r1, [pc, #264]	@ (8006274 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800616c:	4313      	orrs	r3, r2
 800616e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006176:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800617a:	d105      	bne.n	8006188 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800617c:	4b3d      	ldr	r3, [pc, #244]	@ (8006274 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800617e:	68db      	ldr	r3, [r3, #12]
 8006180:	4a3c      	ldr	r2, [pc, #240]	@ (8006274 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006182:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006186:	60d3      	str	r3, [r2, #12]

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8006190:	2b00      	cmp	r3, #0
 8006192:	d015      	beq.n	80061c0 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8006194:	4b37      	ldr	r3, [pc, #220]	@ (8006274 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006196:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800619a:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80061a2:	4934      	ldr	r1, [pc, #208]	@ (8006274 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80061a4:	4313      	orrs	r3, r2
 80061a6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80061ae:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80061b2:	d105      	bne.n	80061c0 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80061b4:	4b2f      	ldr	r3, [pc, #188]	@ (8006274 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80061b6:	68db      	ldr	r3, [r3, #12]
 80061b8:	4a2e      	ldr	r2, [pc, #184]	@ (8006274 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80061ba:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80061be:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80061c8:	2b00      	cmp	r3, #0
 80061ca:	d015      	beq.n	80061f8 <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80061cc:	4b29      	ldr	r3, [pc, #164]	@ (8006274 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80061ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80061d2:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80061da:	4926      	ldr	r1, [pc, #152]	@ (8006274 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80061dc:	4313      	orrs	r3, r2
 80061de:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80061e6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80061ea:	d105      	bne.n	80061f8 <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80061ec:	4b21      	ldr	r3, [pc, #132]	@ (8006274 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80061ee:	68db      	ldr	r3, [r3, #12]
 80061f0:	4a20      	ldr	r2, [pc, #128]	@ (8006274 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80061f2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80061f6:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006200:	2b00      	cmp	r3, #0
 8006202:	d015      	beq.n	8006230 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8006204:	4b1b      	ldr	r3, [pc, #108]	@ (8006274 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006206:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800620a:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006212:	4918      	ldr	r1, [pc, #96]	@ (8006274 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006214:	4313      	orrs	r3, r2
 8006216:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800621e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006222:	d105      	bne.n	8006230 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006224:	4b13      	ldr	r3, [pc, #76]	@ (8006274 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006226:	68db      	ldr	r3, [r3, #12]
 8006228:	4a12      	ldr	r2, [pc, #72]	@ (8006274 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800622a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800622e:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006238:	2b00      	cmp	r3, #0
 800623a:	d015      	beq.n	8006268 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 800623c:	4b0d      	ldr	r3, [pc, #52]	@ (8006274 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800623e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006242:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800624a:	490a      	ldr	r1, [pc, #40]	@ (8006274 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800624c:	4313      	orrs	r3, r2
 800624e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006256:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800625a:	d105      	bne.n	8006268 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800625c:	4b05      	ldr	r3, [pc, #20]	@ (8006274 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800625e:	68db      	ldr	r3, [r3, #12]
 8006260:	4a04      	ldr	r2, [pc, #16]	@ (8006274 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006262:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006266:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8006268:	7cbb      	ldrb	r3, [r7, #18]
}
 800626a:	4618      	mov	r0, r3
 800626c:	3718      	adds	r7, #24
 800626e:	46bd      	mov	sp, r7
 8006270:	bd80      	pop	{r7, pc}
 8006272:	bf00      	nop
 8006274:	40021000 	.word	0x40021000

08006278 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006278:	b580      	push	{r7, lr}
 800627a:	b082      	sub	sp, #8
 800627c:	af00      	add	r7, sp, #0
 800627e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	2b00      	cmp	r3, #0
 8006284:	d101      	bne.n	800628a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006286:	2301      	movs	r3, #1
 8006288:	e049      	b.n	800631e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006290:	b2db      	uxtb	r3, r3
 8006292:	2b00      	cmp	r3, #0
 8006294:	d106      	bne.n	80062a4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	2200      	movs	r2, #0
 800629a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800629e:	6878      	ldr	r0, [r7, #4]
 80062a0:	f7fb fb8c 	bl	80019bc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	2202      	movs	r2, #2
 80062a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	681a      	ldr	r2, [r3, #0]
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	3304      	adds	r3, #4
 80062b4:	4619      	mov	r1, r3
 80062b6:	4610      	mov	r0, r2
 80062b8:	f000 fdbc 	bl	8006e34 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	2201      	movs	r2, #1
 80062c0:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	2201      	movs	r2, #1
 80062c8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	2201      	movs	r2, #1
 80062d0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	2201      	movs	r2, #1
 80062d8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	2201      	movs	r2, #1
 80062e0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	2201      	movs	r2, #1
 80062e8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	2201      	movs	r2, #1
 80062f0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	2201      	movs	r2, #1
 80062f8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	2201      	movs	r2, #1
 8006300:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	2201      	movs	r2, #1
 8006308:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	2201      	movs	r2, #1
 8006310:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	2201      	movs	r2, #1
 8006318:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800631c:	2300      	movs	r3, #0
}
 800631e:	4618      	mov	r0, r3
 8006320:	3708      	adds	r7, #8
 8006322:	46bd      	mov	sp, r7
 8006324:	bd80      	pop	{r7, pc}

08006326 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006326:	b580      	push	{r7, lr}
 8006328:	b082      	sub	sp, #8
 800632a:	af00      	add	r7, sp, #0
 800632c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	2b00      	cmp	r3, #0
 8006332:	d101      	bne.n	8006338 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8006334:	2301      	movs	r3, #1
 8006336:	e049      	b.n	80063cc <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800633e:	b2db      	uxtb	r3, r3
 8006340:	2b00      	cmp	r3, #0
 8006342:	d106      	bne.n	8006352 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	2200      	movs	r2, #0
 8006348:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800634c:	6878      	ldr	r0, [r7, #4]
 800634e:	f000 f841 	bl	80063d4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	2202      	movs	r2, #2
 8006356:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	681a      	ldr	r2, [r3, #0]
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	3304      	adds	r3, #4
 8006362:	4619      	mov	r1, r3
 8006364:	4610      	mov	r0, r2
 8006366:	f000 fd65 	bl	8006e34 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	2201      	movs	r2, #1
 800636e:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	2201      	movs	r2, #1
 8006376:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	2201      	movs	r2, #1
 800637e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	2201      	movs	r2, #1
 8006386:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	2201      	movs	r2, #1
 800638e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	2201      	movs	r2, #1
 8006396:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	2201      	movs	r2, #1
 800639e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	2201      	movs	r2, #1
 80063a6:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	2201      	movs	r2, #1
 80063ae:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	2201      	movs	r2, #1
 80063b6:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	2201      	movs	r2, #1
 80063be:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	2201      	movs	r2, #1
 80063c6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80063ca:	2300      	movs	r3, #0
}
 80063cc:	4618      	mov	r0, r3
 80063ce:	3708      	adds	r7, #8
 80063d0:	46bd      	mov	sp, r7
 80063d2:	bd80      	pop	{r7, pc}

080063d4 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80063d4:	b480      	push	{r7}
 80063d6:	b083      	sub	sp, #12
 80063d8:	af00      	add	r7, sp, #0
 80063da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80063dc:	bf00      	nop
 80063de:	370c      	adds	r7, #12
 80063e0:	46bd      	mov	sp, r7
 80063e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063e6:	4770      	bx	lr

080063e8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80063e8:	b580      	push	{r7, lr}
 80063ea:	b084      	sub	sp, #16
 80063ec:	af00      	add	r7, sp, #0
 80063ee:	6078      	str	r0, [r7, #4]
 80063f0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80063f2:	683b      	ldr	r3, [r7, #0]
 80063f4:	2b00      	cmp	r3, #0
 80063f6:	d109      	bne.n	800640c <HAL_TIM_PWM_Start+0x24>
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80063fe:	b2db      	uxtb	r3, r3
 8006400:	2b01      	cmp	r3, #1
 8006402:	bf14      	ite	ne
 8006404:	2301      	movne	r3, #1
 8006406:	2300      	moveq	r3, #0
 8006408:	b2db      	uxtb	r3, r3
 800640a:	e03c      	b.n	8006486 <HAL_TIM_PWM_Start+0x9e>
 800640c:	683b      	ldr	r3, [r7, #0]
 800640e:	2b04      	cmp	r3, #4
 8006410:	d109      	bne.n	8006426 <HAL_TIM_PWM_Start+0x3e>
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8006418:	b2db      	uxtb	r3, r3
 800641a:	2b01      	cmp	r3, #1
 800641c:	bf14      	ite	ne
 800641e:	2301      	movne	r3, #1
 8006420:	2300      	moveq	r3, #0
 8006422:	b2db      	uxtb	r3, r3
 8006424:	e02f      	b.n	8006486 <HAL_TIM_PWM_Start+0x9e>
 8006426:	683b      	ldr	r3, [r7, #0]
 8006428:	2b08      	cmp	r3, #8
 800642a:	d109      	bne.n	8006440 <HAL_TIM_PWM_Start+0x58>
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8006432:	b2db      	uxtb	r3, r3
 8006434:	2b01      	cmp	r3, #1
 8006436:	bf14      	ite	ne
 8006438:	2301      	movne	r3, #1
 800643a:	2300      	moveq	r3, #0
 800643c:	b2db      	uxtb	r3, r3
 800643e:	e022      	b.n	8006486 <HAL_TIM_PWM_Start+0x9e>
 8006440:	683b      	ldr	r3, [r7, #0]
 8006442:	2b0c      	cmp	r3, #12
 8006444:	d109      	bne.n	800645a <HAL_TIM_PWM_Start+0x72>
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800644c:	b2db      	uxtb	r3, r3
 800644e:	2b01      	cmp	r3, #1
 8006450:	bf14      	ite	ne
 8006452:	2301      	movne	r3, #1
 8006454:	2300      	moveq	r3, #0
 8006456:	b2db      	uxtb	r3, r3
 8006458:	e015      	b.n	8006486 <HAL_TIM_PWM_Start+0x9e>
 800645a:	683b      	ldr	r3, [r7, #0]
 800645c:	2b10      	cmp	r3, #16
 800645e:	d109      	bne.n	8006474 <HAL_TIM_PWM_Start+0x8c>
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8006466:	b2db      	uxtb	r3, r3
 8006468:	2b01      	cmp	r3, #1
 800646a:	bf14      	ite	ne
 800646c:	2301      	movne	r3, #1
 800646e:	2300      	moveq	r3, #0
 8006470:	b2db      	uxtb	r3, r3
 8006472:	e008      	b.n	8006486 <HAL_TIM_PWM_Start+0x9e>
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800647a:	b2db      	uxtb	r3, r3
 800647c:	2b01      	cmp	r3, #1
 800647e:	bf14      	ite	ne
 8006480:	2301      	movne	r3, #1
 8006482:	2300      	moveq	r3, #0
 8006484:	b2db      	uxtb	r3, r3
 8006486:	2b00      	cmp	r3, #0
 8006488:	d001      	beq.n	800648e <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800648a:	2301      	movs	r3, #1
 800648c:	e097      	b.n	80065be <HAL_TIM_PWM_Start+0x1d6>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800648e:	683b      	ldr	r3, [r7, #0]
 8006490:	2b00      	cmp	r3, #0
 8006492:	d104      	bne.n	800649e <HAL_TIM_PWM_Start+0xb6>
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	2202      	movs	r2, #2
 8006498:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800649c:	e023      	b.n	80064e6 <HAL_TIM_PWM_Start+0xfe>
 800649e:	683b      	ldr	r3, [r7, #0]
 80064a0:	2b04      	cmp	r3, #4
 80064a2:	d104      	bne.n	80064ae <HAL_TIM_PWM_Start+0xc6>
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	2202      	movs	r2, #2
 80064a8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80064ac:	e01b      	b.n	80064e6 <HAL_TIM_PWM_Start+0xfe>
 80064ae:	683b      	ldr	r3, [r7, #0]
 80064b0:	2b08      	cmp	r3, #8
 80064b2:	d104      	bne.n	80064be <HAL_TIM_PWM_Start+0xd6>
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	2202      	movs	r2, #2
 80064b8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80064bc:	e013      	b.n	80064e6 <HAL_TIM_PWM_Start+0xfe>
 80064be:	683b      	ldr	r3, [r7, #0]
 80064c0:	2b0c      	cmp	r3, #12
 80064c2:	d104      	bne.n	80064ce <HAL_TIM_PWM_Start+0xe6>
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	2202      	movs	r2, #2
 80064c8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80064cc:	e00b      	b.n	80064e6 <HAL_TIM_PWM_Start+0xfe>
 80064ce:	683b      	ldr	r3, [r7, #0]
 80064d0:	2b10      	cmp	r3, #16
 80064d2:	d104      	bne.n	80064de <HAL_TIM_PWM_Start+0xf6>
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	2202      	movs	r2, #2
 80064d8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80064dc:	e003      	b.n	80064e6 <HAL_TIM_PWM_Start+0xfe>
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	2202      	movs	r2, #2
 80064e2:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	2201      	movs	r2, #1
 80064ec:	6839      	ldr	r1, [r7, #0]
 80064ee:	4618      	mov	r0, r3
 80064f0:	f001 f8ce 	bl	8007690 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	4a33      	ldr	r2, [pc, #204]	@ (80065c8 <HAL_TIM_PWM_Start+0x1e0>)
 80064fa:	4293      	cmp	r3, r2
 80064fc:	d013      	beq.n	8006526 <HAL_TIM_PWM_Start+0x13e>
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	681b      	ldr	r3, [r3, #0]
 8006502:	4a32      	ldr	r2, [pc, #200]	@ (80065cc <HAL_TIM_PWM_Start+0x1e4>)
 8006504:	4293      	cmp	r3, r2
 8006506:	d00e      	beq.n	8006526 <HAL_TIM_PWM_Start+0x13e>
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	4a30      	ldr	r2, [pc, #192]	@ (80065d0 <HAL_TIM_PWM_Start+0x1e8>)
 800650e:	4293      	cmp	r3, r2
 8006510:	d009      	beq.n	8006526 <HAL_TIM_PWM_Start+0x13e>
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	4a2f      	ldr	r2, [pc, #188]	@ (80065d4 <HAL_TIM_PWM_Start+0x1ec>)
 8006518:	4293      	cmp	r3, r2
 800651a:	d004      	beq.n	8006526 <HAL_TIM_PWM_Start+0x13e>
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	4a2d      	ldr	r2, [pc, #180]	@ (80065d8 <HAL_TIM_PWM_Start+0x1f0>)
 8006522:	4293      	cmp	r3, r2
 8006524:	d101      	bne.n	800652a <HAL_TIM_PWM_Start+0x142>
 8006526:	2301      	movs	r3, #1
 8006528:	e000      	b.n	800652c <HAL_TIM_PWM_Start+0x144>
 800652a:	2300      	movs	r3, #0
 800652c:	2b00      	cmp	r3, #0
 800652e:	d007      	beq.n	8006540 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800653e:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	4a20      	ldr	r2, [pc, #128]	@ (80065c8 <HAL_TIM_PWM_Start+0x1e0>)
 8006546:	4293      	cmp	r3, r2
 8006548:	d018      	beq.n	800657c <HAL_TIM_PWM_Start+0x194>
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	681b      	ldr	r3, [r3, #0]
 800654e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006552:	d013      	beq.n	800657c <HAL_TIM_PWM_Start+0x194>
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	4a20      	ldr	r2, [pc, #128]	@ (80065dc <HAL_TIM_PWM_Start+0x1f4>)
 800655a:	4293      	cmp	r3, r2
 800655c:	d00e      	beq.n	800657c <HAL_TIM_PWM_Start+0x194>
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	4a1f      	ldr	r2, [pc, #124]	@ (80065e0 <HAL_TIM_PWM_Start+0x1f8>)
 8006564:	4293      	cmp	r3, r2
 8006566:	d009      	beq.n	800657c <HAL_TIM_PWM_Start+0x194>
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	4a17      	ldr	r2, [pc, #92]	@ (80065cc <HAL_TIM_PWM_Start+0x1e4>)
 800656e:	4293      	cmp	r3, r2
 8006570:	d004      	beq.n	800657c <HAL_TIM_PWM_Start+0x194>
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	681b      	ldr	r3, [r3, #0]
 8006576:	4a16      	ldr	r2, [pc, #88]	@ (80065d0 <HAL_TIM_PWM_Start+0x1e8>)
 8006578:	4293      	cmp	r3, r2
 800657a:	d115      	bne.n	80065a8 <HAL_TIM_PWM_Start+0x1c0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	689a      	ldr	r2, [r3, #8]
 8006582:	4b18      	ldr	r3, [pc, #96]	@ (80065e4 <HAL_TIM_PWM_Start+0x1fc>)
 8006584:	4013      	ands	r3, r2
 8006586:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006588:	68fb      	ldr	r3, [r7, #12]
 800658a:	2b06      	cmp	r3, #6
 800658c:	d015      	beq.n	80065ba <HAL_TIM_PWM_Start+0x1d2>
 800658e:	68fb      	ldr	r3, [r7, #12]
 8006590:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006594:	d011      	beq.n	80065ba <HAL_TIM_PWM_Start+0x1d2>
    {
      __HAL_TIM_ENABLE(htim);
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	681a      	ldr	r2, [r3, #0]
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	f042 0201 	orr.w	r2, r2, #1
 80065a4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80065a6:	e008      	b.n	80065ba <HAL_TIM_PWM_Start+0x1d2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	681a      	ldr	r2, [r3, #0]
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	f042 0201 	orr.w	r2, r2, #1
 80065b6:	601a      	str	r2, [r3, #0]
 80065b8:	e000      	b.n	80065bc <HAL_TIM_PWM_Start+0x1d4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80065ba:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80065bc:	2300      	movs	r3, #0
}
 80065be:	4618      	mov	r0, r3
 80065c0:	3710      	adds	r7, #16
 80065c2:	46bd      	mov	sp, r7
 80065c4:	bd80      	pop	{r7, pc}
 80065c6:	bf00      	nop
 80065c8:	40012c00 	.word	0x40012c00
 80065cc:	40013400 	.word	0x40013400
 80065d0:	40014000 	.word	0x40014000
 80065d4:	40014400 	.word	0x40014400
 80065d8:	40014800 	.word	0x40014800
 80065dc:	40000400 	.word	0x40000400
 80065e0:	40000800 	.word	0x40000800
 80065e4:	00010007 	.word	0x00010007

080065e8 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80065e8:	b580      	push	{r7, lr}
 80065ea:	b082      	sub	sp, #8
 80065ec:	af00      	add	r7, sp, #0
 80065ee:	6078      	str	r0, [r7, #4]
 80065f0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	2200      	movs	r2, #0
 80065f8:	6839      	ldr	r1, [r7, #0]
 80065fa:	4618      	mov	r0, r3
 80065fc:	f001 f848 	bl	8007690 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	4a3e      	ldr	r2, [pc, #248]	@ (8006700 <HAL_TIM_PWM_Stop+0x118>)
 8006606:	4293      	cmp	r3, r2
 8006608:	d013      	beq.n	8006632 <HAL_TIM_PWM_Stop+0x4a>
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	4a3d      	ldr	r2, [pc, #244]	@ (8006704 <HAL_TIM_PWM_Stop+0x11c>)
 8006610:	4293      	cmp	r3, r2
 8006612:	d00e      	beq.n	8006632 <HAL_TIM_PWM_Stop+0x4a>
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	4a3b      	ldr	r2, [pc, #236]	@ (8006708 <HAL_TIM_PWM_Stop+0x120>)
 800661a:	4293      	cmp	r3, r2
 800661c:	d009      	beq.n	8006632 <HAL_TIM_PWM_Stop+0x4a>
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	4a3a      	ldr	r2, [pc, #232]	@ (800670c <HAL_TIM_PWM_Stop+0x124>)
 8006624:	4293      	cmp	r3, r2
 8006626:	d004      	beq.n	8006632 <HAL_TIM_PWM_Stop+0x4a>
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	4a38      	ldr	r2, [pc, #224]	@ (8006710 <HAL_TIM_PWM_Stop+0x128>)
 800662e:	4293      	cmp	r3, r2
 8006630:	d101      	bne.n	8006636 <HAL_TIM_PWM_Stop+0x4e>
 8006632:	2301      	movs	r3, #1
 8006634:	e000      	b.n	8006638 <HAL_TIM_PWM_Stop+0x50>
 8006636:	2300      	movs	r3, #0
 8006638:	2b00      	cmp	r3, #0
 800663a:	d017      	beq.n	800666c <HAL_TIM_PWM_Stop+0x84>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	6a1a      	ldr	r2, [r3, #32]
 8006642:	f241 1311 	movw	r3, #4369	@ 0x1111
 8006646:	4013      	ands	r3, r2
 8006648:	2b00      	cmp	r3, #0
 800664a:	d10f      	bne.n	800666c <HAL_TIM_PWM_Stop+0x84>
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	6a1a      	ldr	r2, [r3, #32]
 8006652:	f244 4344 	movw	r3, #17476	@ 0x4444
 8006656:	4013      	ands	r3, r2
 8006658:	2b00      	cmp	r3, #0
 800665a:	d107      	bne.n	800666c <HAL_TIM_PWM_Stop+0x84>
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800666a:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	6a1a      	ldr	r2, [r3, #32]
 8006672:	f241 1311 	movw	r3, #4369	@ 0x1111
 8006676:	4013      	ands	r3, r2
 8006678:	2b00      	cmp	r3, #0
 800667a:	d10f      	bne.n	800669c <HAL_TIM_PWM_Stop+0xb4>
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	6a1a      	ldr	r2, [r3, #32]
 8006682:	f244 4344 	movw	r3, #17476	@ 0x4444
 8006686:	4013      	ands	r3, r2
 8006688:	2b00      	cmp	r3, #0
 800668a:	d107      	bne.n	800669c <HAL_TIM_PWM_Stop+0xb4>
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	681a      	ldr	r2, [r3, #0]
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	681b      	ldr	r3, [r3, #0]
 8006696:	f022 0201 	bic.w	r2, r2, #1
 800669a:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800669c:	683b      	ldr	r3, [r7, #0]
 800669e:	2b00      	cmp	r3, #0
 80066a0:	d104      	bne.n	80066ac <HAL_TIM_PWM_Stop+0xc4>
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	2201      	movs	r2, #1
 80066a6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80066aa:	e023      	b.n	80066f4 <HAL_TIM_PWM_Stop+0x10c>
 80066ac:	683b      	ldr	r3, [r7, #0]
 80066ae:	2b04      	cmp	r3, #4
 80066b0:	d104      	bne.n	80066bc <HAL_TIM_PWM_Stop+0xd4>
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	2201      	movs	r2, #1
 80066b6:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80066ba:	e01b      	b.n	80066f4 <HAL_TIM_PWM_Stop+0x10c>
 80066bc:	683b      	ldr	r3, [r7, #0]
 80066be:	2b08      	cmp	r3, #8
 80066c0:	d104      	bne.n	80066cc <HAL_TIM_PWM_Stop+0xe4>
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	2201      	movs	r2, #1
 80066c6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80066ca:	e013      	b.n	80066f4 <HAL_TIM_PWM_Stop+0x10c>
 80066cc:	683b      	ldr	r3, [r7, #0]
 80066ce:	2b0c      	cmp	r3, #12
 80066d0:	d104      	bne.n	80066dc <HAL_TIM_PWM_Stop+0xf4>
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	2201      	movs	r2, #1
 80066d6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80066da:	e00b      	b.n	80066f4 <HAL_TIM_PWM_Stop+0x10c>
 80066dc:	683b      	ldr	r3, [r7, #0]
 80066de:	2b10      	cmp	r3, #16
 80066e0:	d104      	bne.n	80066ec <HAL_TIM_PWM_Stop+0x104>
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	2201      	movs	r2, #1
 80066e6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80066ea:	e003      	b.n	80066f4 <HAL_TIM_PWM_Stop+0x10c>
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	2201      	movs	r2, #1
 80066f0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Return function status */
  return HAL_OK;
 80066f4:	2300      	movs	r3, #0
}
 80066f6:	4618      	mov	r0, r3
 80066f8:	3708      	adds	r7, #8
 80066fa:	46bd      	mov	sp, r7
 80066fc:	bd80      	pop	{r7, pc}
 80066fe:	bf00      	nop
 8006700:	40012c00 	.word	0x40012c00
 8006704:	40013400 	.word	0x40013400
 8006708:	40014000 	.word	0x40014000
 800670c:	40014400 	.word	0x40014400
 8006710:	40014800 	.word	0x40014800

08006714 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006714:	b580      	push	{r7, lr}
 8006716:	b084      	sub	sp, #16
 8006718:	af00      	add	r7, sp, #0
 800671a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	68db      	ldr	r3, [r3, #12]
 8006722:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	691b      	ldr	r3, [r3, #16]
 800672a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800672c:	68bb      	ldr	r3, [r7, #8]
 800672e:	f003 0302 	and.w	r3, r3, #2
 8006732:	2b00      	cmp	r3, #0
 8006734:	d020      	beq.n	8006778 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8006736:	68fb      	ldr	r3, [r7, #12]
 8006738:	f003 0302 	and.w	r3, r3, #2
 800673c:	2b00      	cmp	r3, #0
 800673e:	d01b      	beq.n	8006778 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	f06f 0202 	mvn.w	r2, #2
 8006748:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	2201      	movs	r2, #1
 800674e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	699b      	ldr	r3, [r3, #24]
 8006756:	f003 0303 	and.w	r3, r3, #3
 800675a:	2b00      	cmp	r3, #0
 800675c:	d003      	beq.n	8006766 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800675e:	6878      	ldr	r0, [r7, #4]
 8006760:	f000 fb4a 	bl	8006df8 <HAL_TIM_IC_CaptureCallback>
 8006764:	e005      	b.n	8006772 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006766:	6878      	ldr	r0, [r7, #4]
 8006768:	f000 fb3c 	bl	8006de4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800676c:	6878      	ldr	r0, [r7, #4]
 800676e:	f000 fb4d 	bl	8006e0c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	2200      	movs	r2, #0
 8006776:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8006778:	68bb      	ldr	r3, [r7, #8]
 800677a:	f003 0304 	and.w	r3, r3, #4
 800677e:	2b00      	cmp	r3, #0
 8006780:	d020      	beq.n	80067c4 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8006782:	68fb      	ldr	r3, [r7, #12]
 8006784:	f003 0304 	and.w	r3, r3, #4
 8006788:	2b00      	cmp	r3, #0
 800678a:	d01b      	beq.n	80067c4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	f06f 0204 	mvn.w	r2, #4
 8006794:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	2202      	movs	r2, #2
 800679a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	699b      	ldr	r3, [r3, #24]
 80067a2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80067a6:	2b00      	cmp	r3, #0
 80067a8:	d003      	beq.n	80067b2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80067aa:	6878      	ldr	r0, [r7, #4]
 80067ac:	f000 fb24 	bl	8006df8 <HAL_TIM_IC_CaptureCallback>
 80067b0:	e005      	b.n	80067be <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80067b2:	6878      	ldr	r0, [r7, #4]
 80067b4:	f000 fb16 	bl	8006de4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80067b8:	6878      	ldr	r0, [r7, #4]
 80067ba:	f000 fb27 	bl	8006e0c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	2200      	movs	r2, #0
 80067c2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80067c4:	68bb      	ldr	r3, [r7, #8]
 80067c6:	f003 0308 	and.w	r3, r3, #8
 80067ca:	2b00      	cmp	r3, #0
 80067cc:	d020      	beq.n	8006810 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80067ce:	68fb      	ldr	r3, [r7, #12]
 80067d0:	f003 0308 	and.w	r3, r3, #8
 80067d4:	2b00      	cmp	r3, #0
 80067d6:	d01b      	beq.n	8006810 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	f06f 0208 	mvn.w	r2, #8
 80067e0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	2204      	movs	r2, #4
 80067e6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	681b      	ldr	r3, [r3, #0]
 80067ec:	69db      	ldr	r3, [r3, #28]
 80067ee:	f003 0303 	and.w	r3, r3, #3
 80067f2:	2b00      	cmp	r3, #0
 80067f4:	d003      	beq.n	80067fe <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80067f6:	6878      	ldr	r0, [r7, #4]
 80067f8:	f000 fafe 	bl	8006df8 <HAL_TIM_IC_CaptureCallback>
 80067fc:	e005      	b.n	800680a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80067fe:	6878      	ldr	r0, [r7, #4]
 8006800:	f000 faf0 	bl	8006de4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006804:	6878      	ldr	r0, [r7, #4]
 8006806:	f000 fb01 	bl	8006e0c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	2200      	movs	r2, #0
 800680e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8006810:	68bb      	ldr	r3, [r7, #8]
 8006812:	f003 0310 	and.w	r3, r3, #16
 8006816:	2b00      	cmp	r3, #0
 8006818:	d020      	beq.n	800685c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800681a:	68fb      	ldr	r3, [r7, #12]
 800681c:	f003 0310 	and.w	r3, r3, #16
 8006820:	2b00      	cmp	r3, #0
 8006822:	d01b      	beq.n	800685c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	f06f 0210 	mvn.w	r2, #16
 800682c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	2208      	movs	r2, #8
 8006832:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	681b      	ldr	r3, [r3, #0]
 8006838:	69db      	ldr	r3, [r3, #28]
 800683a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800683e:	2b00      	cmp	r3, #0
 8006840:	d003      	beq.n	800684a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006842:	6878      	ldr	r0, [r7, #4]
 8006844:	f000 fad8 	bl	8006df8 <HAL_TIM_IC_CaptureCallback>
 8006848:	e005      	b.n	8006856 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800684a:	6878      	ldr	r0, [r7, #4]
 800684c:	f000 faca 	bl	8006de4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006850:	6878      	ldr	r0, [r7, #4]
 8006852:	f000 fadb 	bl	8006e0c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	2200      	movs	r2, #0
 800685a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800685c:	68bb      	ldr	r3, [r7, #8]
 800685e:	f003 0301 	and.w	r3, r3, #1
 8006862:	2b00      	cmp	r3, #0
 8006864:	d00c      	beq.n	8006880 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8006866:	68fb      	ldr	r3, [r7, #12]
 8006868:	f003 0301 	and.w	r3, r3, #1
 800686c:	2b00      	cmp	r3, #0
 800686e:	d007      	beq.n	8006880 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	f06f 0201 	mvn.w	r2, #1
 8006878:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800687a:	6878      	ldr	r0, [r7, #4]
 800687c:	f000 faa8 	bl	8006dd0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8006880:	68bb      	ldr	r3, [r7, #8]
 8006882:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006886:	2b00      	cmp	r3, #0
 8006888:	d104      	bne.n	8006894 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800688a:	68bb      	ldr	r3, [r7, #8]
 800688c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8006890:	2b00      	cmp	r3, #0
 8006892:	d00c      	beq.n	80068ae <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8006894:	68fb      	ldr	r3, [r7, #12]
 8006896:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800689a:	2b00      	cmp	r3, #0
 800689c:	d007      	beq.n	80068ae <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 80068a6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80068a8:	6878      	ldr	r0, [r7, #4]
 80068aa:	f000 ffa3 	bl	80077f4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 80068ae:	68bb      	ldr	r3, [r7, #8]
 80068b0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80068b4:	2b00      	cmp	r3, #0
 80068b6:	d00c      	beq.n	80068d2 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80068b8:	68fb      	ldr	r3, [r7, #12]
 80068ba:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80068be:	2b00      	cmp	r3, #0
 80068c0:	d007      	beq.n	80068d2 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	681b      	ldr	r3, [r3, #0]
 80068c6:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 80068ca:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80068cc:	6878      	ldr	r0, [r7, #4]
 80068ce:	f000 ff9b 	bl	8007808 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80068d2:	68bb      	ldr	r3, [r7, #8]
 80068d4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80068d8:	2b00      	cmp	r3, #0
 80068da:	d00c      	beq.n	80068f6 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80068dc:	68fb      	ldr	r3, [r7, #12]
 80068de:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80068e2:	2b00      	cmp	r3, #0
 80068e4:	d007      	beq.n	80068f6 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	681b      	ldr	r3, [r3, #0]
 80068ea:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80068ee:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80068f0:	6878      	ldr	r0, [r7, #4]
 80068f2:	f000 fa95 	bl	8006e20 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80068f6:	68bb      	ldr	r3, [r7, #8]
 80068f8:	f003 0320 	and.w	r3, r3, #32
 80068fc:	2b00      	cmp	r3, #0
 80068fe:	d00c      	beq.n	800691a <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8006900:	68fb      	ldr	r3, [r7, #12]
 8006902:	f003 0320 	and.w	r3, r3, #32
 8006906:	2b00      	cmp	r3, #0
 8006908:	d007      	beq.n	800691a <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	681b      	ldr	r3, [r3, #0]
 800690e:	f06f 0220 	mvn.w	r2, #32
 8006912:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006914:	6878      	ldr	r0, [r7, #4]
 8006916:	f000 ff63 	bl	80077e0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 800691a:	68bb      	ldr	r3, [r7, #8]
 800691c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8006920:	2b00      	cmp	r3, #0
 8006922:	d00c      	beq.n	800693e <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 8006924:	68fb      	ldr	r3, [r7, #12]
 8006926:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800692a:	2b00      	cmp	r3, #0
 800692c:	d007      	beq.n	800693e <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	681b      	ldr	r3, [r3, #0]
 8006932:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 8006936:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8006938:	6878      	ldr	r0, [r7, #4]
 800693a:	f000 ff6f 	bl	800781c <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 800693e:	68bb      	ldr	r3, [r7, #8]
 8006940:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8006944:	2b00      	cmp	r3, #0
 8006946:	d00c      	beq.n	8006962 <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 8006948:	68fb      	ldr	r3, [r7, #12]
 800694a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800694e:	2b00      	cmp	r3, #0
 8006950:	d007      	beq.n	8006962 <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	681b      	ldr	r3, [r3, #0]
 8006956:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 800695a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 800695c:	6878      	ldr	r0, [r7, #4]
 800695e:	f000 ff67 	bl	8007830 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 8006962:	68bb      	ldr	r3, [r7, #8]
 8006964:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006968:	2b00      	cmp	r3, #0
 800696a:	d00c      	beq.n	8006986 <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 800696c:	68fb      	ldr	r3, [r7, #12]
 800696e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006972:	2b00      	cmp	r3, #0
 8006974:	d007      	beq.n	8006986 <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 800697e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 8006980:	6878      	ldr	r0, [r7, #4]
 8006982:	f000 ff5f 	bl	8007844 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 8006986:	68bb      	ldr	r3, [r7, #8]
 8006988:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800698c:	2b00      	cmp	r3, #0
 800698e:	d00c      	beq.n	80069aa <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 8006990:	68fb      	ldr	r3, [r7, #12]
 8006992:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006996:	2b00      	cmp	r3, #0
 8006998:	d007      	beq.n	80069aa <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	681b      	ldr	r3, [r3, #0]
 800699e:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 80069a2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 80069a4:	6878      	ldr	r0, [r7, #4]
 80069a6:	f000 ff57 	bl	8007858 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80069aa:	bf00      	nop
 80069ac:	3710      	adds	r7, #16
 80069ae:	46bd      	mov	sp, r7
 80069b0:	bd80      	pop	{r7, pc}
	...

080069b4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80069b4:	b580      	push	{r7, lr}
 80069b6:	b086      	sub	sp, #24
 80069b8:	af00      	add	r7, sp, #0
 80069ba:	60f8      	str	r0, [r7, #12]
 80069bc:	60b9      	str	r1, [r7, #8]
 80069be:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80069c0:	2300      	movs	r3, #0
 80069c2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80069c4:	68fb      	ldr	r3, [r7, #12]
 80069c6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80069ca:	2b01      	cmp	r3, #1
 80069cc:	d101      	bne.n	80069d2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80069ce:	2302      	movs	r3, #2
 80069d0:	e0ff      	b.n	8006bd2 <HAL_TIM_PWM_ConfigChannel+0x21e>
 80069d2:	68fb      	ldr	r3, [r7, #12]
 80069d4:	2201      	movs	r2, #1
 80069d6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	2b14      	cmp	r3, #20
 80069de:	f200 80f0 	bhi.w	8006bc2 <HAL_TIM_PWM_ConfigChannel+0x20e>
 80069e2:	a201      	add	r2, pc, #4	@ (adr r2, 80069e8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80069e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80069e8:	08006a3d 	.word	0x08006a3d
 80069ec:	08006bc3 	.word	0x08006bc3
 80069f0:	08006bc3 	.word	0x08006bc3
 80069f4:	08006bc3 	.word	0x08006bc3
 80069f8:	08006a7d 	.word	0x08006a7d
 80069fc:	08006bc3 	.word	0x08006bc3
 8006a00:	08006bc3 	.word	0x08006bc3
 8006a04:	08006bc3 	.word	0x08006bc3
 8006a08:	08006abf 	.word	0x08006abf
 8006a0c:	08006bc3 	.word	0x08006bc3
 8006a10:	08006bc3 	.word	0x08006bc3
 8006a14:	08006bc3 	.word	0x08006bc3
 8006a18:	08006aff 	.word	0x08006aff
 8006a1c:	08006bc3 	.word	0x08006bc3
 8006a20:	08006bc3 	.word	0x08006bc3
 8006a24:	08006bc3 	.word	0x08006bc3
 8006a28:	08006b41 	.word	0x08006b41
 8006a2c:	08006bc3 	.word	0x08006bc3
 8006a30:	08006bc3 	.word	0x08006bc3
 8006a34:	08006bc3 	.word	0x08006bc3
 8006a38:	08006b81 	.word	0x08006b81
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006a3c:	68fb      	ldr	r3, [r7, #12]
 8006a3e:	681b      	ldr	r3, [r3, #0]
 8006a40:	68b9      	ldr	r1, [r7, #8]
 8006a42:	4618      	mov	r0, r3
 8006a44:	f000 fa92 	bl	8006f6c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006a48:	68fb      	ldr	r3, [r7, #12]
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	699a      	ldr	r2, [r3, #24]
 8006a4e:	68fb      	ldr	r3, [r7, #12]
 8006a50:	681b      	ldr	r3, [r3, #0]
 8006a52:	f042 0208 	orr.w	r2, r2, #8
 8006a56:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006a58:	68fb      	ldr	r3, [r7, #12]
 8006a5a:	681b      	ldr	r3, [r3, #0]
 8006a5c:	699a      	ldr	r2, [r3, #24]
 8006a5e:	68fb      	ldr	r3, [r7, #12]
 8006a60:	681b      	ldr	r3, [r3, #0]
 8006a62:	f022 0204 	bic.w	r2, r2, #4
 8006a66:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006a68:	68fb      	ldr	r3, [r7, #12]
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	6999      	ldr	r1, [r3, #24]
 8006a6e:	68bb      	ldr	r3, [r7, #8]
 8006a70:	691a      	ldr	r2, [r3, #16]
 8006a72:	68fb      	ldr	r3, [r7, #12]
 8006a74:	681b      	ldr	r3, [r3, #0]
 8006a76:	430a      	orrs	r2, r1
 8006a78:	619a      	str	r2, [r3, #24]
      break;
 8006a7a:	e0a5      	b.n	8006bc8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006a7c:	68fb      	ldr	r3, [r7, #12]
 8006a7e:	681b      	ldr	r3, [r3, #0]
 8006a80:	68b9      	ldr	r1, [r7, #8]
 8006a82:	4618      	mov	r0, r3
 8006a84:	f000 fb02 	bl	800708c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006a88:	68fb      	ldr	r3, [r7, #12]
 8006a8a:	681b      	ldr	r3, [r3, #0]
 8006a8c:	699a      	ldr	r2, [r3, #24]
 8006a8e:	68fb      	ldr	r3, [r7, #12]
 8006a90:	681b      	ldr	r3, [r3, #0]
 8006a92:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006a96:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006a98:	68fb      	ldr	r3, [r7, #12]
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	699a      	ldr	r2, [r3, #24]
 8006a9e:	68fb      	ldr	r3, [r7, #12]
 8006aa0:	681b      	ldr	r3, [r3, #0]
 8006aa2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006aa6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006aa8:	68fb      	ldr	r3, [r7, #12]
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	6999      	ldr	r1, [r3, #24]
 8006aae:	68bb      	ldr	r3, [r7, #8]
 8006ab0:	691b      	ldr	r3, [r3, #16]
 8006ab2:	021a      	lsls	r2, r3, #8
 8006ab4:	68fb      	ldr	r3, [r7, #12]
 8006ab6:	681b      	ldr	r3, [r3, #0]
 8006ab8:	430a      	orrs	r2, r1
 8006aba:	619a      	str	r2, [r3, #24]
      break;
 8006abc:	e084      	b.n	8006bc8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006abe:	68fb      	ldr	r3, [r7, #12]
 8006ac0:	681b      	ldr	r3, [r3, #0]
 8006ac2:	68b9      	ldr	r1, [r7, #8]
 8006ac4:	4618      	mov	r0, r3
 8006ac6:	f000 fb6b 	bl	80071a0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006aca:	68fb      	ldr	r3, [r7, #12]
 8006acc:	681b      	ldr	r3, [r3, #0]
 8006ace:	69da      	ldr	r2, [r3, #28]
 8006ad0:	68fb      	ldr	r3, [r7, #12]
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	f042 0208 	orr.w	r2, r2, #8
 8006ad8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006ada:	68fb      	ldr	r3, [r7, #12]
 8006adc:	681b      	ldr	r3, [r3, #0]
 8006ade:	69da      	ldr	r2, [r3, #28]
 8006ae0:	68fb      	ldr	r3, [r7, #12]
 8006ae2:	681b      	ldr	r3, [r3, #0]
 8006ae4:	f022 0204 	bic.w	r2, r2, #4
 8006ae8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006aea:	68fb      	ldr	r3, [r7, #12]
 8006aec:	681b      	ldr	r3, [r3, #0]
 8006aee:	69d9      	ldr	r1, [r3, #28]
 8006af0:	68bb      	ldr	r3, [r7, #8]
 8006af2:	691a      	ldr	r2, [r3, #16]
 8006af4:	68fb      	ldr	r3, [r7, #12]
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	430a      	orrs	r2, r1
 8006afa:	61da      	str	r2, [r3, #28]
      break;
 8006afc:	e064      	b.n	8006bc8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006afe:	68fb      	ldr	r3, [r7, #12]
 8006b00:	681b      	ldr	r3, [r3, #0]
 8006b02:	68b9      	ldr	r1, [r7, #8]
 8006b04:	4618      	mov	r0, r3
 8006b06:	f000 fbd3 	bl	80072b0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006b0a:	68fb      	ldr	r3, [r7, #12]
 8006b0c:	681b      	ldr	r3, [r3, #0]
 8006b0e:	69da      	ldr	r2, [r3, #28]
 8006b10:	68fb      	ldr	r3, [r7, #12]
 8006b12:	681b      	ldr	r3, [r3, #0]
 8006b14:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006b18:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006b1a:	68fb      	ldr	r3, [r7, #12]
 8006b1c:	681b      	ldr	r3, [r3, #0]
 8006b1e:	69da      	ldr	r2, [r3, #28]
 8006b20:	68fb      	ldr	r3, [r7, #12]
 8006b22:	681b      	ldr	r3, [r3, #0]
 8006b24:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006b28:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006b2a:	68fb      	ldr	r3, [r7, #12]
 8006b2c:	681b      	ldr	r3, [r3, #0]
 8006b2e:	69d9      	ldr	r1, [r3, #28]
 8006b30:	68bb      	ldr	r3, [r7, #8]
 8006b32:	691b      	ldr	r3, [r3, #16]
 8006b34:	021a      	lsls	r2, r3, #8
 8006b36:	68fb      	ldr	r3, [r7, #12]
 8006b38:	681b      	ldr	r3, [r3, #0]
 8006b3a:	430a      	orrs	r2, r1
 8006b3c:	61da      	str	r2, [r3, #28]
      break;
 8006b3e:	e043      	b.n	8006bc8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8006b40:	68fb      	ldr	r3, [r7, #12]
 8006b42:	681b      	ldr	r3, [r3, #0]
 8006b44:	68b9      	ldr	r1, [r7, #8]
 8006b46:	4618      	mov	r0, r3
 8006b48:	f000 fc3c 	bl	80073c4 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8006b4c:	68fb      	ldr	r3, [r7, #12]
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8006b52:	68fb      	ldr	r3, [r7, #12]
 8006b54:	681b      	ldr	r3, [r3, #0]
 8006b56:	f042 0208 	orr.w	r2, r2, #8
 8006b5a:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8006b5c:	68fb      	ldr	r3, [r7, #12]
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8006b62:	68fb      	ldr	r3, [r7, #12]
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	f022 0204 	bic.w	r2, r2, #4
 8006b6a:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8006b6c:	68fb      	ldr	r3, [r7, #12]
 8006b6e:	681b      	ldr	r3, [r3, #0]
 8006b70:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8006b72:	68bb      	ldr	r3, [r7, #8]
 8006b74:	691a      	ldr	r2, [r3, #16]
 8006b76:	68fb      	ldr	r3, [r7, #12]
 8006b78:	681b      	ldr	r3, [r3, #0]
 8006b7a:	430a      	orrs	r2, r1
 8006b7c:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8006b7e:	e023      	b.n	8006bc8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8006b80:	68fb      	ldr	r3, [r7, #12]
 8006b82:	681b      	ldr	r3, [r3, #0]
 8006b84:	68b9      	ldr	r1, [r7, #8]
 8006b86:	4618      	mov	r0, r3
 8006b88:	f000 fc80 	bl	800748c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8006b8c:	68fb      	ldr	r3, [r7, #12]
 8006b8e:	681b      	ldr	r3, [r3, #0]
 8006b90:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8006b92:	68fb      	ldr	r3, [r7, #12]
 8006b94:	681b      	ldr	r3, [r3, #0]
 8006b96:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006b9a:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8006b9c:	68fb      	ldr	r3, [r7, #12]
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8006ba2:	68fb      	ldr	r3, [r7, #12]
 8006ba4:	681b      	ldr	r3, [r3, #0]
 8006ba6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006baa:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8006bac:	68fb      	ldr	r3, [r7, #12]
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8006bb2:	68bb      	ldr	r3, [r7, #8]
 8006bb4:	691b      	ldr	r3, [r3, #16]
 8006bb6:	021a      	lsls	r2, r3, #8
 8006bb8:	68fb      	ldr	r3, [r7, #12]
 8006bba:	681b      	ldr	r3, [r3, #0]
 8006bbc:	430a      	orrs	r2, r1
 8006bbe:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8006bc0:	e002      	b.n	8006bc8 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8006bc2:	2301      	movs	r3, #1
 8006bc4:	75fb      	strb	r3, [r7, #23]
      break;
 8006bc6:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006bc8:	68fb      	ldr	r3, [r7, #12]
 8006bca:	2200      	movs	r2, #0
 8006bcc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8006bd0:	7dfb      	ldrb	r3, [r7, #23]
}
 8006bd2:	4618      	mov	r0, r3
 8006bd4:	3718      	adds	r7, #24
 8006bd6:	46bd      	mov	sp, r7
 8006bd8:	bd80      	pop	{r7, pc}
 8006bda:	bf00      	nop

08006bdc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006bdc:	b580      	push	{r7, lr}
 8006bde:	b084      	sub	sp, #16
 8006be0:	af00      	add	r7, sp, #0
 8006be2:	6078      	str	r0, [r7, #4]
 8006be4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006be6:	2300      	movs	r3, #0
 8006be8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006bf0:	2b01      	cmp	r3, #1
 8006bf2:	d101      	bne.n	8006bf8 <HAL_TIM_ConfigClockSource+0x1c>
 8006bf4:	2302      	movs	r3, #2
 8006bf6:	e0de      	b.n	8006db6 <HAL_TIM_ConfigClockSource+0x1da>
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	2201      	movs	r2, #1
 8006bfc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	2202      	movs	r2, #2
 8006c04:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	681b      	ldr	r3, [r3, #0]
 8006c0c:	689b      	ldr	r3, [r3, #8]
 8006c0e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006c10:	68bb      	ldr	r3, [r7, #8]
 8006c12:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 8006c16:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8006c1a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006c1c:	68bb      	ldr	r3, [r7, #8]
 8006c1e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8006c22:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	68ba      	ldr	r2, [r7, #8]
 8006c2a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006c2c:	683b      	ldr	r3, [r7, #0]
 8006c2e:	681b      	ldr	r3, [r3, #0]
 8006c30:	4a63      	ldr	r2, [pc, #396]	@ (8006dc0 <HAL_TIM_ConfigClockSource+0x1e4>)
 8006c32:	4293      	cmp	r3, r2
 8006c34:	f000 80a9 	beq.w	8006d8a <HAL_TIM_ConfigClockSource+0x1ae>
 8006c38:	4a61      	ldr	r2, [pc, #388]	@ (8006dc0 <HAL_TIM_ConfigClockSource+0x1e4>)
 8006c3a:	4293      	cmp	r3, r2
 8006c3c:	f200 80ae 	bhi.w	8006d9c <HAL_TIM_ConfigClockSource+0x1c0>
 8006c40:	4a60      	ldr	r2, [pc, #384]	@ (8006dc4 <HAL_TIM_ConfigClockSource+0x1e8>)
 8006c42:	4293      	cmp	r3, r2
 8006c44:	f000 80a1 	beq.w	8006d8a <HAL_TIM_ConfigClockSource+0x1ae>
 8006c48:	4a5e      	ldr	r2, [pc, #376]	@ (8006dc4 <HAL_TIM_ConfigClockSource+0x1e8>)
 8006c4a:	4293      	cmp	r3, r2
 8006c4c:	f200 80a6 	bhi.w	8006d9c <HAL_TIM_ConfigClockSource+0x1c0>
 8006c50:	4a5d      	ldr	r2, [pc, #372]	@ (8006dc8 <HAL_TIM_ConfigClockSource+0x1ec>)
 8006c52:	4293      	cmp	r3, r2
 8006c54:	f000 8099 	beq.w	8006d8a <HAL_TIM_ConfigClockSource+0x1ae>
 8006c58:	4a5b      	ldr	r2, [pc, #364]	@ (8006dc8 <HAL_TIM_ConfigClockSource+0x1ec>)
 8006c5a:	4293      	cmp	r3, r2
 8006c5c:	f200 809e 	bhi.w	8006d9c <HAL_TIM_ConfigClockSource+0x1c0>
 8006c60:	4a5a      	ldr	r2, [pc, #360]	@ (8006dcc <HAL_TIM_ConfigClockSource+0x1f0>)
 8006c62:	4293      	cmp	r3, r2
 8006c64:	f000 8091 	beq.w	8006d8a <HAL_TIM_ConfigClockSource+0x1ae>
 8006c68:	4a58      	ldr	r2, [pc, #352]	@ (8006dcc <HAL_TIM_ConfigClockSource+0x1f0>)
 8006c6a:	4293      	cmp	r3, r2
 8006c6c:	f200 8096 	bhi.w	8006d9c <HAL_TIM_ConfigClockSource+0x1c0>
 8006c70:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8006c74:	f000 8089 	beq.w	8006d8a <HAL_TIM_ConfigClockSource+0x1ae>
 8006c78:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8006c7c:	f200 808e 	bhi.w	8006d9c <HAL_TIM_ConfigClockSource+0x1c0>
 8006c80:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006c84:	d03e      	beq.n	8006d04 <HAL_TIM_ConfigClockSource+0x128>
 8006c86:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006c8a:	f200 8087 	bhi.w	8006d9c <HAL_TIM_ConfigClockSource+0x1c0>
 8006c8e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006c92:	f000 8086 	beq.w	8006da2 <HAL_TIM_ConfigClockSource+0x1c6>
 8006c96:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006c9a:	d87f      	bhi.n	8006d9c <HAL_TIM_ConfigClockSource+0x1c0>
 8006c9c:	2b70      	cmp	r3, #112	@ 0x70
 8006c9e:	d01a      	beq.n	8006cd6 <HAL_TIM_ConfigClockSource+0xfa>
 8006ca0:	2b70      	cmp	r3, #112	@ 0x70
 8006ca2:	d87b      	bhi.n	8006d9c <HAL_TIM_ConfigClockSource+0x1c0>
 8006ca4:	2b60      	cmp	r3, #96	@ 0x60
 8006ca6:	d050      	beq.n	8006d4a <HAL_TIM_ConfigClockSource+0x16e>
 8006ca8:	2b60      	cmp	r3, #96	@ 0x60
 8006caa:	d877      	bhi.n	8006d9c <HAL_TIM_ConfigClockSource+0x1c0>
 8006cac:	2b50      	cmp	r3, #80	@ 0x50
 8006cae:	d03c      	beq.n	8006d2a <HAL_TIM_ConfigClockSource+0x14e>
 8006cb0:	2b50      	cmp	r3, #80	@ 0x50
 8006cb2:	d873      	bhi.n	8006d9c <HAL_TIM_ConfigClockSource+0x1c0>
 8006cb4:	2b40      	cmp	r3, #64	@ 0x40
 8006cb6:	d058      	beq.n	8006d6a <HAL_TIM_ConfigClockSource+0x18e>
 8006cb8:	2b40      	cmp	r3, #64	@ 0x40
 8006cba:	d86f      	bhi.n	8006d9c <HAL_TIM_ConfigClockSource+0x1c0>
 8006cbc:	2b30      	cmp	r3, #48	@ 0x30
 8006cbe:	d064      	beq.n	8006d8a <HAL_TIM_ConfigClockSource+0x1ae>
 8006cc0:	2b30      	cmp	r3, #48	@ 0x30
 8006cc2:	d86b      	bhi.n	8006d9c <HAL_TIM_ConfigClockSource+0x1c0>
 8006cc4:	2b20      	cmp	r3, #32
 8006cc6:	d060      	beq.n	8006d8a <HAL_TIM_ConfigClockSource+0x1ae>
 8006cc8:	2b20      	cmp	r3, #32
 8006cca:	d867      	bhi.n	8006d9c <HAL_TIM_ConfigClockSource+0x1c0>
 8006ccc:	2b00      	cmp	r3, #0
 8006cce:	d05c      	beq.n	8006d8a <HAL_TIM_ConfigClockSource+0x1ae>
 8006cd0:	2b10      	cmp	r3, #16
 8006cd2:	d05a      	beq.n	8006d8a <HAL_TIM_ConfigClockSource+0x1ae>
 8006cd4:	e062      	b.n	8006d9c <HAL_TIM_ConfigClockSource+0x1c0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006cda:	683b      	ldr	r3, [r7, #0]
 8006cdc:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006cde:	683b      	ldr	r3, [r7, #0]
 8006ce0:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006ce2:	683b      	ldr	r3, [r7, #0]
 8006ce4:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006ce6:	f000 fcb3 	bl	8007650 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	681b      	ldr	r3, [r3, #0]
 8006cee:	689b      	ldr	r3, [r3, #8]
 8006cf0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006cf2:	68bb      	ldr	r3, [r7, #8]
 8006cf4:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8006cf8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	681b      	ldr	r3, [r3, #0]
 8006cfe:	68ba      	ldr	r2, [r7, #8]
 8006d00:	609a      	str	r2, [r3, #8]
      break;
 8006d02:	e04f      	b.n	8006da4 <HAL_TIM_ConfigClockSource+0x1c8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006d08:	683b      	ldr	r3, [r7, #0]
 8006d0a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006d0c:	683b      	ldr	r3, [r7, #0]
 8006d0e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006d10:	683b      	ldr	r3, [r7, #0]
 8006d12:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006d14:	f000 fc9c 	bl	8007650 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	681b      	ldr	r3, [r3, #0]
 8006d1c:	689a      	ldr	r2, [r3, #8]
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	681b      	ldr	r3, [r3, #0]
 8006d22:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8006d26:	609a      	str	r2, [r3, #8]
      break;
 8006d28:	e03c      	b.n	8006da4 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006d2e:	683b      	ldr	r3, [r7, #0]
 8006d30:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006d32:	683b      	ldr	r3, [r7, #0]
 8006d34:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006d36:	461a      	mov	r2, r3
 8006d38:	f000 fc0e 	bl	8007558 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	681b      	ldr	r3, [r3, #0]
 8006d40:	2150      	movs	r1, #80	@ 0x50
 8006d42:	4618      	mov	r0, r3
 8006d44:	f000 fc67 	bl	8007616 <TIM_ITRx_SetConfig>
      break;
 8006d48:	e02c      	b.n	8006da4 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006d4e:	683b      	ldr	r3, [r7, #0]
 8006d50:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006d52:	683b      	ldr	r3, [r7, #0]
 8006d54:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006d56:	461a      	mov	r2, r3
 8006d58:	f000 fc2d 	bl	80075b6 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	2160      	movs	r1, #96	@ 0x60
 8006d62:	4618      	mov	r0, r3
 8006d64:	f000 fc57 	bl	8007616 <TIM_ITRx_SetConfig>
      break;
 8006d68:	e01c      	b.n	8006da4 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006d6e:	683b      	ldr	r3, [r7, #0]
 8006d70:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006d72:	683b      	ldr	r3, [r7, #0]
 8006d74:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006d76:	461a      	mov	r2, r3
 8006d78:	f000 fbee 	bl	8007558 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	681b      	ldr	r3, [r3, #0]
 8006d80:	2140      	movs	r1, #64	@ 0x40
 8006d82:	4618      	mov	r0, r3
 8006d84:	f000 fc47 	bl	8007616 <TIM_ITRx_SetConfig>
      break;
 8006d88:	e00c      	b.n	8006da4 <HAL_TIM_ConfigClockSource+0x1c8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	681a      	ldr	r2, [r3, #0]
 8006d8e:	683b      	ldr	r3, [r7, #0]
 8006d90:	681b      	ldr	r3, [r3, #0]
 8006d92:	4619      	mov	r1, r3
 8006d94:	4610      	mov	r0, r2
 8006d96:	f000 fc3e 	bl	8007616 <TIM_ITRx_SetConfig>
      break;
 8006d9a:	e003      	b.n	8006da4 <HAL_TIM_ConfigClockSource+0x1c8>
    }

    default:
      status = HAL_ERROR;
 8006d9c:	2301      	movs	r3, #1
 8006d9e:	73fb      	strb	r3, [r7, #15]
      break;
 8006da0:	e000      	b.n	8006da4 <HAL_TIM_ConfigClockSource+0x1c8>
      break;
 8006da2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	2201      	movs	r2, #1
 8006da8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	2200      	movs	r2, #0
 8006db0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8006db4:	7bfb      	ldrb	r3, [r7, #15]
}
 8006db6:	4618      	mov	r0, r3
 8006db8:	3710      	adds	r7, #16
 8006dba:	46bd      	mov	sp, r7
 8006dbc:	bd80      	pop	{r7, pc}
 8006dbe:	bf00      	nop
 8006dc0:	00100070 	.word	0x00100070
 8006dc4:	00100040 	.word	0x00100040
 8006dc8:	00100030 	.word	0x00100030
 8006dcc:	00100020 	.word	0x00100020

08006dd0 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006dd0:	b480      	push	{r7}
 8006dd2:	b083      	sub	sp, #12
 8006dd4:	af00      	add	r7, sp, #0
 8006dd6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8006dd8:	bf00      	nop
 8006dda:	370c      	adds	r7, #12
 8006ddc:	46bd      	mov	sp, r7
 8006dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006de2:	4770      	bx	lr

08006de4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006de4:	b480      	push	{r7}
 8006de6:	b083      	sub	sp, #12
 8006de8:	af00      	add	r7, sp, #0
 8006dea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006dec:	bf00      	nop
 8006dee:	370c      	adds	r7, #12
 8006df0:	46bd      	mov	sp, r7
 8006df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006df6:	4770      	bx	lr

08006df8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006df8:	b480      	push	{r7}
 8006dfa:	b083      	sub	sp, #12
 8006dfc:	af00      	add	r7, sp, #0
 8006dfe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006e00:	bf00      	nop
 8006e02:	370c      	adds	r7, #12
 8006e04:	46bd      	mov	sp, r7
 8006e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e0a:	4770      	bx	lr

08006e0c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006e0c:	b480      	push	{r7}
 8006e0e:	b083      	sub	sp, #12
 8006e10:	af00      	add	r7, sp, #0
 8006e12:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006e14:	bf00      	nop
 8006e16:	370c      	adds	r7, #12
 8006e18:	46bd      	mov	sp, r7
 8006e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e1e:	4770      	bx	lr

08006e20 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006e20:	b480      	push	{r7}
 8006e22:	b083      	sub	sp, #12
 8006e24:	af00      	add	r7, sp, #0
 8006e26:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006e28:	bf00      	nop
 8006e2a:	370c      	adds	r7, #12
 8006e2c:	46bd      	mov	sp, r7
 8006e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e32:	4770      	bx	lr

08006e34 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006e34:	b480      	push	{r7}
 8006e36:	b085      	sub	sp, #20
 8006e38:	af00      	add	r7, sp, #0
 8006e3a:	6078      	str	r0, [r7, #4]
 8006e3c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	681b      	ldr	r3, [r3, #0]
 8006e42:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	4a42      	ldr	r2, [pc, #264]	@ (8006f50 <TIM_Base_SetConfig+0x11c>)
 8006e48:	4293      	cmp	r3, r2
 8006e4a:	d00f      	beq.n	8006e6c <TIM_Base_SetConfig+0x38>
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006e52:	d00b      	beq.n	8006e6c <TIM_Base_SetConfig+0x38>
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	4a3f      	ldr	r2, [pc, #252]	@ (8006f54 <TIM_Base_SetConfig+0x120>)
 8006e58:	4293      	cmp	r3, r2
 8006e5a:	d007      	beq.n	8006e6c <TIM_Base_SetConfig+0x38>
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	4a3e      	ldr	r2, [pc, #248]	@ (8006f58 <TIM_Base_SetConfig+0x124>)
 8006e60:	4293      	cmp	r3, r2
 8006e62:	d003      	beq.n	8006e6c <TIM_Base_SetConfig+0x38>
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	4a3d      	ldr	r2, [pc, #244]	@ (8006f5c <TIM_Base_SetConfig+0x128>)
 8006e68:	4293      	cmp	r3, r2
 8006e6a:	d108      	bne.n	8006e7e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006e6c:	68fb      	ldr	r3, [r7, #12]
 8006e6e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006e72:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006e74:	683b      	ldr	r3, [r7, #0]
 8006e76:	685b      	ldr	r3, [r3, #4]
 8006e78:	68fa      	ldr	r2, [r7, #12]
 8006e7a:	4313      	orrs	r3, r2
 8006e7c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	4a33      	ldr	r2, [pc, #204]	@ (8006f50 <TIM_Base_SetConfig+0x11c>)
 8006e82:	4293      	cmp	r3, r2
 8006e84:	d01b      	beq.n	8006ebe <TIM_Base_SetConfig+0x8a>
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006e8c:	d017      	beq.n	8006ebe <TIM_Base_SetConfig+0x8a>
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	4a30      	ldr	r2, [pc, #192]	@ (8006f54 <TIM_Base_SetConfig+0x120>)
 8006e92:	4293      	cmp	r3, r2
 8006e94:	d013      	beq.n	8006ebe <TIM_Base_SetConfig+0x8a>
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	4a2f      	ldr	r2, [pc, #188]	@ (8006f58 <TIM_Base_SetConfig+0x124>)
 8006e9a:	4293      	cmp	r3, r2
 8006e9c:	d00f      	beq.n	8006ebe <TIM_Base_SetConfig+0x8a>
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	4a2e      	ldr	r2, [pc, #184]	@ (8006f5c <TIM_Base_SetConfig+0x128>)
 8006ea2:	4293      	cmp	r3, r2
 8006ea4:	d00b      	beq.n	8006ebe <TIM_Base_SetConfig+0x8a>
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	4a2d      	ldr	r2, [pc, #180]	@ (8006f60 <TIM_Base_SetConfig+0x12c>)
 8006eaa:	4293      	cmp	r3, r2
 8006eac:	d007      	beq.n	8006ebe <TIM_Base_SetConfig+0x8a>
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	4a2c      	ldr	r2, [pc, #176]	@ (8006f64 <TIM_Base_SetConfig+0x130>)
 8006eb2:	4293      	cmp	r3, r2
 8006eb4:	d003      	beq.n	8006ebe <TIM_Base_SetConfig+0x8a>
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	4a2b      	ldr	r2, [pc, #172]	@ (8006f68 <TIM_Base_SetConfig+0x134>)
 8006eba:	4293      	cmp	r3, r2
 8006ebc:	d108      	bne.n	8006ed0 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006ebe:	68fb      	ldr	r3, [r7, #12]
 8006ec0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006ec4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006ec6:	683b      	ldr	r3, [r7, #0]
 8006ec8:	68db      	ldr	r3, [r3, #12]
 8006eca:	68fa      	ldr	r2, [r7, #12]
 8006ecc:	4313      	orrs	r3, r2
 8006ece:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006ed0:	68fb      	ldr	r3, [r7, #12]
 8006ed2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8006ed6:	683b      	ldr	r3, [r7, #0]
 8006ed8:	695b      	ldr	r3, [r3, #20]
 8006eda:	4313      	orrs	r3, r2
 8006edc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	68fa      	ldr	r2, [r7, #12]
 8006ee2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006ee4:	683b      	ldr	r3, [r7, #0]
 8006ee6:	689a      	ldr	r2, [r3, #8]
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006eec:	683b      	ldr	r3, [r7, #0]
 8006eee:	681a      	ldr	r2, [r3, #0]
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	4a16      	ldr	r2, [pc, #88]	@ (8006f50 <TIM_Base_SetConfig+0x11c>)
 8006ef8:	4293      	cmp	r3, r2
 8006efa:	d00f      	beq.n	8006f1c <TIM_Base_SetConfig+0xe8>
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	4a17      	ldr	r2, [pc, #92]	@ (8006f5c <TIM_Base_SetConfig+0x128>)
 8006f00:	4293      	cmp	r3, r2
 8006f02:	d00b      	beq.n	8006f1c <TIM_Base_SetConfig+0xe8>
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	4a16      	ldr	r2, [pc, #88]	@ (8006f60 <TIM_Base_SetConfig+0x12c>)
 8006f08:	4293      	cmp	r3, r2
 8006f0a:	d007      	beq.n	8006f1c <TIM_Base_SetConfig+0xe8>
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	4a15      	ldr	r2, [pc, #84]	@ (8006f64 <TIM_Base_SetConfig+0x130>)
 8006f10:	4293      	cmp	r3, r2
 8006f12:	d003      	beq.n	8006f1c <TIM_Base_SetConfig+0xe8>
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	4a14      	ldr	r2, [pc, #80]	@ (8006f68 <TIM_Base_SetConfig+0x134>)
 8006f18:	4293      	cmp	r3, r2
 8006f1a:	d103      	bne.n	8006f24 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006f1c:	683b      	ldr	r3, [r7, #0]
 8006f1e:	691a      	ldr	r2, [r3, #16]
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	2201      	movs	r2, #1
 8006f28:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	691b      	ldr	r3, [r3, #16]
 8006f2e:	f003 0301 	and.w	r3, r3, #1
 8006f32:	2b01      	cmp	r3, #1
 8006f34:	d105      	bne.n	8006f42 <TIM_Base_SetConfig+0x10e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	691b      	ldr	r3, [r3, #16]
 8006f3a:	f023 0201 	bic.w	r2, r3, #1
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	611a      	str	r2, [r3, #16]
  }
}
 8006f42:	bf00      	nop
 8006f44:	3714      	adds	r7, #20
 8006f46:	46bd      	mov	sp, r7
 8006f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f4c:	4770      	bx	lr
 8006f4e:	bf00      	nop
 8006f50:	40012c00 	.word	0x40012c00
 8006f54:	40000400 	.word	0x40000400
 8006f58:	40000800 	.word	0x40000800
 8006f5c:	40013400 	.word	0x40013400
 8006f60:	40014000 	.word	0x40014000
 8006f64:	40014400 	.word	0x40014400
 8006f68:	40014800 	.word	0x40014800

08006f6c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006f6c:	b480      	push	{r7}
 8006f6e:	b087      	sub	sp, #28
 8006f70:	af00      	add	r7, sp, #0
 8006f72:	6078      	str	r0, [r7, #4]
 8006f74:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	6a1b      	ldr	r3, [r3, #32]
 8006f7a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	6a1b      	ldr	r3, [r3, #32]
 8006f80:	f023 0201 	bic.w	r2, r3, #1
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	685b      	ldr	r3, [r3, #4]
 8006f8c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	699b      	ldr	r3, [r3, #24]
 8006f92:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006f94:	68fb      	ldr	r3, [r7, #12]
 8006f96:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006f9a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006f9e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006fa0:	68fb      	ldr	r3, [r7, #12]
 8006fa2:	f023 0303 	bic.w	r3, r3, #3
 8006fa6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006fa8:	683b      	ldr	r3, [r7, #0]
 8006faa:	681b      	ldr	r3, [r3, #0]
 8006fac:	68fa      	ldr	r2, [r7, #12]
 8006fae:	4313      	orrs	r3, r2
 8006fb0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006fb2:	697b      	ldr	r3, [r7, #20]
 8006fb4:	f023 0302 	bic.w	r3, r3, #2
 8006fb8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006fba:	683b      	ldr	r3, [r7, #0]
 8006fbc:	689b      	ldr	r3, [r3, #8]
 8006fbe:	697a      	ldr	r2, [r7, #20]
 8006fc0:	4313      	orrs	r3, r2
 8006fc2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	4a2c      	ldr	r2, [pc, #176]	@ (8007078 <TIM_OC1_SetConfig+0x10c>)
 8006fc8:	4293      	cmp	r3, r2
 8006fca:	d00f      	beq.n	8006fec <TIM_OC1_SetConfig+0x80>
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	4a2b      	ldr	r2, [pc, #172]	@ (800707c <TIM_OC1_SetConfig+0x110>)
 8006fd0:	4293      	cmp	r3, r2
 8006fd2:	d00b      	beq.n	8006fec <TIM_OC1_SetConfig+0x80>
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	4a2a      	ldr	r2, [pc, #168]	@ (8007080 <TIM_OC1_SetConfig+0x114>)
 8006fd8:	4293      	cmp	r3, r2
 8006fda:	d007      	beq.n	8006fec <TIM_OC1_SetConfig+0x80>
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	4a29      	ldr	r2, [pc, #164]	@ (8007084 <TIM_OC1_SetConfig+0x118>)
 8006fe0:	4293      	cmp	r3, r2
 8006fe2:	d003      	beq.n	8006fec <TIM_OC1_SetConfig+0x80>
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	4a28      	ldr	r2, [pc, #160]	@ (8007088 <TIM_OC1_SetConfig+0x11c>)
 8006fe8:	4293      	cmp	r3, r2
 8006fea:	d10c      	bne.n	8007006 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006fec:	697b      	ldr	r3, [r7, #20]
 8006fee:	f023 0308 	bic.w	r3, r3, #8
 8006ff2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006ff4:	683b      	ldr	r3, [r7, #0]
 8006ff6:	68db      	ldr	r3, [r3, #12]
 8006ff8:	697a      	ldr	r2, [r7, #20]
 8006ffa:	4313      	orrs	r3, r2
 8006ffc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006ffe:	697b      	ldr	r3, [r7, #20]
 8007000:	f023 0304 	bic.w	r3, r3, #4
 8007004:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	4a1b      	ldr	r2, [pc, #108]	@ (8007078 <TIM_OC1_SetConfig+0x10c>)
 800700a:	4293      	cmp	r3, r2
 800700c:	d00f      	beq.n	800702e <TIM_OC1_SetConfig+0xc2>
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	4a1a      	ldr	r2, [pc, #104]	@ (800707c <TIM_OC1_SetConfig+0x110>)
 8007012:	4293      	cmp	r3, r2
 8007014:	d00b      	beq.n	800702e <TIM_OC1_SetConfig+0xc2>
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	4a19      	ldr	r2, [pc, #100]	@ (8007080 <TIM_OC1_SetConfig+0x114>)
 800701a:	4293      	cmp	r3, r2
 800701c:	d007      	beq.n	800702e <TIM_OC1_SetConfig+0xc2>
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	4a18      	ldr	r2, [pc, #96]	@ (8007084 <TIM_OC1_SetConfig+0x118>)
 8007022:	4293      	cmp	r3, r2
 8007024:	d003      	beq.n	800702e <TIM_OC1_SetConfig+0xc2>
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	4a17      	ldr	r2, [pc, #92]	@ (8007088 <TIM_OC1_SetConfig+0x11c>)
 800702a:	4293      	cmp	r3, r2
 800702c:	d111      	bne.n	8007052 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800702e:	693b      	ldr	r3, [r7, #16]
 8007030:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007034:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8007036:	693b      	ldr	r3, [r7, #16]
 8007038:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800703c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800703e:	683b      	ldr	r3, [r7, #0]
 8007040:	695b      	ldr	r3, [r3, #20]
 8007042:	693a      	ldr	r2, [r7, #16]
 8007044:	4313      	orrs	r3, r2
 8007046:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8007048:	683b      	ldr	r3, [r7, #0]
 800704a:	699b      	ldr	r3, [r3, #24]
 800704c:	693a      	ldr	r2, [r7, #16]
 800704e:	4313      	orrs	r3, r2
 8007050:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	693a      	ldr	r2, [r7, #16]
 8007056:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	68fa      	ldr	r2, [r7, #12]
 800705c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800705e:	683b      	ldr	r3, [r7, #0]
 8007060:	685a      	ldr	r2, [r3, #4]
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	697a      	ldr	r2, [r7, #20]
 800706a:	621a      	str	r2, [r3, #32]
}
 800706c:	bf00      	nop
 800706e:	371c      	adds	r7, #28
 8007070:	46bd      	mov	sp, r7
 8007072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007076:	4770      	bx	lr
 8007078:	40012c00 	.word	0x40012c00
 800707c:	40013400 	.word	0x40013400
 8007080:	40014000 	.word	0x40014000
 8007084:	40014400 	.word	0x40014400
 8007088:	40014800 	.word	0x40014800

0800708c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800708c:	b480      	push	{r7}
 800708e:	b087      	sub	sp, #28
 8007090:	af00      	add	r7, sp, #0
 8007092:	6078      	str	r0, [r7, #4]
 8007094:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	6a1b      	ldr	r3, [r3, #32]
 800709a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	6a1b      	ldr	r3, [r3, #32]
 80070a0:	f023 0210 	bic.w	r2, r3, #16
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	685b      	ldr	r3, [r3, #4]
 80070ac:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	699b      	ldr	r3, [r3, #24]
 80070b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80070b4:	68fb      	ldr	r3, [r7, #12]
 80070b6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80070ba:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80070be:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80070c0:	68fb      	ldr	r3, [r7, #12]
 80070c2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80070c6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80070c8:	683b      	ldr	r3, [r7, #0]
 80070ca:	681b      	ldr	r3, [r3, #0]
 80070cc:	021b      	lsls	r3, r3, #8
 80070ce:	68fa      	ldr	r2, [r7, #12]
 80070d0:	4313      	orrs	r3, r2
 80070d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80070d4:	697b      	ldr	r3, [r7, #20]
 80070d6:	f023 0320 	bic.w	r3, r3, #32
 80070da:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80070dc:	683b      	ldr	r3, [r7, #0]
 80070de:	689b      	ldr	r3, [r3, #8]
 80070e0:	011b      	lsls	r3, r3, #4
 80070e2:	697a      	ldr	r2, [r7, #20]
 80070e4:	4313      	orrs	r3, r2
 80070e6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	4a28      	ldr	r2, [pc, #160]	@ (800718c <TIM_OC2_SetConfig+0x100>)
 80070ec:	4293      	cmp	r3, r2
 80070ee:	d003      	beq.n	80070f8 <TIM_OC2_SetConfig+0x6c>
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	4a27      	ldr	r2, [pc, #156]	@ (8007190 <TIM_OC2_SetConfig+0x104>)
 80070f4:	4293      	cmp	r3, r2
 80070f6:	d10d      	bne.n	8007114 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80070f8:	697b      	ldr	r3, [r7, #20]
 80070fa:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80070fe:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007100:	683b      	ldr	r3, [r7, #0]
 8007102:	68db      	ldr	r3, [r3, #12]
 8007104:	011b      	lsls	r3, r3, #4
 8007106:	697a      	ldr	r2, [r7, #20]
 8007108:	4313      	orrs	r3, r2
 800710a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800710c:	697b      	ldr	r3, [r7, #20]
 800710e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007112:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	4a1d      	ldr	r2, [pc, #116]	@ (800718c <TIM_OC2_SetConfig+0x100>)
 8007118:	4293      	cmp	r3, r2
 800711a:	d00f      	beq.n	800713c <TIM_OC2_SetConfig+0xb0>
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	4a1c      	ldr	r2, [pc, #112]	@ (8007190 <TIM_OC2_SetConfig+0x104>)
 8007120:	4293      	cmp	r3, r2
 8007122:	d00b      	beq.n	800713c <TIM_OC2_SetConfig+0xb0>
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	4a1b      	ldr	r2, [pc, #108]	@ (8007194 <TIM_OC2_SetConfig+0x108>)
 8007128:	4293      	cmp	r3, r2
 800712a:	d007      	beq.n	800713c <TIM_OC2_SetConfig+0xb0>
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	4a1a      	ldr	r2, [pc, #104]	@ (8007198 <TIM_OC2_SetConfig+0x10c>)
 8007130:	4293      	cmp	r3, r2
 8007132:	d003      	beq.n	800713c <TIM_OC2_SetConfig+0xb0>
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	4a19      	ldr	r2, [pc, #100]	@ (800719c <TIM_OC2_SetConfig+0x110>)
 8007138:	4293      	cmp	r3, r2
 800713a:	d113      	bne.n	8007164 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800713c:	693b      	ldr	r3, [r7, #16]
 800713e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8007142:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007144:	693b      	ldr	r3, [r7, #16]
 8007146:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800714a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800714c:	683b      	ldr	r3, [r7, #0]
 800714e:	695b      	ldr	r3, [r3, #20]
 8007150:	009b      	lsls	r3, r3, #2
 8007152:	693a      	ldr	r2, [r7, #16]
 8007154:	4313      	orrs	r3, r2
 8007156:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007158:	683b      	ldr	r3, [r7, #0]
 800715a:	699b      	ldr	r3, [r3, #24]
 800715c:	009b      	lsls	r3, r3, #2
 800715e:	693a      	ldr	r2, [r7, #16]
 8007160:	4313      	orrs	r3, r2
 8007162:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	693a      	ldr	r2, [r7, #16]
 8007168:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	68fa      	ldr	r2, [r7, #12]
 800716e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007170:	683b      	ldr	r3, [r7, #0]
 8007172:	685a      	ldr	r2, [r3, #4]
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	697a      	ldr	r2, [r7, #20]
 800717c:	621a      	str	r2, [r3, #32]
}
 800717e:	bf00      	nop
 8007180:	371c      	adds	r7, #28
 8007182:	46bd      	mov	sp, r7
 8007184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007188:	4770      	bx	lr
 800718a:	bf00      	nop
 800718c:	40012c00 	.word	0x40012c00
 8007190:	40013400 	.word	0x40013400
 8007194:	40014000 	.word	0x40014000
 8007198:	40014400 	.word	0x40014400
 800719c:	40014800 	.word	0x40014800

080071a0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80071a0:	b480      	push	{r7}
 80071a2:	b087      	sub	sp, #28
 80071a4:	af00      	add	r7, sp, #0
 80071a6:	6078      	str	r0, [r7, #4]
 80071a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	6a1b      	ldr	r3, [r3, #32]
 80071ae:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	6a1b      	ldr	r3, [r3, #32]
 80071b4:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	685b      	ldr	r3, [r3, #4]
 80071c0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	69db      	ldr	r3, [r3, #28]
 80071c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80071c8:	68fb      	ldr	r3, [r7, #12]
 80071ca:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80071ce:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80071d2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80071d4:	68fb      	ldr	r3, [r7, #12]
 80071d6:	f023 0303 	bic.w	r3, r3, #3
 80071da:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80071dc:	683b      	ldr	r3, [r7, #0]
 80071de:	681b      	ldr	r3, [r3, #0]
 80071e0:	68fa      	ldr	r2, [r7, #12]
 80071e2:	4313      	orrs	r3, r2
 80071e4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80071e6:	697b      	ldr	r3, [r7, #20]
 80071e8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80071ec:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80071ee:	683b      	ldr	r3, [r7, #0]
 80071f0:	689b      	ldr	r3, [r3, #8]
 80071f2:	021b      	lsls	r3, r3, #8
 80071f4:	697a      	ldr	r2, [r7, #20]
 80071f6:	4313      	orrs	r3, r2
 80071f8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	4a27      	ldr	r2, [pc, #156]	@ (800729c <TIM_OC3_SetConfig+0xfc>)
 80071fe:	4293      	cmp	r3, r2
 8007200:	d003      	beq.n	800720a <TIM_OC3_SetConfig+0x6a>
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	4a26      	ldr	r2, [pc, #152]	@ (80072a0 <TIM_OC3_SetConfig+0x100>)
 8007206:	4293      	cmp	r3, r2
 8007208:	d10d      	bne.n	8007226 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800720a:	697b      	ldr	r3, [r7, #20]
 800720c:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8007210:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8007212:	683b      	ldr	r3, [r7, #0]
 8007214:	68db      	ldr	r3, [r3, #12]
 8007216:	021b      	lsls	r3, r3, #8
 8007218:	697a      	ldr	r2, [r7, #20]
 800721a:	4313      	orrs	r3, r2
 800721c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800721e:	697b      	ldr	r3, [r7, #20]
 8007220:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8007224:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	4a1c      	ldr	r2, [pc, #112]	@ (800729c <TIM_OC3_SetConfig+0xfc>)
 800722a:	4293      	cmp	r3, r2
 800722c:	d00f      	beq.n	800724e <TIM_OC3_SetConfig+0xae>
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	4a1b      	ldr	r2, [pc, #108]	@ (80072a0 <TIM_OC3_SetConfig+0x100>)
 8007232:	4293      	cmp	r3, r2
 8007234:	d00b      	beq.n	800724e <TIM_OC3_SetConfig+0xae>
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	4a1a      	ldr	r2, [pc, #104]	@ (80072a4 <TIM_OC3_SetConfig+0x104>)
 800723a:	4293      	cmp	r3, r2
 800723c:	d007      	beq.n	800724e <TIM_OC3_SetConfig+0xae>
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	4a19      	ldr	r2, [pc, #100]	@ (80072a8 <TIM_OC3_SetConfig+0x108>)
 8007242:	4293      	cmp	r3, r2
 8007244:	d003      	beq.n	800724e <TIM_OC3_SetConfig+0xae>
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	4a18      	ldr	r2, [pc, #96]	@ (80072ac <TIM_OC3_SetConfig+0x10c>)
 800724a:	4293      	cmp	r3, r2
 800724c:	d113      	bne.n	8007276 <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800724e:	693b      	ldr	r3, [r7, #16]
 8007250:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8007254:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8007256:	693b      	ldr	r3, [r7, #16]
 8007258:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800725c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800725e:	683b      	ldr	r3, [r7, #0]
 8007260:	695b      	ldr	r3, [r3, #20]
 8007262:	011b      	lsls	r3, r3, #4
 8007264:	693a      	ldr	r2, [r7, #16]
 8007266:	4313      	orrs	r3, r2
 8007268:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800726a:	683b      	ldr	r3, [r7, #0]
 800726c:	699b      	ldr	r3, [r3, #24]
 800726e:	011b      	lsls	r3, r3, #4
 8007270:	693a      	ldr	r2, [r7, #16]
 8007272:	4313      	orrs	r3, r2
 8007274:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	693a      	ldr	r2, [r7, #16]
 800727a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	68fa      	ldr	r2, [r7, #12]
 8007280:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8007282:	683b      	ldr	r3, [r7, #0]
 8007284:	685a      	ldr	r2, [r3, #4]
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	697a      	ldr	r2, [r7, #20]
 800728e:	621a      	str	r2, [r3, #32]
}
 8007290:	bf00      	nop
 8007292:	371c      	adds	r7, #28
 8007294:	46bd      	mov	sp, r7
 8007296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800729a:	4770      	bx	lr
 800729c:	40012c00 	.word	0x40012c00
 80072a0:	40013400 	.word	0x40013400
 80072a4:	40014000 	.word	0x40014000
 80072a8:	40014400 	.word	0x40014400
 80072ac:	40014800 	.word	0x40014800

080072b0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80072b0:	b480      	push	{r7}
 80072b2:	b087      	sub	sp, #28
 80072b4:	af00      	add	r7, sp, #0
 80072b6:	6078      	str	r0, [r7, #4]
 80072b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	6a1b      	ldr	r3, [r3, #32]
 80072be:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	6a1b      	ldr	r3, [r3, #32]
 80072c4:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	685b      	ldr	r3, [r3, #4]
 80072d0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	69db      	ldr	r3, [r3, #28]
 80072d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80072d8:	68fb      	ldr	r3, [r7, #12]
 80072da:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80072de:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80072e2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80072e4:	68fb      	ldr	r3, [r7, #12]
 80072e6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80072ea:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80072ec:	683b      	ldr	r3, [r7, #0]
 80072ee:	681b      	ldr	r3, [r3, #0]
 80072f0:	021b      	lsls	r3, r3, #8
 80072f2:	68fa      	ldr	r2, [r7, #12]
 80072f4:	4313      	orrs	r3, r2
 80072f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80072f8:	697b      	ldr	r3, [r7, #20]
 80072fa:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80072fe:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007300:	683b      	ldr	r3, [r7, #0]
 8007302:	689b      	ldr	r3, [r3, #8]
 8007304:	031b      	lsls	r3, r3, #12
 8007306:	697a      	ldr	r2, [r7, #20]
 8007308:	4313      	orrs	r3, r2
 800730a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	4a28      	ldr	r2, [pc, #160]	@ (80073b0 <TIM_OC4_SetConfig+0x100>)
 8007310:	4293      	cmp	r3, r2
 8007312:	d003      	beq.n	800731c <TIM_OC4_SetConfig+0x6c>
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	4a27      	ldr	r2, [pc, #156]	@ (80073b4 <TIM_OC4_SetConfig+0x104>)
 8007318:	4293      	cmp	r3, r2
 800731a:	d10d      	bne.n	8007338 <TIM_OC4_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 800731c:	697b      	ldr	r3, [r7, #20]
 800731e:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8007322:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8007324:	683b      	ldr	r3, [r7, #0]
 8007326:	68db      	ldr	r3, [r3, #12]
 8007328:	031b      	lsls	r3, r3, #12
 800732a:	697a      	ldr	r2, [r7, #20]
 800732c:	4313      	orrs	r3, r2
 800732e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8007330:	697b      	ldr	r3, [r7, #20]
 8007332:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8007336:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	4a1d      	ldr	r2, [pc, #116]	@ (80073b0 <TIM_OC4_SetConfig+0x100>)
 800733c:	4293      	cmp	r3, r2
 800733e:	d00f      	beq.n	8007360 <TIM_OC4_SetConfig+0xb0>
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	4a1c      	ldr	r2, [pc, #112]	@ (80073b4 <TIM_OC4_SetConfig+0x104>)
 8007344:	4293      	cmp	r3, r2
 8007346:	d00b      	beq.n	8007360 <TIM_OC4_SetConfig+0xb0>
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	4a1b      	ldr	r2, [pc, #108]	@ (80073b8 <TIM_OC4_SetConfig+0x108>)
 800734c:	4293      	cmp	r3, r2
 800734e:	d007      	beq.n	8007360 <TIM_OC4_SetConfig+0xb0>
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	4a1a      	ldr	r2, [pc, #104]	@ (80073bc <TIM_OC4_SetConfig+0x10c>)
 8007354:	4293      	cmp	r3, r2
 8007356:	d003      	beq.n	8007360 <TIM_OC4_SetConfig+0xb0>
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	4a19      	ldr	r2, [pc, #100]	@ (80073c0 <TIM_OC4_SetConfig+0x110>)
 800735c:	4293      	cmp	r3, r2
 800735e:	d113      	bne.n	8007388 <TIM_OC4_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007360:	693b      	ldr	r3, [r7, #16]
 8007362:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8007366:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8007368:	693b      	ldr	r3, [r7, #16]
 800736a:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800736e:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007370:	683b      	ldr	r3, [r7, #0]
 8007372:	695b      	ldr	r3, [r3, #20]
 8007374:	019b      	lsls	r3, r3, #6
 8007376:	693a      	ldr	r2, [r7, #16]
 8007378:	4313      	orrs	r3, r2
 800737a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 800737c:	683b      	ldr	r3, [r7, #0]
 800737e:	699b      	ldr	r3, [r3, #24]
 8007380:	019b      	lsls	r3, r3, #6
 8007382:	693a      	ldr	r2, [r7, #16]
 8007384:	4313      	orrs	r3, r2
 8007386:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	693a      	ldr	r2, [r7, #16]
 800738c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	68fa      	ldr	r2, [r7, #12]
 8007392:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007394:	683b      	ldr	r3, [r7, #0]
 8007396:	685a      	ldr	r2, [r3, #4]
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	697a      	ldr	r2, [r7, #20]
 80073a0:	621a      	str	r2, [r3, #32]
}
 80073a2:	bf00      	nop
 80073a4:	371c      	adds	r7, #28
 80073a6:	46bd      	mov	sp, r7
 80073a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073ac:	4770      	bx	lr
 80073ae:	bf00      	nop
 80073b0:	40012c00 	.word	0x40012c00
 80073b4:	40013400 	.word	0x40013400
 80073b8:	40014000 	.word	0x40014000
 80073bc:	40014400 	.word	0x40014400
 80073c0:	40014800 	.word	0x40014800

080073c4 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80073c4:	b480      	push	{r7}
 80073c6:	b087      	sub	sp, #28
 80073c8:	af00      	add	r7, sp, #0
 80073ca:	6078      	str	r0, [r7, #4]
 80073cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	6a1b      	ldr	r3, [r3, #32]
 80073d2:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	6a1b      	ldr	r3, [r3, #32]
 80073d8:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	685b      	ldr	r3, [r3, #4]
 80073e4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80073ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80073ec:	68fb      	ldr	r3, [r7, #12]
 80073ee:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80073f2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80073f6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80073f8:	683b      	ldr	r3, [r7, #0]
 80073fa:	681b      	ldr	r3, [r3, #0]
 80073fc:	68fa      	ldr	r2, [r7, #12]
 80073fe:	4313      	orrs	r3, r2
 8007400:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8007402:	693b      	ldr	r3, [r7, #16]
 8007404:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8007408:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800740a:	683b      	ldr	r3, [r7, #0]
 800740c:	689b      	ldr	r3, [r3, #8]
 800740e:	041b      	lsls	r3, r3, #16
 8007410:	693a      	ldr	r2, [r7, #16]
 8007412:	4313      	orrs	r3, r2
 8007414:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	4a17      	ldr	r2, [pc, #92]	@ (8007478 <TIM_OC5_SetConfig+0xb4>)
 800741a:	4293      	cmp	r3, r2
 800741c:	d00f      	beq.n	800743e <TIM_OC5_SetConfig+0x7a>
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	4a16      	ldr	r2, [pc, #88]	@ (800747c <TIM_OC5_SetConfig+0xb8>)
 8007422:	4293      	cmp	r3, r2
 8007424:	d00b      	beq.n	800743e <TIM_OC5_SetConfig+0x7a>
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	4a15      	ldr	r2, [pc, #84]	@ (8007480 <TIM_OC5_SetConfig+0xbc>)
 800742a:	4293      	cmp	r3, r2
 800742c:	d007      	beq.n	800743e <TIM_OC5_SetConfig+0x7a>
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	4a14      	ldr	r2, [pc, #80]	@ (8007484 <TIM_OC5_SetConfig+0xc0>)
 8007432:	4293      	cmp	r3, r2
 8007434:	d003      	beq.n	800743e <TIM_OC5_SetConfig+0x7a>
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	4a13      	ldr	r2, [pc, #76]	@ (8007488 <TIM_OC5_SetConfig+0xc4>)
 800743a:	4293      	cmp	r3, r2
 800743c:	d109      	bne.n	8007452 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800743e:	697b      	ldr	r3, [r7, #20]
 8007440:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007444:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8007446:	683b      	ldr	r3, [r7, #0]
 8007448:	695b      	ldr	r3, [r3, #20]
 800744a:	021b      	lsls	r3, r3, #8
 800744c:	697a      	ldr	r2, [r7, #20]
 800744e:	4313      	orrs	r3, r2
 8007450:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	697a      	ldr	r2, [r7, #20]
 8007456:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	68fa      	ldr	r2, [r7, #12]
 800745c:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800745e:	683b      	ldr	r3, [r7, #0]
 8007460:	685a      	ldr	r2, [r3, #4]
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	693a      	ldr	r2, [r7, #16]
 800746a:	621a      	str	r2, [r3, #32]
}
 800746c:	bf00      	nop
 800746e:	371c      	adds	r7, #28
 8007470:	46bd      	mov	sp, r7
 8007472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007476:	4770      	bx	lr
 8007478:	40012c00 	.word	0x40012c00
 800747c:	40013400 	.word	0x40013400
 8007480:	40014000 	.word	0x40014000
 8007484:	40014400 	.word	0x40014400
 8007488:	40014800 	.word	0x40014800

0800748c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800748c:	b480      	push	{r7}
 800748e:	b087      	sub	sp, #28
 8007490:	af00      	add	r7, sp, #0
 8007492:	6078      	str	r0, [r7, #4]
 8007494:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	6a1b      	ldr	r3, [r3, #32]
 800749a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	6a1b      	ldr	r3, [r3, #32]
 80074a0:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	685b      	ldr	r3, [r3, #4]
 80074ac:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80074b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80074b4:	68fb      	ldr	r3, [r7, #12]
 80074b6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80074ba:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80074be:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80074c0:	683b      	ldr	r3, [r7, #0]
 80074c2:	681b      	ldr	r3, [r3, #0]
 80074c4:	021b      	lsls	r3, r3, #8
 80074c6:	68fa      	ldr	r2, [r7, #12]
 80074c8:	4313      	orrs	r3, r2
 80074ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80074cc:	693b      	ldr	r3, [r7, #16]
 80074ce:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80074d2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80074d4:	683b      	ldr	r3, [r7, #0]
 80074d6:	689b      	ldr	r3, [r3, #8]
 80074d8:	051b      	lsls	r3, r3, #20
 80074da:	693a      	ldr	r2, [r7, #16]
 80074dc:	4313      	orrs	r3, r2
 80074de:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	4a18      	ldr	r2, [pc, #96]	@ (8007544 <TIM_OC6_SetConfig+0xb8>)
 80074e4:	4293      	cmp	r3, r2
 80074e6:	d00f      	beq.n	8007508 <TIM_OC6_SetConfig+0x7c>
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	4a17      	ldr	r2, [pc, #92]	@ (8007548 <TIM_OC6_SetConfig+0xbc>)
 80074ec:	4293      	cmp	r3, r2
 80074ee:	d00b      	beq.n	8007508 <TIM_OC6_SetConfig+0x7c>
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	4a16      	ldr	r2, [pc, #88]	@ (800754c <TIM_OC6_SetConfig+0xc0>)
 80074f4:	4293      	cmp	r3, r2
 80074f6:	d007      	beq.n	8007508 <TIM_OC6_SetConfig+0x7c>
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	4a15      	ldr	r2, [pc, #84]	@ (8007550 <TIM_OC6_SetConfig+0xc4>)
 80074fc:	4293      	cmp	r3, r2
 80074fe:	d003      	beq.n	8007508 <TIM_OC6_SetConfig+0x7c>
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	4a14      	ldr	r2, [pc, #80]	@ (8007554 <TIM_OC6_SetConfig+0xc8>)
 8007504:	4293      	cmp	r3, r2
 8007506:	d109      	bne.n	800751c <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8007508:	697b      	ldr	r3, [r7, #20]
 800750a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800750e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8007510:	683b      	ldr	r3, [r7, #0]
 8007512:	695b      	ldr	r3, [r3, #20]
 8007514:	029b      	lsls	r3, r3, #10
 8007516:	697a      	ldr	r2, [r7, #20]
 8007518:	4313      	orrs	r3, r2
 800751a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	697a      	ldr	r2, [r7, #20]
 8007520:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	68fa      	ldr	r2, [r7, #12]
 8007526:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8007528:	683b      	ldr	r3, [r7, #0]
 800752a:	685a      	ldr	r2, [r3, #4]
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	693a      	ldr	r2, [r7, #16]
 8007534:	621a      	str	r2, [r3, #32]
}
 8007536:	bf00      	nop
 8007538:	371c      	adds	r7, #28
 800753a:	46bd      	mov	sp, r7
 800753c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007540:	4770      	bx	lr
 8007542:	bf00      	nop
 8007544:	40012c00 	.word	0x40012c00
 8007548:	40013400 	.word	0x40013400
 800754c:	40014000 	.word	0x40014000
 8007550:	40014400 	.word	0x40014400
 8007554:	40014800 	.word	0x40014800

08007558 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007558:	b480      	push	{r7}
 800755a:	b087      	sub	sp, #28
 800755c:	af00      	add	r7, sp, #0
 800755e:	60f8      	str	r0, [r7, #12]
 8007560:	60b9      	str	r1, [r7, #8]
 8007562:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007564:	68fb      	ldr	r3, [r7, #12]
 8007566:	6a1b      	ldr	r3, [r3, #32]
 8007568:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800756a:	68fb      	ldr	r3, [r7, #12]
 800756c:	6a1b      	ldr	r3, [r3, #32]
 800756e:	f023 0201 	bic.w	r2, r3, #1
 8007572:	68fb      	ldr	r3, [r7, #12]
 8007574:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007576:	68fb      	ldr	r3, [r7, #12]
 8007578:	699b      	ldr	r3, [r3, #24]
 800757a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800757c:	693b      	ldr	r3, [r7, #16]
 800757e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8007582:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	011b      	lsls	r3, r3, #4
 8007588:	693a      	ldr	r2, [r7, #16]
 800758a:	4313      	orrs	r3, r2
 800758c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800758e:	697b      	ldr	r3, [r7, #20]
 8007590:	f023 030a 	bic.w	r3, r3, #10
 8007594:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007596:	697a      	ldr	r2, [r7, #20]
 8007598:	68bb      	ldr	r3, [r7, #8]
 800759a:	4313      	orrs	r3, r2
 800759c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800759e:	68fb      	ldr	r3, [r7, #12]
 80075a0:	693a      	ldr	r2, [r7, #16]
 80075a2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80075a4:	68fb      	ldr	r3, [r7, #12]
 80075a6:	697a      	ldr	r2, [r7, #20]
 80075a8:	621a      	str	r2, [r3, #32]
}
 80075aa:	bf00      	nop
 80075ac:	371c      	adds	r7, #28
 80075ae:	46bd      	mov	sp, r7
 80075b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075b4:	4770      	bx	lr

080075b6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80075b6:	b480      	push	{r7}
 80075b8:	b087      	sub	sp, #28
 80075ba:	af00      	add	r7, sp, #0
 80075bc:	60f8      	str	r0, [r7, #12]
 80075be:	60b9      	str	r1, [r7, #8]
 80075c0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80075c2:	68fb      	ldr	r3, [r7, #12]
 80075c4:	6a1b      	ldr	r3, [r3, #32]
 80075c6:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80075c8:	68fb      	ldr	r3, [r7, #12]
 80075ca:	6a1b      	ldr	r3, [r3, #32]
 80075cc:	f023 0210 	bic.w	r2, r3, #16
 80075d0:	68fb      	ldr	r3, [r7, #12]
 80075d2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80075d4:	68fb      	ldr	r3, [r7, #12]
 80075d6:	699b      	ldr	r3, [r3, #24]
 80075d8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80075da:	693b      	ldr	r3, [r7, #16]
 80075dc:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80075e0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	031b      	lsls	r3, r3, #12
 80075e6:	693a      	ldr	r2, [r7, #16]
 80075e8:	4313      	orrs	r3, r2
 80075ea:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80075ec:	697b      	ldr	r3, [r7, #20]
 80075ee:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80075f2:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80075f4:	68bb      	ldr	r3, [r7, #8]
 80075f6:	011b      	lsls	r3, r3, #4
 80075f8:	697a      	ldr	r2, [r7, #20]
 80075fa:	4313      	orrs	r3, r2
 80075fc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80075fe:	68fb      	ldr	r3, [r7, #12]
 8007600:	693a      	ldr	r2, [r7, #16]
 8007602:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007604:	68fb      	ldr	r3, [r7, #12]
 8007606:	697a      	ldr	r2, [r7, #20]
 8007608:	621a      	str	r2, [r3, #32]
}
 800760a:	bf00      	nop
 800760c:	371c      	adds	r7, #28
 800760e:	46bd      	mov	sp, r7
 8007610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007614:	4770      	bx	lr

08007616 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007616:	b480      	push	{r7}
 8007618:	b085      	sub	sp, #20
 800761a:	af00      	add	r7, sp, #0
 800761c:	6078      	str	r0, [r7, #4]
 800761e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	689b      	ldr	r3, [r3, #8]
 8007624:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007626:	68fb      	ldr	r3, [r7, #12]
 8007628:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 800762c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007630:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007632:	683a      	ldr	r2, [r7, #0]
 8007634:	68fb      	ldr	r3, [r7, #12]
 8007636:	4313      	orrs	r3, r2
 8007638:	f043 0307 	orr.w	r3, r3, #7
 800763c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	68fa      	ldr	r2, [r7, #12]
 8007642:	609a      	str	r2, [r3, #8]
}
 8007644:	bf00      	nop
 8007646:	3714      	adds	r7, #20
 8007648:	46bd      	mov	sp, r7
 800764a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800764e:	4770      	bx	lr

08007650 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007650:	b480      	push	{r7}
 8007652:	b087      	sub	sp, #28
 8007654:	af00      	add	r7, sp, #0
 8007656:	60f8      	str	r0, [r7, #12]
 8007658:	60b9      	str	r1, [r7, #8]
 800765a:	607a      	str	r2, [r7, #4]
 800765c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800765e:	68fb      	ldr	r3, [r7, #12]
 8007660:	689b      	ldr	r3, [r3, #8]
 8007662:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007664:	697b      	ldr	r3, [r7, #20]
 8007666:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800766a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800766c:	683b      	ldr	r3, [r7, #0]
 800766e:	021a      	lsls	r2, r3, #8
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	431a      	orrs	r2, r3
 8007674:	68bb      	ldr	r3, [r7, #8]
 8007676:	4313      	orrs	r3, r2
 8007678:	697a      	ldr	r2, [r7, #20]
 800767a:	4313      	orrs	r3, r2
 800767c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800767e:	68fb      	ldr	r3, [r7, #12]
 8007680:	697a      	ldr	r2, [r7, #20]
 8007682:	609a      	str	r2, [r3, #8]
}
 8007684:	bf00      	nop
 8007686:	371c      	adds	r7, #28
 8007688:	46bd      	mov	sp, r7
 800768a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800768e:	4770      	bx	lr

08007690 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8007690:	b480      	push	{r7}
 8007692:	b087      	sub	sp, #28
 8007694:	af00      	add	r7, sp, #0
 8007696:	60f8      	str	r0, [r7, #12]
 8007698:	60b9      	str	r1, [r7, #8]
 800769a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800769c:	68bb      	ldr	r3, [r7, #8]
 800769e:	f003 031f 	and.w	r3, r3, #31
 80076a2:	2201      	movs	r2, #1
 80076a4:	fa02 f303 	lsl.w	r3, r2, r3
 80076a8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80076aa:	68fb      	ldr	r3, [r7, #12]
 80076ac:	6a1a      	ldr	r2, [r3, #32]
 80076ae:	697b      	ldr	r3, [r7, #20]
 80076b0:	43db      	mvns	r3, r3
 80076b2:	401a      	ands	r2, r3
 80076b4:	68fb      	ldr	r3, [r7, #12]
 80076b6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80076b8:	68fb      	ldr	r3, [r7, #12]
 80076ba:	6a1a      	ldr	r2, [r3, #32]
 80076bc:	68bb      	ldr	r3, [r7, #8]
 80076be:	f003 031f 	and.w	r3, r3, #31
 80076c2:	6879      	ldr	r1, [r7, #4]
 80076c4:	fa01 f303 	lsl.w	r3, r1, r3
 80076c8:	431a      	orrs	r2, r3
 80076ca:	68fb      	ldr	r3, [r7, #12]
 80076cc:	621a      	str	r2, [r3, #32]
}
 80076ce:	bf00      	nop
 80076d0:	371c      	adds	r7, #28
 80076d2:	46bd      	mov	sp, r7
 80076d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076d8:	4770      	bx	lr
	...

080076dc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80076dc:	b480      	push	{r7}
 80076de:	b085      	sub	sp, #20
 80076e0:	af00      	add	r7, sp, #0
 80076e2:	6078      	str	r0, [r7, #4]
 80076e4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80076ec:	2b01      	cmp	r3, #1
 80076ee:	d101      	bne.n	80076f4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80076f0:	2302      	movs	r3, #2
 80076f2:	e065      	b.n	80077c0 <HAL_TIMEx_MasterConfigSynchronization+0xe4>
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	2201      	movs	r2, #1
 80076f8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	2202      	movs	r2, #2
 8007700:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	681b      	ldr	r3, [r3, #0]
 8007708:	685b      	ldr	r3, [r3, #4]
 800770a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	681b      	ldr	r3, [r3, #0]
 8007710:	689b      	ldr	r3, [r3, #8]
 8007712:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	681b      	ldr	r3, [r3, #0]
 8007718:	4a2c      	ldr	r2, [pc, #176]	@ (80077cc <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800771a:	4293      	cmp	r3, r2
 800771c:	d004      	beq.n	8007728 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	681b      	ldr	r3, [r3, #0]
 8007722:	4a2b      	ldr	r2, [pc, #172]	@ (80077d0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8007724:	4293      	cmp	r3, r2
 8007726:	d108      	bne.n	800773a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8007728:	68fb      	ldr	r3, [r7, #12]
 800772a:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800772e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8007730:	683b      	ldr	r3, [r7, #0]
 8007732:	685b      	ldr	r3, [r3, #4]
 8007734:	68fa      	ldr	r2, [r7, #12]
 8007736:	4313      	orrs	r3, r2
 8007738:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800773a:	68fb      	ldr	r3, [r7, #12]
 800773c:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 8007740:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007744:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007746:	683b      	ldr	r3, [r7, #0]
 8007748:	681b      	ldr	r3, [r3, #0]
 800774a:	68fa      	ldr	r2, [r7, #12]
 800774c:	4313      	orrs	r3, r2
 800774e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	681b      	ldr	r3, [r3, #0]
 8007754:	68fa      	ldr	r2, [r7, #12]
 8007756:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	681b      	ldr	r3, [r3, #0]
 800775c:	4a1b      	ldr	r2, [pc, #108]	@ (80077cc <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800775e:	4293      	cmp	r3, r2
 8007760:	d018      	beq.n	8007794 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	681b      	ldr	r3, [r3, #0]
 8007766:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800776a:	d013      	beq.n	8007794 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	681b      	ldr	r3, [r3, #0]
 8007770:	4a18      	ldr	r2, [pc, #96]	@ (80077d4 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8007772:	4293      	cmp	r3, r2
 8007774:	d00e      	beq.n	8007794 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	681b      	ldr	r3, [r3, #0]
 800777a:	4a17      	ldr	r2, [pc, #92]	@ (80077d8 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800777c:	4293      	cmp	r3, r2
 800777e:	d009      	beq.n	8007794 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	681b      	ldr	r3, [r3, #0]
 8007784:	4a12      	ldr	r2, [pc, #72]	@ (80077d0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8007786:	4293      	cmp	r3, r2
 8007788:	d004      	beq.n	8007794 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	681b      	ldr	r3, [r3, #0]
 800778e:	4a13      	ldr	r2, [pc, #76]	@ (80077dc <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8007790:	4293      	cmp	r3, r2
 8007792:	d10c      	bne.n	80077ae <HAL_TIMEx_MasterConfigSynchronization+0xd2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007794:	68bb      	ldr	r3, [r7, #8]
 8007796:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800779a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800779c:	683b      	ldr	r3, [r7, #0]
 800779e:	689b      	ldr	r3, [r3, #8]
 80077a0:	68ba      	ldr	r2, [r7, #8]
 80077a2:	4313      	orrs	r3, r2
 80077a4:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	681b      	ldr	r3, [r3, #0]
 80077aa:	68ba      	ldr	r2, [r7, #8]
 80077ac:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	2201      	movs	r2, #1
 80077b2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	2200      	movs	r2, #0
 80077ba:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80077be:	2300      	movs	r3, #0
}
 80077c0:	4618      	mov	r0, r3
 80077c2:	3714      	adds	r7, #20
 80077c4:	46bd      	mov	sp, r7
 80077c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077ca:	4770      	bx	lr
 80077cc:	40012c00 	.word	0x40012c00
 80077d0:	40013400 	.word	0x40013400
 80077d4:	40000400 	.word	0x40000400
 80077d8:	40000800 	.word	0x40000800
 80077dc:	40014000 	.word	0x40014000

080077e0 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80077e0:	b480      	push	{r7}
 80077e2:	b083      	sub	sp, #12
 80077e4:	af00      	add	r7, sp, #0
 80077e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80077e8:	bf00      	nop
 80077ea:	370c      	adds	r7, #12
 80077ec:	46bd      	mov	sp, r7
 80077ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077f2:	4770      	bx	lr

080077f4 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80077f4:	b480      	push	{r7}
 80077f6:	b083      	sub	sp, #12
 80077f8:	af00      	add	r7, sp, #0
 80077fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80077fc:	bf00      	nop
 80077fe:	370c      	adds	r7, #12
 8007800:	46bd      	mov	sp, r7
 8007802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007806:	4770      	bx	lr

08007808 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8007808:	b480      	push	{r7}
 800780a:	b083      	sub	sp, #12
 800780c:	af00      	add	r7, sp, #0
 800780e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8007810:	bf00      	nop
 8007812:	370c      	adds	r7, #12
 8007814:	46bd      	mov	sp, r7
 8007816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800781a:	4770      	bx	lr

0800781c <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 800781c:	b480      	push	{r7}
 800781e:	b083      	sub	sp, #12
 8007820:	af00      	add	r7, sp, #0
 8007822:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8007824:	bf00      	nop
 8007826:	370c      	adds	r7, #12
 8007828:	46bd      	mov	sp, r7
 800782a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800782e:	4770      	bx	lr

08007830 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8007830:	b480      	push	{r7}
 8007832:	b083      	sub	sp, #12
 8007834:	af00      	add	r7, sp, #0
 8007836:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8007838:	bf00      	nop
 800783a:	370c      	adds	r7, #12
 800783c:	46bd      	mov	sp, r7
 800783e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007842:	4770      	bx	lr

08007844 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8007844:	b480      	push	{r7}
 8007846:	b083      	sub	sp, #12
 8007848:	af00      	add	r7, sp, #0
 800784a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 800784c:	bf00      	nop
 800784e:	370c      	adds	r7, #12
 8007850:	46bd      	mov	sp, r7
 8007852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007856:	4770      	bx	lr

08007858 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8007858:	b480      	push	{r7}
 800785a:	b083      	sub	sp, #12
 800785c:	af00      	add	r7, sp, #0
 800785e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8007860:	bf00      	nop
 8007862:	370c      	adds	r7, #12
 8007864:	46bd      	mov	sp, r7
 8007866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800786a:	4770      	bx	lr

0800786c <_scanf_float>:
 800786c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007870:	b087      	sub	sp, #28
 8007872:	4617      	mov	r7, r2
 8007874:	9303      	str	r3, [sp, #12]
 8007876:	688b      	ldr	r3, [r1, #8]
 8007878:	1e5a      	subs	r2, r3, #1
 800787a:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 800787e:	bf81      	itttt	hi
 8007880:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 8007884:	eb03 0b05 	addhi.w	fp, r3, r5
 8007888:	f240 135d 	movwhi	r3, #349	@ 0x15d
 800788c:	608b      	strhi	r3, [r1, #8]
 800788e:	680b      	ldr	r3, [r1, #0]
 8007890:	460a      	mov	r2, r1
 8007892:	f04f 0500 	mov.w	r5, #0
 8007896:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 800789a:	f842 3b1c 	str.w	r3, [r2], #28
 800789e:	e9cd 5504 	strd	r5, r5, [sp, #16]
 80078a2:	4680      	mov	r8, r0
 80078a4:	460c      	mov	r4, r1
 80078a6:	bf98      	it	ls
 80078a8:	f04f 0b00 	movls.w	fp, #0
 80078ac:	9201      	str	r2, [sp, #4]
 80078ae:	4616      	mov	r6, r2
 80078b0:	46aa      	mov	sl, r5
 80078b2:	46a9      	mov	r9, r5
 80078b4:	9502      	str	r5, [sp, #8]
 80078b6:	68a2      	ldr	r2, [r4, #8]
 80078b8:	b152      	cbz	r2, 80078d0 <_scanf_float+0x64>
 80078ba:	683b      	ldr	r3, [r7, #0]
 80078bc:	781b      	ldrb	r3, [r3, #0]
 80078be:	2b4e      	cmp	r3, #78	@ 0x4e
 80078c0:	d864      	bhi.n	800798c <_scanf_float+0x120>
 80078c2:	2b40      	cmp	r3, #64	@ 0x40
 80078c4:	d83c      	bhi.n	8007940 <_scanf_float+0xd4>
 80078c6:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 80078ca:	b2c8      	uxtb	r0, r1
 80078cc:	280e      	cmp	r0, #14
 80078ce:	d93a      	bls.n	8007946 <_scanf_float+0xda>
 80078d0:	f1b9 0f00 	cmp.w	r9, #0
 80078d4:	d003      	beq.n	80078de <_scanf_float+0x72>
 80078d6:	6823      	ldr	r3, [r4, #0]
 80078d8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80078dc:	6023      	str	r3, [r4, #0]
 80078de:	f10a 3aff 	add.w	sl, sl, #4294967295
 80078e2:	f1ba 0f01 	cmp.w	sl, #1
 80078e6:	f200 8117 	bhi.w	8007b18 <_scanf_float+0x2ac>
 80078ea:	9b01      	ldr	r3, [sp, #4]
 80078ec:	429e      	cmp	r6, r3
 80078ee:	f200 8108 	bhi.w	8007b02 <_scanf_float+0x296>
 80078f2:	2001      	movs	r0, #1
 80078f4:	b007      	add	sp, #28
 80078f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80078fa:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 80078fe:	2a0d      	cmp	r2, #13
 8007900:	d8e6      	bhi.n	80078d0 <_scanf_float+0x64>
 8007902:	a101      	add	r1, pc, #4	@ (adr r1, 8007908 <_scanf_float+0x9c>)
 8007904:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8007908:	08007a4f 	.word	0x08007a4f
 800790c:	080078d1 	.word	0x080078d1
 8007910:	080078d1 	.word	0x080078d1
 8007914:	080078d1 	.word	0x080078d1
 8007918:	08007aaf 	.word	0x08007aaf
 800791c:	08007a87 	.word	0x08007a87
 8007920:	080078d1 	.word	0x080078d1
 8007924:	080078d1 	.word	0x080078d1
 8007928:	08007a5d 	.word	0x08007a5d
 800792c:	080078d1 	.word	0x080078d1
 8007930:	080078d1 	.word	0x080078d1
 8007934:	080078d1 	.word	0x080078d1
 8007938:	080078d1 	.word	0x080078d1
 800793c:	08007a15 	.word	0x08007a15
 8007940:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 8007944:	e7db      	b.n	80078fe <_scanf_float+0x92>
 8007946:	290e      	cmp	r1, #14
 8007948:	d8c2      	bhi.n	80078d0 <_scanf_float+0x64>
 800794a:	a001      	add	r0, pc, #4	@ (adr r0, 8007950 <_scanf_float+0xe4>)
 800794c:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8007950:	08007a05 	.word	0x08007a05
 8007954:	080078d1 	.word	0x080078d1
 8007958:	08007a05 	.word	0x08007a05
 800795c:	08007a9b 	.word	0x08007a9b
 8007960:	080078d1 	.word	0x080078d1
 8007964:	080079ad 	.word	0x080079ad
 8007968:	080079eb 	.word	0x080079eb
 800796c:	080079eb 	.word	0x080079eb
 8007970:	080079eb 	.word	0x080079eb
 8007974:	080079eb 	.word	0x080079eb
 8007978:	080079eb 	.word	0x080079eb
 800797c:	080079eb 	.word	0x080079eb
 8007980:	080079eb 	.word	0x080079eb
 8007984:	080079eb 	.word	0x080079eb
 8007988:	080079eb 	.word	0x080079eb
 800798c:	2b6e      	cmp	r3, #110	@ 0x6e
 800798e:	d809      	bhi.n	80079a4 <_scanf_float+0x138>
 8007990:	2b60      	cmp	r3, #96	@ 0x60
 8007992:	d8b2      	bhi.n	80078fa <_scanf_float+0x8e>
 8007994:	2b54      	cmp	r3, #84	@ 0x54
 8007996:	d07b      	beq.n	8007a90 <_scanf_float+0x224>
 8007998:	2b59      	cmp	r3, #89	@ 0x59
 800799a:	d199      	bne.n	80078d0 <_scanf_float+0x64>
 800799c:	2d07      	cmp	r5, #7
 800799e:	d197      	bne.n	80078d0 <_scanf_float+0x64>
 80079a0:	2508      	movs	r5, #8
 80079a2:	e02c      	b.n	80079fe <_scanf_float+0x192>
 80079a4:	2b74      	cmp	r3, #116	@ 0x74
 80079a6:	d073      	beq.n	8007a90 <_scanf_float+0x224>
 80079a8:	2b79      	cmp	r3, #121	@ 0x79
 80079aa:	e7f6      	b.n	800799a <_scanf_float+0x12e>
 80079ac:	6821      	ldr	r1, [r4, #0]
 80079ae:	05c8      	lsls	r0, r1, #23
 80079b0:	d51b      	bpl.n	80079ea <_scanf_float+0x17e>
 80079b2:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 80079b6:	6021      	str	r1, [r4, #0]
 80079b8:	f109 0901 	add.w	r9, r9, #1
 80079bc:	f1bb 0f00 	cmp.w	fp, #0
 80079c0:	d003      	beq.n	80079ca <_scanf_float+0x15e>
 80079c2:	3201      	adds	r2, #1
 80079c4:	f10b 3bff 	add.w	fp, fp, #4294967295
 80079c8:	60a2      	str	r2, [r4, #8]
 80079ca:	68a3      	ldr	r3, [r4, #8]
 80079cc:	3b01      	subs	r3, #1
 80079ce:	60a3      	str	r3, [r4, #8]
 80079d0:	6923      	ldr	r3, [r4, #16]
 80079d2:	3301      	adds	r3, #1
 80079d4:	6123      	str	r3, [r4, #16]
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	3b01      	subs	r3, #1
 80079da:	2b00      	cmp	r3, #0
 80079dc:	607b      	str	r3, [r7, #4]
 80079de:	f340 8087 	ble.w	8007af0 <_scanf_float+0x284>
 80079e2:	683b      	ldr	r3, [r7, #0]
 80079e4:	3301      	adds	r3, #1
 80079e6:	603b      	str	r3, [r7, #0]
 80079e8:	e765      	b.n	80078b6 <_scanf_float+0x4a>
 80079ea:	eb1a 0105 	adds.w	r1, sl, r5
 80079ee:	f47f af6f 	bne.w	80078d0 <_scanf_float+0x64>
 80079f2:	6822      	ldr	r2, [r4, #0]
 80079f4:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 80079f8:	6022      	str	r2, [r4, #0]
 80079fa:	460d      	mov	r5, r1
 80079fc:	468a      	mov	sl, r1
 80079fe:	f806 3b01 	strb.w	r3, [r6], #1
 8007a02:	e7e2      	b.n	80079ca <_scanf_float+0x15e>
 8007a04:	6822      	ldr	r2, [r4, #0]
 8007a06:	0610      	lsls	r0, r2, #24
 8007a08:	f57f af62 	bpl.w	80078d0 <_scanf_float+0x64>
 8007a0c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8007a10:	6022      	str	r2, [r4, #0]
 8007a12:	e7f4      	b.n	80079fe <_scanf_float+0x192>
 8007a14:	f1ba 0f00 	cmp.w	sl, #0
 8007a18:	d10e      	bne.n	8007a38 <_scanf_float+0x1cc>
 8007a1a:	f1b9 0f00 	cmp.w	r9, #0
 8007a1e:	d10e      	bne.n	8007a3e <_scanf_float+0x1d2>
 8007a20:	6822      	ldr	r2, [r4, #0]
 8007a22:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8007a26:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8007a2a:	d108      	bne.n	8007a3e <_scanf_float+0x1d2>
 8007a2c:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8007a30:	6022      	str	r2, [r4, #0]
 8007a32:	f04f 0a01 	mov.w	sl, #1
 8007a36:	e7e2      	b.n	80079fe <_scanf_float+0x192>
 8007a38:	f1ba 0f02 	cmp.w	sl, #2
 8007a3c:	d055      	beq.n	8007aea <_scanf_float+0x27e>
 8007a3e:	2d01      	cmp	r5, #1
 8007a40:	d002      	beq.n	8007a48 <_scanf_float+0x1dc>
 8007a42:	2d04      	cmp	r5, #4
 8007a44:	f47f af44 	bne.w	80078d0 <_scanf_float+0x64>
 8007a48:	3501      	adds	r5, #1
 8007a4a:	b2ed      	uxtb	r5, r5
 8007a4c:	e7d7      	b.n	80079fe <_scanf_float+0x192>
 8007a4e:	f1ba 0f01 	cmp.w	sl, #1
 8007a52:	f47f af3d 	bne.w	80078d0 <_scanf_float+0x64>
 8007a56:	f04f 0a02 	mov.w	sl, #2
 8007a5a:	e7d0      	b.n	80079fe <_scanf_float+0x192>
 8007a5c:	b97d      	cbnz	r5, 8007a7e <_scanf_float+0x212>
 8007a5e:	f1b9 0f00 	cmp.w	r9, #0
 8007a62:	f47f af38 	bne.w	80078d6 <_scanf_float+0x6a>
 8007a66:	6822      	ldr	r2, [r4, #0]
 8007a68:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8007a6c:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8007a70:	f040 8108 	bne.w	8007c84 <_scanf_float+0x418>
 8007a74:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8007a78:	6022      	str	r2, [r4, #0]
 8007a7a:	2501      	movs	r5, #1
 8007a7c:	e7bf      	b.n	80079fe <_scanf_float+0x192>
 8007a7e:	2d03      	cmp	r5, #3
 8007a80:	d0e2      	beq.n	8007a48 <_scanf_float+0x1dc>
 8007a82:	2d05      	cmp	r5, #5
 8007a84:	e7de      	b.n	8007a44 <_scanf_float+0x1d8>
 8007a86:	2d02      	cmp	r5, #2
 8007a88:	f47f af22 	bne.w	80078d0 <_scanf_float+0x64>
 8007a8c:	2503      	movs	r5, #3
 8007a8e:	e7b6      	b.n	80079fe <_scanf_float+0x192>
 8007a90:	2d06      	cmp	r5, #6
 8007a92:	f47f af1d 	bne.w	80078d0 <_scanf_float+0x64>
 8007a96:	2507      	movs	r5, #7
 8007a98:	e7b1      	b.n	80079fe <_scanf_float+0x192>
 8007a9a:	6822      	ldr	r2, [r4, #0]
 8007a9c:	0591      	lsls	r1, r2, #22
 8007a9e:	f57f af17 	bpl.w	80078d0 <_scanf_float+0x64>
 8007aa2:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 8007aa6:	6022      	str	r2, [r4, #0]
 8007aa8:	f8cd 9008 	str.w	r9, [sp, #8]
 8007aac:	e7a7      	b.n	80079fe <_scanf_float+0x192>
 8007aae:	6822      	ldr	r2, [r4, #0]
 8007ab0:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 8007ab4:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 8007ab8:	d006      	beq.n	8007ac8 <_scanf_float+0x25c>
 8007aba:	0550      	lsls	r0, r2, #21
 8007abc:	f57f af08 	bpl.w	80078d0 <_scanf_float+0x64>
 8007ac0:	f1b9 0f00 	cmp.w	r9, #0
 8007ac4:	f000 80de 	beq.w	8007c84 <_scanf_float+0x418>
 8007ac8:	0591      	lsls	r1, r2, #22
 8007aca:	bf58      	it	pl
 8007acc:	9902      	ldrpl	r1, [sp, #8]
 8007ace:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8007ad2:	bf58      	it	pl
 8007ad4:	eba9 0101 	subpl.w	r1, r9, r1
 8007ad8:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 8007adc:	bf58      	it	pl
 8007ade:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8007ae2:	6022      	str	r2, [r4, #0]
 8007ae4:	f04f 0900 	mov.w	r9, #0
 8007ae8:	e789      	b.n	80079fe <_scanf_float+0x192>
 8007aea:	f04f 0a03 	mov.w	sl, #3
 8007aee:	e786      	b.n	80079fe <_scanf_float+0x192>
 8007af0:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8007af4:	4639      	mov	r1, r7
 8007af6:	4640      	mov	r0, r8
 8007af8:	4798      	blx	r3
 8007afa:	2800      	cmp	r0, #0
 8007afc:	f43f aedb 	beq.w	80078b6 <_scanf_float+0x4a>
 8007b00:	e6e6      	b.n	80078d0 <_scanf_float+0x64>
 8007b02:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8007b06:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8007b0a:	463a      	mov	r2, r7
 8007b0c:	4640      	mov	r0, r8
 8007b0e:	4798      	blx	r3
 8007b10:	6923      	ldr	r3, [r4, #16]
 8007b12:	3b01      	subs	r3, #1
 8007b14:	6123      	str	r3, [r4, #16]
 8007b16:	e6e8      	b.n	80078ea <_scanf_float+0x7e>
 8007b18:	1e6b      	subs	r3, r5, #1
 8007b1a:	2b06      	cmp	r3, #6
 8007b1c:	d824      	bhi.n	8007b68 <_scanf_float+0x2fc>
 8007b1e:	2d02      	cmp	r5, #2
 8007b20:	d836      	bhi.n	8007b90 <_scanf_float+0x324>
 8007b22:	9b01      	ldr	r3, [sp, #4]
 8007b24:	429e      	cmp	r6, r3
 8007b26:	f67f aee4 	bls.w	80078f2 <_scanf_float+0x86>
 8007b2a:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8007b2e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8007b32:	463a      	mov	r2, r7
 8007b34:	4640      	mov	r0, r8
 8007b36:	4798      	blx	r3
 8007b38:	6923      	ldr	r3, [r4, #16]
 8007b3a:	3b01      	subs	r3, #1
 8007b3c:	6123      	str	r3, [r4, #16]
 8007b3e:	e7f0      	b.n	8007b22 <_scanf_float+0x2b6>
 8007b40:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8007b44:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 8007b48:	463a      	mov	r2, r7
 8007b4a:	4640      	mov	r0, r8
 8007b4c:	4798      	blx	r3
 8007b4e:	6923      	ldr	r3, [r4, #16]
 8007b50:	3b01      	subs	r3, #1
 8007b52:	6123      	str	r3, [r4, #16]
 8007b54:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007b58:	fa5f fa8a 	uxtb.w	sl, sl
 8007b5c:	f1ba 0f02 	cmp.w	sl, #2
 8007b60:	d1ee      	bne.n	8007b40 <_scanf_float+0x2d4>
 8007b62:	3d03      	subs	r5, #3
 8007b64:	b2ed      	uxtb	r5, r5
 8007b66:	1b76      	subs	r6, r6, r5
 8007b68:	6823      	ldr	r3, [r4, #0]
 8007b6a:	05da      	lsls	r2, r3, #23
 8007b6c:	d530      	bpl.n	8007bd0 <_scanf_float+0x364>
 8007b6e:	055b      	lsls	r3, r3, #21
 8007b70:	d511      	bpl.n	8007b96 <_scanf_float+0x32a>
 8007b72:	9b01      	ldr	r3, [sp, #4]
 8007b74:	429e      	cmp	r6, r3
 8007b76:	f67f aebc 	bls.w	80078f2 <_scanf_float+0x86>
 8007b7a:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8007b7e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8007b82:	463a      	mov	r2, r7
 8007b84:	4640      	mov	r0, r8
 8007b86:	4798      	blx	r3
 8007b88:	6923      	ldr	r3, [r4, #16]
 8007b8a:	3b01      	subs	r3, #1
 8007b8c:	6123      	str	r3, [r4, #16]
 8007b8e:	e7f0      	b.n	8007b72 <_scanf_float+0x306>
 8007b90:	46aa      	mov	sl, r5
 8007b92:	46b3      	mov	fp, r6
 8007b94:	e7de      	b.n	8007b54 <_scanf_float+0x2e8>
 8007b96:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8007b9a:	6923      	ldr	r3, [r4, #16]
 8007b9c:	2965      	cmp	r1, #101	@ 0x65
 8007b9e:	f103 33ff 	add.w	r3, r3, #4294967295
 8007ba2:	f106 35ff 	add.w	r5, r6, #4294967295
 8007ba6:	6123      	str	r3, [r4, #16]
 8007ba8:	d00c      	beq.n	8007bc4 <_scanf_float+0x358>
 8007baa:	2945      	cmp	r1, #69	@ 0x45
 8007bac:	d00a      	beq.n	8007bc4 <_scanf_float+0x358>
 8007bae:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8007bb2:	463a      	mov	r2, r7
 8007bb4:	4640      	mov	r0, r8
 8007bb6:	4798      	blx	r3
 8007bb8:	6923      	ldr	r3, [r4, #16]
 8007bba:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8007bbe:	3b01      	subs	r3, #1
 8007bc0:	1eb5      	subs	r5, r6, #2
 8007bc2:	6123      	str	r3, [r4, #16]
 8007bc4:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8007bc8:	463a      	mov	r2, r7
 8007bca:	4640      	mov	r0, r8
 8007bcc:	4798      	blx	r3
 8007bce:	462e      	mov	r6, r5
 8007bd0:	6822      	ldr	r2, [r4, #0]
 8007bd2:	f012 0210 	ands.w	r2, r2, #16
 8007bd6:	d001      	beq.n	8007bdc <_scanf_float+0x370>
 8007bd8:	2000      	movs	r0, #0
 8007bda:	e68b      	b.n	80078f4 <_scanf_float+0x88>
 8007bdc:	7032      	strb	r2, [r6, #0]
 8007bde:	6823      	ldr	r3, [r4, #0]
 8007be0:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8007be4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007be8:	d11c      	bne.n	8007c24 <_scanf_float+0x3b8>
 8007bea:	9b02      	ldr	r3, [sp, #8]
 8007bec:	454b      	cmp	r3, r9
 8007bee:	eba3 0209 	sub.w	r2, r3, r9
 8007bf2:	d123      	bne.n	8007c3c <_scanf_float+0x3d0>
 8007bf4:	9901      	ldr	r1, [sp, #4]
 8007bf6:	2200      	movs	r2, #0
 8007bf8:	4640      	mov	r0, r8
 8007bfa:	f001 f8ed 	bl	8008dd8 <_strtod_r>
 8007bfe:	9b03      	ldr	r3, [sp, #12]
 8007c00:	6821      	ldr	r1, [r4, #0]
 8007c02:	681b      	ldr	r3, [r3, #0]
 8007c04:	f011 0f02 	tst.w	r1, #2
 8007c08:	ec57 6b10 	vmov	r6, r7, d0
 8007c0c:	f103 0204 	add.w	r2, r3, #4
 8007c10:	d01f      	beq.n	8007c52 <_scanf_float+0x3e6>
 8007c12:	9903      	ldr	r1, [sp, #12]
 8007c14:	600a      	str	r2, [r1, #0]
 8007c16:	681b      	ldr	r3, [r3, #0]
 8007c18:	e9c3 6700 	strd	r6, r7, [r3]
 8007c1c:	68e3      	ldr	r3, [r4, #12]
 8007c1e:	3301      	adds	r3, #1
 8007c20:	60e3      	str	r3, [r4, #12]
 8007c22:	e7d9      	b.n	8007bd8 <_scanf_float+0x36c>
 8007c24:	9b04      	ldr	r3, [sp, #16]
 8007c26:	2b00      	cmp	r3, #0
 8007c28:	d0e4      	beq.n	8007bf4 <_scanf_float+0x388>
 8007c2a:	9905      	ldr	r1, [sp, #20]
 8007c2c:	230a      	movs	r3, #10
 8007c2e:	3101      	adds	r1, #1
 8007c30:	4640      	mov	r0, r8
 8007c32:	f001 f951 	bl	8008ed8 <_strtol_r>
 8007c36:	9b04      	ldr	r3, [sp, #16]
 8007c38:	9e05      	ldr	r6, [sp, #20]
 8007c3a:	1ac2      	subs	r2, r0, r3
 8007c3c:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 8007c40:	429e      	cmp	r6, r3
 8007c42:	bf28      	it	cs
 8007c44:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 8007c48:	4910      	ldr	r1, [pc, #64]	@ (8007c8c <_scanf_float+0x420>)
 8007c4a:	4630      	mov	r0, r6
 8007c4c:	f000 f8e4 	bl	8007e18 <siprintf>
 8007c50:	e7d0      	b.n	8007bf4 <_scanf_float+0x388>
 8007c52:	f011 0f04 	tst.w	r1, #4
 8007c56:	9903      	ldr	r1, [sp, #12]
 8007c58:	600a      	str	r2, [r1, #0]
 8007c5a:	d1dc      	bne.n	8007c16 <_scanf_float+0x3aa>
 8007c5c:	681d      	ldr	r5, [r3, #0]
 8007c5e:	4632      	mov	r2, r6
 8007c60:	463b      	mov	r3, r7
 8007c62:	4630      	mov	r0, r6
 8007c64:	4639      	mov	r1, r7
 8007c66:	f7f8 ff81 	bl	8000b6c <__aeabi_dcmpun>
 8007c6a:	b128      	cbz	r0, 8007c78 <_scanf_float+0x40c>
 8007c6c:	4808      	ldr	r0, [pc, #32]	@ (8007c90 <_scanf_float+0x424>)
 8007c6e:	f000 f9b3 	bl	8007fd8 <nanf>
 8007c72:	ed85 0a00 	vstr	s0, [r5]
 8007c76:	e7d1      	b.n	8007c1c <_scanf_float+0x3b0>
 8007c78:	4630      	mov	r0, r6
 8007c7a:	4639      	mov	r1, r7
 8007c7c:	f7f8 ffac 	bl	8000bd8 <__aeabi_d2f>
 8007c80:	6028      	str	r0, [r5, #0]
 8007c82:	e7cb      	b.n	8007c1c <_scanf_float+0x3b0>
 8007c84:	f04f 0900 	mov.w	r9, #0
 8007c88:	e629      	b.n	80078de <_scanf_float+0x72>
 8007c8a:	bf00      	nop
 8007c8c:	0800ad50 	.word	0x0800ad50
 8007c90:	0800b113 	.word	0x0800b113

08007c94 <std>:
 8007c94:	2300      	movs	r3, #0
 8007c96:	b510      	push	{r4, lr}
 8007c98:	4604      	mov	r4, r0
 8007c9a:	e9c0 3300 	strd	r3, r3, [r0]
 8007c9e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007ca2:	6083      	str	r3, [r0, #8]
 8007ca4:	8181      	strh	r1, [r0, #12]
 8007ca6:	6643      	str	r3, [r0, #100]	@ 0x64
 8007ca8:	81c2      	strh	r2, [r0, #14]
 8007caa:	6183      	str	r3, [r0, #24]
 8007cac:	4619      	mov	r1, r3
 8007cae:	2208      	movs	r2, #8
 8007cb0:	305c      	adds	r0, #92	@ 0x5c
 8007cb2:	f000 f914 	bl	8007ede <memset>
 8007cb6:	4b0d      	ldr	r3, [pc, #52]	@ (8007cec <std+0x58>)
 8007cb8:	6263      	str	r3, [r4, #36]	@ 0x24
 8007cba:	4b0d      	ldr	r3, [pc, #52]	@ (8007cf0 <std+0x5c>)
 8007cbc:	62a3      	str	r3, [r4, #40]	@ 0x28
 8007cbe:	4b0d      	ldr	r3, [pc, #52]	@ (8007cf4 <std+0x60>)
 8007cc0:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8007cc2:	4b0d      	ldr	r3, [pc, #52]	@ (8007cf8 <std+0x64>)
 8007cc4:	6323      	str	r3, [r4, #48]	@ 0x30
 8007cc6:	4b0d      	ldr	r3, [pc, #52]	@ (8007cfc <std+0x68>)
 8007cc8:	6224      	str	r4, [r4, #32]
 8007cca:	429c      	cmp	r4, r3
 8007ccc:	d006      	beq.n	8007cdc <std+0x48>
 8007cce:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8007cd2:	4294      	cmp	r4, r2
 8007cd4:	d002      	beq.n	8007cdc <std+0x48>
 8007cd6:	33d0      	adds	r3, #208	@ 0xd0
 8007cd8:	429c      	cmp	r4, r3
 8007cda:	d105      	bne.n	8007ce8 <std+0x54>
 8007cdc:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8007ce0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007ce4:	f000 b974 	b.w	8007fd0 <__retarget_lock_init_recursive>
 8007ce8:	bd10      	pop	{r4, pc}
 8007cea:	bf00      	nop
 8007cec:	08007e59 	.word	0x08007e59
 8007cf0:	08007e7b 	.word	0x08007e7b
 8007cf4:	08007eb3 	.word	0x08007eb3
 8007cf8:	08007ed7 	.word	0x08007ed7
 8007cfc:	20000420 	.word	0x20000420

08007d00 <stdio_exit_handler>:
 8007d00:	4a02      	ldr	r2, [pc, #8]	@ (8007d0c <stdio_exit_handler+0xc>)
 8007d02:	4903      	ldr	r1, [pc, #12]	@ (8007d10 <stdio_exit_handler+0x10>)
 8007d04:	4803      	ldr	r0, [pc, #12]	@ (8007d14 <stdio_exit_handler+0x14>)
 8007d06:	f000 b869 	b.w	8007ddc <_fwalk_sglue>
 8007d0a:	bf00      	nop
 8007d0c:	2000000c 	.word	0x2000000c
 8007d10:	080095b1 	.word	0x080095b1
 8007d14:	2000001c 	.word	0x2000001c

08007d18 <cleanup_stdio>:
 8007d18:	6841      	ldr	r1, [r0, #4]
 8007d1a:	4b0c      	ldr	r3, [pc, #48]	@ (8007d4c <cleanup_stdio+0x34>)
 8007d1c:	4299      	cmp	r1, r3
 8007d1e:	b510      	push	{r4, lr}
 8007d20:	4604      	mov	r4, r0
 8007d22:	d001      	beq.n	8007d28 <cleanup_stdio+0x10>
 8007d24:	f001 fc44 	bl	80095b0 <_fflush_r>
 8007d28:	68a1      	ldr	r1, [r4, #8]
 8007d2a:	4b09      	ldr	r3, [pc, #36]	@ (8007d50 <cleanup_stdio+0x38>)
 8007d2c:	4299      	cmp	r1, r3
 8007d2e:	d002      	beq.n	8007d36 <cleanup_stdio+0x1e>
 8007d30:	4620      	mov	r0, r4
 8007d32:	f001 fc3d 	bl	80095b0 <_fflush_r>
 8007d36:	68e1      	ldr	r1, [r4, #12]
 8007d38:	4b06      	ldr	r3, [pc, #24]	@ (8007d54 <cleanup_stdio+0x3c>)
 8007d3a:	4299      	cmp	r1, r3
 8007d3c:	d004      	beq.n	8007d48 <cleanup_stdio+0x30>
 8007d3e:	4620      	mov	r0, r4
 8007d40:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007d44:	f001 bc34 	b.w	80095b0 <_fflush_r>
 8007d48:	bd10      	pop	{r4, pc}
 8007d4a:	bf00      	nop
 8007d4c:	20000420 	.word	0x20000420
 8007d50:	20000488 	.word	0x20000488
 8007d54:	200004f0 	.word	0x200004f0

08007d58 <global_stdio_init.part.0>:
 8007d58:	b510      	push	{r4, lr}
 8007d5a:	4b0b      	ldr	r3, [pc, #44]	@ (8007d88 <global_stdio_init.part.0+0x30>)
 8007d5c:	4c0b      	ldr	r4, [pc, #44]	@ (8007d8c <global_stdio_init.part.0+0x34>)
 8007d5e:	4a0c      	ldr	r2, [pc, #48]	@ (8007d90 <global_stdio_init.part.0+0x38>)
 8007d60:	601a      	str	r2, [r3, #0]
 8007d62:	4620      	mov	r0, r4
 8007d64:	2200      	movs	r2, #0
 8007d66:	2104      	movs	r1, #4
 8007d68:	f7ff ff94 	bl	8007c94 <std>
 8007d6c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8007d70:	2201      	movs	r2, #1
 8007d72:	2109      	movs	r1, #9
 8007d74:	f7ff ff8e 	bl	8007c94 <std>
 8007d78:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8007d7c:	2202      	movs	r2, #2
 8007d7e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007d82:	2112      	movs	r1, #18
 8007d84:	f7ff bf86 	b.w	8007c94 <std>
 8007d88:	20000558 	.word	0x20000558
 8007d8c:	20000420 	.word	0x20000420
 8007d90:	08007d01 	.word	0x08007d01

08007d94 <__sfp_lock_acquire>:
 8007d94:	4801      	ldr	r0, [pc, #4]	@ (8007d9c <__sfp_lock_acquire+0x8>)
 8007d96:	f000 b91c 	b.w	8007fd2 <__retarget_lock_acquire_recursive>
 8007d9a:	bf00      	nop
 8007d9c:	20000561 	.word	0x20000561

08007da0 <__sfp_lock_release>:
 8007da0:	4801      	ldr	r0, [pc, #4]	@ (8007da8 <__sfp_lock_release+0x8>)
 8007da2:	f000 b917 	b.w	8007fd4 <__retarget_lock_release_recursive>
 8007da6:	bf00      	nop
 8007da8:	20000561 	.word	0x20000561

08007dac <__sinit>:
 8007dac:	b510      	push	{r4, lr}
 8007dae:	4604      	mov	r4, r0
 8007db0:	f7ff fff0 	bl	8007d94 <__sfp_lock_acquire>
 8007db4:	6a23      	ldr	r3, [r4, #32]
 8007db6:	b11b      	cbz	r3, 8007dc0 <__sinit+0x14>
 8007db8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007dbc:	f7ff bff0 	b.w	8007da0 <__sfp_lock_release>
 8007dc0:	4b04      	ldr	r3, [pc, #16]	@ (8007dd4 <__sinit+0x28>)
 8007dc2:	6223      	str	r3, [r4, #32]
 8007dc4:	4b04      	ldr	r3, [pc, #16]	@ (8007dd8 <__sinit+0x2c>)
 8007dc6:	681b      	ldr	r3, [r3, #0]
 8007dc8:	2b00      	cmp	r3, #0
 8007dca:	d1f5      	bne.n	8007db8 <__sinit+0xc>
 8007dcc:	f7ff ffc4 	bl	8007d58 <global_stdio_init.part.0>
 8007dd0:	e7f2      	b.n	8007db8 <__sinit+0xc>
 8007dd2:	bf00      	nop
 8007dd4:	08007d19 	.word	0x08007d19
 8007dd8:	20000558 	.word	0x20000558

08007ddc <_fwalk_sglue>:
 8007ddc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007de0:	4607      	mov	r7, r0
 8007de2:	4688      	mov	r8, r1
 8007de4:	4614      	mov	r4, r2
 8007de6:	2600      	movs	r6, #0
 8007de8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007dec:	f1b9 0901 	subs.w	r9, r9, #1
 8007df0:	d505      	bpl.n	8007dfe <_fwalk_sglue+0x22>
 8007df2:	6824      	ldr	r4, [r4, #0]
 8007df4:	2c00      	cmp	r4, #0
 8007df6:	d1f7      	bne.n	8007de8 <_fwalk_sglue+0xc>
 8007df8:	4630      	mov	r0, r6
 8007dfa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007dfe:	89ab      	ldrh	r3, [r5, #12]
 8007e00:	2b01      	cmp	r3, #1
 8007e02:	d907      	bls.n	8007e14 <_fwalk_sglue+0x38>
 8007e04:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007e08:	3301      	adds	r3, #1
 8007e0a:	d003      	beq.n	8007e14 <_fwalk_sglue+0x38>
 8007e0c:	4629      	mov	r1, r5
 8007e0e:	4638      	mov	r0, r7
 8007e10:	47c0      	blx	r8
 8007e12:	4306      	orrs	r6, r0
 8007e14:	3568      	adds	r5, #104	@ 0x68
 8007e16:	e7e9      	b.n	8007dec <_fwalk_sglue+0x10>

08007e18 <siprintf>:
 8007e18:	b40e      	push	{r1, r2, r3}
 8007e1a:	b500      	push	{lr}
 8007e1c:	b09c      	sub	sp, #112	@ 0x70
 8007e1e:	ab1d      	add	r3, sp, #116	@ 0x74
 8007e20:	9002      	str	r0, [sp, #8]
 8007e22:	9006      	str	r0, [sp, #24]
 8007e24:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8007e28:	4809      	ldr	r0, [pc, #36]	@ (8007e50 <siprintf+0x38>)
 8007e2a:	9107      	str	r1, [sp, #28]
 8007e2c:	9104      	str	r1, [sp, #16]
 8007e2e:	4909      	ldr	r1, [pc, #36]	@ (8007e54 <siprintf+0x3c>)
 8007e30:	f853 2b04 	ldr.w	r2, [r3], #4
 8007e34:	9105      	str	r1, [sp, #20]
 8007e36:	6800      	ldr	r0, [r0, #0]
 8007e38:	9301      	str	r3, [sp, #4]
 8007e3a:	a902      	add	r1, sp, #8
 8007e3c:	f001 f8aa 	bl	8008f94 <_svfiprintf_r>
 8007e40:	9b02      	ldr	r3, [sp, #8]
 8007e42:	2200      	movs	r2, #0
 8007e44:	701a      	strb	r2, [r3, #0]
 8007e46:	b01c      	add	sp, #112	@ 0x70
 8007e48:	f85d eb04 	ldr.w	lr, [sp], #4
 8007e4c:	b003      	add	sp, #12
 8007e4e:	4770      	bx	lr
 8007e50:	20000018 	.word	0x20000018
 8007e54:	ffff0208 	.word	0xffff0208

08007e58 <__sread>:
 8007e58:	b510      	push	{r4, lr}
 8007e5a:	460c      	mov	r4, r1
 8007e5c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007e60:	f000 f868 	bl	8007f34 <_read_r>
 8007e64:	2800      	cmp	r0, #0
 8007e66:	bfab      	itete	ge
 8007e68:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8007e6a:	89a3      	ldrhlt	r3, [r4, #12]
 8007e6c:	181b      	addge	r3, r3, r0
 8007e6e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8007e72:	bfac      	ite	ge
 8007e74:	6563      	strge	r3, [r4, #84]	@ 0x54
 8007e76:	81a3      	strhlt	r3, [r4, #12]
 8007e78:	bd10      	pop	{r4, pc}

08007e7a <__swrite>:
 8007e7a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007e7e:	461f      	mov	r7, r3
 8007e80:	898b      	ldrh	r3, [r1, #12]
 8007e82:	05db      	lsls	r3, r3, #23
 8007e84:	4605      	mov	r5, r0
 8007e86:	460c      	mov	r4, r1
 8007e88:	4616      	mov	r6, r2
 8007e8a:	d505      	bpl.n	8007e98 <__swrite+0x1e>
 8007e8c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007e90:	2302      	movs	r3, #2
 8007e92:	2200      	movs	r2, #0
 8007e94:	f000 f83c 	bl	8007f10 <_lseek_r>
 8007e98:	89a3      	ldrh	r3, [r4, #12]
 8007e9a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007e9e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8007ea2:	81a3      	strh	r3, [r4, #12]
 8007ea4:	4632      	mov	r2, r6
 8007ea6:	463b      	mov	r3, r7
 8007ea8:	4628      	mov	r0, r5
 8007eaa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007eae:	f000 b853 	b.w	8007f58 <_write_r>

08007eb2 <__sseek>:
 8007eb2:	b510      	push	{r4, lr}
 8007eb4:	460c      	mov	r4, r1
 8007eb6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007eba:	f000 f829 	bl	8007f10 <_lseek_r>
 8007ebe:	1c43      	adds	r3, r0, #1
 8007ec0:	89a3      	ldrh	r3, [r4, #12]
 8007ec2:	bf15      	itete	ne
 8007ec4:	6560      	strne	r0, [r4, #84]	@ 0x54
 8007ec6:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8007eca:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8007ece:	81a3      	strheq	r3, [r4, #12]
 8007ed0:	bf18      	it	ne
 8007ed2:	81a3      	strhne	r3, [r4, #12]
 8007ed4:	bd10      	pop	{r4, pc}

08007ed6 <__sclose>:
 8007ed6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007eda:	f000 b809 	b.w	8007ef0 <_close_r>

08007ede <memset>:
 8007ede:	4402      	add	r2, r0
 8007ee0:	4603      	mov	r3, r0
 8007ee2:	4293      	cmp	r3, r2
 8007ee4:	d100      	bne.n	8007ee8 <memset+0xa>
 8007ee6:	4770      	bx	lr
 8007ee8:	f803 1b01 	strb.w	r1, [r3], #1
 8007eec:	e7f9      	b.n	8007ee2 <memset+0x4>
	...

08007ef0 <_close_r>:
 8007ef0:	b538      	push	{r3, r4, r5, lr}
 8007ef2:	4d06      	ldr	r5, [pc, #24]	@ (8007f0c <_close_r+0x1c>)
 8007ef4:	2300      	movs	r3, #0
 8007ef6:	4604      	mov	r4, r0
 8007ef8:	4608      	mov	r0, r1
 8007efa:	602b      	str	r3, [r5, #0]
 8007efc:	f7f9 fe98 	bl	8001c30 <_close>
 8007f00:	1c43      	adds	r3, r0, #1
 8007f02:	d102      	bne.n	8007f0a <_close_r+0x1a>
 8007f04:	682b      	ldr	r3, [r5, #0]
 8007f06:	b103      	cbz	r3, 8007f0a <_close_r+0x1a>
 8007f08:	6023      	str	r3, [r4, #0]
 8007f0a:	bd38      	pop	{r3, r4, r5, pc}
 8007f0c:	2000055c 	.word	0x2000055c

08007f10 <_lseek_r>:
 8007f10:	b538      	push	{r3, r4, r5, lr}
 8007f12:	4d07      	ldr	r5, [pc, #28]	@ (8007f30 <_lseek_r+0x20>)
 8007f14:	4604      	mov	r4, r0
 8007f16:	4608      	mov	r0, r1
 8007f18:	4611      	mov	r1, r2
 8007f1a:	2200      	movs	r2, #0
 8007f1c:	602a      	str	r2, [r5, #0]
 8007f1e:	461a      	mov	r2, r3
 8007f20:	f7f9 fead 	bl	8001c7e <_lseek>
 8007f24:	1c43      	adds	r3, r0, #1
 8007f26:	d102      	bne.n	8007f2e <_lseek_r+0x1e>
 8007f28:	682b      	ldr	r3, [r5, #0]
 8007f2a:	b103      	cbz	r3, 8007f2e <_lseek_r+0x1e>
 8007f2c:	6023      	str	r3, [r4, #0]
 8007f2e:	bd38      	pop	{r3, r4, r5, pc}
 8007f30:	2000055c 	.word	0x2000055c

08007f34 <_read_r>:
 8007f34:	b538      	push	{r3, r4, r5, lr}
 8007f36:	4d07      	ldr	r5, [pc, #28]	@ (8007f54 <_read_r+0x20>)
 8007f38:	4604      	mov	r4, r0
 8007f3a:	4608      	mov	r0, r1
 8007f3c:	4611      	mov	r1, r2
 8007f3e:	2200      	movs	r2, #0
 8007f40:	602a      	str	r2, [r5, #0]
 8007f42:	461a      	mov	r2, r3
 8007f44:	f7f9 fe3b 	bl	8001bbe <_read>
 8007f48:	1c43      	adds	r3, r0, #1
 8007f4a:	d102      	bne.n	8007f52 <_read_r+0x1e>
 8007f4c:	682b      	ldr	r3, [r5, #0]
 8007f4e:	b103      	cbz	r3, 8007f52 <_read_r+0x1e>
 8007f50:	6023      	str	r3, [r4, #0]
 8007f52:	bd38      	pop	{r3, r4, r5, pc}
 8007f54:	2000055c 	.word	0x2000055c

08007f58 <_write_r>:
 8007f58:	b538      	push	{r3, r4, r5, lr}
 8007f5a:	4d07      	ldr	r5, [pc, #28]	@ (8007f78 <_write_r+0x20>)
 8007f5c:	4604      	mov	r4, r0
 8007f5e:	4608      	mov	r0, r1
 8007f60:	4611      	mov	r1, r2
 8007f62:	2200      	movs	r2, #0
 8007f64:	602a      	str	r2, [r5, #0]
 8007f66:	461a      	mov	r2, r3
 8007f68:	f7f9 fe46 	bl	8001bf8 <_write>
 8007f6c:	1c43      	adds	r3, r0, #1
 8007f6e:	d102      	bne.n	8007f76 <_write_r+0x1e>
 8007f70:	682b      	ldr	r3, [r5, #0]
 8007f72:	b103      	cbz	r3, 8007f76 <_write_r+0x1e>
 8007f74:	6023      	str	r3, [r4, #0]
 8007f76:	bd38      	pop	{r3, r4, r5, pc}
 8007f78:	2000055c 	.word	0x2000055c

08007f7c <__errno>:
 8007f7c:	4b01      	ldr	r3, [pc, #4]	@ (8007f84 <__errno+0x8>)
 8007f7e:	6818      	ldr	r0, [r3, #0]
 8007f80:	4770      	bx	lr
 8007f82:	bf00      	nop
 8007f84:	20000018 	.word	0x20000018

08007f88 <__libc_init_array>:
 8007f88:	b570      	push	{r4, r5, r6, lr}
 8007f8a:	4d0d      	ldr	r5, [pc, #52]	@ (8007fc0 <__libc_init_array+0x38>)
 8007f8c:	4c0d      	ldr	r4, [pc, #52]	@ (8007fc4 <__libc_init_array+0x3c>)
 8007f8e:	1b64      	subs	r4, r4, r5
 8007f90:	10a4      	asrs	r4, r4, #2
 8007f92:	2600      	movs	r6, #0
 8007f94:	42a6      	cmp	r6, r4
 8007f96:	d109      	bne.n	8007fac <__libc_init_array+0x24>
 8007f98:	4d0b      	ldr	r5, [pc, #44]	@ (8007fc8 <__libc_init_array+0x40>)
 8007f9a:	4c0c      	ldr	r4, [pc, #48]	@ (8007fcc <__libc_init_array+0x44>)
 8007f9c:	f002 feb6 	bl	800ad0c <_init>
 8007fa0:	1b64      	subs	r4, r4, r5
 8007fa2:	10a4      	asrs	r4, r4, #2
 8007fa4:	2600      	movs	r6, #0
 8007fa6:	42a6      	cmp	r6, r4
 8007fa8:	d105      	bne.n	8007fb6 <__libc_init_array+0x2e>
 8007faa:	bd70      	pop	{r4, r5, r6, pc}
 8007fac:	f855 3b04 	ldr.w	r3, [r5], #4
 8007fb0:	4798      	blx	r3
 8007fb2:	3601      	adds	r6, #1
 8007fb4:	e7ee      	b.n	8007f94 <__libc_init_array+0xc>
 8007fb6:	f855 3b04 	ldr.w	r3, [r5], #4
 8007fba:	4798      	blx	r3
 8007fbc:	3601      	adds	r6, #1
 8007fbe:	e7f2      	b.n	8007fa6 <__libc_init_array+0x1e>
 8007fc0:	0800b11c 	.word	0x0800b11c
 8007fc4:	0800b11c 	.word	0x0800b11c
 8007fc8:	0800b11c 	.word	0x0800b11c
 8007fcc:	0800b120 	.word	0x0800b120

08007fd0 <__retarget_lock_init_recursive>:
 8007fd0:	4770      	bx	lr

08007fd2 <__retarget_lock_acquire_recursive>:
 8007fd2:	4770      	bx	lr

08007fd4 <__retarget_lock_release_recursive>:
 8007fd4:	4770      	bx	lr
	...

08007fd8 <nanf>:
 8007fd8:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 8007fe0 <nanf+0x8>
 8007fdc:	4770      	bx	lr
 8007fde:	bf00      	nop
 8007fe0:	7fc00000 	.word	0x7fc00000

08007fe4 <_free_r>:
 8007fe4:	b538      	push	{r3, r4, r5, lr}
 8007fe6:	4605      	mov	r5, r0
 8007fe8:	2900      	cmp	r1, #0
 8007fea:	d041      	beq.n	8008070 <_free_r+0x8c>
 8007fec:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007ff0:	1f0c      	subs	r4, r1, #4
 8007ff2:	2b00      	cmp	r3, #0
 8007ff4:	bfb8      	it	lt
 8007ff6:	18e4      	addlt	r4, r4, r3
 8007ff8:	f000 f8e0 	bl	80081bc <__malloc_lock>
 8007ffc:	4a1d      	ldr	r2, [pc, #116]	@ (8008074 <_free_r+0x90>)
 8007ffe:	6813      	ldr	r3, [r2, #0]
 8008000:	b933      	cbnz	r3, 8008010 <_free_r+0x2c>
 8008002:	6063      	str	r3, [r4, #4]
 8008004:	6014      	str	r4, [r2, #0]
 8008006:	4628      	mov	r0, r5
 8008008:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800800c:	f000 b8dc 	b.w	80081c8 <__malloc_unlock>
 8008010:	42a3      	cmp	r3, r4
 8008012:	d908      	bls.n	8008026 <_free_r+0x42>
 8008014:	6820      	ldr	r0, [r4, #0]
 8008016:	1821      	adds	r1, r4, r0
 8008018:	428b      	cmp	r3, r1
 800801a:	bf01      	itttt	eq
 800801c:	6819      	ldreq	r1, [r3, #0]
 800801e:	685b      	ldreq	r3, [r3, #4]
 8008020:	1809      	addeq	r1, r1, r0
 8008022:	6021      	streq	r1, [r4, #0]
 8008024:	e7ed      	b.n	8008002 <_free_r+0x1e>
 8008026:	461a      	mov	r2, r3
 8008028:	685b      	ldr	r3, [r3, #4]
 800802a:	b10b      	cbz	r3, 8008030 <_free_r+0x4c>
 800802c:	42a3      	cmp	r3, r4
 800802e:	d9fa      	bls.n	8008026 <_free_r+0x42>
 8008030:	6811      	ldr	r1, [r2, #0]
 8008032:	1850      	adds	r0, r2, r1
 8008034:	42a0      	cmp	r0, r4
 8008036:	d10b      	bne.n	8008050 <_free_r+0x6c>
 8008038:	6820      	ldr	r0, [r4, #0]
 800803a:	4401      	add	r1, r0
 800803c:	1850      	adds	r0, r2, r1
 800803e:	4283      	cmp	r3, r0
 8008040:	6011      	str	r1, [r2, #0]
 8008042:	d1e0      	bne.n	8008006 <_free_r+0x22>
 8008044:	6818      	ldr	r0, [r3, #0]
 8008046:	685b      	ldr	r3, [r3, #4]
 8008048:	6053      	str	r3, [r2, #4]
 800804a:	4408      	add	r0, r1
 800804c:	6010      	str	r0, [r2, #0]
 800804e:	e7da      	b.n	8008006 <_free_r+0x22>
 8008050:	d902      	bls.n	8008058 <_free_r+0x74>
 8008052:	230c      	movs	r3, #12
 8008054:	602b      	str	r3, [r5, #0]
 8008056:	e7d6      	b.n	8008006 <_free_r+0x22>
 8008058:	6820      	ldr	r0, [r4, #0]
 800805a:	1821      	adds	r1, r4, r0
 800805c:	428b      	cmp	r3, r1
 800805e:	bf04      	itt	eq
 8008060:	6819      	ldreq	r1, [r3, #0]
 8008062:	685b      	ldreq	r3, [r3, #4]
 8008064:	6063      	str	r3, [r4, #4]
 8008066:	bf04      	itt	eq
 8008068:	1809      	addeq	r1, r1, r0
 800806a:	6021      	streq	r1, [r4, #0]
 800806c:	6054      	str	r4, [r2, #4]
 800806e:	e7ca      	b.n	8008006 <_free_r+0x22>
 8008070:	bd38      	pop	{r3, r4, r5, pc}
 8008072:	bf00      	nop
 8008074:	20000568 	.word	0x20000568

08008078 <sbrk_aligned>:
 8008078:	b570      	push	{r4, r5, r6, lr}
 800807a:	4e0f      	ldr	r6, [pc, #60]	@ (80080b8 <sbrk_aligned+0x40>)
 800807c:	460c      	mov	r4, r1
 800807e:	6831      	ldr	r1, [r6, #0]
 8008080:	4605      	mov	r5, r0
 8008082:	b911      	cbnz	r1, 800808a <sbrk_aligned+0x12>
 8008084:	f001 fae8 	bl	8009658 <_sbrk_r>
 8008088:	6030      	str	r0, [r6, #0]
 800808a:	4621      	mov	r1, r4
 800808c:	4628      	mov	r0, r5
 800808e:	f001 fae3 	bl	8009658 <_sbrk_r>
 8008092:	1c43      	adds	r3, r0, #1
 8008094:	d103      	bne.n	800809e <sbrk_aligned+0x26>
 8008096:	f04f 34ff 	mov.w	r4, #4294967295
 800809a:	4620      	mov	r0, r4
 800809c:	bd70      	pop	{r4, r5, r6, pc}
 800809e:	1cc4      	adds	r4, r0, #3
 80080a0:	f024 0403 	bic.w	r4, r4, #3
 80080a4:	42a0      	cmp	r0, r4
 80080a6:	d0f8      	beq.n	800809a <sbrk_aligned+0x22>
 80080a8:	1a21      	subs	r1, r4, r0
 80080aa:	4628      	mov	r0, r5
 80080ac:	f001 fad4 	bl	8009658 <_sbrk_r>
 80080b0:	3001      	adds	r0, #1
 80080b2:	d1f2      	bne.n	800809a <sbrk_aligned+0x22>
 80080b4:	e7ef      	b.n	8008096 <sbrk_aligned+0x1e>
 80080b6:	bf00      	nop
 80080b8:	20000564 	.word	0x20000564

080080bc <_malloc_r>:
 80080bc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80080c0:	1ccd      	adds	r5, r1, #3
 80080c2:	f025 0503 	bic.w	r5, r5, #3
 80080c6:	3508      	adds	r5, #8
 80080c8:	2d0c      	cmp	r5, #12
 80080ca:	bf38      	it	cc
 80080cc:	250c      	movcc	r5, #12
 80080ce:	2d00      	cmp	r5, #0
 80080d0:	4606      	mov	r6, r0
 80080d2:	db01      	blt.n	80080d8 <_malloc_r+0x1c>
 80080d4:	42a9      	cmp	r1, r5
 80080d6:	d904      	bls.n	80080e2 <_malloc_r+0x26>
 80080d8:	230c      	movs	r3, #12
 80080da:	6033      	str	r3, [r6, #0]
 80080dc:	2000      	movs	r0, #0
 80080de:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80080e2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80081b8 <_malloc_r+0xfc>
 80080e6:	f000 f869 	bl	80081bc <__malloc_lock>
 80080ea:	f8d8 3000 	ldr.w	r3, [r8]
 80080ee:	461c      	mov	r4, r3
 80080f0:	bb44      	cbnz	r4, 8008144 <_malloc_r+0x88>
 80080f2:	4629      	mov	r1, r5
 80080f4:	4630      	mov	r0, r6
 80080f6:	f7ff ffbf 	bl	8008078 <sbrk_aligned>
 80080fa:	1c43      	adds	r3, r0, #1
 80080fc:	4604      	mov	r4, r0
 80080fe:	d158      	bne.n	80081b2 <_malloc_r+0xf6>
 8008100:	f8d8 4000 	ldr.w	r4, [r8]
 8008104:	4627      	mov	r7, r4
 8008106:	2f00      	cmp	r7, #0
 8008108:	d143      	bne.n	8008192 <_malloc_r+0xd6>
 800810a:	2c00      	cmp	r4, #0
 800810c:	d04b      	beq.n	80081a6 <_malloc_r+0xea>
 800810e:	6823      	ldr	r3, [r4, #0]
 8008110:	4639      	mov	r1, r7
 8008112:	4630      	mov	r0, r6
 8008114:	eb04 0903 	add.w	r9, r4, r3
 8008118:	f001 fa9e 	bl	8009658 <_sbrk_r>
 800811c:	4581      	cmp	r9, r0
 800811e:	d142      	bne.n	80081a6 <_malloc_r+0xea>
 8008120:	6821      	ldr	r1, [r4, #0]
 8008122:	1a6d      	subs	r5, r5, r1
 8008124:	4629      	mov	r1, r5
 8008126:	4630      	mov	r0, r6
 8008128:	f7ff ffa6 	bl	8008078 <sbrk_aligned>
 800812c:	3001      	adds	r0, #1
 800812e:	d03a      	beq.n	80081a6 <_malloc_r+0xea>
 8008130:	6823      	ldr	r3, [r4, #0]
 8008132:	442b      	add	r3, r5
 8008134:	6023      	str	r3, [r4, #0]
 8008136:	f8d8 3000 	ldr.w	r3, [r8]
 800813a:	685a      	ldr	r2, [r3, #4]
 800813c:	bb62      	cbnz	r2, 8008198 <_malloc_r+0xdc>
 800813e:	f8c8 7000 	str.w	r7, [r8]
 8008142:	e00f      	b.n	8008164 <_malloc_r+0xa8>
 8008144:	6822      	ldr	r2, [r4, #0]
 8008146:	1b52      	subs	r2, r2, r5
 8008148:	d420      	bmi.n	800818c <_malloc_r+0xd0>
 800814a:	2a0b      	cmp	r2, #11
 800814c:	d917      	bls.n	800817e <_malloc_r+0xc2>
 800814e:	1961      	adds	r1, r4, r5
 8008150:	42a3      	cmp	r3, r4
 8008152:	6025      	str	r5, [r4, #0]
 8008154:	bf18      	it	ne
 8008156:	6059      	strne	r1, [r3, #4]
 8008158:	6863      	ldr	r3, [r4, #4]
 800815a:	bf08      	it	eq
 800815c:	f8c8 1000 	streq.w	r1, [r8]
 8008160:	5162      	str	r2, [r4, r5]
 8008162:	604b      	str	r3, [r1, #4]
 8008164:	4630      	mov	r0, r6
 8008166:	f000 f82f 	bl	80081c8 <__malloc_unlock>
 800816a:	f104 000b 	add.w	r0, r4, #11
 800816e:	1d23      	adds	r3, r4, #4
 8008170:	f020 0007 	bic.w	r0, r0, #7
 8008174:	1ac2      	subs	r2, r0, r3
 8008176:	bf1c      	itt	ne
 8008178:	1a1b      	subne	r3, r3, r0
 800817a:	50a3      	strne	r3, [r4, r2]
 800817c:	e7af      	b.n	80080de <_malloc_r+0x22>
 800817e:	6862      	ldr	r2, [r4, #4]
 8008180:	42a3      	cmp	r3, r4
 8008182:	bf0c      	ite	eq
 8008184:	f8c8 2000 	streq.w	r2, [r8]
 8008188:	605a      	strne	r2, [r3, #4]
 800818a:	e7eb      	b.n	8008164 <_malloc_r+0xa8>
 800818c:	4623      	mov	r3, r4
 800818e:	6864      	ldr	r4, [r4, #4]
 8008190:	e7ae      	b.n	80080f0 <_malloc_r+0x34>
 8008192:	463c      	mov	r4, r7
 8008194:	687f      	ldr	r7, [r7, #4]
 8008196:	e7b6      	b.n	8008106 <_malloc_r+0x4a>
 8008198:	461a      	mov	r2, r3
 800819a:	685b      	ldr	r3, [r3, #4]
 800819c:	42a3      	cmp	r3, r4
 800819e:	d1fb      	bne.n	8008198 <_malloc_r+0xdc>
 80081a0:	2300      	movs	r3, #0
 80081a2:	6053      	str	r3, [r2, #4]
 80081a4:	e7de      	b.n	8008164 <_malloc_r+0xa8>
 80081a6:	230c      	movs	r3, #12
 80081a8:	6033      	str	r3, [r6, #0]
 80081aa:	4630      	mov	r0, r6
 80081ac:	f000 f80c 	bl	80081c8 <__malloc_unlock>
 80081b0:	e794      	b.n	80080dc <_malloc_r+0x20>
 80081b2:	6005      	str	r5, [r0, #0]
 80081b4:	e7d6      	b.n	8008164 <_malloc_r+0xa8>
 80081b6:	bf00      	nop
 80081b8:	20000568 	.word	0x20000568

080081bc <__malloc_lock>:
 80081bc:	4801      	ldr	r0, [pc, #4]	@ (80081c4 <__malloc_lock+0x8>)
 80081be:	f7ff bf08 	b.w	8007fd2 <__retarget_lock_acquire_recursive>
 80081c2:	bf00      	nop
 80081c4:	20000560 	.word	0x20000560

080081c8 <__malloc_unlock>:
 80081c8:	4801      	ldr	r0, [pc, #4]	@ (80081d0 <__malloc_unlock+0x8>)
 80081ca:	f7ff bf03 	b.w	8007fd4 <__retarget_lock_release_recursive>
 80081ce:	bf00      	nop
 80081d0:	20000560 	.word	0x20000560

080081d4 <sulp>:
 80081d4:	b570      	push	{r4, r5, r6, lr}
 80081d6:	4604      	mov	r4, r0
 80081d8:	460d      	mov	r5, r1
 80081da:	ec45 4b10 	vmov	d0, r4, r5
 80081de:	4616      	mov	r6, r2
 80081e0:	f002 f922 	bl	800a428 <__ulp>
 80081e4:	ec51 0b10 	vmov	r0, r1, d0
 80081e8:	b17e      	cbz	r6, 800820a <sulp+0x36>
 80081ea:	f3c5 530a 	ubfx	r3, r5, #20, #11
 80081ee:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 80081f2:	2b00      	cmp	r3, #0
 80081f4:	dd09      	ble.n	800820a <sulp+0x36>
 80081f6:	051b      	lsls	r3, r3, #20
 80081f8:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 80081fc:	2400      	movs	r4, #0
 80081fe:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 8008202:	4622      	mov	r2, r4
 8008204:	462b      	mov	r3, r5
 8008206:	f7f8 fa17 	bl	8000638 <__aeabi_dmul>
 800820a:	ec41 0b10 	vmov	d0, r0, r1
 800820e:	bd70      	pop	{r4, r5, r6, pc}

08008210 <_strtod_l>:
 8008210:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008214:	b09f      	sub	sp, #124	@ 0x7c
 8008216:	460c      	mov	r4, r1
 8008218:	9217      	str	r2, [sp, #92]	@ 0x5c
 800821a:	2200      	movs	r2, #0
 800821c:	921a      	str	r2, [sp, #104]	@ 0x68
 800821e:	9005      	str	r0, [sp, #20]
 8008220:	f04f 0a00 	mov.w	sl, #0
 8008224:	f04f 0b00 	mov.w	fp, #0
 8008228:	460a      	mov	r2, r1
 800822a:	9219      	str	r2, [sp, #100]	@ 0x64
 800822c:	7811      	ldrb	r1, [r2, #0]
 800822e:	292b      	cmp	r1, #43	@ 0x2b
 8008230:	d04a      	beq.n	80082c8 <_strtod_l+0xb8>
 8008232:	d838      	bhi.n	80082a6 <_strtod_l+0x96>
 8008234:	290d      	cmp	r1, #13
 8008236:	d832      	bhi.n	800829e <_strtod_l+0x8e>
 8008238:	2908      	cmp	r1, #8
 800823a:	d832      	bhi.n	80082a2 <_strtod_l+0x92>
 800823c:	2900      	cmp	r1, #0
 800823e:	d03b      	beq.n	80082b8 <_strtod_l+0xa8>
 8008240:	2200      	movs	r2, #0
 8008242:	920b      	str	r2, [sp, #44]	@ 0x2c
 8008244:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 8008246:	782a      	ldrb	r2, [r5, #0]
 8008248:	2a30      	cmp	r2, #48	@ 0x30
 800824a:	f040 80b3 	bne.w	80083b4 <_strtod_l+0x1a4>
 800824e:	786a      	ldrb	r2, [r5, #1]
 8008250:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8008254:	2a58      	cmp	r2, #88	@ 0x58
 8008256:	d16e      	bne.n	8008336 <_strtod_l+0x126>
 8008258:	9302      	str	r3, [sp, #8]
 800825a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800825c:	9301      	str	r3, [sp, #4]
 800825e:	ab1a      	add	r3, sp, #104	@ 0x68
 8008260:	9300      	str	r3, [sp, #0]
 8008262:	4a8e      	ldr	r2, [pc, #568]	@ (800849c <_strtod_l+0x28c>)
 8008264:	9805      	ldr	r0, [sp, #20]
 8008266:	ab1b      	add	r3, sp, #108	@ 0x6c
 8008268:	a919      	add	r1, sp, #100	@ 0x64
 800826a:	f001 fa85 	bl	8009778 <__gethex>
 800826e:	f010 060f 	ands.w	r6, r0, #15
 8008272:	4604      	mov	r4, r0
 8008274:	d005      	beq.n	8008282 <_strtod_l+0x72>
 8008276:	2e06      	cmp	r6, #6
 8008278:	d128      	bne.n	80082cc <_strtod_l+0xbc>
 800827a:	3501      	adds	r5, #1
 800827c:	2300      	movs	r3, #0
 800827e:	9519      	str	r5, [sp, #100]	@ 0x64
 8008280:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008282:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8008284:	2b00      	cmp	r3, #0
 8008286:	f040 858e 	bne.w	8008da6 <_strtod_l+0xb96>
 800828a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800828c:	b1cb      	cbz	r3, 80082c2 <_strtod_l+0xb2>
 800828e:	4652      	mov	r2, sl
 8008290:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 8008294:	ec43 2b10 	vmov	d0, r2, r3
 8008298:	b01f      	add	sp, #124	@ 0x7c
 800829a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800829e:	2920      	cmp	r1, #32
 80082a0:	d1ce      	bne.n	8008240 <_strtod_l+0x30>
 80082a2:	3201      	adds	r2, #1
 80082a4:	e7c1      	b.n	800822a <_strtod_l+0x1a>
 80082a6:	292d      	cmp	r1, #45	@ 0x2d
 80082a8:	d1ca      	bne.n	8008240 <_strtod_l+0x30>
 80082aa:	2101      	movs	r1, #1
 80082ac:	910b      	str	r1, [sp, #44]	@ 0x2c
 80082ae:	1c51      	adds	r1, r2, #1
 80082b0:	9119      	str	r1, [sp, #100]	@ 0x64
 80082b2:	7852      	ldrb	r2, [r2, #1]
 80082b4:	2a00      	cmp	r2, #0
 80082b6:	d1c5      	bne.n	8008244 <_strtod_l+0x34>
 80082b8:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 80082ba:	9419      	str	r4, [sp, #100]	@ 0x64
 80082bc:	2b00      	cmp	r3, #0
 80082be:	f040 8570 	bne.w	8008da2 <_strtod_l+0xb92>
 80082c2:	4652      	mov	r2, sl
 80082c4:	465b      	mov	r3, fp
 80082c6:	e7e5      	b.n	8008294 <_strtod_l+0x84>
 80082c8:	2100      	movs	r1, #0
 80082ca:	e7ef      	b.n	80082ac <_strtod_l+0x9c>
 80082cc:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 80082ce:	b13a      	cbz	r2, 80082e0 <_strtod_l+0xd0>
 80082d0:	2135      	movs	r1, #53	@ 0x35
 80082d2:	a81c      	add	r0, sp, #112	@ 0x70
 80082d4:	f002 f9a2 	bl	800a61c <__copybits>
 80082d8:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80082da:	9805      	ldr	r0, [sp, #20]
 80082dc:	f001 fd70 	bl	8009dc0 <_Bfree>
 80082e0:	3e01      	subs	r6, #1
 80082e2:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 80082e4:	2e04      	cmp	r6, #4
 80082e6:	d806      	bhi.n	80082f6 <_strtod_l+0xe6>
 80082e8:	e8df f006 	tbb	[pc, r6]
 80082ec:	201d0314 	.word	0x201d0314
 80082f0:	14          	.byte	0x14
 80082f1:	00          	.byte	0x00
 80082f2:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 80082f6:	05e1      	lsls	r1, r4, #23
 80082f8:	bf48      	it	mi
 80082fa:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 80082fe:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8008302:	0d1b      	lsrs	r3, r3, #20
 8008304:	051b      	lsls	r3, r3, #20
 8008306:	2b00      	cmp	r3, #0
 8008308:	d1bb      	bne.n	8008282 <_strtod_l+0x72>
 800830a:	f7ff fe37 	bl	8007f7c <__errno>
 800830e:	2322      	movs	r3, #34	@ 0x22
 8008310:	6003      	str	r3, [r0, #0]
 8008312:	e7b6      	b.n	8008282 <_strtod_l+0x72>
 8008314:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 8008318:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800831c:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8008320:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8008324:	e7e7      	b.n	80082f6 <_strtod_l+0xe6>
 8008326:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 80084a4 <_strtod_l+0x294>
 800832a:	e7e4      	b.n	80082f6 <_strtod_l+0xe6>
 800832c:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 8008330:	f04f 3aff 	mov.w	sl, #4294967295
 8008334:	e7df      	b.n	80082f6 <_strtod_l+0xe6>
 8008336:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008338:	1c5a      	adds	r2, r3, #1
 800833a:	9219      	str	r2, [sp, #100]	@ 0x64
 800833c:	785b      	ldrb	r3, [r3, #1]
 800833e:	2b30      	cmp	r3, #48	@ 0x30
 8008340:	d0f9      	beq.n	8008336 <_strtod_l+0x126>
 8008342:	2b00      	cmp	r3, #0
 8008344:	d09d      	beq.n	8008282 <_strtod_l+0x72>
 8008346:	2301      	movs	r3, #1
 8008348:	9309      	str	r3, [sp, #36]	@ 0x24
 800834a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800834c:	930c      	str	r3, [sp, #48]	@ 0x30
 800834e:	2300      	movs	r3, #0
 8008350:	9308      	str	r3, [sp, #32]
 8008352:	930a      	str	r3, [sp, #40]	@ 0x28
 8008354:	461f      	mov	r7, r3
 8008356:	220a      	movs	r2, #10
 8008358:	9819      	ldr	r0, [sp, #100]	@ 0x64
 800835a:	7805      	ldrb	r5, [r0, #0]
 800835c:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 8008360:	b2d9      	uxtb	r1, r3
 8008362:	2909      	cmp	r1, #9
 8008364:	d928      	bls.n	80083b8 <_strtod_l+0x1a8>
 8008366:	494e      	ldr	r1, [pc, #312]	@ (80084a0 <_strtod_l+0x290>)
 8008368:	2201      	movs	r2, #1
 800836a:	f001 f963 	bl	8009634 <strncmp>
 800836e:	2800      	cmp	r0, #0
 8008370:	d032      	beq.n	80083d8 <_strtod_l+0x1c8>
 8008372:	2000      	movs	r0, #0
 8008374:	462a      	mov	r2, r5
 8008376:	4681      	mov	r9, r0
 8008378:	463d      	mov	r5, r7
 800837a:	4603      	mov	r3, r0
 800837c:	2a65      	cmp	r2, #101	@ 0x65
 800837e:	d001      	beq.n	8008384 <_strtod_l+0x174>
 8008380:	2a45      	cmp	r2, #69	@ 0x45
 8008382:	d114      	bne.n	80083ae <_strtod_l+0x19e>
 8008384:	b91d      	cbnz	r5, 800838e <_strtod_l+0x17e>
 8008386:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008388:	4302      	orrs	r2, r0
 800838a:	d095      	beq.n	80082b8 <_strtod_l+0xa8>
 800838c:	2500      	movs	r5, #0
 800838e:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 8008390:	1c62      	adds	r2, r4, #1
 8008392:	9219      	str	r2, [sp, #100]	@ 0x64
 8008394:	7862      	ldrb	r2, [r4, #1]
 8008396:	2a2b      	cmp	r2, #43	@ 0x2b
 8008398:	d077      	beq.n	800848a <_strtod_l+0x27a>
 800839a:	2a2d      	cmp	r2, #45	@ 0x2d
 800839c:	d07b      	beq.n	8008496 <_strtod_l+0x286>
 800839e:	f04f 0c00 	mov.w	ip, #0
 80083a2:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 80083a6:	2909      	cmp	r1, #9
 80083a8:	f240 8082 	bls.w	80084b0 <_strtod_l+0x2a0>
 80083ac:	9419      	str	r4, [sp, #100]	@ 0x64
 80083ae:	f04f 0800 	mov.w	r8, #0
 80083b2:	e0a2      	b.n	80084fa <_strtod_l+0x2ea>
 80083b4:	2300      	movs	r3, #0
 80083b6:	e7c7      	b.n	8008348 <_strtod_l+0x138>
 80083b8:	2f08      	cmp	r7, #8
 80083ba:	bfd5      	itete	le
 80083bc:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 80083be:	9908      	ldrgt	r1, [sp, #32]
 80083c0:	fb02 3301 	mlale	r3, r2, r1, r3
 80083c4:	fb02 3301 	mlagt	r3, r2, r1, r3
 80083c8:	f100 0001 	add.w	r0, r0, #1
 80083cc:	bfd4      	ite	le
 80083ce:	930a      	strle	r3, [sp, #40]	@ 0x28
 80083d0:	9308      	strgt	r3, [sp, #32]
 80083d2:	3701      	adds	r7, #1
 80083d4:	9019      	str	r0, [sp, #100]	@ 0x64
 80083d6:	e7bf      	b.n	8008358 <_strtod_l+0x148>
 80083d8:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80083da:	1c5a      	adds	r2, r3, #1
 80083dc:	9219      	str	r2, [sp, #100]	@ 0x64
 80083de:	785a      	ldrb	r2, [r3, #1]
 80083e0:	b37f      	cbz	r7, 8008442 <_strtod_l+0x232>
 80083e2:	4681      	mov	r9, r0
 80083e4:	463d      	mov	r5, r7
 80083e6:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 80083ea:	2b09      	cmp	r3, #9
 80083ec:	d912      	bls.n	8008414 <_strtod_l+0x204>
 80083ee:	2301      	movs	r3, #1
 80083f0:	e7c4      	b.n	800837c <_strtod_l+0x16c>
 80083f2:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80083f4:	1c5a      	adds	r2, r3, #1
 80083f6:	9219      	str	r2, [sp, #100]	@ 0x64
 80083f8:	785a      	ldrb	r2, [r3, #1]
 80083fa:	3001      	adds	r0, #1
 80083fc:	2a30      	cmp	r2, #48	@ 0x30
 80083fe:	d0f8      	beq.n	80083f2 <_strtod_l+0x1e2>
 8008400:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 8008404:	2b08      	cmp	r3, #8
 8008406:	f200 84d3 	bhi.w	8008db0 <_strtod_l+0xba0>
 800840a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800840c:	930c      	str	r3, [sp, #48]	@ 0x30
 800840e:	4681      	mov	r9, r0
 8008410:	2000      	movs	r0, #0
 8008412:	4605      	mov	r5, r0
 8008414:	3a30      	subs	r2, #48	@ 0x30
 8008416:	f100 0301 	add.w	r3, r0, #1
 800841a:	d02a      	beq.n	8008472 <_strtod_l+0x262>
 800841c:	4499      	add	r9, r3
 800841e:	eb00 0c05 	add.w	ip, r0, r5
 8008422:	462b      	mov	r3, r5
 8008424:	210a      	movs	r1, #10
 8008426:	4563      	cmp	r3, ip
 8008428:	d10d      	bne.n	8008446 <_strtod_l+0x236>
 800842a:	1c69      	adds	r1, r5, #1
 800842c:	4401      	add	r1, r0
 800842e:	4428      	add	r0, r5
 8008430:	2808      	cmp	r0, #8
 8008432:	dc16      	bgt.n	8008462 <_strtod_l+0x252>
 8008434:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8008436:	230a      	movs	r3, #10
 8008438:	fb03 2300 	mla	r3, r3, r0, r2
 800843c:	930a      	str	r3, [sp, #40]	@ 0x28
 800843e:	2300      	movs	r3, #0
 8008440:	e018      	b.n	8008474 <_strtod_l+0x264>
 8008442:	4638      	mov	r0, r7
 8008444:	e7da      	b.n	80083fc <_strtod_l+0x1ec>
 8008446:	2b08      	cmp	r3, #8
 8008448:	f103 0301 	add.w	r3, r3, #1
 800844c:	dc03      	bgt.n	8008456 <_strtod_l+0x246>
 800844e:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 8008450:	434e      	muls	r6, r1
 8008452:	960a      	str	r6, [sp, #40]	@ 0x28
 8008454:	e7e7      	b.n	8008426 <_strtod_l+0x216>
 8008456:	2b10      	cmp	r3, #16
 8008458:	bfde      	ittt	le
 800845a:	9e08      	ldrle	r6, [sp, #32]
 800845c:	434e      	mulle	r6, r1
 800845e:	9608      	strle	r6, [sp, #32]
 8008460:	e7e1      	b.n	8008426 <_strtod_l+0x216>
 8008462:	280f      	cmp	r0, #15
 8008464:	dceb      	bgt.n	800843e <_strtod_l+0x22e>
 8008466:	9808      	ldr	r0, [sp, #32]
 8008468:	230a      	movs	r3, #10
 800846a:	fb03 2300 	mla	r3, r3, r0, r2
 800846e:	9308      	str	r3, [sp, #32]
 8008470:	e7e5      	b.n	800843e <_strtod_l+0x22e>
 8008472:	4629      	mov	r1, r5
 8008474:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8008476:	1c50      	adds	r0, r2, #1
 8008478:	9019      	str	r0, [sp, #100]	@ 0x64
 800847a:	7852      	ldrb	r2, [r2, #1]
 800847c:	4618      	mov	r0, r3
 800847e:	460d      	mov	r5, r1
 8008480:	e7b1      	b.n	80083e6 <_strtod_l+0x1d6>
 8008482:	f04f 0900 	mov.w	r9, #0
 8008486:	2301      	movs	r3, #1
 8008488:	e77d      	b.n	8008386 <_strtod_l+0x176>
 800848a:	f04f 0c00 	mov.w	ip, #0
 800848e:	1ca2      	adds	r2, r4, #2
 8008490:	9219      	str	r2, [sp, #100]	@ 0x64
 8008492:	78a2      	ldrb	r2, [r4, #2]
 8008494:	e785      	b.n	80083a2 <_strtod_l+0x192>
 8008496:	f04f 0c01 	mov.w	ip, #1
 800849a:	e7f8      	b.n	800848e <_strtod_l+0x27e>
 800849c:	0800ad78 	.word	0x0800ad78
 80084a0:	0800ad55 	.word	0x0800ad55
 80084a4:	7ff00000 	.word	0x7ff00000
 80084a8:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80084aa:	1c51      	adds	r1, r2, #1
 80084ac:	9119      	str	r1, [sp, #100]	@ 0x64
 80084ae:	7852      	ldrb	r2, [r2, #1]
 80084b0:	2a30      	cmp	r2, #48	@ 0x30
 80084b2:	d0f9      	beq.n	80084a8 <_strtod_l+0x298>
 80084b4:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 80084b8:	2908      	cmp	r1, #8
 80084ba:	f63f af78 	bhi.w	80083ae <_strtod_l+0x19e>
 80084be:	3a30      	subs	r2, #48	@ 0x30
 80084c0:	920e      	str	r2, [sp, #56]	@ 0x38
 80084c2:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80084c4:	920f      	str	r2, [sp, #60]	@ 0x3c
 80084c6:	f04f 080a 	mov.w	r8, #10
 80084ca:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80084cc:	1c56      	adds	r6, r2, #1
 80084ce:	9619      	str	r6, [sp, #100]	@ 0x64
 80084d0:	7852      	ldrb	r2, [r2, #1]
 80084d2:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 80084d6:	f1be 0f09 	cmp.w	lr, #9
 80084da:	d939      	bls.n	8008550 <_strtod_l+0x340>
 80084dc:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 80084de:	1a76      	subs	r6, r6, r1
 80084e0:	2e08      	cmp	r6, #8
 80084e2:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 80084e6:	dc03      	bgt.n	80084f0 <_strtod_l+0x2e0>
 80084e8:	990e      	ldr	r1, [sp, #56]	@ 0x38
 80084ea:	4588      	cmp	r8, r1
 80084ec:	bfa8      	it	ge
 80084ee:	4688      	movge	r8, r1
 80084f0:	f1bc 0f00 	cmp.w	ip, #0
 80084f4:	d001      	beq.n	80084fa <_strtod_l+0x2ea>
 80084f6:	f1c8 0800 	rsb	r8, r8, #0
 80084fa:	2d00      	cmp	r5, #0
 80084fc:	d14e      	bne.n	800859c <_strtod_l+0x38c>
 80084fe:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8008500:	4308      	orrs	r0, r1
 8008502:	f47f aebe 	bne.w	8008282 <_strtod_l+0x72>
 8008506:	2b00      	cmp	r3, #0
 8008508:	f47f aed6 	bne.w	80082b8 <_strtod_l+0xa8>
 800850c:	2a69      	cmp	r2, #105	@ 0x69
 800850e:	d028      	beq.n	8008562 <_strtod_l+0x352>
 8008510:	dc25      	bgt.n	800855e <_strtod_l+0x34e>
 8008512:	2a49      	cmp	r2, #73	@ 0x49
 8008514:	d025      	beq.n	8008562 <_strtod_l+0x352>
 8008516:	2a4e      	cmp	r2, #78	@ 0x4e
 8008518:	f47f aece 	bne.w	80082b8 <_strtod_l+0xa8>
 800851c:	499b      	ldr	r1, [pc, #620]	@ (800878c <_strtod_l+0x57c>)
 800851e:	a819      	add	r0, sp, #100	@ 0x64
 8008520:	f001 fb4c 	bl	8009bbc <__match>
 8008524:	2800      	cmp	r0, #0
 8008526:	f43f aec7 	beq.w	80082b8 <_strtod_l+0xa8>
 800852a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800852c:	781b      	ldrb	r3, [r3, #0]
 800852e:	2b28      	cmp	r3, #40	@ 0x28
 8008530:	d12e      	bne.n	8008590 <_strtod_l+0x380>
 8008532:	4997      	ldr	r1, [pc, #604]	@ (8008790 <_strtod_l+0x580>)
 8008534:	aa1c      	add	r2, sp, #112	@ 0x70
 8008536:	a819      	add	r0, sp, #100	@ 0x64
 8008538:	f001 fb54 	bl	8009be4 <__hexnan>
 800853c:	2805      	cmp	r0, #5
 800853e:	d127      	bne.n	8008590 <_strtod_l+0x380>
 8008540:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8008542:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 8008546:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 800854a:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 800854e:	e698      	b.n	8008282 <_strtod_l+0x72>
 8008550:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8008552:	fb08 2101 	mla	r1, r8, r1, r2
 8008556:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 800855a:	920e      	str	r2, [sp, #56]	@ 0x38
 800855c:	e7b5      	b.n	80084ca <_strtod_l+0x2ba>
 800855e:	2a6e      	cmp	r2, #110	@ 0x6e
 8008560:	e7da      	b.n	8008518 <_strtod_l+0x308>
 8008562:	498c      	ldr	r1, [pc, #560]	@ (8008794 <_strtod_l+0x584>)
 8008564:	a819      	add	r0, sp, #100	@ 0x64
 8008566:	f001 fb29 	bl	8009bbc <__match>
 800856a:	2800      	cmp	r0, #0
 800856c:	f43f aea4 	beq.w	80082b8 <_strtod_l+0xa8>
 8008570:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008572:	4989      	ldr	r1, [pc, #548]	@ (8008798 <_strtod_l+0x588>)
 8008574:	3b01      	subs	r3, #1
 8008576:	a819      	add	r0, sp, #100	@ 0x64
 8008578:	9319      	str	r3, [sp, #100]	@ 0x64
 800857a:	f001 fb1f 	bl	8009bbc <__match>
 800857e:	b910      	cbnz	r0, 8008586 <_strtod_l+0x376>
 8008580:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008582:	3301      	adds	r3, #1
 8008584:	9319      	str	r3, [sp, #100]	@ 0x64
 8008586:	f8df b220 	ldr.w	fp, [pc, #544]	@ 80087a8 <_strtod_l+0x598>
 800858a:	f04f 0a00 	mov.w	sl, #0
 800858e:	e678      	b.n	8008282 <_strtod_l+0x72>
 8008590:	4882      	ldr	r0, [pc, #520]	@ (800879c <_strtod_l+0x58c>)
 8008592:	f001 f881 	bl	8009698 <nan>
 8008596:	ec5b ab10 	vmov	sl, fp, d0
 800859a:	e672      	b.n	8008282 <_strtod_l+0x72>
 800859c:	eba8 0309 	sub.w	r3, r8, r9
 80085a0:	980a      	ldr	r0, [sp, #40]	@ 0x28
 80085a2:	9309      	str	r3, [sp, #36]	@ 0x24
 80085a4:	2f00      	cmp	r7, #0
 80085a6:	bf08      	it	eq
 80085a8:	462f      	moveq	r7, r5
 80085aa:	2d10      	cmp	r5, #16
 80085ac:	462c      	mov	r4, r5
 80085ae:	bfa8      	it	ge
 80085b0:	2410      	movge	r4, #16
 80085b2:	f7f7 ffc7 	bl	8000544 <__aeabi_ui2d>
 80085b6:	2d09      	cmp	r5, #9
 80085b8:	4682      	mov	sl, r0
 80085ba:	468b      	mov	fp, r1
 80085bc:	dc13      	bgt.n	80085e6 <_strtod_l+0x3d6>
 80085be:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80085c0:	2b00      	cmp	r3, #0
 80085c2:	f43f ae5e 	beq.w	8008282 <_strtod_l+0x72>
 80085c6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80085c8:	dd78      	ble.n	80086bc <_strtod_l+0x4ac>
 80085ca:	2b16      	cmp	r3, #22
 80085cc:	dc5f      	bgt.n	800868e <_strtod_l+0x47e>
 80085ce:	4974      	ldr	r1, [pc, #464]	@ (80087a0 <_strtod_l+0x590>)
 80085d0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80085d4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80085d8:	4652      	mov	r2, sl
 80085da:	465b      	mov	r3, fp
 80085dc:	f7f8 f82c 	bl	8000638 <__aeabi_dmul>
 80085e0:	4682      	mov	sl, r0
 80085e2:	468b      	mov	fp, r1
 80085e4:	e64d      	b.n	8008282 <_strtod_l+0x72>
 80085e6:	4b6e      	ldr	r3, [pc, #440]	@ (80087a0 <_strtod_l+0x590>)
 80085e8:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80085ec:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 80085f0:	f7f8 f822 	bl	8000638 <__aeabi_dmul>
 80085f4:	4682      	mov	sl, r0
 80085f6:	9808      	ldr	r0, [sp, #32]
 80085f8:	468b      	mov	fp, r1
 80085fa:	f7f7 ffa3 	bl	8000544 <__aeabi_ui2d>
 80085fe:	4602      	mov	r2, r0
 8008600:	460b      	mov	r3, r1
 8008602:	4650      	mov	r0, sl
 8008604:	4659      	mov	r1, fp
 8008606:	f7f7 fe61 	bl	80002cc <__adddf3>
 800860a:	2d0f      	cmp	r5, #15
 800860c:	4682      	mov	sl, r0
 800860e:	468b      	mov	fp, r1
 8008610:	ddd5      	ble.n	80085be <_strtod_l+0x3ae>
 8008612:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008614:	1b2c      	subs	r4, r5, r4
 8008616:	441c      	add	r4, r3
 8008618:	2c00      	cmp	r4, #0
 800861a:	f340 8096 	ble.w	800874a <_strtod_l+0x53a>
 800861e:	f014 030f 	ands.w	r3, r4, #15
 8008622:	d00a      	beq.n	800863a <_strtod_l+0x42a>
 8008624:	495e      	ldr	r1, [pc, #376]	@ (80087a0 <_strtod_l+0x590>)
 8008626:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800862a:	4652      	mov	r2, sl
 800862c:	465b      	mov	r3, fp
 800862e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008632:	f7f8 f801 	bl	8000638 <__aeabi_dmul>
 8008636:	4682      	mov	sl, r0
 8008638:	468b      	mov	fp, r1
 800863a:	f034 040f 	bics.w	r4, r4, #15
 800863e:	d073      	beq.n	8008728 <_strtod_l+0x518>
 8008640:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 8008644:	dd48      	ble.n	80086d8 <_strtod_l+0x4c8>
 8008646:	2400      	movs	r4, #0
 8008648:	46a0      	mov	r8, r4
 800864a:	940a      	str	r4, [sp, #40]	@ 0x28
 800864c:	46a1      	mov	r9, r4
 800864e:	9a05      	ldr	r2, [sp, #20]
 8008650:	f8df b154 	ldr.w	fp, [pc, #340]	@ 80087a8 <_strtod_l+0x598>
 8008654:	2322      	movs	r3, #34	@ 0x22
 8008656:	6013      	str	r3, [r2, #0]
 8008658:	f04f 0a00 	mov.w	sl, #0
 800865c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800865e:	2b00      	cmp	r3, #0
 8008660:	f43f ae0f 	beq.w	8008282 <_strtod_l+0x72>
 8008664:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8008666:	9805      	ldr	r0, [sp, #20]
 8008668:	f001 fbaa 	bl	8009dc0 <_Bfree>
 800866c:	9805      	ldr	r0, [sp, #20]
 800866e:	4649      	mov	r1, r9
 8008670:	f001 fba6 	bl	8009dc0 <_Bfree>
 8008674:	9805      	ldr	r0, [sp, #20]
 8008676:	4641      	mov	r1, r8
 8008678:	f001 fba2 	bl	8009dc0 <_Bfree>
 800867c:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800867e:	9805      	ldr	r0, [sp, #20]
 8008680:	f001 fb9e 	bl	8009dc0 <_Bfree>
 8008684:	9805      	ldr	r0, [sp, #20]
 8008686:	4621      	mov	r1, r4
 8008688:	f001 fb9a 	bl	8009dc0 <_Bfree>
 800868c:	e5f9      	b.n	8008282 <_strtod_l+0x72>
 800868e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008690:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 8008694:	4293      	cmp	r3, r2
 8008696:	dbbc      	blt.n	8008612 <_strtod_l+0x402>
 8008698:	4c41      	ldr	r4, [pc, #260]	@ (80087a0 <_strtod_l+0x590>)
 800869a:	f1c5 050f 	rsb	r5, r5, #15
 800869e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 80086a2:	4652      	mov	r2, sl
 80086a4:	465b      	mov	r3, fp
 80086a6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80086aa:	f7f7 ffc5 	bl	8000638 <__aeabi_dmul>
 80086ae:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80086b0:	1b5d      	subs	r5, r3, r5
 80086b2:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 80086b6:	e9d4 2300 	ldrd	r2, r3, [r4]
 80086ba:	e78f      	b.n	80085dc <_strtod_l+0x3cc>
 80086bc:	3316      	adds	r3, #22
 80086be:	dba8      	blt.n	8008612 <_strtod_l+0x402>
 80086c0:	4b37      	ldr	r3, [pc, #220]	@ (80087a0 <_strtod_l+0x590>)
 80086c2:	eba9 0808 	sub.w	r8, r9, r8
 80086c6:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 80086ca:	e9d8 2300 	ldrd	r2, r3, [r8]
 80086ce:	4650      	mov	r0, sl
 80086d0:	4659      	mov	r1, fp
 80086d2:	f7f8 f8db 	bl	800088c <__aeabi_ddiv>
 80086d6:	e783      	b.n	80085e0 <_strtod_l+0x3d0>
 80086d8:	4b32      	ldr	r3, [pc, #200]	@ (80087a4 <_strtod_l+0x594>)
 80086da:	9308      	str	r3, [sp, #32]
 80086dc:	2300      	movs	r3, #0
 80086de:	1124      	asrs	r4, r4, #4
 80086e0:	4650      	mov	r0, sl
 80086e2:	4659      	mov	r1, fp
 80086e4:	461e      	mov	r6, r3
 80086e6:	2c01      	cmp	r4, #1
 80086e8:	dc21      	bgt.n	800872e <_strtod_l+0x51e>
 80086ea:	b10b      	cbz	r3, 80086f0 <_strtod_l+0x4e0>
 80086ec:	4682      	mov	sl, r0
 80086ee:	468b      	mov	fp, r1
 80086f0:	492c      	ldr	r1, [pc, #176]	@ (80087a4 <_strtod_l+0x594>)
 80086f2:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 80086f6:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 80086fa:	4652      	mov	r2, sl
 80086fc:	465b      	mov	r3, fp
 80086fe:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008702:	f7f7 ff99 	bl	8000638 <__aeabi_dmul>
 8008706:	4b28      	ldr	r3, [pc, #160]	@ (80087a8 <_strtod_l+0x598>)
 8008708:	460a      	mov	r2, r1
 800870a:	400b      	ands	r3, r1
 800870c:	4927      	ldr	r1, [pc, #156]	@ (80087ac <_strtod_l+0x59c>)
 800870e:	428b      	cmp	r3, r1
 8008710:	4682      	mov	sl, r0
 8008712:	d898      	bhi.n	8008646 <_strtod_l+0x436>
 8008714:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 8008718:	428b      	cmp	r3, r1
 800871a:	bf86      	itte	hi
 800871c:	f8df b090 	ldrhi.w	fp, [pc, #144]	@ 80087b0 <_strtod_l+0x5a0>
 8008720:	f04f 3aff 	movhi.w	sl, #4294967295
 8008724:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 8008728:	2300      	movs	r3, #0
 800872a:	9308      	str	r3, [sp, #32]
 800872c:	e07a      	b.n	8008824 <_strtod_l+0x614>
 800872e:	07e2      	lsls	r2, r4, #31
 8008730:	d505      	bpl.n	800873e <_strtod_l+0x52e>
 8008732:	9b08      	ldr	r3, [sp, #32]
 8008734:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008738:	f7f7 ff7e 	bl	8000638 <__aeabi_dmul>
 800873c:	2301      	movs	r3, #1
 800873e:	9a08      	ldr	r2, [sp, #32]
 8008740:	3208      	adds	r2, #8
 8008742:	3601      	adds	r6, #1
 8008744:	1064      	asrs	r4, r4, #1
 8008746:	9208      	str	r2, [sp, #32]
 8008748:	e7cd      	b.n	80086e6 <_strtod_l+0x4d6>
 800874a:	d0ed      	beq.n	8008728 <_strtod_l+0x518>
 800874c:	4264      	negs	r4, r4
 800874e:	f014 020f 	ands.w	r2, r4, #15
 8008752:	d00a      	beq.n	800876a <_strtod_l+0x55a>
 8008754:	4b12      	ldr	r3, [pc, #72]	@ (80087a0 <_strtod_l+0x590>)
 8008756:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800875a:	4650      	mov	r0, sl
 800875c:	4659      	mov	r1, fp
 800875e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008762:	f7f8 f893 	bl	800088c <__aeabi_ddiv>
 8008766:	4682      	mov	sl, r0
 8008768:	468b      	mov	fp, r1
 800876a:	1124      	asrs	r4, r4, #4
 800876c:	d0dc      	beq.n	8008728 <_strtod_l+0x518>
 800876e:	2c1f      	cmp	r4, #31
 8008770:	dd20      	ble.n	80087b4 <_strtod_l+0x5a4>
 8008772:	2400      	movs	r4, #0
 8008774:	46a0      	mov	r8, r4
 8008776:	940a      	str	r4, [sp, #40]	@ 0x28
 8008778:	46a1      	mov	r9, r4
 800877a:	9a05      	ldr	r2, [sp, #20]
 800877c:	2322      	movs	r3, #34	@ 0x22
 800877e:	f04f 0a00 	mov.w	sl, #0
 8008782:	f04f 0b00 	mov.w	fp, #0
 8008786:	6013      	str	r3, [r2, #0]
 8008788:	e768      	b.n	800865c <_strtod_l+0x44c>
 800878a:	bf00      	nop
 800878c:	0800ad60 	.word	0x0800ad60
 8008790:	0800ad64 	.word	0x0800ad64
 8008794:	0800ad57 	.word	0x0800ad57
 8008798:	0800ad5a 	.word	0x0800ad5a
 800879c:	0800b113 	.word	0x0800b113
 80087a0:	0800b010 	.word	0x0800b010
 80087a4:	0800afe8 	.word	0x0800afe8
 80087a8:	7ff00000 	.word	0x7ff00000
 80087ac:	7ca00000 	.word	0x7ca00000
 80087b0:	7fefffff 	.word	0x7fefffff
 80087b4:	f014 0310 	ands.w	r3, r4, #16
 80087b8:	bf18      	it	ne
 80087ba:	236a      	movne	r3, #106	@ 0x6a
 80087bc:	4ea9      	ldr	r6, [pc, #676]	@ (8008a64 <_strtod_l+0x854>)
 80087be:	9308      	str	r3, [sp, #32]
 80087c0:	4650      	mov	r0, sl
 80087c2:	4659      	mov	r1, fp
 80087c4:	2300      	movs	r3, #0
 80087c6:	07e2      	lsls	r2, r4, #31
 80087c8:	d504      	bpl.n	80087d4 <_strtod_l+0x5c4>
 80087ca:	e9d6 2300 	ldrd	r2, r3, [r6]
 80087ce:	f7f7 ff33 	bl	8000638 <__aeabi_dmul>
 80087d2:	2301      	movs	r3, #1
 80087d4:	1064      	asrs	r4, r4, #1
 80087d6:	f106 0608 	add.w	r6, r6, #8
 80087da:	d1f4      	bne.n	80087c6 <_strtod_l+0x5b6>
 80087dc:	b10b      	cbz	r3, 80087e2 <_strtod_l+0x5d2>
 80087de:	4682      	mov	sl, r0
 80087e0:	468b      	mov	fp, r1
 80087e2:	9b08      	ldr	r3, [sp, #32]
 80087e4:	b1b3      	cbz	r3, 8008814 <_strtod_l+0x604>
 80087e6:	f3cb 520a 	ubfx	r2, fp, #20, #11
 80087ea:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 80087ee:	2b00      	cmp	r3, #0
 80087f0:	4659      	mov	r1, fp
 80087f2:	dd0f      	ble.n	8008814 <_strtod_l+0x604>
 80087f4:	2b1f      	cmp	r3, #31
 80087f6:	dd55      	ble.n	80088a4 <_strtod_l+0x694>
 80087f8:	2b34      	cmp	r3, #52	@ 0x34
 80087fa:	bfde      	ittt	le
 80087fc:	f04f 33ff 	movle.w	r3, #4294967295
 8008800:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 8008804:	4093      	lslle	r3, r2
 8008806:	f04f 0a00 	mov.w	sl, #0
 800880a:	bfcc      	ite	gt
 800880c:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 8008810:	ea03 0b01 	andle.w	fp, r3, r1
 8008814:	2200      	movs	r2, #0
 8008816:	2300      	movs	r3, #0
 8008818:	4650      	mov	r0, sl
 800881a:	4659      	mov	r1, fp
 800881c:	f7f8 f974 	bl	8000b08 <__aeabi_dcmpeq>
 8008820:	2800      	cmp	r0, #0
 8008822:	d1a6      	bne.n	8008772 <_strtod_l+0x562>
 8008824:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008826:	9300      	str	r3, [sp, #0]
 8008828:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800882a:	9805      	ldr	r0, [sp, #20]
 800882c:	462b      	mov	r3, r5
 800882e:	463a      	mov	r2, r7
 8008830:	f001 fb2e 	bl	8009e90 <__s2b>
 8008834:	900a      	str	r0, [sp, #40]	@ 0x28
 8008836:	2800      	cmp	r0, #0
 8008838:	f43f af05 	beq.w	8008646 <_strtod_l+0x436>
 800883c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800883e:	2a00      	cmp	r2, #0
 8008840:	eba9 0308 	sub.w	r3, r9, r8
 8008844:	bfa8      	it	ge
 8008846:	2300      	movge	r3, #0
 8008848:	9312      	str	r3, [sp, #72]	@ 0x48
 800884a:	2400      	movs	r4, #0
 800884c:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8008850:	9316      	str	r3, [sp, #88]	@ 0x58
 8008852:	46a0      	mov	r8, r4
 8008854:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008856:	9805      	ldr	r0, [sp, #20]
 8008858:	6859      	ldr	r1, [r3, #4]
 800885a:	f001 fa71 	bl	8009d40 <_Balloc>
 800885e:	4681      	mov	r9, r0
 8008860:	2800      	cmp	r0, #0
 8008862:	f43f aef4 	beq.w	800864e <_strtod_l+0x43e>
 8008866:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008868:	691a      	ldr	r2, [r3, #16]
 800886a:	3202      	adds	r2, #2
 800886c:	f103 010c 	add.w	r1, r3, #12
 8008870:	0092      	lsls	r2, r2, #2
 8008872:	300c      	adds	r0, #12
 8008874:	f000 ff00 	bl	8009678 <memcpy>
 8008878:	ec4b ab10 	vmov	d0, sl, fp
 800887c:	9805      	ldr	r0, [sp, #20]
 800887e:	aa1c      	add	r2, sp, #112	@ 0x70
 8008880:	a91b      	add	r1, sp, #108	@ 0x6c
 8008882:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 8008886:	f001 fe3f 	bl	800a508 <__d2b>
 800888a:	901a      	str	r0, [sp, #104]	@ 0x68
 800888c:	2800      	cmp	r0, #0
 800888e:	f43f aede 	beq.w	800864e <_strtod_l+0x43e>
 8008892:	9805      	ldr	r0, [sp, #20]
 8008894:	2101      	movs	r1, #1
 8008896:	f001 fb91 	bl	8009fbc <__i2b>
 800889a:	4680      	mov	r8, r0
 800889c:	b948      	cbnz	r0, 80088b2 <_strtod_l+0x6a2>
 800889e:	f04f 0800 	mov.w	r8, #0
 80088a2:	e6d4      	b.n	800864e <_strtod_l+0x43e>
 80088a4:	f04f 32ff 	mov.w	r2, #4294967295
 80088a8:	fa02 f303 	lsl.w	r3, r2, r3
 80088ac:	ea03 0a0a 	and.w	sl, r3, sl
 80088b0:	e7b0      	b.n	8008814 <_strtod_l+0x604>
 80088b2:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 80088b4:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 80088b6:	2d00      	cmp	r5, #0
 80088b8:	bfab      	itete	ge
 80088ba:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 80088bc:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 80088be:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 80088c0:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 80088c2:	bfac      	ite	ge
 80088c4:	18ef      	addge	r7, r5, r3
 80088c6:	1b5e      	sublt	r6, r3, r5
 80088c8:	9b08      	ldr	r3, [sp, #32]
 80088ca:	1aed      	subs	r5, r5, r3
 80088cc:	4415      	add	r5, r2
 80088ce:	4b66      	ldr	r3, [pc, #408]	@ (8008a68 <_strtod_l+0x858>)
 80088d0:	3d01      	subs	r5, #1
 80088d2:	429d      	cmp	r5, r3
 80088d4:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 80088d8:	da50      	bge.n	800897c <_strtod_l+0x76c>
 80088da:	1b5b      	subs	r3, r3, r5
 80088dc:	2b1f      	cmp	r3, #31
 80088de:	eba2 0203 	sub.w	r2, r2, r3
 80088e2:	f04f 0101 	mov.w	r1, #1
 80088e6:	dc3d      	bgt.n	8008964 <_strtod_l+0x754>
 80088e8:	fa01 f303 	lsl.w	r3, r1, r3
 80088ec:	9313      	str	r3, [sp, #76]	@ 0x4c
 80088ee:	2300      	movs	r3, #0
 80088f0:	9310      	str	r3, [sp, #64]	@ 0x40
 80088f2:	18bd      	adds	r5, r7, r2
 80088f4:	9b08      	ldr	r3, [sp, #32]
 80088f6:	42af      	cmp	r7, r5
 80088f8:	4416      	add	r6, r2
 80088fa:	441e      	add	r6, r3
 80088fc:	463b      	mov	r3, r7
 80088fe:	bfa8      	it	ge
 8008900:	462b      	movge	r3, r5
 8008902:	42b3      	cmp	r3, r6
 8008904:	bfa8      	it	ge
 8008906:	4633      	movge	r3, r6
 8008908:	2b00      	cmp	r3, #0
 800890a:	bfc2      	ittt	gt
 800890c:	1aed      	subgt	r5, r5, r3
 800890e:	1af6      	subgt	r6, r6, r3
 8008910:	1aff      	subgt	r7, r7, r3
 8008912:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8008914:	2b00      	cmp	r3, #0
 8008916:	dd16      	ble.n	8008946 <_strtod_l+0x736>
 8008918:	4641      	mov	r1, r8
 800891a:	9805      	ldr	r0, [sp, #20]
 800891c:	461a      	mov	r2, r3
 800891e:	f001 fc0d 	bl	800a13c <__pow5mult>
 8008922:	4680      	mov	r8, r0
 8008924:	2800      	cmp	r0, #0
 8008926:	d0ba      	beq.n	800889e <_strtod_l+0x68e>
 8008928:	4601      	mov	r1, r0
 800892a:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800892c:	9805      	ldr	r0, [sp, #20]
 800892e:	f001 fb5b 	bl	8009fe8 <__multiply>
 8008932:	900e      	str	r0, [sp, #56]	@ 0x38
 8008934:	2800      	cmp	r0, #0
 8008936:	f43f ae8a 	beq.w	800864e <_strtod_l+0x43e>
 800893a:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800893c:	9805      	ldr	r0, [sp, #20]
 800893e:	f001 fa3f 	bl	8009dc0 <_Bfree>
 8008942:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008944:	931a      	str	r3, [sp, #104]	@ 0x68
 8008946:	2d00      	cmp	r5, #0
 8008948:	dc1d      	bgt.n	8008986 <_strtod_l+0x776>
 800894a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800894c:	2b00      	cmp	r3, #0
 800894e:	dd23      	ble.n	8008998 <_strtod_l+0x788>
 8008950:	4649      	mov	r1, r9
 8008952:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 8008954:	9805      	ldr	r0, [sp, #20]
 8008956:	f001 fbf1 	bl	800a13c <__pow5mult>
 800895a:	4681      	mov	r9, r0
 800895c:	b9e0      	cbnz	r0, 8008998 <_strtod_l+0x788>
 800895e:	f04f 0900 	mov.w	r9, #0
 8008962:	e674      	b.n	800864e <_strtod_l+0x43e>
 8008964:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 8008968:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 800896c:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 8008970:	35e2      	adds	r5, #226	@ 0xe2
 8008972:	fa01 f305 	lsl.w	r3, r1, r5
 8008976:	9310      	str	r3, [sp, #64]	@ 0x40
 8008978:	9113      	str	r1, [sp, #76]	@ 0x4c
 800897a:	e7ba      	b.n	80088f2 <_strtod_l+0x6e2>
 800897c:	2300      	movs	r3, #0
 800897e:	9310      	str	r3, [sp, #64]	@ 0x40
 8008980:	2301      	movs	r3, #1
 8008982:	9313      	str	r3, [sp, #76]	@ 0x4c
 8008984:	e7b5      	b.n	80088f2 <_strtod_l+0x6e2>
 8008986:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8008988:	9805      	ldr	r0, [sp, #20]
 800898a:	462a      	mov	r2, r5
 800898c:	f001 fc30 	bl	800a1f0 <__lshift>
 8008990:	901a      	str	r0, [sp, #104]	@ 0x68
 8008992:	2800      	cmp	r0, #0
 8008994:	d1d9      	bne.n	800894a <_strtod_l+0x73a>
 8008996:	e65a      	b.n	800864e <_strtod_l+0x43e>
 8008998:	2e00      	cmp	r6, #0
 800899a:	dd07      	ble.n	80089ac <_strtod_l+0x79c>
 800899c:	4649      	mov	r1, r9
 800899e:	9805      	ldr	r0, [sp, #20]
 80089a0:	4632      	mov	r2, r6
 80089a2:	f001 fc25 	bl	800a1f0 <__lshift>
 80089a6:	4681      	mov	r9, r0
 80089a8:	2800      	cmp	r0, #0
 80089aa:	d0d8      	beq.n	800895e <_strtod_l+0x74e>
 80089ac:	2f00      	cmp	r7, #0
 80089ae:	dd08      	ble.n	80089c2 <_strtod_l+0x7b2>
 80089b0:	4641      	mov	r1, r8
 80089b2:	9805      	ldr	r0, [sp, #20]
 80089b4:	463a      	mov	r2, r7
 80089b6:	f001 fc1b 	bl	800a1f0 <__lshift>
 80089ba:	4680      	mov	r8, r0
 80089bc:	2800      	cmp	r0, #0
 80089be:	f43f ae46 	beq.w	800864e <_strtod_l+0x43e>
 80089c2:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80089c4:	9805      	ldr	r0, [sp, #20]
 80089c6:	464a      	mov	r2, r9
 80089c8:	f001 fc9a 	bl	800a300 <__mdiff>
 80089cc:	4604      	mov	r4, r0
 80089ce:	2800      	cmp	r0, #0
 80089d0:	f43f ae3d 	beq.w	800864e <_strtod_l+0x43e>
 80089d4:	68c3      	ldr	r3, [r0, #12]
 80089d6:	930f      	str	r3, [sp, #60]	@ 0x3c
 80089d8:	2300      	movs	r3, #0
 80089da:	60c3      	str	r3, [r0, #12]
 80089dc:	4641      	mov	r1, r8
 80089de:	f001 fc73 	bl	800a2c8 <__mcmp>
 80089e2:	2800      	cmp	r0, #0
 80089e4:	da46      	bge.n	8008a74 <_strtod_l+0x864>
 80089e6:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80089e8:	ea53 030a 	orrs.w	r3, r3, sl
 80089ec:	d16c      	bne.n	8008ac8 <_strtod_l+0x8b8>
 80089ee:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80089f2:	2b00      	cmp	r3, #0
 80089f4:	d168      	bne.n	8008ac8 <_strtod_l+0x8b8>
 80089f6:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80089fa:	0d1b      	lsrs	r3, r3, #20
 80089fc:	051b      	lsls	r3, r3, #20
 80089fe:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8008a02:	d961      	bls.n	8008ac8 <_strtod_l+0x8b8>
 8008a04:	6963      	ldr	r3, [r4, #20]
 8008a06:	b913      	cbnz	r3, 8008a0e <_strtod_l+0x7fe>
 8008a08:	6923      	ldr	r3, [r4, #16]
 8008a0a:	2b01      	cmp	r3, #1
 8008a0c:	dd5c      	ble.n	8008ac8 <_strtod_l+0x8b8>
 8008a0e:	4621      	mov	r1, r4
 8008a10:	2201      	movs	r2, #1
 8008a12:	9805      	ldr	r0, [sp, #20]
 8008a14:	f001 fbec 	bl	800a1f0 <__lshift>
 8008a18:	4641      	mov	r1, r8
 8008a1a:	4604      	mov	r4, r0
 8008a1c:	f001 fc54 	bl	800a2c8 <__mcmp>
 8008a20:	2800      	cmp	r0, #0
 8008a22:	dd51      	ble.n	8008ac8 <_strtod_l+0x8b8>
 8008a24:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8008a28:	9a08      	ldr	r2, [sp, #32]
 8008a2a:	0d1b      	lsrs	r3, r3, #20
 8008a2c:	051b      	lsls	r3, r3, #20
 8008a2e:	2a00      	cmp	r2, #0
 8008a30:	d06b      	beq.n	8008b0a <_strtod_l+0x8fa>
 8008a32:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8008a36:	d868      	bhi.n	8008b0a <_strtod_l+0x8fa>
 8008a38:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 8008a3c:	f67f ae9d 	bls.w	800877a <_strtod_l+0x56a>
 8008a40:	4b0a      	ldr	r3, [pc, #40]	@ (8008a6c <_strtod_l+0x85c>)
 8008a42:	4650      	mov	r0, sl
 8008a44:	4659      	mov	r1, fp
 8008a46:	2200      	movs	r2, #0
 8008a48:	f7f7 fdf6 	bl	8000638 <__aeabi_dmul>
 8008a4c:	4b08      	ldr	r3, [pc, #32]	@ (8008a70 <_strtod_l+0x860>)
 8008a4e:	400b      	ands	r3, r1
 8008a50:	4682      	mov	sl, r0
 8008a52:	468b      	mov	fp, r1
 8008a54:	2b00      	cmp	r3, #0
 8008a56:	f47f ae05 	bne.w	8008664 <_strtod_l+0x454>
 8008a5a:	9a05      	ldr	r2, [sp, #20]
 8008a5c:	2322      	movs	r3, #34	@ 0x22
 8008a5e:	6013      	str	r3, [r2, #0]
 8008a60:	e600      	b.n	8008664 <_strtod_l+0x454>
 8008a62:	bf00      	nop
 8008a64:	0800ad90 	.word	0x0800ad90
 8008a68:	fffffc02 	.word	0xfffffc02
 8008a6c:	39500000 	.word	0x39500000
 8008a70:	7ff00000 	.word	0x7ff00000
 8008a74:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8008a78:	d165      	bne.n	8008b46 <_strtod_l+0x936>
 8008a7a:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8008a7c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8008a80:	b35a      	cbz	r2, 8008ada <_strtod_l+0x8ca>
 8008a82:	4a9f      	ldr	r2, [pc, #636]	@ (8008d00 <_strtod_l+0xaf0>)
 8008a84:	4293      	cmp	r3, r2
 8008a86:	d12b      	bne.n	8008ae0 <_strtod_l+0x8d0>
 8008a88:	9b08      	ldr	r3, [sp, #32]
 8008a8a:	4651      	mov	r1, sl
 8008a8c:	b303      	cbz	r3, 8008ad0 <_strtod_l+0x8c0>
 8008a8e:	4b9d      	ldr	r3, [pc, #628]	@ (8008d04 <_strtod_l+0xaf4>)
 8008a90:	465a      	mov	r2, fp
 8008a92:	4013      	ands	r3, r2
 8008a94:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 8008a98:	f04f 32ff 	mov.w	r2, #4294967295
 8008a9c:	d81b      	bhi.n	8008ad6 <_strtod_l+0x8c6>
 8008a9e:	0d1b      	lsrs	r3, r3, #20
 8008aa0:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8008aa4:	fa02 f303 	lsl.w	r3, r2, r3
 8008aa8:	4299      	cmp	r1, r3
 8008aaa:	d119      	bne.n	8008ae0 <_strtod_l+0x8d0>
 8008aac:	4b96      	ldr	r3, [pc, #600]	@ (8008d08 <_strtod_l+0xaf8>)
 8008aae:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8008ab0:	429a      	cmp	r2, r3
 8008ab2:	d102      	bne.n	8008aba <_strtod_l+0x8aa>
 8008ab4:	3101      	adds	r1, #1
 8008ab6:	f43f adca 	beq.w	800864e <_strtod_l+0x43e>
 8008aba:	4b92      	ldr	r3, [pc, #584]	@ (8008d04 <_strtod_l+0xaf4>)
 8008abc:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8008abe:	401a      	ands	r2, r3
 8008ac0:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 8008ac4:	f04f 0a00 	mov.w	sl, #0
 8008ac8:	9b08      	ldr	r3, [sp, #32]
 8008aca:	2b00      	cmp	r3, #0
 8008acc:	d1b8      	bne.n	8008a40 <_strtod_l+0x830>
 8008ace:	e5c9      	b.n	8008664 <_strtod_l+0x454>
 8008ad0:	f04f 33ff 	mov.w	r3, #4294967295
 8008ad4:	e7e8      	b.n	8008aa8 <_strtod_l+0x898>
 8008ad6:	4613      	mov	r3, r2
 8008ad8:	e7e6      	b.n	8008aa8 <_strtod_l+0x898>
 8008ada:	ea53 030a 	orrs.w	r3, r3, sl
 8008ade:	d0a1      	beq.n	8008a24 <_strtod_l+0x814>
 8008ae0:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8008ae2:	b1db      	cbz	r3, 8008b1c <_strtod_l+0x90c>
 8008ae4:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8008ae6:	4213      	tst	r3, r2
 8008ae8:	d0ee      	beq.n	8008ac8 <_strtod_l+0x8b8>
 8008aea:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008aec:	9a08      	ldr	r2, [sp, #32]
 8008aee:	4650      	mov	r0, sl
 8008af0:	4659      	mov	r1, fp
 8008af2:	b1bb      	cbz	r3, 8008b24 <_strtod_l+0x914>
 8008af4:	f7ff fb6e 	bl	80081d4 <sulp>
 8008af8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8008afc:	ec53 2b10 	vmov	r2, r3, d0
 8008b00:	f7f7 fbe4 	bl	80002cc <__adddf3>
 8008b04:	4682      	mov	sl, r0
 8008b06:	468b      	mov	fp, r1
 8008b08:	e7de      	b.n	8008ac8 <_strtod_l+0x8b8>
 8008b0a:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 8008b0e:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8008b12:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8008b16:	f04f 3aff 	mov.w	sl, #4294967295
 8008b1a:	e7d5      	b.n	8008ac8 <_strtod_l+0x8b8>
 8008b1c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8008b1e:	ea13 0f0a 	tst.w	r3, sl
 8008b22:	e7e1      	b.n	8008ae8 <_strtod_l+0x8d8>
 8008b24:	f7ff fb56 	bl	80081d4 <sulp>
 8008b28:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8008b2c:	ec53 2b10 	vmov	r2, r3, d0
 8008b30:	f7f7 fbca 	bl	80002c8 <__aeabi_dsub>
 8008b34:	2200      	movs	r2, #0
 8008b36:	2300      	movs	r3, #0
 8008b38:	4682      	mov	sl, r0
 8008b3a:	468b      	mov	fp, r1
 8008b3c:	f7f7 ffe4 	bl	8000b08 <__aeabi_dcmpeq>
 8008b40:	2800      	cmp	r0, #0
 8008b42:	d0c1      	beq.n	8008ac8 <_strtod_l+0x8b8>
 8008b44:	e619      	b.n	800877a <_strtod_l+0x56a>
 8008b46:	4641      	mov	r1, r8
 8008b48:	4620      	mov	r0, r4
 8008b4a:	f001 fd35 	bl	800a5b8 <__ratio>
 8008b4e:	ec57 6b10 	vmov	r6, r7, d0
 8008b52:	2200      	movs	r2, #0
 8008b54:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8008b58:	4630      	mov	r0, r6
 8008b5a:	4639      	mov	r1, r7
 8008b5c:	f7f7 ffe8 	bl	8000b30 <__aeabi_dcmple>
 8008b60:	2800      	cmp	r0, #0
 8008b62:	d06f      	beq.n	8008c44 <_strtod_l+0xa34>
 8008b64:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008b66:	2b00      	cmp	r3, #0
 8008b68:	d17a      	bne.n	8008c60 <_strtod_l+0xa50>
 8008b6a:	f1ba 0f00 	cmp.w	sl, #0
 8008b6e:	d158      	bne.n	8008c22 <_strtod_l+0xa12>
 8008b70:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008b72:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008b76:	2b00      	cmp	r3, #0
 8008b78:	d15a      	bne.n	8008c30 <_strtod_l+0xa20>
 8008b7a:	4b64      	ldr	r3, [pc, #400]	@ (8008d0c <_strtod_l+0xafc>)
 8008b7c:	2200      	movs	r2, #0
 8008b7e:	4630      	mov	r0, r6
 8008b80:	4639      	mov	r1, r7
 8008b82:	f7f7 ffcb 	bl	8000b1c <__aeabi_dcmplt>
 8008b86:	2800      	cmp	r0, #0
 8008b88:	d159      	bne.n	8008c3e <_strtod_l+0xa2e>
 8008b8a:	4630      	mov	r0, r6
 8008b8c:	4639      	mov	r1, r7
 8008b8e:	4b60      	ldr	r3, [pc, #384]	@ (8008d10 <_strtod_l+0xb00>)
 8008b90:	2200      	movs	r2, #0
 8008b92:	f7f7 fd51 	bl	8000638 <__aeabi_dmul>
 8008b96:	4606      	mov	r6, r0
 8008b98:	460f      	mov	r7, r1
 8008b9a:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 8008b9e:	9606      	str	r6, [sp, #24]
 8008ba0:	9307      	str	r3, [sp, #28]
 8008ba2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8008ba6:	4d57      	ldr	r5, [pc, #348]	@ (8008d04 <_strtod_l+0xaf4>)
 8008ba8:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8008bac:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008bae:	401d      	ands	r5, r3
 8008bb0:	4b58      	ldr	r3, [pc, #352]	@ (8008d14 <_strtod_l+0xb04>)
 8008bb2:	429d      	cmp	r5, r3
 8008bb4:	f040 80b2 	bne.w	8008d1c <_strtod_l+0xb0c>
 8008bb8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008bba:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 8008bbe:	ec4b ab10 	vmov	d0, sl, fp
 8008bc2:	f001 fc31 	bl	800a428 <__ulp>
 8008bc6:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8008bca:	ec51 0b10 	vmov	r0, r1, d0
 8008bce:	f7f7 fd33 	bl	8000638 <__aeabi_dmul>
 8008bd2:	4652      	mov	r2, sl
 8008bd4:	465b      	mov	r3, fp
 8008bd6:	f7f7 fb79 	bl	80002cc <__adddf3>
 8008bda:	460b      	mov	r3, r1
 8008bdc:	4949      	ldr	r1, [pc, #292]	@ (8008d04 <_strtod_l+0xaf4>)
 8008bde:	4a4e      	ldr	r2, [pc, #312]	@ (8008d18 <_strtod_l+0xb08>)
 8008be0:	4019      	ands	r1, r3
 8008be2:	4291      	cmp	r1, r2
 8008be4:	4682      	mov	sl, r0
 8008be6:	d942      	bls.n	8008c6e <_strtod_l+0xa5e>
 8008be8:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8008bea:	4b47      	ldr	r3, [pc, #284]	@ (8008d08 <_strtod_l+0xaf8>)
 8008bec:	429a      	cmp	r2, r3
 8008bee:	d103      	bne.n	8008bf8 <_strtod_l+0x9e8>
 8008bf0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8008bf2:	3301      	adds	r3, #1
 8008bf4:	f43f ad2b 	beq.w	800864e <_strtod_l+0x43e>
 8008bf8:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 8008d08 <_strtod_l+0xaf8>
 8008bfc:	f04f 3aff 	mov.w	sl, #4294967295
 8008c00:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8008c02:	9805      	ldr	r0, [sp, #20]
 8008c04:	f001 f8dc 	bl	8009dc0 <_Bfree>
 8008c08:	9805      	ldr	r0, [sp, #20]
 8008c0a:	4649      	mov	r1, r9
 8008c0c:	f001 f8d8 	bl	8009dc0 <_Bfree>
 8008c10:	9805      	ldr	r0, [sp, #20]
 8008c12:	4641      	mov	r1, r8
 8008c14:	f001 f8d4 	bl	8009dc0 <_Bfree>
 8008c18:	9805      	ldr	r0, [sp, #20]
 8008c1a:	4621      	mov	r1, r4
 8008c1c:	f001 f8d0 	bl	8009dc0 <_Bfree>
 8008c20:	e618      	b.n	8008854 <_strtod_l+0x644>
 8008c22:	f1ba 0f01 	cmp.w	sl, #1
 8008c26:	d103      	bne.n	8008c30 <_strtod_l+0xa20>
 8008c28:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008c2a:	2b00      	cmp	r3, #0
 8008c2c:	f43f ada5 	beq.w	800877a <_strtod_l+0x56a>
 8008c30:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 8008ce0 <_strtod_l+0xad0>
 8008c34:	4f35      	ldr	r7, [pc, #212]	@ (8008d0c <_strtod_l+0xafc>)
 8008c36:	ed8d 7b06 	vstr	d7, [sp, #24]
 8008c3a:	2600      	movs	r6, #0
 8008c3c:	e7b1      	b.n	8008ba2 <_strtod_l+0x992>
 8008c3e:	4f34      	ldr	r7, [pc, #208]	@ (8008d10 <_strtod_l+0xb00>)
 8008c40:	2600      	movs	r6, #0
 8008c42:	e7aa      	b.n	8008b9a <_strtod_l+0x98a>
 8008c44:	4b32      	ldr	r3, [pc, #200]	@ (8008d10 <_strtod_l+0xb00>)
 8008c46:	4630      	mov	r0, r6
 8008c48:	4639      	mov	r1, r7
 8008c4a:	2200      	movs	r2, #0
 8008c4c:	f7f7 fcf4 	bl	8000638 <__aeabi_dmul>
 8008c50:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008c52:	4606      	mov	r6, r0
 8008c54:	460f      	mov	r7, r1
 8008c56:	2b00      	cmp	r3, #0
 8008c58:	d09f      	beq.n	8008b9a <_strtod_l+0x98a>
 8008c5a:	e9cd 6706 	strd	r6, r7, [sp, #24]
 8008c5e:	e7a0      	b.n	8008ba2 <_strtod_l+0x992>
 8008c60:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 8008ce8 <_strtod_l+0xad8>
 8008c64:	ed8d 7b06 	vstr	d7, [sp, #24]
 8008c68:	ec57 6b17 	vmov	r6, r7, d7
 8008c6c:	e799      	b.n	8008ba2 <_strtod_l+0x992>
 8008c6e:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 8008c72:	9b08      	ldr	r3, [sp, #32]
 8008c74:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8008c78:	2b00      	cmp	r3, #0
 8008c7a:	d1c1      	bne.n	8008c00 <_strtod_l+0x9f0>
 8008c7c:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8008c80:	0d1b      	lsrs	r3, r3, #20
 8008c82:	051b      	lsls	r3, r3, #20
 8008c84:	429d      	cmp	r5, r3
 8008c86:	d1bb      	bne.n	8008c00 <_strtod_l+0x9f0>
 8008c88:	4630      	mov	r0, r6
 8008c8a:	4639      	mov	r1, r7
 8008c8c:	f7f7 fff4 	bl	8000c78 <__aeabi_d2lz>
 8008c90:	f7f7 fca4 	bl	80005dc <__aeabi_l2d>
 8008c94:	4602      	mov	r2, r0
 8008c96:	460b      	mov	r3, r1
 8008c98:	4630      	mov	r0, r6
 8008c9a:	4639      	mov	r1, r7
 8008c9c:	f7f7 fb14 	bl	80002c8 <__aeabi_dsub>
 8008ca0:	460b      	mov	r3, r1
 8008ca2:	4602      	mov	r2, r0
 8008ca4:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8008ca8:	f3cb 0613 	ubfx	r6, fp, #0, #20
 8008cac:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008cae:	ea46 060a 	orr.w	r6, r6, sl
 8008cb2:	431e      	orrs	r6, r3
 8008cb4:	d06f      	beq.n	8008d96 <_strtod_l+0xb86>
 8008cb6:	a30e      	add	r3, pc, #56	@ (adr r3, 8008cf0 <_strtod_l+0xae0>)
 8008cb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008cbc:	f7f7 ff2e 	bl	8000b1c <__aeabi_dcmplt>
 8008cc0:	2800      	cmp	r0, #0
 8008cc2:	f47f accf 	bne.w	8008664 <_strtod_l+0x454>
 8008cc6:	a30c      	add	r3, pc, #48	@ (adr r3, 8008cf8 <_strtod_l+0xae8>)
 8008cc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ccc:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8008cd0:	f7f7 ff42 	bl	8000b58 <__aeabi_dcmpgt>
 8008cd4:	2800      	cmp	r0, #0
 8008cd6:	d093      	beq.n	8008c00 <_strtod_l+0x9f0>
 8008cd8:	e4c4      	b.n	8008664 <_strtod_l+0x454>
 8008cda:	bf00      	nop
 8008cdc:	f3af 8000 	nop.w
 8008ce0:	00000000 	.word	0x00000000
 8008ce4:	bff00000 	.word	0xbff00000
 8008ce8:	00000000 	.word	0x00000000
 8008cec:	3ff00000 	.word	0x3ff00000
 8008cf0:	94a03595 	.word	0x94a03595
 8008cf4:	3fdfffff 	.word	0x3fdfffff
 8008cf8:	35afe535 	.word	0x35afe535
 8008cfc:	3fe00000 	.word	0x3fe00000
 8008d00:	000fffff 	.word	0x000fffff
 8008d04:	7ff00000 	.word	0x7ff00000
 8008d08:	7fefffff 	.word	0x7fefffff
 8008d0c:	3ff00000 	.word	0x3ff00000
 8008d10:	3fe00000 	.word	0x3fe00000
 8008d14:	7fe00000 	.word	0x7fe00000
 8008d18:	7c9fffff 	.word	0x7c9fffff
 8008d1c:	9b08      	ldr	r3, [sp, #32]
 8008d1e:	b323      	cbz	r3, 8008d6a <_strtod_l+0xb5a>
 8008d20:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 8008d24:	d821      	bhi.n	8008d6a <_strtod_l+0xb5a>
 8008d26:	a328      	add	r3, pc, #160	@ (adr r3, 8008dc8 <_strtod_l+0xbb8>)
 8008d28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d2c:	4630      	mov	r0, r6
 8008d2e:	4639      	mov	r1, r7
 8008d30:	f7f7 fefe 	bl	8000b30 <__aeabi_dcmple>
 8008d34:	b1a0      	cbz	r0, 8008d60 <_strtod_l+0xb50>
 8008d36:	4639      	mov	r1, r7
 8008d38:	4630      	mov	r0, r6
 8008d3a:	f7f7 ff2d 	bl	8000b98 <__aeabi_d2uiz>
 8008d3e:	2801      	cmp	r0, #1
 8008d40:	bf38      	it	cc
 8008d42:	2001      	movcc	r0, #1
 8008d44:	f7f7 fbfe 	bl	8000544 <__aeabi_ui2d>
 8008d48:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008d4a:	4606      	mov	r6, r0
 8008d4c:	460f      	mov	r7, r1
 8008d4e:	b9fb      	cbnz	r3, 8008d90 <_strtod_l+0xb80>
 8008d50:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8008d54:	9014      	str	r0, [sp, #80]	@ 0x50
 8008d56:	9315      	str	r3, [sp, #84]	@ 0x54
 8008d58:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 8008d5c:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8008d60:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8008d62:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 8008d66:	1b5b      	subs	r3, r3, r5
 8008d68:	9311      	str	r3, [sp, #68]	@ 0x44
 8008d6a:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8008d6e:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 8008d72:	f001 fb59 	bl	800a428 <__ulp>
 8008d76:	4650      	mov	r0, sl
 8008d78:	ec53 2b10 	vmov	r2, r3, d0
 8008d7c:	4659      	mov	r1, fp
 8008d7e:	f7f7 fc5b 	bl	8000638 <__aeabi_dmul>
 8008d82:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8008d86:	f7f7 faa1 	bl	80002cc <__adddf3>
 8008d8a:	4682      	mov	sl, r0
 8008d8c:	468b      	mov	fp, r1
 8008d8e:	e770      	b.n	8008c72 <_strtod_l+0xa62>
 8008d90:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 8008d94:	e7e0      	b.n	8008d58 <_strtod_l+0xb48>
 8008d96:	a30e      	add	r3, pc, #56	@ (adr r3, 8008dd0 <_strtod_l+0xbc0>)
 8008d98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d9c:	f7f7 febe 	bl	8000b1c <__aeabi_dcmplt>
 8008da0:	e798      	b.n	8008cd4 <_strtod_l+0xac4>
 8008da2:	2300      	movs	r3, #0
 8008da4:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008da6:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 8008da8:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008daa:	6013      	str	r3, [r2, #0]
 8008dac:	f7ff ba6d 	b.w	800828a <_strtod_l+0x7a>
 8008db0:	2a65      	cmp	r2, #101	@ 0x65
 8008db2:	f43f ab66 	beq.w	8008482 <_strtod_l+0x272>
 8008db6:	2a45      	cmp	r2, #69	@ 0x45
 8008db8:	f43f ab63 	beq.w	8008482 <_strtod_l+0x272>
 8008dbc:	2301      	movs	r3, #1
 8008dbe:	f7ff bb9e 	b.w	80084fe <_strtod_l+0x2ee>
 8008dc2:	bf00      	nop
 8008dc4:	f3af 8000 	nop.w
 8008dc8:	ffc00000 	.word	0xffc00000
 8008dcc:	41dfffff 	.word	0x41dfffff
 8008dd0:	94a03595 	.word	0x94a03595
 8008dd4:	3fcfffff 	.word	0x3fcfffff

08008dd8 <_strtod_r>:
 8008dd8:	4b01      	ldr	r3, [pc, #4]	@ (8008de0 <_strtod_r+0x8>)
 8008dda:	f7ff ba19 	b.w	8008210 <_strtod_l>
 8008dde:	bf00      	nop
 8008de0:	20000068 	.word	0x20000068

08008de4 <_strtol_l.constprop.0>:
 8008de4:	2b24      	cmp	r3, #36	@ 0x24
 8008de6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008dea:	4686      	mov	lr, r0
 8008dec:	4690      	mov	r8, r2
 8008dee:	d801      	bhi.n	8008df4 <_strtol_l.constprop.0+0x10>
 8008df0:	2b01      	cmp	r3, #1
 8008df2:	d106      	bne.n	8008e02 <_strtol_l.constprop.0+0x1e>
 8008df4:	f7ff f8c2 	bl	8007f7c <__errno>
 8008df8:	2316      	movs	r3, #22
 8008dfa:	6003      	str	r3, [r0, #0]
 8008dfc:	2000      	movs	r0, #0
 8008dfe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008e02:	4834      	ldr	r0, [pc, #208]	@ (8008ed4 <_strtol_l.constprop.0+0xf0>)
 8008e04:	460d      	mov	r5, r1
 8008e06:	462a      	mov	r2, r5
 8008e08:	f815 4b01 	ldrb.w	r4, [r5], #1
 8008e0c:	5d06      	ldrb	r6, [r0, r4]
 8008e0e:	f016 0608 	ands.w	r6, r6, #8
 8008e12:	d1f8      	bne.n	8008e06 <_strtol_l.constprop.0+0x22>
 8008e14:	2c2d      	cmp	r4, #45	@ 0x2d
 8008e16:	d12d      	bne.n	8008e74 <_strtol_l.constprop.0+0x90>
 8008e18:	782c      	ldrb	r4, [r5, #0]
 8008e1a:	2601      	movs	r6, #1
 8008e1c:	1c95      	adds	r5, r2, #2
 8008e1e:	f033 0210 	bics.w	r2, r3, #16
 8008e22:	d109      	bne.n	8008e38 <_strtol_l.constprop.0+0x54>
 8008e24:	2c30      	cmp	r4, #48	@ 0x30
 8008e26:	d12a      	bne.n	8008e7e <_strtol_l.constprop.0+0x9a>
 8008e28:	782a      	ldrb	r2, [r5, #0]
 8008e2a:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8008e2e:	2a58      	cmp	r2, #88	@ 0x58
 8008e30:	d125      	bne.n	8008e7e <_strtol_l.constprop.0+0x9a>
 8008e32:	786c      	ldrb	r4, [r5, #1]
 8008e34:	2310      	movs	r3, #16
 8008e36:	3502      	adds	r5, #2
 8008e38:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8008e3c:	f10c 3cff 	add.w	ip, ip, #4294967295
 8008e40:	2200      	movs	r2, #0
 8008e42:	fbbc f9f3 	udiv	r9, ip, r3
 8008e46:	4610      	mov	r0, r2
 8008e48:	fb03 ca19 	mls	sl, r3, r9, ip
 8008e4c:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8008e50:	2f09      	cmp	r7, #9
 8008e52:	d81b      	bhi.n	8008e8c <_strtol_l.constprop.0+0xa8>
 8008e54:	463c      	mov	r4, r7
 8008e56:	42a3      	cmp	r3, r4
 8008e58:	dd27      	ble.n	8008eaa <_strtol_l.constprop.0+0xc6>
 8008e5a:	1c57      	adds	r7, r2, #1
 8008e5c:	d007      	beq.n	8008e6e <_strtol_l.constprop.0+0x8a>
 8008e5e:	4581      	cmp	r9, r0
 8008e60:	d320      	bcc.n	8008ea4 <_strtol_l.constprop.0+0xc0>
 8008e62:	d101      	bne.n	8008e68 <_strtol_l.constprop.0+0x84>
 8008e64:	45a2      	cmp	sl, r4
 8008e66:	db1d      	blt.n	8008ea4 <_strtol_l.constprop.0+0xc0>
 8008e68:	fb00 4003 	mla	r0, r0, r3, r4
 8008e6c:	2201      	movs	r2, #1
 8008e6e:	f815 4b01 	ldrb.w	r4, [r5], #1
 8008e72:	e7eb      	b.n	8008e4c <_strtol_l.constprop.0+0x68>
 8008e74:	2c2b      	cmp	r4, #43	@ 0x2b
 8008e76:	bf04      	itt	eq
 8008e78:	782c      	ldrbeq	r4, [r5, #0]
 8008e7a:	1c95      	addeq	r5, r2, #2
 8008e7c:	e7cf      	b.n	8008e1e <_strtol_l.constprop.0+0x3a>
 8008e7e:	2b00      	cmp	r3, #0
 8008e80:	d1da      	bne.n	8008e38 <_strtol_l.constprop.0+0x54>
 8008e82:	2c30      	cmp	r4, #48	@ 0x30
 8008e84:	bf0c      	ite	eq
 8008e86:	2308      	moveq	r3, #8
 8008e88:	230a      	movne	r3, #10
 8008e8a:	e7d5      	b.n	8008e38 <_strtol_l.constprop.0+0x54>
 8008e8c:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8008e90:	2f19      	cmp	r7, #25
 8008e92:	d801      	bhi.n	8008e98 <_strtol_l.constprop.0+0xb4>
 8008e94:	3c37      	subs	r4, #55	@ 0x37
 8008e96:	e7de      	b.n	8008e56 <_strtol_l.constprop.0+0x72>
 8008e98:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8008e9c:	2f19      	cmp	r7, #25
 8008e9e:	d804      	bhi.n	8008eaa <_strtol_l.constprop.0+0xc6>
 8008ea0:	3c57      	subs	r4, #87	@ 0x57
 8008ea2:	e7d8      	b.n	8008e56 <_strtol_l.constprop.0+0x72>
 8008ea4:	f04f 32ff 	mov.w	r2, #4294967295
 8008ea8:	e7e1      	b.n	8008e6e <_strtol_l.constprop.0+0x8a>
 8008eaa:	1c53      	adds	r3, r2, #1
 8008eac:	d108      	bne.n	8008ec0 <_strtol_l.constprop.0+0xdc>
 8008eae:	2322      	movs	r3, #34	@ 0x22
 8008eb0:	f8ce 3000 	str.w	r3, [lr]
 8008eb4:	4660      	mov	r0, ip
 8008eb6:	f1b8 0f00 	cmp.w	r8, #0
 8008eba:	d0a0      	beq.n	8008dfe <_strtol_l.constprop.0+0x1a>
 8008ebc:	1e69      	subs	r1, r5, #1
 8008ebe:	e006      	b.n	8008ece <_strtol_l.constprop.0+0xea>
 8008ec0:	b106      	cbz	r6, 8008ec4 <_strtol_l.constprop.0+0xe0>
 8008ec2:	4240      	negs	r0, r0
 8008ec4:	f1b8 0f00 	cmp.w	r8, #0
 8008ec8:	d099      	beq.n	8008dfe <_strtol_l.constprop.0+0x1a>
 8008eca:	2a00      	cmp	r2, #0
 8008ecc:	d1f6      	bne.n	8008ebc <_strtol_l.constprop.0+0xd8>
 8008ece:	f8c8 1000 	str.w	r1, [r8]
 8008ed2:	e794      	b.n	8008dfe <_strtol_l.constprop.0+0x1a>
 8008ed4:	0800adb9 	.word	0x0800adb9

08008ed8 <_strtol_r>:
 8008ed8:	f7ff bf84 	b.w	8008de4 <_strtol_l.constprop.0>

08008edc <__ssputs_r>:
 8008edc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008ee0:	688e      	ldr	r6, [r1, #8]
 8008ee2:	461f      	mov	r7, r3
 8008ee4:	42be      	cmp	r6, r7
 8008ee6:	680b      	ldr	r3, [r1, #0]
 8008ee8:	4682      	mov	sl, r0
 8008eea:	460c      	mov	r4, r1
 8008eec:	4690      	mov	r8, r2
 8008eee:	d82d      	bhi.n	8008f4c <__ssputs_r+0x70>
 8008ef0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8008ef4:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8008ef8:	d026      	beq.n	8008f48 <__ssputs_r+0x6c>
 8008efa:	6965      	ldr	r5, [r4, #20]
 8008efc:	6909      	ldr	r1, [r1, #16]
 8008efe:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008f02:	eba3 0901 	sub.w	r9, r3, r1
 8008f06:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008f0a:	1c7b      	adds	r3, r7, #1
 8008f0c:	444b      	add	r3, r9
 8008f0e:	106d      	asrs	r5, r5, #1
 8008f10:	429d      	cmp	r5, r3
 8008f12:	bf38      	it	cc
 8008f14:	461d      	movcc	r5, r3
 8008f16:	0553      	lsls	r3, r2, #21
 8008f18:	d527      	bpl.n	8008f6a <__ssputs_r+0x8e>
 8008f1a:	4629      	mov	r1, r5
 8008f1c:	f7ff f8ce 	bl	80080bc <_malloc_r>
 8008f20:	4606      	mov	r6, r0
 8008f22:	b360      	cbz	r0, 8008f7e <__ssputs_r+0xa2>
 8008f24:	6921      	ldr	r1, [r4, #16]
 8008f26:	464a      	mov	r2, r9
 8008f28:	f000 fba6 	bl	8009678 <memcpy>
 8008f2c:	89a3      	ldrh	r3, [r4, #12]
 8008f2e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8008f32:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008f36:	81a3      	strh	r3, [r4, #12]
 8008f38:	6126      	str	r6, [r4, #16]
 8008f3a:	6165      	str	r5, [r4, #20]
 8008f3c:	444e      	add	r6, r9
 8008f3e:	eba5 0509 	sub.w	r5, r5, r9
 8008f42:	6026      	str	r6, [r4, #0]
 8008f44:	60a5      	str	r5, [r4, #8]
 8008f46:	463e      	mov	r6, r7
 8008f48:	42be      	cmp	r6, r7
 8008f4a:	d900      	bls.n	8008f4e <__ssputs_r+0x72>
 8008f4c:	463e      	mov	r6, r7
 8008f4e:	6820      	ldr	r0, [r4, #0]
 8008f50:	4632      	mov	r2, r6
 8008f52:	4641      	mov	r1, r8
 8008f54:	f000 fb54 	bl	8009600 <memmove>
 8008f58:	68a3      	ldr	r3, [r4, #8]
 8008f5a:	1b9b      	subs	r3, r3, r6
 8008f5c:	60a3      	str	r3, [r4, #8]
 8008f5e:	6823      	ldr	r3, [r4, #0]
 8008f60:	4433      	add	r3, r6
 8008f62:	6023      	str	r3, [r4, #0]
 8008f64:	2000      	movs	r0, #0
 8008f66:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008f6a:	462a      	mov	r2, r5
 8008f6c:	f001 fb9a 	bl	800a6a4 <_realloc_r>
 8008f70:	4606      	mov	r6, r0
 8008f72:	2800      	cmp	r0, #0
 8008f74:	d1e0      	bne.n	8008f38 <__ssputs_r+0x5c>
 8008f76:	6921      	ldr	r1, [r4, #16]
 8008f78:	4650      	mov	r0, sl
 8008f7a:	f7ff f833 	bl	8007fe4 <_free_r>
 8008f7e:	230c      	movs	r3, #12
 8008f80:	f8ca 3000 	str.w	r3, [sl]
 8008f84:	89a3      	ldrh	r3, [r4, #12]
 8008f86:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008f8a:	81a3      	strh	r3, [r4, #12]
 8008f8c:	f04f 30ff 	mov.w	r0, #4294967295
 8008f90:	e7e9      	b.n	8008f66 <__ssputs_r+0x8a>
	...

08008f94 <_svfiprintf_r>:
 8008f94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008f98:	4698      	mov	r8, r3
 8008f9a:	898b      	ldrh	r3, [r1, #12]
 8008f9c:	061b      	lsls	r3, r3, #24
 8008f9e:	b09d      	sub	sp, #116	@ 0x74
 8008fa0:	4607      	mov	r7, r0
 8008fa2:	460d      	mov	r5, r1
 8008fa4:	4614      	mov	r4, r2
 8008fa6:	d510      	bpl.n	8008fca <_svfiprintf_r+0x36>
 8008fa8:	690b      	ldr	r3, [r1, #16]
 8008faa:	b973      	cbnz	r3, 8008fca <_svfiprintf_r+0x36>
 8008fac:	2140      	movs	r1, #64	@ 0x40
 8008fae:	f7ff f885 	bl	80080bc <_malloc_r>
 8008fb2:	6028      	str	r0, [r5, #0]
 8008fb4:	6128      	str	r0, [r5, #16]
 8008fb6:	b930      	cbnz	r0, 8008fc6 <_svfiprintf_r+0x32>
 8008fb8:	230c      	movs	r3, #12
 8008fba:	603b      	str	r3, [r7, #0]
 8008fbc:	f04f 30ff 	mov.w	r0, #4294967295
 8008fc0:	b01d      	add	sp, #116	@ 0x74
 8008fc2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008fc6:	2340      	movs	r3, #64	@ 0x40
 8008fc8:	616b      	str	r3, [r5, #20]
 8008fca:	2300      	movs	r3, #0
 8008fcc:	9309      	str	r3, [sp, #36]	@ 0x24
 8008fce:	2320      	movs	r3, #32
 8008fd0:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8008fd4:	f8cd 800c 	str.w	r8, [sp, #12]
 8008fd8:	2330      	movs	r3, #48	@ 0x30
 8008fda:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8009178 <_svfiprintf_r+0x1e4>
 8008fde:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8008fe2:	f04f 0901 	mov.w	r9, #1
 8008fe6:	4623      	mov	r3, r4
 8008fe8:	469a      	mov	sl, r3
 8008fea:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008fee:	b10a      	cbz	r2, 8008ff4 <_svfiprintf_r+0x60>
 8008ff0:	2a25      	cmp	r2, #37	@ 0x25
 8008ff2:	d1f9      	bne.n	8008fe8 <_svfiprintf_r+0x54>
 8008ff4:	ebba 0b04 	subs.w	fp, sl, r4
 8008ff8:	d00b      	beq.n	8009012 <_svfiprintf_r+0x7e>
 8008ffa:	465b      	mov	r3, fp
 8008ffc:	4622      	mov	r2, r4
 8008ffe:	4629      	mov	r1, r5
 8009000:	4638      	mov	r0, r7
 8009002:	f7ff ff6b 	bl	8008edc <__ssputs_r>
 8009006:	3001      	adds	r0, #1
 8009008:	f000 80a7 	beq.w	800915a <_svfiprintf_r+0x1c6>
 800900c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800900e:	445a      	add	r2, fp
 8009010:	9209      	str	r2, [sp, #36]	@ 0x24
 8009012:	f89a 3000 	ldrb.w	r3, [sl]
 8009016:	2b00      	cmp	r3, #0
 8009018:	f000 809f 	beq.w	800915a <_svfiprintf_r+0x1c6>
 800901c:	2300      	movs	r3, #0
 800901e:	f04f 32ff 	mov.w	r2, #4294967295
 8009022:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009026:	f10a 0a01 	add.w	sl, sl, #1
 800902a:	9304      	str	r3, [sp, #16]
 800902c:	9307      	str	r3, [sp, #28]
 800902e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8009032:	931a      	str	r3, [sp, #104]	@ 0x68
 8009034:	4654      	mov	r4, sl
 8009036:	2205      	movs	r2, #5
 8009038:	f814 1b01 	ldrb.w	r1, [r4], #1
 800903c:	484e      	ldr	r0, [pc, #312]	@ (8009178 <_svfiprintf_r+0x1e4>)
 800903e:	f7f7 f8ef 	bl	8000220 <memchr>
 8009042:	9a04      	ldr	r2, [sp, #16]
 8009044:	b9d8      	cbnz	r0, 800907e <_svfiprintf_r+0xea>
 8009046:	06d0      	lsls	r0, r2, #27
 8009048:	bf44      	itt	mi
 800904a:	2320      	movmi	r3, #32
 800904c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009050:	0711      	lsls	r1, r2, #28
 8009052:	bf44      	itt	mi
 8009054:	232b      	movmi	r3, #43	@ 0x2b
 8009056:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800905a:	f89a 3000 	ldrb.w	r3, [sl]
 800905e:	2b2a      	cmp	r3, #42	@ 0x2a
 8009060:	d015      	beq.n	800908e <_svfiprintf_r+0xfa>
 8009062:	9a07      	ldr	r2, [sp, #28]
 8009064:	4654      	mov	r4, sl
 8009066:	2000      	movs	r0, #0
 8009068:	f04f 0c0a 	mov.w	ip, #10
 800906c:	4621      	mov	r1, r4
 800906e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009072:	3b30      	subs	r3, #48	@ 0x30
 8009074:	2b09      	cmp	r3, #9
 8009076:	d94b      	bls.n	8009110 <_svfiprintf_r+0x17c>
 8009078:	b1b0      	cbz	r0, 80090a8 <_svfiprintf_r+0x114>
 800907a:	9207      	str	r2, [sp, #28]
 800907c:	e014      	b.n	80090a8 <_svfiprintf_r+0x114>
 800907e:	eba0 0308 	sub.w	r3, r0, r8
 8009082:	fa09 f303 	lsl.w	r3, r9, r3
 8009086:	4313      	orrs	r3, r2
 8009088:	9304      	str	r3, [sp, #16]
 800908a:	46a2      	mov	sl, r4
 800908c:	e7d2      	b.n	8009034 <_svfiprintf_r+0xa0>
 800908e:	9b03      	ldr	r3, [sp, #12]
 8009090:	1d19      	adds	r1, r3, #4
 8009092:	681b      	ldr	r3, [r3, #0]
 8009094:	9103      	str	r1, [sp, #12]
 8009096:	2b00      	cmp	r3, #0
 8009098:	bfbb      	ittet	lt
 800909a:	425b      	neglt	r3, r3
 800909c:	f042 0202 	orrlt.w	r2, r2, #2
 80090a0:	9307      	strge	r3, [sp, #28]
 80090a2:	9307      	strlt	r3, [sp, #28]
 80090a4:	bfb8      	it	lt
 80090a6:	9204      	strlt	r2, [sp, #16]
 80090a8:	7823      	ldrb	r3, [r4, #0]
 80090aa:	2b2e      	cmp	r3, #46	@ 0x2e
 80090ac:	d10a      	bne.n	80090c4 <_svfiprintf_r+0x130>
 80090ae:	7863      	ldrb	r3, [r4, #1]
 80090b0:	2b2a      	cmp	r3, #42	@ 0x2a
 80090b2:	d132      	bne.n	800911a <_svfiprintf_r+0x186>
 80090b4:	9b03      	ldr	r3, [sp, #12]
 80090b6:	1d1a      	adds	r2, r3, #4
 80090b8:	681b      	ldr	r3, [r3, #0]
 80090ba:	9203      	str	r2, [sp, #12]
 80090bc:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80090c0:	3402      	adds	r4, #2
 80090c2:	9305      	str	r3, [sp, #20]
 80090c4:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8009188 <_svfiprintf_r+0x1f4>
 80090c8:	7821      	ldrb	r1, [r4, #0]
 80090ca:	2203      	movs	r2, #3
 80090cc:	4650      	mov	r0, sl
 80090ce:	f7f7 f8a7 	bl	8000220 <memchr>
 80090d2:	b138      	cbz	r0, 80090e4 <_svfiprintf_r+0x150>
 80090d4:	9b04      	ldr	r3, [sp, #16]
 80090d6:	eba0 000a 	sub.w	r0, r0, sl
 80090da:	2240      	movs	r2, #64	@ 0x40
 80090dc:	4082      	lsls	r2, r0
 80090de:	4313      	orrs	r3, r2
 80090e0:	3401      	adds	r4, #1
 80090e2:	9304      	str	r3, [sp, #16]
 80090e4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80090e8:	4824      	ldr	r0, [pc, #144]	@ (800917c <_svfiprintf_r+0x1e8>)
 80090ea:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80090ee:	2206      	movs	r2, #6
 80090f0:	f7f7 f896 	bl	8000220 <memchr>
 80090f4:	2800      	cmp	r0, #0
 80090f6:	d036      	beq.n	8009166 <_svfiprintf_r+0x1d2>
 80090f8:	4b21      	ldr	r3, [pc, #132]	@ (8009180 <_svfiprintf_r+0x1ec>)
 80090fa:	bb1b      	cbnz	r3, 8009144 <_svfiprintf_r+0x1b0>
 80090fc:	9b03      	ldr	r3, [sp, #12]
 80090fe:	3307      	adds	r3, #7
 8009100:	f023 0307 	bic.w	r3, r3, #7
 8009104:	3308      	adds	r3, #8
 8009106:	9303      	str	r3, [sp, #12]
 8009108:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800910a:	4433      	add	r3, r6
 800910c:	9309      	str	r3, [sp, #36]	@ 0x24
 800910e:	e76a      	b.n	8008fe6 <_svfiprintf_r+0x52>
 8009110:	fb0c 3202 	mla	r2, ip, r2, r3
 8009114:	460c      	mov	r4, r1
 8009116:	2001      	movs	r0, #1
 8009118:	e7a8      	b.n	800906c <_svfiprintf_r+0xd8>
 800911a:	2300      	movs	r3, #0
 800911c:	3401      	adds	r4, #1
 800911e:	9305      	str	r3, [sp, #20]
 8009120:	4619      	mov	r1, r3
 8009122:	f04f 0c0a 	mov.w	ip, #10
 8009126:	4620      	mov	r0, r4
 8009128:	f810 2b01 	ldrb.w	r2, [r0], #1
 800912c:	3a30      	subs	r2, #48	@ 0x30
 800912e:	2a09      	cmp	r2, #9
 8009130:	d903      	bls.n	800913a <_svfiprintf_r+0x1a6>
 8009132:	2b00      	cmp	r3, #0
 8009134:	d0c6      	beq.n	80090c4 <_svfiprintf_r+0x130>
 8009136:	9105      	str	r1, [sp, #20]
 8009138:	e7c4      	b.n	80090c4 <_svfiprintf_r+0x130>
 800913a:	fb0c 2101 	mla	r1, ip, r1, r2
 800913e:	4604      	mov	r4, r0
 8009140:	2301      	movs	r3, #1
 8009142:	e7f0      	b.n	8009126 <_svfiprintf_r+0x192>
 8009144:	ab03      	add	r3, sp, #12
 8009146:	9300      	str	r3, [sp, #0]
 8009148:	462a      	mov	r2, r5
 800914a:	4b0e      	ldr	r3, [pc, #56]	@ (8009184 <_svfiprintf_r+0x1f0>)
 800914c:	a904      	add	r1, sp, #16
 800914e:	4638      	mov	r0, r7
 8009150:	f3af 8000 	nop.w
 8009154:	1c42      	adds	r2, r0, #1
 8009156:	4606      	mov	r6, r0
 8009158:	d1d6      	bne.n	8009108 <_svfiprintf_r+0x174>
 800915a:	89ab      	ldrh	r3, [r5, #12]
 800915c:	065b      	lsls	r3, r3, #25
 800915e:	f53f af2d 	bmi.w	8008fbc <_svfiprintf_r+0x28>
 8009162:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8009164:	e72c      	b.n	8008fc0 <_svfiprintf_r+0x2c>
 8009166:	ab03      	add	r3, sp, #12
 8009168:	9300      	str	r3, [sp, #0]
 800916a:	462a      	mov	r2, r5
 800916c:	4b05      	ldr	r3, [pc, #20]	@ (8009184 <_svfiprintf_r+0x1f0>)
 800916e:	a904      	add	r1, sp, #16
 8009170:	4638      	mov	r0, r7
 8009172:	f000 f879 	bl	8009268 <_printf_i>
 8009176:	e7ed      	b.n	8009154 <_svfiprintf_r+0x1c0>
 8009178:	0800aeb9 	.word	0x0800aeb9
 800917c:	0800aec3 	.word	0x0800aec3
 8009180:	00000000 	.word	0x00000000
 8009184:	08008edd 	.word	0x08008edd
 8009188:	0800aebf 	.word	0x0800aebf

0800918c <_printf_common>:
 800918c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009190:	4616      	mov	r6, r2
 8009192:	4698      	mov	r8, r3
 8009194:	688a      	ldr	r2, [r1, #8]
 8009196:	690b      	ldr	r3, [r1, #16]
 8009198:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800919c:	4293      	cmp	r3, r2
 800919e:	bfb8      	it	lt
 80091a0:	4613      	movlt	r3, r2
 80091a2:	6033      	str	r3, [r6, #0]
 80091a4:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80091a8:	4607      	mov	r7, r0
 80091aa:	460c      	mov	r4, r1
 80091ac:	b10a      	cbz	r2, 80091b2 <_printf_common+0x26>
 80091ae:	3301      	adds	r3, #1
 80091b0:	6033      	str	r3, [r6, #0]
 80091b2:	6823      	ldr	r3, [r4, #0]
 80091b4:	0699      	lsls	r1, r3, #26
 80091b6:	bf42      	ittt	mi
 80091b8:	6833      	ldrmi	r3, [r6, #0]
 80091ba:	3302      	addmi	r3, #2
 80091bc:	6033      	strmi	r3, [r6, #0]
 80091be:	6825      	ldr	r5, [r4, #0]
 80091c0:	f015 0506 	ands.w	r5, r5, #6
 80091c4:	d106      	bne.n	80091d4 <_printf_common+0x48>
 80091c6:	f104 0a19 	add.w	sl, r4, #25
 80091ca:	68e3      	ldr	r3, [r4, #12]
 80091cc:	6832      	ldr	r2, [r6, #0]
 80091ce:	1a9b      	subs	r3, r3, r2
 80091d0:	42ab      	cmp	r3, r5
 80091d2:	dc26      	bgt.n	8009222 <_printf_common+0x96>
 80091d4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80091d8:	6822      	ldr	r2, [r4, #0]
 80091da:	3b00      	subs	r3, #0
 80091dc:	bf18      	it	ne
 80091de:	2301      	movne	r3, #1
 80091e0:	0692      	lsls	r2, r2, #26
 80091e2:	d42b      	bmi.n	800923c <_printf_common+0xb0>
 80091e4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80091e8:	4641      	mov	r1, r8
 80091ea:	4638      	mov	r0, r7
 80091ec:	47c8      	blx	r9
 80091ee:	3001      	adds	r0, #1
 80091f0:	d01e      	beq.n	8009230 <_printf_common+0xa4>
 80091f2:	6823      	ldr	r3, [r4, #0]
 80091f4:	6922      	ldr	r2, [r4, #16]
 80091f6:	f003 0306 	and.w	r3, r3, #6
 80091fa:	2b04      	cmp	r3, #4
 80091fc:	bf02      	ittt	eq
 80091fe:	68e5      	ldreq	r5, [r4, #12]
 8009200:	6833      	ldreq	r3, [r6, #0]
 8009202:	1aed      	subeq	r5, r5, r3
 8009204:	68a3      	ldr	r3, [r4, #8]
 8009206:	bf0c      	ite	eq
 8009208:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800920c:	2500      	movne	r5, #0
 800920e:	4293      	cmp	r3, r2
 8009210:	bfc4      	itt	gt
 8009212:	1a9b      	subgt	r3, r3, r2
 8009214:	18ed      	addgt	r5, r5, r3
 8009216:	2600      	movs	r6, #0
 8009218:	341a      	adds	r4, #26
 800921a:	42b5      	cmp	r5, r6
 800921c:	d11a      	bne.n	8009254 <_printf_common+0xc8>
 800921e:	2000      	movs	r0, #0
 8009220:	e008      	b.n	8009234 <_printf_common+0xa8>
 8009222:	2301      	movs	r3, #1
 8009224:	4652      	mov	r2, sl
 8009226:	4641      	mov	r1, r8
 8009228:	4638      	mov	r0, r7
 800922a:	47c8      	blx	r9
 800922c:	3001      	adds	r0, #1
 800922e:	d103      	bne.n	8009238 <_printf_common+0xac>
 8009230:	f04f 30ff 	mov.w	r0, #4294967295
 8009234:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009238:	3501      	adds	r5, #1
 800923a:	e7c6      	b.n	80091ca <_printf_common+0x3e>
 800923c:	18e1      	adds	r1, r4, r3
 800923e:	1c5a      	adds	r2, r3, #1
 8009240:	2030      	movs	r0, #48	@ 0x30
 8009242:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8009246:	4422      	add	r2, r4
 8009248:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800924c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8009250:	3302      	adds	r3, #2
 8009252:	e7c7      	b.n	80091e4 <_printf_common+0x58>
 8009254:	2301      	movs	r3, #1
 8009256:	4622      	mov	r2, r4
 8009258:	4641      	mov	r1, r8
 800925a:	4638      	mov	r0, r7
 800925c:	47c8      	blx	r9
 800925e:	3001      	adds	r0, #1
 8009260:	d0e6      	beq.n	8009230 <_printf_common+0xa4>
 8009262:	3601      	adds	r6, #1
 8009264:	e7d9      	b.n	800921a <_printf_common+0x8e>
	...

08009268 <_printf_i>:
 8009268:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800926c:	7e0f      	ldrb	r7, [r1, #24]
 800926e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8009270:	2f78      	cmp	r7, #120	@ 0x78
 8009272:	4691      	mov	r9, r2
 8009274:	4680      	mov	r8, r0
 8009276:	460c      	mov	r4, r1
 8009278:	469a      	mov	sl, r3
 800927a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800927e:	d807      	bhi.n	8009290 <_printf_i+0x28>
 8009280:	2f62      	cmp	r7, #98	@ 0x62
 8009282:	d80a      	bhi.n	800929a <_printf_i+0x32>
 8009284:	2f00      	cmp	r7, #0
 8009286:	f000 80d2 	beq.w	800942e <_printf_i+0x1c6>
 800928a:	2f58      	cmp	r7, #88	@ 0x58
 800928c:	f000 80b9 	beq.w	8009402 <_printf_i+0x19a>
 8009290:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8009294:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8009298:	e03a      	b.n	8009310 <_printf_i+0xa8>
 800929a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800929e:	2b15      	cmp	r3, #21
 80092a0:	d8f6      	bhi.n	8009290 <_printf_i+0x28>
 80092a2:	a101      	add	r1, pc, #4	@ (adr r1, 80092a8 <_printf_i+0x40>)
 80092a4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80092a8:	08009301 	.word	0x08009301
 80092ac:	08009315 	.word	0x08009315
 80092b0:	08009291 	.word	0x08009291
 80092b4:	08009291 	.word	0x08009291
 80092b8:	08009291 	.word	0x08009291
 80092bc:	08009291 	.word	0x08009291
 80092c0:	08009315 	.word	0x08009315
 80092c4:	08009291 	.word	0x08009291
 80092c8:	08009291 	.word	0x08009291
 80092cc:	08009291 	.word	0x08009291
 80092d0:	08009291 	.word	0x08009291
 80092d4:	08009415 	.word	0x08009415
 80092d8:	0800933f 	.word	0x0800933f
 80092dc:	080093cf 	.word	0x080093cf
 80092e0:	08009291 	.word	0x08009291
 80092e4:	08009291 	.word	0x08009291
 80092e8:	08009437 	.word	0x08009437
 80092ec:	08009291 	.word	0x08009291
 80092f0:	0800933f 	.word	0x0800933f
 80092f4:	08009291 	.word	0x08009291
 80092f8:	08009291 	.word	0x08009291
 80092fc:	080093d7 	.word	0x080093d7
 8009300:	6833      	ldr	r3, [r6, #0]
 8009302:	1d1a      	adds	r2, r3, #4
 8009304:	681b      	ldr	r3, [r3, #0]
 8009306:	6032      	str	r2, [r6, #0]
 8009308:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800930c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8009310:	2301      	movs	r3, #1
 8009312:	e09d      	b.n	8009450 <_printf_i+0x1e8>
 8009314:	6833      	ldr	r3, [r6, #0]
 8009316:	6820      	ldr	r0, [r4, #0]
 8009318:	1d19      	adds	r1, r3, #4
 800931a:	6031      	str	r1, [r6, #0]
 800931c:	0606      	lsls	r6, r0, #24
 800931e:	d501      	bpl.n	8009324 <_printf_i+0xbc>
 8009320:	681d      	ldr	r5, [r3, #0]
 8009322:	e003      	b.n	800932c <_printf_i+0xc4>
 8009324:	0645      	lsls	r5, r0, #25
 8009326:	d5fb      	bpl.n	8009320 <_printf_i+0xb8>
 8009328:	f9b3 5000 	ldrsh.w	r5, [r3]
 800932c:	2d00      	cmp	r5, #0
 800932e:	da03      	bge.n	8009338 <_printf_i+0xd0>
 8009330:	232d      	movs	r3, #45	@ 0x2d
 8009332:	426d      	negs	r5, r5
 8009334:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009338:	4859      	ldr	r0, [pc, #356]	@ (80094a0 <_printf_i+0x238>)
 800933a:	230a      	movs	r3, #10
 800933c:	e011      	b.n	8009362 <_printf_i+0xfa>
 800933e:	6821      	ldr	r1, [r4, #0]
 8009340:	6833      	ldr	r3, [r6, #0]
 8009342:	0608      	lsls	r0, r1, #24
 8009344:	f853 5b04 	ldr.w	r5, [r3], #4
 8009348:	d402      	bmi.n	8009350 <_printf_i+0xe8>
 800934a:	0649      	lsls	r1, r1, #25
 800934c:	bf48      	it	mi
 800934e:	b2ad      	uxthmi	r5, r5
 8009350:	2f6f      	cmp	r7, #111	@ 0x6f
 8009352:	4853      	ldr	r0, [pc, #332]	@ (80094a0 <_printf_i+0x238>)
 8009354:	6033      	str	r3, [r6, #0]
 8009356:	bf14      	ite	ne
 8009358:	230a      	movne	r3, #10
 800935a:	2308      	moveq	r3, #8
 800935c:	2100      	movs	r1, #0
 800935e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8009362:	6866      	ldr	r6, [r4, #4]
 8009364:	60a6      	str	r6, [r4, #8]
 8009366:	2e00      	cmp	r6, #0
 8009368:	bfa2      	ittt	ge
 800936a:	6821      	ldrge	r1, [r4, #0]
 800936c:	f021 0104 	bicge.w	r1, r1, #4
 8009370:	6021      	strge	r1, [r4, #0]
 8009372:	b90d      	cbnz	r5, 8009378 <_printf_i+0x110>
 8009374:	2e00      	cmp	r6, #0
 8009376:	d04b      	beq.n	8009410 <_printf_i+0x1a8>
 8009378:	4616      	mov	r6, r2
 800937a:	fbb5 f1f3 	udiv	r1, r5, r3
 800937e:	fb03 5711 	mls	r7, r3, r1, r5
 8009382:	5dc7      	ldrb	r7, [r0, r7]
 8009384:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8009388:	462f      	mov	r7, r5
 800938a:	42bb      	cmp	r3, r7
 800938c:	460d      	mov	r5, r1
 800938e:	d9f4      	bls.n	800937a <_printf_i+0x112>
 8009390:	2b08      	cmp	r3, #8
 8009392:	d10b      	bne.n	80093ac <_printf_i+0x144>
 8009394:	6823      	ldr	r3, [r4, #0]
 8009396:	07df      	lsls	r7, r3, #31
 8009398:	d508      	bpl.n	80093ac <_printf_i+0x144>
 800939a:	6923      	ldr	r3, [r4, #16]
 800939c:	6861      	ldr	r1, [r4, #4]
 800939e:	4299      	cmp	r1, r3
 80093a0:	bfde      	ittt	le
 80093a2:	2330      	movle	r3, #48	@ 0x30
 80093a4:	f806 3c01 	strble.w	r3, [r6, #-1]
 80093a8:	f106 36ff 	addle.w	r6, r6, #4294967295
 80093ac:	1b92      	subs	r2, r2, r6
 80093ae:	6122      	str	r2, [r4, #16]
 80093b0:	f8cd a000 	str.w	sl, [sp]
 80093b4:	464b      	mov	r3, r9
 80093b6:	aa03      	add	r2, sp, #12
 80093b8:	4621      	mov	r1, r4
 80093ba:	4640      	mov	r0, r8
 80093bc:	f7ff fee6 	bl	800918c <_printf_common>
 80093c0:	3001      	adds	r0, #1
 80093c2:	d14a      	bne.n	800945a <_printf_i+0x1f2>
 80093c4:	f04f 30ff 	mov.w	r0, #4294967295
 80093c8:	b004      	add	sp, #16
 80093ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80093ce:	6823      	ldr	r3, [r4, #0]
 80093d0:	f043 0320 	orr.w	r3, r3, #32
 80093d4:	6023      	str	r3, [r4, #0]
 80093d6:	4833      	ldr	r0, [pc, #204]	@ (80094a4 <_printf_i+0x23c>)
 80093d8:	2778      	movs	r7, #120	@ 0x78
 80093da:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80093de:	6823      	ldr	r3, [r4, #0]
 80093e0:	6831      	ldr	r1, [r6, #0]
 80093e2:	061f      	lsls	r7, r3, #24
 80093e4:	f851 5b04 	ldr.w	r5, [r1], #4
 80093e8:	d402      	bmi.n	80093f0 <_printf_i+0x188>
 80093ea:	065f      	lsls	r7, r3, #25
 80093ec:	bf48      	it	mi
 80093ee:	b2ad      	uxthmi	r5, r5
 80093f0:	6031      	str	r1, [r6, #0]
 80093f2:	07d9      	lsls	r1, r3, #31
 80093f4:	bf44      	itt	mi
 80093f6:	f043 0320 	orrmi.w	r3, r3, #32
 80093fa:	6023      	strmi	r3, [r4, #0]
 80093fc:	b11d      	cbz	r5, 8009406 <_printf_i+0x19e>
 80093fe:	2310      	movs	r3, #16
 8009400:	e7ac      	b.n	800935c <_printf_i+0xf4>
 8009402:	4827      	ldr	r0, [pc, #156]	@ (80094a0 <_printf_i+0x238>)
 8009404:	e7e9      	b.n	80093da <_printf_i+0x172>
 8009406:	6823      	ldr	r3, [r4, #0]
 8009408:	f023 0320 	bic.w	r3, r3, #32
 800940c:	6023      	str	r3, [r4, #0]
 800940e:	e7f6      	b.n	80093fe <_printf_i+0x196>
 8009410:	4616      	mov	r6, r2
 8009412:	e7bd      	b.n	8009390 <_printf_i+0x128>
 8009414:	6833      	ldr	r3, [r6, #0]
 8009416:	6825      	ldr	r5, [r4, #0]
 8009418:	6961      	ldr	r1, [r4, #20]
 800941a:	1d18      	adds	r0, r3, #4
 800941c:	6030      	str	r0, [r6, #0]
 800941e:	062e      	lsls	r6, r5, #24
 8009420:	681b      	ldr	r3, [r3, #0]
 8009422:	d501      	bpl.n	8009428 <_printf_i+0x1c0>
 8009424:	6019      	str	r1, [r3, #0]
 8009426:	e002      	b.n	800942e <_printf_i+0x1c6>
 8009428:	0668      	lsls	r0, r5, #25
 800942a:	d5fb      	bpl.n	8009424 <_printf_i+0x1bc>
 800942c:	8019      	strh	r1, [r3, #0]
 800942e:	2300      	movs	r3, #0
 8009430:	6123      	str	r3, [r4, #16]
 8009432:	4616      	mov	r6, r2
 8009434:	e7bc      	b.n	80093b0 <_printf_i+0x148>
 8009436:	6833      	ldr	r3, [r6, #0]
 8009438:	1d1a      	adds	r2, r3, #4
 800943a:	6032      	str	r2, [r6, #0]
 800943c:	681e      	ldr	r6, [r3, #0]
 800943e:	6862      	ldr	r2, [r4, #4]
 8009440:	2100      	movs	r1, #0
 8009442:	4630      	mov	r0, r6
 8009444:	f7f6 feec 	bl	8000220 <memchr>
 8009448:	b108      	cbz	r0, 800944e <_printf_i+0x1e6>
 800944a:	1b80      	subs	r0, r0, r6
 800944c:	6060      	str	r0, [r4, #4]
 800944e:	6863      	ldr	r3, [r4, #4]
 8009450:	6123      	str	r3, [r4, #16]
 8009452:	2300      	movs	r3, #0
 8009454:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009458:	e7aa      	b.n	80093b0 <_printf_i+0x148>
 800945a:	6923      	ldr	r3, [r4, #16]
 800945c:	4632      	mov	r2, r6
 800945e:	4649      	mov	r1, r9
 8009460:	4640      	mov	r0, r8
 8009462:	47d0      	blx	sl
 8009464:	3001      	adds	r0, #1
 8009466:	d0ad      	beq.n	80093c4 <_printf_i+0x15c>
 8009468:	6823      	ldr	r3, [r4, #0]
 800946a:	079b      	lsls	r3, r3, #30
 800946c:	d413      	bmi.n	8009496 <_printf_i+0x22e>
 800946e:	68e0      	ldr	r0, [r4, #12]
 8009470:	9b03      	ldr	r3, [sp, #12]
 8009472:	4298      	cmp	r0, r3
 8009474:	bfb8      	it	lt
 8009476:	4618      	movlt	r0, r3
 8009478:	e7a6      	b.n	80093c8 <_printf_i+0x160>
 800947a:	2301      	movs	r3, #1
 800947c:	4632      	mov	r2, r6
 800947e:	4649      	mov	r1, r9
 8009480:	4640      	mov	r0, r8
 8009482:	47d0      	blx	sl
 8009484:	3001      	adds	r0, #1
 8009486:	d09d      	beq.n	80093c4 <_printf_i+0x15c>
 8009488:	3501      	adds	r5, #1
 800948a:	68e3      	ldr	r3, [r4, #12]
 800948c:	9903      	ldr	r1, [sp, #12]
 800948e:	1a5b      	subs	r3, r3, r1
 8009490:	42ab      	cmp	r3, r5
 8009492:	dcf2      	bgt.n	800947a <_printf_i+0x212>
 8009494:	e7eb      	b.n	800946e <_printf_i+0x206>
 8009496:	2500      	movs	r5, #0
 8009498:	f104 0619 	add.w	r6, r4, #25
 800949c:	e7f5      	b.n	800948a <_printf_i+0x222>
 800949e:	bf00      	nop
 80094a0:	0800aeca 	.word	0x0800aeca
 80094a4:	0800aedb 	.word	0x0800aedb

080094a8 <__sflush_r>:
 80094a8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80094ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80094b0:	0716      	lsls	r6, r2, #28
 80094b2:	4605      	mov	r5, r0
 80094b4:	460c      	mov	r4, r1
 80094b6:	d454      	bmi.n	8009562 <__sflush_r+0xba>
 80094b8:	684b      	ldr	r3, [r1, #4]
 80094ba:	2b00      	cmp	r3, #0
 80094bc:	dc02      	bgt.n	80094c4 <__sflush_r+0x1c>
 80094be:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80094c0:	2b00      	cmp	r3, #0
 80094c2:	dd48      	ble.n	8009556 <__sflush_r+0xae>
 80094c4:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80094c6:	2e00      	cmp	r6, #0
 80094c8:	d045      	beq.n	8009556 <__sflush_r+0xae>
 80094ca:	2300      	movs	r3, #0
 80094cc:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80094d0:	682f      	ldr	r7, [r5, #0]
 80094d2:	6a21      	ldr	r1, [r4, #32]
 80094d4:	602b      	str	r3, [r5, #0]
 80094d6:	d030      	beq.n	800953a <__sflush_r+0x92>
 80094d8:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80094da:	89a3      	ldrh	r3, [r4, #12]
 80094dc:	0759      	lsls	r1, r3, #29
 80094de:	d505      	bpl.n	80094ec <__sflush_r+0x44>
 80094e0:	6863      	ldr	r3, [r4, #4]
 80094e2:	1ad2      	subs	r2, r2, r3
 80094e4:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80094e6:	b10b      	cbz	r3, 80094ec <__sflush_r+0x44>
 80094e8:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80094ea:	1ad2      	subs	r2, r2, r3
 80094ec:	2300      	movs	r3, #0
 80094ee:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80094f0:	6a21      	ldr	r1, [r4, #32]
 80094f2:	4628      	mov	r0, r5
 80094f4:	47b0      	blx	r6
 80094f6:	1c43      	adds	r3, r0, #1
 80094f8:	89a3      	ldrh	r3, [r4, #12]
 80094fa:	d106      	bne.n	800950a <__sflush_r+0x62>
 80094fc:	6829      	ldr	r1, [r5, #0]
 80094fe:	291d      	cmp	r1, #29
 8009500:	d82b      	bhi.n	800955a <__sflush_r+0xb2>
 8009502:	4a2a      	ldr	r2, [pc, #168]	@ (80095ac <__sflush_r+0x104>)
 8009504:	410a      	asrs	r2, r1
 8009506:	07d6      	lsls	r6, r2, #31
 8009508:	d427      	bmi.n	800955a <__sflush_r+0xb2>
 800950a:	2200      	movs	r2, #0
 800950c:	6062      	str	r2, [r4, #4]
 800950e:	04d9      	lsls	r1, r3, #19
 8009510:	6922      	ldr	r2, [r4, #16]
 8009512:	6022      	str	r2, [r4, #0]
 8009514:	d504      	bpl.n	8009520 <__sflush_r+0x78>
 8009516:	1c42      	adds	r2, r0, #1
 8009518:	d101      	bne.n	800951e <__sflush_r+0x76>
 800951a:	682b      	ldr	r3, [r5, #0]
 800951c:	b903      	cbnz	r3, 8009520 <__sflush_r+0x78>
 800951e:	6560      	str	r0, [r4, #84]	@ 0x54
 8009520:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8009522:	602f      	str	r7, [r5, #0]
 8009524:	b1b9      	cbz	r1, 8009556 <__sflush_r+0xae>
 8009526:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800952a:	4299      	cmp	r1, r3
 800952c:	d002      	beq.n	8009534 <__sflush_r+0x8c>
 800952e:	4628      	mov	r0, r5
 8009530:	f7fe fd58 	bl	8007fe4 <_free_r>
 8009534:	2300      	movs	r3, #0
 8009536:	6363      	str	r3, [r4, #52]	@ 0x34
 8009538:	e00d      	b.n	8009556 <__sflush_r+0xae>
 800953a:	2301      	movs	r3, #1
 800953c:	4628      	mov	r0, r5
 800953e:	47b0      	blx	r6
 8009540:	4602      	mov	r2, r0
 8009542:	1c50      	adds	r0, r2, #1
 8009544:	d1c9      	bne.n	80094da <__sflush_r+0x32>
 8009546:	682b      	ldr	r3, [r5, #0]
 8009548:	2b00      	cmp	r3, #0
 800954a:	d0c6      	beq.n	80094da <__sflush_r+0x32>
 800954c:	2b1d      	cmp	r3, #29
 800954e:	d001      	beq.n	8009554 <__sflush_r+0xac>
 8009550:	2b16      	cmp	r3, #22
 8009552:	d11e      	bne.n	8009592 <__sflush_r+0xea>
 8009554:	602f      	str	r7, [r5, #0]
 8009556:	2000      	movs	r0, #0
 8009558:	e022      	b.n	80095a0 <__sflush_r+0xf8>
 800955a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800955e:	b21b      	sxth	r3, r3
 8009560:	e01b      	b.n	800959a <__sflush_r+0xf2>
 8009562:	690f      	ldr	r7, [r1, #16]
 8009564:	2f00      	cmp	r7, #0
 8009566:	d0f6      	beq.n	8009556 <__sflush_r+0xae>
 8009568:	0793      	lsls	r3, r2, #30
 800956a:	680e      	ldr	r6, [r1, #0]
 800956c:	bf08      	it	eq
 800956e:	694b      	ldreq	r3, [r1, #20]
 8009570:	600f      	str	r7, [r1, #0]
 8009572:	bf18      	it	ne
 8009574:	2300      	movne	r3, #0
 8009576:	eba6 0807 	sub.w	r8, r6, r7
 800957a:	608b      	str	r3, [r1, #8]
 800957c:	f1b8 0f00 	cmp.w	r8, #0
 8009580:	dde9      	ble.n	8009556 <__sflush_r+0xae>
 8009582:	6a21      	ldr	r1, [r4, #32]
 8009584:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8009586:	4643      	mov	r3, r8
 8009588:	463a      	mov	r2, r7
 800958a:	4628      	mov	r0, r5
 800958c:	47b0      	blx	r6
 800958e:	2800      	cmp	r0, #0
 8009590:	dc08      	bgt.n	80095a4 <__sflush_r+0xfc>
 8009592:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009596:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800959a:	81a3      	strh	r3, [r4, #12]
 800959c:	f04f 30ff 	mov.w	r0, #4294967295
 80095a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80095a4:	4407      	add	r7, r0
 80095a6:	eba8 0800 	sub.w	r8, r8, r0
 80095aa:	e7e7      	b.n	800957c <__sflush_r+0xd4>
 80095ac:	dfbffffe 	.word	0xdfbffffe

080095b0 <_fflush_r>:
 80095b0:	b538      	push	{r3, r4, r5, lr}
 80095b2:	690b      	ldr	r3, [r1, #16]
 80095b4:	4605      	mov	r5, r0
 80095b6:	460c      	mov	r4, r1
 80095b8:	b913      	cbnz	r3, 80095c0 <_fflush_r+0x10>
 80095ba:	2500      	movs	r5, #0
 80095bc:	4628      	mov	r0, r5
 80095be:	bd38      	pop	{r3, r4, r5, pc}
 80095c0:	b118      	cbz	r0, 80095ca <_fflush_r+0x1a>
 80095c2:	6a03      	ldr	r3, [r0, #32]
 80095c4:	b90b      	cbnz	r3, 80095ca <_fflush_r+0x1a>
 80095c6:	f7fe fbf1 	bl	8007dac <__sinit>
 80095ca:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80095ce:	2b00      	cmp	r3, #0
 80095d0:	d0f3      	beq.n	80095ba <_fflush_r+0xa>
 80095d2:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80095d4:	07d0      	lsls	r0, r2, #31
 80095d6:	d404      	bmi.n	80095e2 <_fflush_r+0x32>
 80095d8:	0599      	lsls	r1, r3, #22
 80095da:	d402      	bmi.n	80095e2 <_fflush_r+0x32>
 80095dc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80095de:	f7fe fcf8 	bl	8007fd2 <__retarget_lock_acquire_recursive>
 80095e2:	4628      	mov	r0, r5
 80095e4:	4621      	mov	r1, r4
 80095e6:	f7ff ff5f 	bl	80094a8 <__sflush_r>
 80095ea:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80095ec:	07da      	lsls	r2, r3, #31
 80095ee:	4605      	mov	r5, r0
 80095f0:	d4e4      	bmi.n	80095bc <_fflush_r+0xc>
 80095f2:	89a3      	ldrh	r3, [r4, #12]
 80095f4:	059b      	lsls	r3, r3, #22
 80095f6:	d4e1      	bmi.n	80095bc <_fflush_r+0xc>
 80095f8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80095fa:	f7fe fceb 	bl	8007fd4 <__retarget_lock_release_recursive>
 80095fe:	e7dd      	b.n	80095bc <_fflush_r+0xc>

08009600 <memmove>:
 8009600:	4288      	cmp	r0, r1
 8009602:	b510      	push	{r4, lr}
 8009604:	eb01 0402 	add.w	r4, r1, r2
 8009608:	d902      	bls.n	8009610 <memmove+0x10>
 800960a:	4284      	cmp	r4, r0
 800960c:	4623      	mov	r3, r4
 800960e:	d807      	bhi.n	8009620 <memmove+0x20>
 8009610:	1e43      	subs	r3, r0, #1
 8009612:	42a1      	cmp	r1, r4
 8009614:	d008      	beq.n	8009628 <memmove+0x28>
 8009616:	f811 2b01 	ldrb.w	r2, [r1], #1
 800961a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800961e:	e7f8      	b.n	8009612 <memmove+0x12>
 8009620:	4402      	add	r2, r0
 8009622:	4601      	mov	r1, r0
 8009624:	428a      	cmp	r2, r1
 8009626:	d100      	bne.n	800962a <memmove+0x2a>
 8009628:	bd10      	pop	{r4, pc}
 800962a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800962e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8009632:	e7f7      	b.n	8009624 <memmove+0x24>

08009634 <strncmp>:
 8009634:	b510      	push	{r4, lr}
 8009636:	b16a      	cbz	r2, 8009654 <strncmp+0x20>
 8009638:	3901      	subs	r1, #1
 800963a:	1884      	adds	r4, r0, r2
 800963c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009640:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8009644:	429a      	cmp	r2, r3
 8009646:	d103      	bne.n	8009650 <strncmp+0x1c>
 8009648:	42a0      	cmp	r0, r4
 800964a:	d001      	beq.n	8009650 <strncmp+0x1c>
 800964c:	2a00      	cmp	r2, #0
 800964e:	d1f5      	bne.n	800963c <strncmp+0x8>
 8009650:	1ad0      	subs	r0, r2, r3
 8009652:	bd10      	pop	{r4, pc}
 8009654:	4610      	mov	r0, r2
 8009656:	e7fc      	b.n	8009652 <strncmp+0x1e>

08009658 <_sbrk_r>:
 8009658:	b538      	push	{r3, r4, r5, lr}
 800965a:	4d06      	ldr	r5, [pc, #24]	@ (8009674 <_sbrk_r+0x1c>)
 800965c:	2300      	movs	r3, #0
 800965e:	4604      	mov	r4, r0
 8009660:	4608      	mov	r0, r1
 8009662:	602b      	str	r3, [r5, #0]
 8009664:	f7f8 fb18 	bl	8001c98 <_sbrk>
 8009668:	1c43      	adds	r3, r0, #1
 800966a:	d102      	bne.n	8009672 <_sbrk_r+0x1a>
 800966c:	682b      	ldr	r3, [r5, #0]
 800966e:	b103      	cbz	r3, 8009672 <_sbrk_r+0x1a>
 8009670:	6023      	str	r3, [r4, #0]
 8009672:	bd38      	pop	{r3, r4, r5, pc}
 8009674:	2000055c 	.word	0x2000055c

08009678 <memcpy>:
 8009678:	440a      	add	r2, r1
 800967a:	4291      	cmp	r1, r2
 800967c:	f100 33ff 	add.w	r3, r0, #4294967295
 8009680:	d100      	bne.n	8009684 <memcpy+0xc>
 8009682:	4770      	bx	lr
 8009684:	b510      	push	{r4, lr}
 8009686:	f811 4b01 	ldrb.w	r4, [r1], #1
 800968a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800968e:	4291      	cmp	r1, r2
 8009690:	d1f9      	bne.n	8009686 <memcpy+0xe>
 8009692:	bd10      	pop	{r4, pc}
 8009694:	0000      	movs	r0, r0
	...

08009698 <nan>:
 8009698:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 80096a0 <nan+0x8>
 800969c:	4770      	bx	lr
 800969e:	bf00      	nop
 80096a0:	00000000 	.word	0x00000000
 80096a4:	7ff80000 	.word	0x7ff80000

080096a8 <rshift>:
 80096a8:	6903      	ldr	r3, [r0, #16]
 80096aa:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 80096ae:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80096b2:	ea4f 1261 	mov.w	r2, r1, asr #5
 80096b6:	f100 0414 	add.w	r4, r0, #20
 80096ba:	dd45      	ble.n	8009748 <rshift+0xa0>
 80096bc:	f011 011f 	ands.w	r1, r1, #31
 80096c0:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 80096c4:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 80096c8:	d10c      	bne.n	80096e4 <rshift+0x3c>
 80096ca:	f100 0710 	add.w	r7, r0, #16
 80096ce:	4629      	mov	r1, r5
 80096d0:	42b1      	cmp	r1, r6
 80096d2:	d334      	bcc.n	800973e <rshift+0x96>
 80096d4:	1a9b      	subs	r3, r3, r2
 80096d6:	009b      	lsls	r3, r3, #2
 80096d8:	1eea      	subs	r2, r5, #3
 80096da:	4296      	cmp	r6, r2
 80096dc:	bf38      	it	cc
 80096de:	2300      	movcc	r3, #0
 80096e0:	4423      	add	r3, r4
 80096e2:	e015      	b.n	8009710 <rshift+0x68>
 80096e4:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 80096e8:	f1c1 0820 	rsb	r8, r1, #32
 80096ec:	40cf      	lsrs	r7, r1
 80096ee:	f105 0e04 	add.w	lr, r5, #4
 80096f2:	46a1      	mov	r9, r4
 80096f4:	4576      	cmp	r6, lr
 80096f6:	46f4      	mov	ip, lr
 80096f8:	d815      	bhi.n	8009726 <rshift+0x7e>
 80096fa:	1a9a      	subs	r2, r3, r2
 80096fc:	0092      	lsls	r2, r2, #2
 80096fe:	3a04      	subs	r2, #4
 8009700:	3501      	adds	r5, #1
 8009702:	42ae      	cmp	r6, r5
 8009704:	bf38      	it	cc
 8009706:	2200      	movcc	r2, #0
 8009708:	18a3      	adds	r3, r4, r2
 800970a:	50a7      	str	r7, [r4, r2]
 800970c:	b107      	cbz	r7, 8009710 <rshift+0x68>
 800970e:	3304      	adds	r3, #4
 8009710:	1b1a      	subs	r2, r3, r4
 8009712:	42a3      	cmp	r3, r4
 8009714:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8009718:	bf08      	it	eq
 800971a:	2300      	moveq	r3, #0
 800971c:	6102      	str	r2, [r0, #16]
 800971e:	bf08      	it	eq
 8009720:	6143      	streq	r3, [r0, #20]
 8009722:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009726:	f8dc c000 	ldr.w	ip, [ip]
 800972a:	fa0c fc08 	lsl.w	ip, ip, r8
 800972e:	ea4c 0707 	orr.w	r7, ip, r7
 8009732:	f849 7b04 	str.w	r7, [r9], #4
 8009736:	f85e 7b04 	ldr.w	r7, [lr], #4
 800973a:	40cf      	lsrs	r7, r1
 800973c:	e7da      	b.n	80096f4 <rshift+0x4c>
 800973e:	f851 cb04 	ldr.w	ip, [r1], #4
 8009742:	f847 cf04 	str.w	ip, [r7, #4]!
 8009746:	e7c3      	b.n	80096d0 <rshift+0x28>
 8009748:	4623      	mov	r3, r4
 800974a:	e7e1      	b.n	8009710 <rshift+0x68>

0800974c <__hexdig_fun>:
 800974c:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 8009750:	2b09      	cmp	r3, #9
 8009752:	d802      	bhi.n	800975a <__hexdig_fun+0xe>
 8009754:	3820      	subs	r0, #32
 8009756:	b2c0      	uxtb	r0, r0
 8009758:	4770      	bx	lr
 800975a:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 800975e:	2b05      	cmp	r3, #5
 8009760:	d801      	bhi.n	8009766 <__hexdig_fun+0x1a>
 8009762:	3847      	subs	r0, #71	@ 0x47
 8009764:	e7f7      	b.n	8009756 <__hexdig_fun+0xa>
 8009766:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 800976a:	2b05      	cmp	r3, #5
 800976c:	d801      	bhi.n	8009772 <__hexdig_fun+0x26>
 800976e:	3827      	subs	r0, #39	@ 0x27
 8009770:	e7f1      	b.n	8009756 <__hexdig_fun+0xa>
 8009772:	2000      	movs	r0, #0
 8009774:	4770      	bx	lr
	...

08009778 <__gethex>:
 8009778:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800977c:	b085      	sub	sp, #20
 800977e:	468a      	mov	sl, r1
 8009780:	9302      	str	r3, [sp, #8]
 8009782:	680b      	ldr	r3, [r1, #0]
 8009784:	9001      	str	r0, [sp, #4]
 8009786:	4690      	mov	r8, r2
 8009788:	1c9c      	adds	r4, r3, #2
 800978a:	46a1      	mov	r9, r4
 800978c:	f814 0b01 	ldrb.w	r0, [r4], #1
 8009790:	2830      	cmp	r0, #48	@ 0x30
 8009792:	d0fa      	beq.n	800978a <__gethex+0x12>
 8009794:	eba9 0303 	sub.w	r3, r9, r3
 8009798:	f1a3 0b02 	sub.w	fp, r3, #2
 800979c:	f7ff ffd6 	bl	800974c <__hexdig_fun>
 80097a0:	4605      	mov	r5, r0
 80097a2:	2800      	cmp	r0, #0
 80097a4:	d168      	bne.n	8009878 <__gethex+0x100>
 80097a6:	49a0      	ldr	r1, [pc, #640]	@ (8009a28 <__gethex+0x2b0>)
 80097a8:	2201      	movs	r2, #1
 80097aa:	4648      	mov	r0, r9
 80097ac:	f7ff ff42 	bl	8009634 <strncmp>
 80097b0:	4607      	mov	r7, r0
 80097b2:	2800      	cmp	r0, #0
 80097b4:	d167      	bne.n	8009886 <__gethex+0x10e>
 80097b6:	f899 0001 	ldrb.w	r0, [r9, #1]
 80097ba:	4626      	mov	r6, r4
 80097bc:	f7ff ffc6 	bl	800974c <__hexdig_fun>
 80097c0:	2800      	cmp	r0, #0
 80097c2:	d062      	beq.n	800988a <__gethex+0x112>
 80097c4:	4623      	mov	r3, r4
 80097c6:	7818      	ldrb	r0, [r3, #0]
 80097c8:	2830      	cmp	r0, #48	@ 0x30
 80097ca:	4699      	mov	r9, r3
 80097cc:	f103 0301 	add.w	r3, r3, #1
 80097d0:	d0f9      	beq.n	80097c6 <__gethex+0x4e>
 80097d2:	f7ff ffbb 	bl	800974c <__hexdig_fun>
 80097d6:	fab0 f580 	clz	r5, r0
 80097da:	096d      	lsrs	r5, r5, #5
 80097dc:	f04f 0b01 	mov.w	fp, #1
 80097e0:	464a      	mov	r2, r9
 80097e2:	4616      	mov	r6, r2
 80097e4:	3201      	adds	r2, #1
 80097e6:	7830      	ldrb	r0, [r6, #0]
 80097e8:	f7ff ffb0 	bl	800974c <__hexdig_fun>
 80097ec:	2800      	cmp	r0, #0
 80097ee:	d1f8      	bne.n	80097e2 <__gethex+0x6a>
 80097f0:	498d      	ldr	r1, [pc, #564]	@ (8009a28 <__gethex+0x2b0>)
 80097f2:	2201      	movs	r2, #1
 80097f4:	4630      	mov	r0, r6
 80097f6:	f7ff ff1d 	bl	8009634 <strncmp>
 80097fa:	2800      	cmp	r0, #0
 80097fc:	d13f      	bne.n	800987e <__gethex+0x106>
 80097fe:	b944      	cbnz	r4, 8009812 <__gethex+0x9a>
 8009800:	1c74      	adds	r4, r6, #1
 8009802:	4622      	mov	r2, r4
 8009804:	4616      	mov	r6, r2
 8009806:	3201      	adds	r2, #1
 8009808:	7830      	ldrb	r0, [r6, #0]
 800980a:	f7ff ff9f 	bl	800974c <__hexdig_fun>
 800980e:	2800      	cmp	r0, #0
 8009810:	d1f8      	bne.n	8009804 <__gethex+0x8c>
 8009812:	1ba4      	subs	r4, r4, r6
 8009814:	00a7      	lsls	r7, r4, #2
 8009816:	7833      	ldrb	r3, [r6, #0]
 8009818:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 800981c:	2b50      	cmp	r3, #80	@ 0x50
 800981e:	d13e      	bne.n	800989e <__gethex+0x126>
 8009820:	7873      	ldrb	r3, [r6, #1]
 8009822:	2b2b      	cmp	r3, #43	@ 0x2b
 8009824:	d033      	beq.n	800988e <__gethex+0x116>
 8009826:	2b2d      	cmp	r3, #45	@ 0x2d
 8009828:	d034      	beq.n	8009894 <__gethex+0x11c>
 800982a:	1c71      	adds	r1, r6, #1
 800982c:	2400      	movs	r4, #0
 800982e:	7808      	ldrb	r0, [r1, #0]
 8009830:	f7ff ff8c 	bl	800974c <__hexdig_fun>
 8009834:	1e43      	subs	r3, r0, #1
 8009836:	b2db      	uxtb	r3, r3
 8009838:	2b18      	cmp	r3, #24
 800983a:	d830      	bhi.n	800989e <__gethex+0x126>
 800983c:	f1a0 0210 	sub.w	r2, r0, #16
 8009840:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8009844:	f7ff ff82 	bl	800974c <__hexdig_fun>
 8009848:	f100 3cff 	add.w	ip, r0, #4294967295
 800984c:	fa5f fc8c 	uxtb.w	ip, ip
 8009850:	f1bc 0f18 	cmp.w	ip, #24
 8009854:	f04f 030a 	mov.w	r3, #10
 8009858:	d91e      	bls.n	8009898 <__gethex+0x120>
 800985a:	b104      	cbz	r4, 800985e <__gethex+0xe6>
 800985c:	4252      	negs	r2, r2
 800985e:	4417      	add	r7, r2
 8009860:	f8ca 1000 	str.w	r1, [sl]
 8009864:	b1ed      	cbz	r5, 80098a2 <__gethex+0x12a>
 8009866:	f1bb 0f00 	cmp.w	fp, #0
 800986a:	bf0c      	ite	eq
 800986c:	2506      	moveq	r5, #6
 800986e:	2500      	movne	r5, #0
 8009870:	4628      	mov	r0, r5
 8009872:	b005      	add	sp, #20
 8009874:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009878:	2500      	movs	r5, #0
 800987a:	462c      	mov	r4, r5
 800987c:	e7b0      	b.n	80097e0 <__gethex+0x68>
 800987e:	2c00      	cmp	r4, #0
 8009880:	d1c7      	bne.n	8009812 <__gethex+0x9a>
 8009882:	4627      	mov	r7, r4
 8009884:	e7c7      	b.n	8009816 <__gethex+0x9e>
 8009886:	464e      	mov	r6, r9
 8009888:	462f      	mov	r7, r5
 800988a:	2501      	movs	r5, #1
 800988c:	e7c3      	b.n	8009816 <__gethex+0x9e>
 800988e:	2400      	movs	r4, #0
 8009890:	1cb1      	adds	r1, r6, #2
 8009892:	e7cc      	b.n	800982e <__gethex+0xb6>
 8009894:	2401      	movs	r4, #1
 8009896:	e7fb      	b.n	8009890 <__gethex+0x118>
 8009898:	fb03 0002 	mla	r0, r3, r2, r0
 800989c:	e7ce      	b.n	800983c <__gethex+0xc4>
 800989e:	4631      	mov	r1, r6
 80098a0:	e7de      	b.n	8009860 <__gethex+0xe8>
 80098a2:	eba6 0309 	sub.w	r3, r6, r9
 80098a6:	3b01      	subs	r3, #1
 80098a8:	4629      	mov	r1, r5
 80098aa:	2b07      	cmp	r3, #7
 80098ac:	dc0a      	bgt.n	80098c4 <__gethex+0x14c>
 80098ae:	9801      	ldr	r0, [sp, #4]
 80098b0:	f000 fa46 	bl	8009d40 <_Balloc>
 80098b4:	4604      	mov	r4, r0
 80098b6:	b940      	cbnz	r0, 80098ca <__gethex+0x152>
 80098b8:	4b5c      	ldr	r3, [pc, #368]	@ (8009a2c <__gethex+0x2b4>)
 80098ba:	4602      	mov	r2, r0
 80098bc:	21e4      	movs	r1, #228	@ 0xe4
 80098be:	485c      	ldr	r0, [pc, #368]	@ (8009a30 <__gethex+0x2b8>)
 80098c0:	f000 ff2c 	bl	800a71c <__assert_func>
 80098c4:	3101      	adds	r1, #1
 80098c6:	105b      	asrs	r3, r3, #1
 80098c8:	e7ef      	b.n	80098aa <__gethex+0x132>
 80098ca:	f100 0a14 	add.w	sl, r0, #20
 80098ce:	2300      	movs	r3, #0
 80098d0:	4655      	mov	r5, sl
 80098d2:	469b      	mov	fp, r3
 80098d4:	45b1      	cmp	r9, r6
 80098d6:	d337      	bcc.n	8009948 <__gethex+0x1d0>
 80098d8:	f845 bb04 	str.w	fp, [r5], #4
 80098dc:	eba5 050a 	sub.w	r5, r5, sl
 80098e0:	10ad      	asrs	r5, r5, #2
 80098e2:	6125      	str	r5, [r4, #16]
 80098e4:	4658      	mov	r0, fp
 80098e6:	f000 fb1d 	bl	8009f24 <__hi0bits>
 80098ea:	016d      	lsls	r5, r5, #5
 80098ec:	f8d8 6000 	ldr.w	r6, [r8]
 80098f0:	1a2d      	subs	r5, r5, r0
 80098f2:	42b5      	cmp	r5, r6
 80098f4:	dd54      	ble.n	80099a0 <__gethex+0x228>
 80098f6:	1bad      	subs	r5, r5, r6
 80098f8:	4629      	mov	r1, r5
 80098fa:	4620      	mov	r0, r4
 80098fc:	f000 feb1 	bl	800a662 <__any_on>
 8009900:	4681      	mov	r9, r0
 8009902:	b178      	cbz	r0, 8009924 <__gethex+0x1ac>
 8009904:	1e6b      	subs	r3, r5, #1
 8009906:	1159      	asrs	r1, r3, #5
 8009908:	f003 021f 	and.w	r2, r3, #31
 800990c:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 8009910:	f04f 0901 	mov.w	r9, #1
 8009914:	fa09 f202 	lsl.w	r2, r9, r2
 8009918:	420a      	tst	r2, r1
 800991a:	d003      	beq.n	8009924 <__gethex+0x1ac>
 800991c:	454b      	cmp	r3, r9
 800991e:	dc36      	bgt.n	800998e <__gethex+0x216>
 8009920:	f04f 0902 	mov.w	r9, #2
 8009924:	4629      	mov	r1, r5
 8009926:	4620      	mov	r0, r4
 8009928:	f7ff febe 	bl	80096a8 <rshift>
 800992c:	442f      	add	r7, r5
 800992e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8009932:	42bb      	cmp	r3, r7
 8009934:	da42      	bge.n	80099bc <__gethex+0x244>
 8009936:	9801      	ldr	r0, [sp, #4]
 8009938:	4621      	mov	r1, r4
 800993a:	f000 fa41 	bl	8009dc0 <_Bfree>
 800993e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8009940:	2300      	movs	r3, #0
 8009942:	6013      	str	r3, [r2, #0]
 8009944:	25a3      	movs	r5, #163	@ 0xa3
 8009946:	e793      	b.n	8009870 <__gethex+0xf8>
 8009948:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 800994c:	2a2e      	cmp	r2, #46	@ 0x2e
 800994e:	d012      	beq.n	8009976 <__gethex+0x1fe>
 8009950:	2b20      	cmp	r3, #32
 8009952:	d104      	bne.n	800995e <__gethex+0x1e6>
 8009954:	f845 bb04 	str.w	fp, [r5], #4
 8009958:	f04f 0b00 	mov.w	fp, #0
 800995c:	465b      	mov	r3, fp
 800995e:	7830      	ldrb	r0, [r6, #0]
 8009960:	9303      	str	r3, [sp, #12]
 8009962:	f7ff fef3 	bl	800974c <__hexdig_fun>
 8009966:	9b03      	ldr	r3, [sp, #12]
 8009968:	f000 000f 	and.w	r0, r0, #15
 800996c:	4098      	lsls	r0, r3
 800996e:	ea4b 0b00 	orr.w	fp, fp, r0
 8009972:	3304      	adds	r3, #4
 8009974:	e7ae      	b.n	80098d4 <__gethex+0x15c>
 8009976:	45b1      	cmp	r9, r6
 8009978:	d8ea      	bhi.n	8009950 <__gethex+0x1d8>
 800997a:	492b      	ldr	r1, [pc, #172]	@ (8009a28 <__gethex+0x2b0>)
 800997c:	9303      	str	r3, [sp, #12]
 800997e:	2201      	movs	r2, #1
 8009980:	4630      	mov	r0, r6
 8009982:	f7ff fe57 	bl	8009634 <strncmp>
 8009986:	9b03      	ldr	r3, [sp, #12]
 8009988:	2800      	cmp	r0, #0
 800998a:	d1e1      	bne.n	8009950 <__gethex+0x1d8>
 800998c:	e7a2      	b.n	80098d4 <__gethex+0x15c>
 800998e:	1ea9      	subs	r1, r5, #2
 8009990:	4620      	mov	r0, r4
 8009992:	f000 fe66 	bl	800a662 <__any_on>
 8009996:	2800      	cmp	r0, #0
 8009998:	d0c2      	beq.n	8009920 <__gethex+0x1a8>
 800999a:	f04f 0903 	mov.w	r9, #3
 800999e:	e7c1      	b.n	8009924 <__gethex+0x1ac>
 80099a0:	da09      	bge.n	80099b6 <__gethex+0x23e>
 80099a2:	1b75      	subs	r5, r6, r5
 80099a4:	4621      	mov	r1, r4
 80099a6:	9801      	ldr	r0, [sp, #4]
 80099a8:	462a      	mov	r2, r5
 80099aa:	f000 fc21 	bl	800a1f0 <__lshift>
 80099ae:	1b7f      	subs	r7, r7, r5
 80099b0:	4604      	mov	r4, r0
 80099b2:	f100 0a14 	add.w	sl, r0, #20
 80099b6:	f04f 0900 	mov.w	r9, #0
 80099ba:	e7b8      	b.n	800992e <__gethex+0x1b6>
 80099bc:	f8d8 5004 	ldr.w	r5, [r8, #4]
 80099c0:	42bd      	cmp	r5, r7
 80099c2:	dd6f      	ble.n	8009aa4 <__gethex+0x32c>
 80099c4:	1bed      	subs	r5, r5, r7
 80099c6:	42ae      	cmp	r6, r5
 80099c8:	dc34      	bgt.n	8009a34 <__gethex+0x2bc>
 80099ca:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80099ce:	2b02      	cmp	r3, #2
 80099d0:	d022      	beq.n	8009a18 <__gethex+0x2a0>
 80099d2:	2b03      	cmp	r3, #3
 80099d4:	d024      	beq.n	8009a20 <__gethex+0x2a8>
 80099d6:	2b01      	cmp	r3, #1
 80099d8:	d115      	bne.n	8009a06 <__gethex+0x28e>
 80099da:	42ae      	cmp	r6, r5
 80099dc:	d113      	bne.n	8009a06 <__gethex+0x28e>
 80099de:	2e01      	cmp	r6, #1
 80099e0:	d10b      	bne.n	80099fa <__gethex+0x282>
 80099e2:	9a02      	ldr	r2, [sp, #8]
 80099e4:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80099e8:	6013      	str	r3, [r2, #0]
 80099ea:	2301      	movs	r3, #1
 80099ec:	6123      	str	r3, [r4, #16]
 80099ee:	f8ca 3000 	str.w	r3, [sl]
 80099f2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80099f4:	2562      	movs	r5, #98	@ 0x62
 80099f6:	601c      	str	r4, [r3, #0]
 80099f8:	e73a      	b.n	8009870 <__gethex+0xf8>
 80099fa:	1e71      	subs	r1, r6, #1
 80099fc:	4620      	mov	r0, r4
 80099fe:	f000 fe30 	bl	800a662 <__any_on>
 8009a02:	2800      	cmp	r0, #0
 8009a04:	d1ed      	bne.n	80099e2 <__gethex+0x26a>
 8009a06:	9801      	ldr	r0, [sp, #4]
 8009a08:	4621      	mov	r1, r4
 8009a0a:	f000 f9d9 	bl	8009dc0 <_Bfree>
 8009a0e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8009a10:	2300      	movs	r3, #0
 8009a12:	6013      	str	r3, [r2, #0]
 8009a14:	2550      	movs	r5, #80	@ 0x50
 8009a16:	e72b      	b.n	8009870 <__gethex+0xf8>
 8009a18:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009a1a:	2b00      	cmp	r3, #0
 8009a1c:	d1f3      	bne.n	8009a06 <__gethex+0x28e>
 8009a1e:	e7e0      	b.n	80099e2 <__gethex+0x26a>
 8009a20:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009a22:	2b00      	cmp	r3, #0
 8009a24:	d1dd      	bne.n	80099e2 <__gethex+0x26a>
 8009a26:	e7ee      	b.n	8009a06 <__gethex+0x28e>
 8009a28:	0800ad55 	.word	0x0800ad55
 8009a2c:	0800aef4 	.word	0x0800aef4
 8009a30:	0800af05 	.word	0x0800af05
 8009a34:	1e6f      	subs	r7, r5, #1
 8009a36:	f1b9 0f00 	cmp.w	r9, #0
 8009a3a:	d130      	bne.n	8009a9e <__gethex+0x326>
 8009a3c:	b127      	cbz	r7, 8009a48 <__gethex+0x2d0>
 8009a3e:	4639      	mov	r1, r7
 8009a40:	4620      	mov	r0, r4
 8009a42:	f000 fe0e 	bl	800a662 <__any_on>
 8009a46:	4681      	mov	r9, r0
 8009a48:	117a      	asrs	r2, r7, #5
 8009a4a:	2301      	movs	r3, #1
 8009a4c:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 8009a50:	f007 071f 	and.w	r7, r7, #31
 8009a54:	40bb      	lsls	r3, r7
 8009a56:	4213      	tst	r3, r2
 8009a58:	4629      	mov	r1, r5
 8009a5a:	4620      	mov	r0, r4
 8009a5c:	bf18      	it	ne
 8009a5e:	f049 0902 	orrne.w	r9, r9, #2
 8009a62:	f7ff fe21 	bl	80096a8 <rshift>
 8009a66:	f8d8 7004 	ldr.w	r7, [r8, #4]
 8009a6a:	1b76      	subs	r6, r6, r5
 8009a6c:	2502      	movs	r5, #2
 8009a6e:	f1b9 0f00 	cmp.w	r9, #0
 8009a72:	d047      	beq.n	8009b04 <__gethex+0x38c>
 8009a74:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8009a78:	2b02      	cmp	r3, #2
 8009a7a:	d015      	beq.n	8009aa8 <__gethex+0x330>
 8009a7c:	2b03      	cmp	r3, #3
 8009a7e:	d017      	beq.n	8009ab0 <__gethex+0x338>
 8009a80:	2b01      	cmp	r3, #1
 8009a82:	d109      	bne.n	8009a98 <__gethex+0x320>
 8009a84:	f019 0f02 	tst.w	r9, #2
 8009a88:	d006      	beq.n	8009a98 <__gethex+0x320>
 8009a8a:	f8da 3000 	ldr.w	r3, [sl]
 8009a8e:	ea49 0903 	orr.w	r9, r9, r3
 8009a92:	f019 0f01 	tst.w	r9, #1
 8009a96:	d10e      	bne.n	8009ab6 <__gethex+0x33e>
 8009a98:	f045 0510 	orr.w	r5, r5, #16
 8009a9c:	e032      	b.n	8009b04 <__gethex+0x38c>
 8009a9e:	f04f 0901 	mov.w	r9, #1
 8009aa2:	e7d1      	b.n	8009a48 <__gethex+0x2d0>
 8009aa4:	2501      	movs	r5, #1
 8009aa6:	e7e2      	b.n	8009a6e <__gethex+0x2f6>
 8009aa8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009aaa:	f1c3 0301 	rsb	r3, r3, #1
 8009aae:	930f      	str	r3, [sp, #60]	@ 0x3c
 8009ab0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009ab2:	2b00      	cmp	r3, #0
 8009ab4:	d0f0      	beq.n	8009a98 <__gethex+0x320>
 8009ab6:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8009aba:	f104 0314 	add.w	r3, r4, #20
 8009abe:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8009ac2:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8009ac6:	f04f 0c00 	mov.w	ip, #0
 8009aca:	4618      	mov	r0, r3
 8009acc:	f853 2b04 	ldr.w	r2, [r3], #4
 8009ad0:	f1b2 3fff 	cmp.w	r2, #4294967295
 8009ad4:	d01b      	beq.n	8009b0e <__gethex+0x396>
 8009ad6:	3201      	adds	r2, #1
 8009ad8:	6002      	str	r2, [r0, #0]
 8009ada:	2d02      	cmp	r5, #2
 8009adc:	f104 0314 	add.w	r3, r4, #20
 8009ae0:	d13c      	bne.n	8009b5c <__gethex+0x3e4>
 8009ae2:	f8d8 2000 	ldr.w	r2, [r8]
 8009ae6:	3a01      	subs	r2, #1
 8009ae8:	42b2      	cmp	r2, r6
 8009aea:	d109      	bne.n	8009b00 <__gethex+0x388>
 8009aec:	1171      	asrs	r1, r6, #5
 8009aee:	2201      	movs	r2, #1
 8009af0:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8009af4:	f006 061f 	and.w	r6, r6, #31
 8009af8:	fa02 f606 	lsl.w	r6, r2, r6
 8009afc:	421e      	tst	r6, r3
 8009afe:	d13a      	bne.n	8009b76 <__gethex+0x3fe>
 8009b00:	f045 0520 	orr.w	r5, r5, #32
 8009b04:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009b06:	601c      	str	r4, [r3, #0]
 8009b08:	9b02      	ldr	r3, [sp, #8]
 8009b0a:	601f      	str	r7, [r3, #0]
 8009b0c:	e6b0      	b.n	8009870 <__gethex+0xf8>
 8009b0e:	4299      	cmp	r1, r3
 8009b10:	f843 cc04 	str.w	ip, [r3, #-4]
 8009b14:	d8d9      	bhi.n	8009aca <__gethex+0x352>
 8009b16:	68a3      	ldr	r3, [r4, #8]
 8009b18:	459b      	cmp	fp, r3
 8009b1a:	db17      	blt.n	8009b4c <__gethex+0x3d4>
 8009b1c:	6861      	ldr	r1, [r4, #4]
 8009b1e:	9801      	ldr	r0, [sp, #4]
 8009b20:	3101      	adds	r1, #1
 8009b22:	f000 f90d 	bl	8009d40 <_Balloc>
 8009b26:	4681      	mov	r9, r0
 8009b28:	b918      	cbnz	r0, 8009b32 <__gethex+0x3ba>
 8009b2a:	4b1a      	ldr	r3, [pc, #104]	@ (8009b94 <__gethex+0x41c>)
 8009b2c:	4602      	mov	r2, r0
 8009b2e:	2184      	movs	r1, #132	@ 0x84
 8009b30:	e6c5      	b.n	80098be <__gethex+0x146>
 8009b32:	6922      	ldr	r2, [r4, #16]
 8009b34:	3202      	adds	r2, #2
 8009b36:	f104 010c 	add.w	r1, r4, #12
 8009b3a:	0092      	lsls	r2, r2, #2
 8009b3c:	300c      	adds	r0, #12
 8009b3e:	f7ff fd9b 	bl	8009678 <memcpy>
 8009b42:	4621      	mov	r1, r4
 8009b44:	9801      	ldr	r0, [sp, #4]
 8009b46:	f000 f93b 	bl	8009dc0 <_Bfree>
 8009b4a:	464c      	mov	r4, r9
 8009b4c:	6923      	ldr	r3, [r4, #16]
 8009b4e:	1c5a      	adds	r2, r3, #1
 8009b50:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8009b54:	6122      	str	r2, [r4, #16]
 8009b56:	2201      	movs	r2, #1
 8009b58:	615a      	str	r2, [r3, #20]
 8009b5a:	e7be      	b.n	8009ada <__gethex+0x362>
 8009b5c:	6922      	ldr	r2, [r4, #16]
 8009b5e:	455a      	cmp	r2, fp
 8009b60:	dd0b      	ble.n	8009b7a <__gethex+0x402>
 8009b62:	2101      	movs	r1, #1
 8009b64:	4620      	mov	r0, r4
 8009b66:	f7ff fd9f 	bl	80096a8 <rshift>
 8009b6a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8009b6e:	3701      	adds	r7, #1
 8009b70:	42bb      	cmp	r3, r7
 8009b72:	f6ff aee0 	blt.w	8009936 <__gethex+0x1be>
 8009b76:	2501      	movs	r5, #1
 8009b78:	e7c2      	b.n	8009b00 <__gethex+0x388>
 8009b7a:	f016 061f 	ands.w	r6, r6, #31
 8009b7e:	d0fa      	beq.n	8009b76 <__gethex+0x3fe>
 8009b80:	4453      	add	r3, sl
 8009b82:	f1c6 0620 	rsb	r6, r6, #32
 8009b86:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8009b8a:	f000 f9cb 	bl	8009f24 <__hi0bits>
 8009b8e:	42b0      	cmp	r0, r6
 8009b90:	dbe7      	blt.n	8009b62 <__gethex+0x3ea>
 8009b92:	e7f0      	b.n	8009b76 <__gethex+0x3fe>
 8009b94:	0800aef4 	.word	0x0800aef4

08009b98 <L_shift>:
 8009b98:	f1c2 0208 	rsb	r2, r2, #8
 8009b9c:	0092      	lsls	r2, r2, #2
 8009b9e:	b570      	push	{r4, r5, r6, lr}
 8009ba0:	f1c2 0620 	rsb	r6, r2, #32
 8009ba4:	6843      	ldr	r3, [r0, #4]
 8009ba6:	6804      	ldr	r4, [r0, #0]
 8009ba8:	fa03 f506 	lsl.w	r5, r3, r6
 8009bac:	432c      	orrs	r4, r5
 8009bae:	40d3      	lsrs	r3, r2
 8009bb0:	6004      	str	r4, [r0, #0]
 8009bb2:	f840 3f04 	str.w	r3, [r0, #4]!
 8009bb6:	4288      	cmp	r0, r1
 8009bb8:	d3f4      	bcc.n	8009ba4 <L_shift+0xc>
 8009bba:	bd70      	pop	{r4, r5, r6, pc}

08009bbc <__match>:
 8009bbc:	b530      	push	{r4, r5, lr}
 8009bbe:	6803      	ldr	r3, [r0, #0]
 8009bc0:	3301      	adds	r3, #1
 8009bc2:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009bc6:	b914      	cbnz	r4, 8009bce <__match+0x12>
 8009bc8:	6003      	str	r3, [r0, #0]
 8009bca:	2001      	movs	r0, #1
 8009bcc:	bd30      	pop	{r4, r5, pc}
 8009bce:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009bd2:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 8009bd6:	2d19      	cmp	r5, #25
 8009bd8:	bf98      	it	ls
 8009bda:	3220      	addls	r2, #32
 8009bdc:	42a2      	cmp	r2, r4
 8009bde:	d0f0      	beq.n	8009bc2 <__match+0x6>
 8009be0:	2000      	movs	r0, #0
 8009be2:	e7f3      	b.n	8009bcc <__match+0x10>

08009be4 <__hexnan>:
 8009be4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009be8:	680b      	ldr	r3, [r1, #0]
 8009bea:	6801      	ldr	r1, [r0, #0]
 8009bec:	115e      	asrs	r6, r3, #5
 8009bee:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8009bf2:	f013 031f 	ands.w	r3, r3, #31
 8009bf6:	b087      	sub	sp, #28
 8009bf8:	bf18      	it	ne
 8009bfa:	3604      	addne	r6, #4
 8009bfc:	2500      	movs	r5, #0
 8009bfe:	1f37      	subs	r7, r6, #4
 8009c00:	4682      	mov	sl, r0
 8009c02:	4690      	mov	r8, r2
 8009c04:	9301      	str	r3, [sp, #4]
 8009c06:	f846 5c04 	str.w	r5, [r6, #-4]
 8009c0a:	46b9      	mov	r9, r7
 8009c0c:	463c      	mov	r4, r7
 8009c0e:	9502      	str	r5, [sp, #8]
 8009c10:	46ab      	mov	fp, r5
 8009c12:	784a      	ldrb	r2, [r1, #1]
 8009c14:	1c4b      	adds	r3, r1, #1
 8009c16:	9303      	str	r3, [sp, #12]
 8009c18:	b342      	cbz	r2, 8009c6c <__hexnan+0x88>
 8009c1a:	4610      	mov	r0, r2
 8009c1c:	9105      	str	r1, [sp, #20]
 8009c1e:	9204      	str	r2, [sp, #16]
 8009c20:	f7ff fd94 	bl	800974c <__hexdig_fun>
 8009c24:	2800      	cmp	r0, #0
 8009c26:	d151      	bne.n	8009ccc <__hexnan+0xe8>
 8009c28:	9a04      	ldr	r2, [sp, #16]
 8009c2a:	9905      	ldr	r1, [sp, #20]
 8009c2c:	2a20      	cmp	r2, #32
 8009c2e:	d818      	bhi.n	8009c62 <__hexnan+0x7e>
 8009c30:	9b02      	ldr	r3, [sp, #8]
 8009c32:	459b      	cmp	fp, r3
 8009c34:	dd13      	ble.n	8009c5e <__hexnan+0x7a>
 8009c36:	454c      	cmp	r4, r9
 8009c38:	d206      	bcs.n	8009c48 <__hexnan+0x64>
 8009c3a:	2d07      	cmp	r5, #7
 8009c3c:	dc04      	bgt.n	8009c48 <__hexnan+0x64>
 8009c3e:	462a      	mov	r2, r5
 8009c40:	4649      	mov	r1, r9
 8009c42:	4620      	mov	r0, r4
 8009c44:	f7ff ffa8 	bl	8009b98 <L_shift>
 8009c48:	4544      	cmp	r4, r8
 8009c4a:	d952      	bls.n	8009cf2 <__hexnan+0x10e>
 8009c4c:	2300      	movs	r3, #0
 8009c4e:	f1a4 0904 	sub.w	r9, r4, #4
 8009c52:	f844 3c04 	str.w	r3, [r4, #-4]
 8009c56:	f8cd b008 	str.w	fp, [sp, #8]
 8009c5a:	464c      	mov	r4, r9
 8009c5c:	461d      	mov	r5, r3
 8009c5e:	9903      	ldr	r1, [sp, #12]
 8009c60:	e7d7      	b.n	8009c12 <__hexnan+0x2e>
 8009c62:	2a29      	cmp	r2, #41	@ 0x29
 8009c64:	d157      	bne.n	8009d16 <__hexnan+0x132>
 8009c66:	3102      	adds	r1, #2
 8009c68:	f8ca 1000 	str.w	r1, [sl]
 8009c6c:	f1bb 0f00 	cmp.w	fp, #0
 8009c70:	d051      	beq.n	8009d16 <__hexnan+0x132>
 8009c72:	454c      	cmp	r4, r9
 8009c74:	d206      	bcs.n	8009c84 <__hexnan+0xa0>
 8009c76:	2d07      	cmp	r5, #7
 8009c78:	dc04      	bgt.n	8009c84 <__hexnan+0xa0>
 8009c7a:	462a      	mov	r2, r5
 8009c7c:	4649      	mov	r1, r9
 8009c7e:	4620      	mov	r0, r4
 8009c80:	f7ff ff8a 	bl	8009b98 <L_shift>
 8009c84:	4544      	cmp	r4, r8
 8009c86:	d936      	bls.n	8009cf6 <__hexnan+0x112>
 8009c88:	f1a8 0204 	sub.w	r2, r8, #4
 8009c8c:	4623      	mov	r3, r4
 8009c8e:	f853 1b04 	ldr.w	r1, [r3], #4
 8009c92:	f842 1f04 	str.w	r1, [r2, #4]!
 8009c96:	429f      	cmp	r7, r3
 8009c98:	d2f9      	bcs.n	8009c8e <__hexnan+0xaa>
 8009c9a:	1b3b      	subs	r3, r7, r4
 8009c9c:	f023 0303 	bic.w	r3, r3, #3
 8009ca0:	3304      	adds	r3, #4
 8009ca2:	3401      	adds	r4, #1
 8009ca4:	3e03      	subs	r6, #3
 8009ca6:	42b4      	cmp	r4, r6
 8009ca8:	bf88      	it	hi
 8009caa:	2304      	movhi	r3, #4
 8009cac:	4443      	add	r3, r8
 8009cae:	2200      	movs	r2, #0
 8009cb0:	f843 2b04 	str.w	r2, [r3], #4
 8009cb4:	429f      	cmp	r7, r3
 8009cb6:	d2fb      	bcs.n	8009cb0 <__hexnan+0xcc>
 8009cb8:	683b      	ldr	r3, [r7, #0]
 8009cba:	b91b      	cbnz	r3, 8009cc4 <__hexnan+0xe0>
 8009cbc:	4547      	cmp	r7, r8
 8009cbe:	d128      	bne.n	8009d12 <__hexnan+0x12e>
 8009cc0:	2301      	movs	r3, #1
 8009cc2:	603b      	str	r3, [r7, #0]
 8009cc4:	2005      	movs	r0, #5
 8009cc6:	b007      	add	sp, #28
 8009cc8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009ccc:	3501      	adds	r5, #1
 8009cce:	2d08      	cmp	r5, #8
 8009cd0:	f10b 0b01 	add.w	fp, fp, #1
 8009cd4:	dd06      	ble.n	8009ce4 <__hexnan+0x100>
 8009cd6:	4544      	cmp	r4, r8
 8009cd8:	d9c1      	bls.n	8009c5e <__hexnan+0x7a>
 8009cda:	2300      	movs	r3, #0
 8009cdc:	f844 3c04 	str.w	r3, [r4, #-4]
 8009ce0:	2501      	movs	r5, #1
 8009ce2:	3c04      	subs	r4, #4
 8009ce4:	6822      	ldr	r2, [r4, #0]
 8009ce6:	f000 000f 	and.w	r0, r0, #15
 8009cea:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8009cee:	6020      	str	r0, [r4, #0]
 8009cf0:	e7b5      	b.n	8009c5e <__hexnan+0x7a>
 8009cf2:	2508      	movs	r5, #8
 8009cf4:	e7b3      	b.n	8009c5e <__hexnan+0x7a>
 8009cf6:	9b01      	ldr	r3, [sp, #4]
 8009cf8:	2b00      	cmp	r3, #0
 8009cfa:	d0dd      	beq.n	8009cb8 <__hexnan+0xd4>
 8009cfc:	f1c3 0320 	rsb	r3, r3, #32
 8009d00:	f04f 32ff 	mov.w	r2, #4294967295
 8009d04:	40da      	lsrs	r2, r3
 8009d06:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8009d0a:	4013      	ands	r3, r2
 8009d0c:	f846 3c04 	str.w	r3, [r6, #-4]
 8009d10:	e7d2      	b.n	8009cb8 <__hexnan+0xd4>
 8009d12:	3f04      	subs	r7, #4
 8009d14:	e7d0      	b.n	8009cb8 <__hexnan+0xd4>
 8009d16:	2004      	movs	r0, #4
 8009d18:	e7d5      	b.n	8009cc6 <__hexnan+0xe2>

08009d1a <__ascii_mbtowc>:
 8009d1a:	b082      	sub	sp, #8
 8009d1c:	b901      	cbnz	r1, 8009d20 <__ascii_mbtowc+0x6>
 8009d1e:	a901      	add	r1, sp, #4
 8009d20:	b142      	cbz	r2, 8009d34 <__ascii_mbtowc+0x1a>
 8009d22:	b14b      	cbz	r3, 8009d38 <__ascii_mbtowc+0x1e>
 8009d24:	7813      	ldrb	r3, [r2, #0]
 8009d26:	600b      	str	r3, [r1, #0]
 8009d28:	7812      	ldrb	r2, [r2, #0]
 8009d2a:	1e10      	subs	r0, r2, #0
 8009d2c:	bf18      	it	ne
 8009d2e:	2001      	movne	r0, #1
 8009d30:	b002      	add	sp, #8
 8009d32:	4770      	bx	lr
 8009d34:	4610      	mov	r0, r2
 8009d36:	e7fb      	b.n	8009d30 <__ascii_mbtowc+0x16>
 8009d38:	f06f 0001 	mvn.w	r0, #1
 8009d3c:	e7f8      	b.n	8009d30 <__ascii_mbtowc+0x16>
	...

08009d40 <_Balloc>:
 8009d40:	b570      	push	{r4, r5, r6, lr}
 8009d42:	69c6      	ldr	r6, [r0, #28]
 8009d44:	4604      	mov	r4, r0
 8009d46:	460d      	mov	r5, r1
 8009d48:	b976      	cbnz	r6, 8009d68 <_Balloc+0x28>
 8009d4a:	2010      	movs	r0, #16
 8009d4c:	f000 fd18 	bl	800a780 <malloc>
 8009d50:	4602      	mov	r2, r0
 8009d52:	61e0      	str	r0, [r4, #28]
 8009d54:	b920      	cbnz	r0, 8009d60 <_Balloc+0x20>
 8009d56:	4b18      	ldr	r3, [pc, #96]	@ (8009db8 <_Balloc+0x78>)
 8009d58:	4818      	ldr	r0, [pc, #96]	@ (8009dbc <_Balloc+0x7c>)
 8009d5a:	216b      	movs	r1, #107	@ 0x6b
 8009d5c:	f000 fcde 	bl	800a71c <__assert_func>
 8009d60:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009d64:	6006      	str	r6, [r0, #0]
 8009d66:	60c6      	str	r6, [r0, #12]
 8009d68:	69e6      	ldr	r6, [r4, #28]
 8009d6a:	68f3      	ldr	r3, [r6, #12]
 8009d6c:	b183      	cbz	r3, 8009d90 <_Balloc+0x50>
 8009d6e:	69e3      	ldr	r3, [r4, #28]
 8009d70:	68db      	ldr	r3, [r3, #12]
 8009d72:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8009d76:	b9b8      	cbnz	r0, 8009da8 <_Balloc+0x68>
 8009d78:	2101      	movs	r1, #1
 8009d7a:	fa01 f605 	lsl.w	r6, r1, r5
 8009d7e:	1d72      	adds	r2, r6, #5
 8009d80:	0092      	lsls	r2, r2, #2
 8009d82:	4620      	mov	r0, r4
 8009d84:	f000 fce8 	bl	800a758 <_calloc_r>
 8009d88:	b160      	cbz	r0, 8009da4 <_Balloc+0x64>
 8009d8a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8009d8e:	e00e      	b.n	8009dae <_Balloc+0x6e>
 8009d90:	2221      	movs	r2, #33	@ 0x21
 8009d92:	2104      	movs	r1, #4
 8009d94:	4620      	mov	r0, r4
 8009d96:	f000 fcdf 	bl	800a758 <_calloc_r>
 8009d9a:	69e3      	ldr	r3, [r4, #28]
 8009d9c:	60f0      	str	r0, [r6, #12]
 8009d9e:	68db      	ldr	r3, [r3, #12]
 8009da0:	2b00      	cmp	r3, #0
 8009da2:	d1e4      	bne.n	8009d6e <_Balloc+0x2e>
 8009da4:	2000      	movs	r0, #0
 8009da6:	bd70      	pop	{r4, r5, r6, pc}
 8009da8:	6802      	ldr	r2, [r0, #0]
 8009daa:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8009dae:	2300      	movs	r3, #0
 8009db0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8009db4:	e7f7      	b.n	8009da6 <_Balloc+0x66>
 8009db6:	bf00      	nop
 8009db8:	0800af65 	.word	0x0800af65
 8009dbc:	0800af7c 	.word	0x0800af7c

08009dc0 <_Bfree>:
 8009dc0:	b570      	push	{r4, r5, r6, lr}
 8009dc2:	69c6      	ldr	r6, [r0, #28]
 8009dc4:	4605      	mov	r5, r0
 8009dc6:	460c      	mov	r4, r1
 8009dc8:	b976      	cbnz	r6, 8009de8 <_Bfree+0x28>
 8009dca:	2010      	movs	r0, #16
 8009dcc:	f000 fcd8 	bl	800a780 <malloc>
 8009dd0:	4602      	mov	r2, r0
 8009dd2:	61e8      	str	r0, [r5, #28]
 8009dd4:	b920      	cbnz	r0, 8009de0 <_Bfree+0x20>
 8009dd6:	4b09      	ldr	r3, [pc, #36]	@ (8009dfc <_Bfree+0x3c>)
 8009dd8:	4809      	ldr	r0, [pc, #36]	@ (8009e00 <_Bfree+0x40>)
 8009dda:	218f      	movs	r1, #143	@ 0x8f
 8009ddc:	f000 fc9e 	bl	800a71c <__assert_func>
 8009de0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009de4:	6006      	str	r6, [r0, #0]
 8009de6:	60c6      	str	r6, [r0, #12]
 8009de8:	b13c      	cbz	r4, 8009dfa <_Bfree+0x3a>
 8009dea:	69eb      	ldr	r3, [r5, #28]
 8009dec:	6862      	ldr	r2, [r4, #4]
 8009dee:	68db      	ldr	r3, [r3, #12]
 8009df0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8009df4:	6021      	str	r1, [r4, #0]
 8009df6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8009dfa:	bd70      	pop	{r4, r5, r6, pc}
 8009dfc:	0800af65 	.word	0x0800af65
 8009e00:	0800af7c 	.word	0x0800af7c

08009e04 <__multadd>:
 8009e04:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009e08:	690d      	ldr	r5, [r1, #16]
 8009e0a:	4607      	mov	r7, r0
 8009e0c:	460c      	mov	r4, r1
 8009e0e:	461e      	mov	r6, r3
 8009e10:	f101 0c14 	add.w	ip, r1, #20
 8009e14:	2000      	movs	r0, #0
 8009e16:	f8dc 3000 	ldr.w	r3, [ip]
 8009e1a:	b299      	uxth	r1, r3
 8009e1c:	fb02 6101 	mla	r1, r2, r1, r6
 8009e20:	0c1e      	lsrs	r6, r3, #16
 8009e22:	0c0b      	lsrs	r3, r1, #16
 8009e24:	fb02 3306 	mla	r3, r2, r6, r3
 8009e28:	b289      	uxth	r1, r1
 8009e2a:	3001      	adds	r0, #1
 8009e2c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8009e30:	4285      	cmp	r5, r0
 8009e32:	f84c 1b04 	str.w	r1, [ip], #4
 8009e36:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8009e3a:	dcec      	bgt.n	8009e16 <__multadd+0x12>
 8009e3c:	b30e      	cbz	r6, 8009e82 <__multadd+0x7e>
 8009e3e:	68a3      	ldr	r3, [r4, #8]
 8009e40:	42ab      	cmp	r3, r5
 8009e42:	dc19      	bgt.n	8009e78 <__multadd+0x74>
 8009e44:	6861      	ldr	r1, [r4, #4]
 8009e46:	4638      	mov	r0, r7
 8009e48:	3101      	adds	r1, #1
 8009e4a:	f7ff ff79 	bl	8009d40 <_Balloc>
 8009e4e:	4680      	mov	r8, r0
 8009e50:	b928      	cbnz	r0, 8009e5e <__multadd+0x5a>
 8009e52:	4602      	mov	r2, r0
 8009e54:	4b0c      	ldr	r3, [pc, #48]	@ (8009e88 <__multadd+0x84>)
 8009e56:	480d      	ldr	r0, [pc, #52]	@ (8009e8c <__multadd+0x88>)
 8009e58:	21ba      	movs	r1, #186	@ 0xba
 8009e5a:	f000 fc5f 	bl	800a71c <__assert_func>
 8009e5e:	6922      	ldr	r2, [r4, #16]
 8009e60:	3202      	adds	r2, #2
 8009e62:	f104 010c 	add.w	r1, r4, #12
 8009e66:	0092      	lsls	r2, r2, #2
 8009e68:	300c      	adds	r0, #12
 8009e6a:	f7ff fc05 	bl	8009678 <memcpy>
 8009e6e:	4621      	mov	r1, r4
 8009e70:	4638      	mov	r0, r7
 8009e72:	f7ff ffa5 	bl	8009dc0 <_Bfree>
 8009e76:	4644      	mov	r4, r8
 8009e78:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8009e7c:	3501      	adds	r5, #1
 8009e7e:	615e      	str	r6, [r3, #20]
 8009e80:	6125      	str	r5, [r4, #16]
 8009e82:	4620      	mov	r0, r4
 8009e84:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009e88:	0800aef4 	.word	0x0800aef4
 8009e8c:	0800af7c 	.word	0x0800af7c

08009e90 <__s2b>:
 8009e90:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009e94:	460c      	mov	r4, r1
 8009e96:	4615      	mov	r5, r2
 8009e98:	461f      	mov	r7, r3
 8009e9a:	2209      	movs	r2, #9
 8009e9c:	3308      	adds	r3, #8
 8009e9e:	4606      	mov	r6, r0
 8009ea0:	fb93 f3f2 	sdiv	r3, r3, r2
 8009ea4:	2100      	movs	r1, #0
 8009ea6:	2201      	movs	r2, #1
 8009ea8:	429a      	cmp	r2, r3
 8009eaa:	db09      	blt.n	8009ec0 <__s2b+0x30>
 8009eac:	4630      	mov	r0, r6
 8009eae:	f7ff ff47 	bl	8009d40 <_Balloc>
 8009eb2:	b940      	cbnz	r0, 8009ec6 <__s2b+0x36>
 8009eb4:	4602      	mov	r2, r0
 8009eb6:	4b19      	ldr	r3, [pc, #100]	@ (8009f1c <__s2b+0x8c>)
 8009eb8:	4819      	ldr	r0, [pc, #100]	@ (8009f20 <__s2b+0x90>)
 8009eba:	21d3      	movs	r1, #211	@ 0xd3
 8009ebc:	f000 fc2e 	bl	800a71c <__assert_func>
 8009ec0:	0052      	lsls	r2, r2, #1
 8009ec2:	3101      	adds	r1, #1
 8009ec4:	e7f0      	b.n	8009ea8 <__s2b+0x18>
 8009ec6:	9b08      	ldr	r3, [sp, #32]
 8009ec8:	6143      	str	r3, [r0, #20]
 8009eca:	2d09      	cmp	r5, #9
 8009ecc:	f04f 0301 	mov.w	r3, #1
 8009ed0:	6103      	str	r3, [r0, #16]
 8009ed2:	dd16      	ble.n	8009f02 <__s2b+0x72>
 8009ed4:	f104 0909 	add.w	r9, r4, #9
 8009ed8:	46c8      	mov	r8, r9
 8009eda:	442c      	add	r4, r5
 8009edc:	f818 3b01 	ldrb.w	r3, [r8], #1
 8009ee0:	4601      	mov	r1, r0
 8009ee2:	3b30      	subs	r3, #48	@ 0x30
 8009ee4:	220a      	movs	r2, #10
 8009ee6:	4630      	mov	r0, r6
 8009ee8:	f7ff ff8c 	bl	8009e04 <__multadd>
 8009eec:	45a0      	cmp	r8, r4
 8009eee:	d1f5      	bne.n	8009edc <__s2b+0x4c>
 8009ef0:	f1a5 0408 	sub.w	r4, r5, #8
 8009ef4:	444c      	add	r4, r9
 8009ef6:	1b2d      	subs	r5, r5, r4
 8009ef8:	1963      	adds	r3, r4, r5
 8009efa:	42bb      	cmp	r3, r7
 8009efc:	db04      	blt.n	8009f08 <__s2b+0x78>
 8009efe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009f02:	340a      	adds	r4, #10
 8009f04:	2509      	movs	r5, #9
 8009f06:	e7f6      	b.n	8009ef6 <__s2b+0x66>
 8009f08:	f814 3b01 	ldrb.w	r3, [r4], #1
 8009f0c:	4601      	mov	r1, r0
 8009f0e:	3b30      	subs	r3, #48	@ 0x30
 8009f10:	220a      	movs	r2, #10
 8009f12:	4630      	mov	r0, r6
 8009f14:	f7ff ff76 	bl	8009e04 <__multadd>
 8009f18:	e7ee      	b.n	8009ef8 <__s2b+0x68>
 8009f1a:	bf00      	nop
 8009f1c:	0800aef4 	.word	0x0800aef4
 8009f20:	0800af7c 	.word	0x0800af7c

08009f24 <__hi0bits>:
 8009f24:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8009f28:	4603      	mov	r3, r0
 8009f2a:	bf36      	itet	cc
 8009f2c:	0403      	lslcc	r3, r0, #16
 8009f2e:	2000      	movcs	r0, #0
 8009f30:	2010      	movcc	r0, #16
 8009f32:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8009f36:	bf3c      	itt	cc
 8009f38:	021b      	lslcc	r3, r3, #8
 8009f3a:	3008      	addcc	r0, #8
 8009f3c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009f40:	bf3c      	itt	cc
 8009f42:	011b      	lslcc	r3, r3, #4
 8009f44:	3004      	addcc	r0, #4
 8009f46:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009f4a:	bf3c      	itt	cc
 8009f4c:	009b      	lslcc	r3, r3, #2
 8009f4e:	3002      	addcc	r0, #2
 8009f50:	2b00      	cmp	r3, #0
 8009f52:	db05      	blt.n	8009f60 <__hi0bits+0x3c>
 8009f54:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8009f58:	f100 0001 	add.w	r0, r0, #1
 8009f5c:	bf08      	it	eq
 8009f5e:	2020      	moveq	r0, #32
 8009f60:	4770      	bx	lr

08009f62 <__lo0bits>:
 8009f62:	6803      	ldr	r3, [r0, #0]
 8009f64:	4602      	mov	r2, r0
 8009f66:	f013 0007 	ands.w	r0, r3, #7
 8009f6a:	d00b      	beq.n	8009f84 <__lo0bits+0x22>
 8009f6c:	07d9      	lsls	r1, r3, #31
 8009f6e:	d421      	bmi.n	8009fb4 <__lo0bits+0x52>
 8009f70:	0798      	lsls	r0, r3, #30
 8009f72:	bf49      	itett	mi
 8009f74:	085b      	lsrmi	r3, r3, #1
 8009f76:	089b      	lsrpl	r3, r3, #2
 8009f78:	2001      	movmi	r0, #1
 8009f7a:	6013      	strmi	r3, [r2, #0]
 8009f7c:	bf5c      	itt	pl
 8009f7e:	6013      	strpl	r3, [r2, #0]
 8009f80:	2002      	movpl	r0, #2
 8009f82:	4770      	bx	lr
 8009f84:	b299      	uxth	r1, r3
 8009f86:	b909      	cbnz	r1, 8009f8c <__lo0bits+0x2a>
 8009f88:	0c1b      	lsrs	r3, r3, #16
 8009f8a:	2010      	movs	r0, #16
 8009f8c:	b2d9      	uxtb	r1, r3
 8009f8e:	b909      	cbnz	r1, 8009f94 <__lo0bits+0x32>
 8009f90:	3008      	adds	r0, #8
 8009f92:	0a1b      	lsrs	r3, r3, #8
 8009f94:	0719      	lsls	r1, r3, #28
 8009f96:	bf04      	itt	eq
 8009f98:	091b      	lsreq	r3, r3, #4
 8009f9a:	3004      	addeq	r0, #4
 8009f9c:	0799      	lsls	r1, r3, #30
 8009f9e:	bf04      	itt	eq
 8009fa0:	089b      	lsreq	r3, r3, #2
 8009fa2:	3002      	addeq	r0, #2
 8009fa4:	07d9      	lsls	r1, r3, #31
 8009fa6:	d403      	bmi.n	8009fb0 <__lo0bits+0x4e>
 8009fa8:	085b      	lsrs	r3, r3, #1
 8009faa:	f100 0001 	add.w	r0, r0, #1
 8009fae:	d003      	beq.n	8009fb8 <__lo0bits+0x56>
 8009fb0:	6013      	str	r3, [r2, #0]
 8009fb2:	4770      	bx	lr
 8009fb4:	2000      	movs	r0, #0
 8009fb6:	4770      	bx	lr
 8009fb8:	2020      	movs	r0, #32
 8009fba:	4770      	bx	lr

08009fbc <__i2b>:
 8009fbc:	b510      	push	{r4, lr}
 8009fbe:	460c      	mov	r4, r1
 8009fc0:	2101      	movs	r1, #1
 8009fc2:	f7ff febd 	bl	8009d40 <_Balloc>
 8009fc6:	4602      	mov	r2, r0
 8009fc8:	b928      	cbnz	r0, 8009fd6 <__i2b+0x1a>
 8009fca:	4b05      	ldr	r3, [pc, #20]	@ (8009fe0 <__i2b+0x24>)
 8009fcc:	4805      	ldr	r0, [pc, #20]	@ (8009fe4 <__i2b+0x28>)
 8009fce:	f240 1145 	movw	r1, #325	@ 0x145
 8009fd2:	f000 fba3 	bl	800a71c <__assert_func>
 8009fd6:	2301      	movs	r3, #1
 8009fd8:	6144      	str	r4, [r0, #20]
 8009fda:	6103      	str	r3, [r0, #16]
 8009fdc:	bd10      	pop	{r4, pc}
 8009fde:	bf00      	nop
 8009fe0:	0800aef4 	.word	0x0800aef4
 8009fe4:	0800af7c 	.word	0x0800af7c

08009fe8 <__multiply>:
 8009fe8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009fec:	4614      	mov	r4, r2
 8009fee:	690a      	ldr	r2, [r1, #16]
 8009ff0:	6923      	ldr	r3, [r4, #16]
 8009ff2:	429a      	cmp	r2, r3
 8009ff4:	bfa8      	it	ge
 8009ff6:	4623      	movge	r3, r4
 8009ff8:	460f      	mov	r7, r1
 8009ffa:	bfa4      	itt	ge
 8009ffc:	460c      	movge	r4, r1
 8009ffe:	461f      	movge	r7, r3
 800a000:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800a004:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800a008:	68a3      	ldr	r3, [r4, #8]
 800a00a:	6861      	ldr	r1, [r4, #4]
 800a00c:	eb0a 0609 	add.w	r6, sl, r9
 800a010:	42b3      	cmp	r3, r6
 800a012:	b085      	sub	sp, #20
 800a014:	bfb8      	it	lt
 800a016:	3101      	addlt	r1, #1
 800a018:	f7ff fe92 	bl	8009d40 <_Balloc>
 800a01c:	b930      	cbnz	r0, 800a02c <__multiply+0x44>
 800a01e:	4602      	mov	r2, r0
 800a020:	4b44      	ldr	r3, [pc, #272]	@ (800a134 <__multiply+0x14c>)
 800a022:	4845      	ldr	r0, [pc, #276]	@ (800a138 <__multiply+0x150>)
 800a024:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800a028:	f000 fb78 	bl	800a71c <__assert_func>
 800a02c:	f100 0514 	add.w	r5, r0, #20
 800a030:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800a034:	462b      	mov	r3, r5
 800a036:	2200      	movs	r2, #0
 800a038:	4543      	cmp	r3, r8
 800a03a:	d321      	bcc.n	800a080 <__multiply+0x98>
 800a03c:	f107 0114 	add.w	r1, r7, #20
 800a040:	f104 0214 	add.w	r2, r4, #20
 800a044:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800a048:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800a04c:	9302      	str	r3, [sp, #8]
 800a04e:	1b13      	subs	r3, r2, r4
 800a050:	3b15      	subs	r3, #21
 800a052:	f023 0303 	bic.w	r3, r3, #3
 800a056:	3304      	adds	r3, #4
 800a058:	f104 0715 	add.w	r7, r4, #21
 800a05c:	42ba      	cmp	r2, r7
 800a05e:	bf38      	it	cc
 800a060:	2304      	movcc	r3, #4
 800a062:	9301      	str	r3, [sp, #4]
 800a064:	9b02      	ldr	r3, [sp, #8]
 800a066:	9103      	str	r1, [sp, #12]
 800a068:	428b      	cmp	r3, r1
 800a06a:	d80c      	bhi.n	800a086 <__multiply+0x9e>
 800a06c:	2e00      	cmp	r6, #0
 800a06e:	dd03      	ble.n	800a078 <__multiply+0x90>
 800a070:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800a074:	2b00      	cmp	r3, #0
 800a076:	d05b      	beq.n	800a130 <__multiply+0x148>
 800a078:	6106      	str	r6, [r0, #16]
 800a07a:	b005      	add	sp, #20
 800a07c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a080:	f843 2b04 	str.w	r2, [r3], #4
 800a084:	e7d8      	b.n	800a038 <__multiply+0x50>
 800a086:	f8b1 a000 	ldrh.w	sl, [r1]
 800a08a:	f1ba 0f00 	cmp.w	sl, #0
 800a08e:	d024      	beq.n	800a0da <__multiply+0xf2>
 800a090:	f104 0e14 	add.w	lr, r4, #20
 800a094:	46a9      	mov	r9, r5
 800a096:	f04f 0c00 	mov.w	ip, #0
 800a09a:	f85e 7b04 	ldr.w	r7, [lr], #4
 800a09e:	f8d9 3000 	ldr.w	r3, [r9]
 800a0a2:	fa1f fb87 	uxth.w	fp, r7
 800a0a6:	b29b      	uxth	r3, r3
 800a0a8:	fb0a 330b 	mla	r3, sl, fp, r3
 800a0ac:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800a0b0:	f8d9 7000 	ldr.w	r7, [r9]
 800a0b4:	4463      	add	r3, ip
 800a0b6:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800a0ba:	fb0a c70b 	mla	r7, sl, fp, ip
 800a0be:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800a0c2:	b29b      	uxth	r3, r3
 800a0c4:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800a0c8:	4572      	cmp	r2, lr
 800a0ca:	f849 3b04 	str.w	r3, [r9], #4
 800a0ce:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800a0d2:	d8e2      	bhi.n	800a09a <__multiply+0xb2>
 800a0d4:	9b01      	ldr	r3, [sp, #4]
 800a0d6:	f845 c003 	str.w	ip, [r5, r3]
 800a0da:	9b03      	ldr	r3, [sp, #12]
 800a0dc:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800a0e0:	3104      	adds	r1, #4
 800a0e2:	f1b9 0f00 	cmp.w	r9, #0
 800a0e6:	d021      	beq.n	800a12c <__multiply+0x144>
 800a0e8:	682b      	ldr	r3, [r5, #0]
 800a0ea:	f104 0c14 	add.w	ip, r4, #20
 800a0ee:	46ae      	mov	lr, r5
 800a0f0:	f04f 0a00 	mov.w	sl, #0
 800a0f4:	f8bc b000 	ldrh.w	fp, [ip]
 800a0f8:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800a0fc:	fb09 770b 	mla	r7, r9, fp, r7
 800a100:	4457      	add	r7, sl
 800a102:	b29b      	uxth	r3, r3
 800a104:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800a108:	f84e 3b04 	str.w	r3, [lr], #4
 800a10c:	f85c 3b04 	ldr.w	r3, [ip], #4
 800a110:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800a114:	f8be 3000 	ldrh.w	r3, [lr]
 800a118:	fb09 330a 	mla	r3, r9, sl, r3
 800a11c:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800a120:	4562      	cmp	r2, ip
 800a122:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800a126:	d8e5      	bhi.n	800a0f4 <__multiply+0x10c>
 800a128:	9f01      	ldr	r7, [sp, #4]
 800a12a:	51eb      	str	r3, [r5, r7]
 800a12c:	3504      	adds	r5, #4
 800a12e:	e799      	b.n	800a064 <__multiply+0x7c>
 800a130:	3e01      	subs	r6, #1
 800a132:	e79b      	b.n	800a06c <__multiply+0x84>
 800a134:	0800aef4 	.word	0x0800aef4
 800a138:	0800af7c 	.word	0x0800af7c

0800a13c <__pow5mult>:
 800a13c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a140:	4615      	mov	r5, r2
 800a142:	f012 0203 	ands.w	r2, r2, #3
 800a146:	4607      	mov	r7, r0
 800a148:	460e      	mov	r6, r1
 800a14a:	d007      	beq.n	800a15c <__pow5mult+0x20>
 800a14c:	4c25      	ldr	r4, [pc, #148]	@ (800a1e4 <__pow5mult+0xa8>)
 800a14e:	3a01      	subs	r2, #1
 800a150:	2300      	movs	r3, #0
 800a152:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800a156:	f7ff fe55 	bl	8009e04 <__multadd>
 800a15a:	4606      	mov	r6, r0
 800a15c:	10ad      	asrs	r5, r5, #2
 800a15e:	d03d      	beq.n	800a1dc <__pow5mult+0xa0>
 800a160:	69fc      	ldr	r4, [r7, #28]
 800a162:	b97c      	cbnz	r4, 800a184 <__pow5mult+0x48>
 800a164:	2010      	movs	r0, #16
 800a166:	f000 fb0b 	bl	800a780 <malloc>
 800a16a:	4602      	mov	r2, r0
 800a16c:	61f8      	str	r0, [r7, #28]
 800a16e:	b928      	cbnz	r0, 800a17c <__pow5mult+0x40>
 800a170:	4b1d      	ldr	r3, [pc, #116]	@ (800a1e8 <__pow5mult+0xac>)
 800a172:	481e      	ldr	r0, [pc, #120]	@ (800a1ec <__pow5mult+0xb0>)
 800a174:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800a178:	f000 fad0 	bl	800a71c <__assert_func>
 800a17c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800a180:	6004      	str	r4, [r0, #0]
 800a182:	60c4      	str	r4, [r0, #12]
 800a184:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800a188:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800a18c:	b94c      	cbnz	r4, 800a1a2 <__pow5mult+0x66>
 800a18e:	f240 2171 	movw	r1, #625	@ 0x271
 800a192:	4638      	mov	r0, r7
 800a194:	f7ff ff12 	bl	8009fbc <__i2b>
 800a198:	2300      	movs	r3, #0
 800a19a:	f8c8 0008 	str.w	r0, [r8, #8]
 800a19e:	4604      	mov	r4, r0
 800a1a0:	6003      	str	r3, [r0, #0]
 800a1a2:	f04f 0900 	mov.w	r9, #0
 800a1a6:	07eb      	lsls	r3, r5, #31
 800a1a8:	d50a      	bpl.n	800a1c0 <__pow5mult+0x84>
 800a1aa:	4631      	mov	r1, r6
 800a1ac:	4622      	mov	r2, r4
 800a1ae:	4638      	mov	r0, r7
 800a1b0:	f7ff ff1a 	bl	8009fe8 <__multiply>
 800a1b4:	4631      	mov	r1, r6
 800a1b6:	4680      	mov	r8, r0
 800a1b8:	4638      	mov	r0, r7
 800a1ba:	f7ff fe01 	bl	8009dc0 <_Bfree>
 800a1be:	4646      	mov	r6, r8
 800a1c0:	106d      	asrs	r5, r5, #1
 800a1c2:	d00b      	beq.n	800a1dc <__pow5mult+0xa0>
 800a1c4:	6820      	ldr	r0, [r4, #0]
 800a1c6:	b938      	cbnz	r0, 800a1d8 <__pow5mult+0x9c>
 800a1c8:	4622      	mov	r2, r4
 800a1ca:	4621      	mov	r1, r4
 800a1cc:	4638      	mov	r0, r7
 800a1ce:	f7ff ff0b 	bl	8009fe8 <__multiply>
 800a1d2:	6020      	str	r0, [r4, #0]
 800a1d4:	f8c0 9000 	str.w	r9, [r0]
 800a1d8:	4604      	mov	r4, r0
 800a1da:	e7e4      	b.n	800a1a6 <__pow5mult+0x6a>
 800a1dc:	4630      	mov	r0, r6
 800a1de:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a1e2:	bf00      	nop
 800a1e4:	0800afd8 	.word	0x0800afd8
 800a1e8:	0800af65 	.word	0x0800af65
 800a1ec:	0800af7c 	.word	0x0800af7c

0800a1f0 <__lshift>:
 800a1f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a1f4:	460c      	mov	r4, r1
 800a1f6:	6849      	ldr	r1, [r1, #4]
 800a1f8:	6923      	ldr	r3, [r4, #16]
 800a1fa:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800a1fe:	68a3      	ldr	r3, [r4, #8]
 800a200:	4607      	mov	r7, r0
 800a202:	4691      	mov	r9, r2
 800a204:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800a208:	f108 0601 	add.w	r6, r8, #1
 800a20c:	42b3      	cmp	r3, r6
 800a20e:	db0b      	blt.n	800a228 <__lshift+0x38>
 800a210:	4638      	mov	r0, r7
 800a212:	f7ff fd95 	bl	8009d40 <_Balloc>
 800a216:	4605      	mov	r5, r0
 800a218:	b948      	cbnz	r0, 800a22e <__lshift+0x3e>
 800a21a:	4602      	mov	r2, r0
 800a21c:	4b28      	ldr	r3, [pc, #160]	@ (800a2c0 <__lshift+0xd0>)
 800a21e:	4829      	ldr	r0, [pc, #164]	@ (800a2c4 <__lshift+0xd4>)
 800a220:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800a224:	f000 fa7a 	bl	800a71c <__assert_func>
 800a228:	3101      	adds	r1, #1
 800a22a:	005b      	lsls	r3, r3, #1
 800a22c:	e7ee      	b.n	800a20c <__lshift+0x1c>
 800a22e:	2300      	movs	r3, #0
 800a230:	f100 0114 	add.w	r1, r0, #20
 800a234:	f100 0210 	add.w	r2, r0, #16
 800a238:	4618      	mov	r0, r3
 800a23a:	4553      	cmp	r3, sl
 800a23c:	db33      	blt.n	800a2a6 <__lshift+0xb6>
 800a23e:	6920      	ldr	r0, [r4, #16]
 800a240:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800a244:	f104 0314 	add.w	r3, r4, #20
 800a248:	f019 091f 	ands.w	r9, r9, #31
 800a24c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800a250:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800a254:	d02b      	beq.n	800a2ae <__lshift+0xbe>
 800a256:	f1c9 0e20 	rsb	lr, r9, #32
 800a25a:	468a      	mov	sl, r1
 800a25c:	2200      	movs	r2, #0
 800a25e:	6818      	ldr	r0, [r3, #0]
 800a260:	fa00 f009 	lsl.w	r0, r0, r9
 800a264:	4310      	orrs	r0, r2
 800a266:	f84a 0b04 	str.w	r0, [sl], #4
 800a26a:	f853 2b04 	ldr.w	r2, [r3], #4
 800a26e:	459c      	cmp	ip, r3
 800a270:	fa22 f20e 	lsr.w	r2, r2, lr
 800a274:	d8f3      	bhi.n	800a25e <__lshift+0x6e>
 800a276:	ebac 0304 	sub.w	r3, ip, r4
 800a27a:	3b15      	subs	r3, #21
 800a27c:	f023 0303 	bic.w	r3, r3, #3
 800a280:	3304      	adds	r3, #4
 800a282:	f104 0015 	add.w	r0, r4, #21
 800a286:	4584      	cmp	ip, r0
 800a288:	bf38      	it	cc
 800a28a:	2304      	movcc	r3, #4
 800a28c:	50ca      	str	r2, [r1, r3]
 800a28e:	b10a      	cbz	r2, 800a294 <__lshift+0xa4>
 800a290:	f108 0602 	add.w	r6, r8, #2
 800a294:	3e01      	subs	r6, #1
 800a296:	4638      	mov	r0, r7
 800a298:	612e      	str	r6, [r5, #16]
 800a29a:	4621      	mov	r1, r4
 800a29c:	f7ff fd90 	bl	8009dc0 <_Bfree>
 800a2a0:	4628      	mov	r0, r5
 800a2a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a2a6:	f842 0f04 	str.w	r0, [r2, #4]!
 800a2aa:	3301      	adds	r3, #1
 800a2ac:	e7c5      	b.n	800a23a <__lshift+0x4a>
 800a2ae:	3904      	subs	r1, #4
 800a2b0:	f853 2b04 	ldr.w	r2, [r3], #4
 800a2b4:	f841 2f04 	str.w	r2, [r1, #4]!
 800a2b8:	459c      	cmp	ip, r3
 800a2ba:	d8f9      	bhi.n	800a2b0 <__lshift+0xc0>
 800a2bc:	e7ea      	b.n	800a294 <__lshift+0xa4>
 800a2be:	bf00      	nop
 800a2c0:	0800aef4 	.word	0x0800aef4
 800a2c4:	0800af7c 	.word	0x0800af7c

0800a2c8 <__mcmp>:
 800a2c8:	690a      	ldr	r2, [r1, #16]
 800a2ca:	4603      	mov	r3, r0
 800a2cc:	6900      	ldr	r0, [r0, #16]
 800a2ce:	1a80      	subs	r0, r0, r2
 800a2d0:	b530      	push	{r4, r5, lr}
 800a2d2:	d10e      	bne.n	800a2f2 <__mcmp+0x2a>
 800a2d4:	3314      	adds	r3, #20
 800a2d6:	3114      	adds	r1, #20
 800a2d8:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800a2dc:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800a2e0:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800a2e4:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800a2e8:	4295      	cmp	r5, r2
 800a2ea:	d003      	beq.n	800a2f4 <__mcmp+0x2c>
 800a2ec:	d205      	bcs.n	800a2fa <__mcmp+0x32>
 800a2ee:	f04f 30ff 	mov.w	r0, #4294967295
 800a2f2:	bd30      	pop	{r4, r5, pc}
 800a2f4:	42a3      	cmp	r3, r4
 800a2f6:	d3f3      	bcc.n	800a2e0 <__mcmp+0x18>
 800a2f8:	e7fb      	b.n	800a2f2 <__mcmp+0x2a>
 800a2fa:	2001      	movs	r0, #1
 800a2fc:	e7f9      	b.n	800a2f2 <__mcmp+0x2a>
	...

0800a300 <__mdiff>:
 800a300:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a304:	4689      	mov	r9, r1
 800a306:	4606      	mov	r6, r0
 800a308:	4611      	mov	r1, r2
 800a30a:	4648      	mov	r0, r9
 800a30c:	4614      	mov	r4, r2
 800a30e:	f7ff ffdb 	bl	800a2c8 <__mcmp>
 800a312:	1e05      	subs	r5, r0, #0
 800a314:	d112      	bne.n	800a33c <__mdiff+0x3c>
 800a316:	4629      	mov	r1, r5
 800a318:	4630      	mov	r0, r6
 800a31a:	f7ff fd11 	bl	8009d40 <_Balloc>
 800a31e:	4602      	mov	r2, r0
 800a320:	b928      	cbnz	r0, 800a32e <__mdiff+0x2e>
 800a322:	4b3f      	ldr	r3, [pc, #252]	@ (800a420 <__mdiff+0x120>)
 800a324:	f240 2137 	movw	r1, #567	@ 0x237
 800a328:	483e      	ldr	r0, [pc, #248]	@ (800a424 <__mdiff+0x124>)
 800a32a:	f000 f9f7 	bl	800a71c <__assert_func>
 800a32e:	2301      	movs	r3, #1
 800a330:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800a334:	4610      	mov	r0, r2
 800a336:	b003      	add	sp, #12
 800a338:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a33c:	bfbc      	itt	lt
 800a33e:	464b      	movlt	r3, r9
 800a340:	46a1      	movlt	r9, r4
 800a342:	4630      	mov	r0, r6
 800a344:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800a348:	bfba      	itte	lt
 800a34a:	461c      	movlt	r4, r3
 800a34c:	2501      	movlt	r5, #1
 800a34e:	2500      	movge	r5, #0
 800a350:	f7ff fcf6 	bl	8009d40 <_Balloc>
 800a354:	4602      	mov	r2, r0
 800a356:	b918      	cbnz	r0, 800a360 <__mdiff+0x60>
 800a358:	4b31      	ldr	r3, [pc, #196]	@ (800a420 <__mdiff+0x120>)
 800a35a:	f240 2145 	movw	r1, #581	@ 0x245
 800a35e:	e7e3      	b.n	800a328 <__mdiff+0x28>
 800a360:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800a364:	6926      	ldr	r6, [r4, #16]
 800a366:	60c5      	str	r5, [r0, #12]
 800a368:	f109 0310 	add.w	r3, r9, #16
 800a36c:	f109 0514 	add.w	r5, r9, #20
 800a370:	f104 0e14 	add.w	lr, r4, #20
 800a374:	f100 0b14 	add.w	fp, r0, #20
 800a378:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800a37c:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800a380:	9301      	str	r3, [sp, #4]
 800a382:	46d9      	mov	r9, fp
 800a384:	f04f 0c00 	mov.w	ip, #0
 800a388:	9b01      	ldr	r3, [sp, #4]
 800a38a:	f85e 0b04 	ldr.w	r0, [lr], #4
 800a38e:	f853 af04 	ldr.w	sl, [r3, #4]!
 800a392:	9301      	str	r3, [sp, #4]
 800a394:	fa1f f38a 	uxth.w	r3, sl
 800a398:	4619      	mov	r1, r3
 800a39a:	b283      	uxth	r3, r0
 800a39c:	1acb      	subs	r3, r1, r3
 800a39e:	0c00      	lsrs	r0, r0, #16
 800a3a0:	4463      	add	r3, ip
 800a3a2:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800a3a6:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800a3aa:	b29b      	uxth	r3, r3
 800a3ac:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800a3b0:	4576      	cmp	r6, lr
 800a3b2:	f849 3b04 	str.w	r3, [r9], #4
 800a3b6:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800a3ba:	d8e5      	bhi.n	800a388 <__mdiff+0x88>
 800a3bc:	1b33      	subs	r3, r6, r4
 800a3be:	3b15      	subs	r3, #21
 800a3c0:	f023 0303 	bic.w	r3, r3, #3
 800a3c4:	3415      	adds	r4, #21
 800a3c6:	3304      	adds	r3, #4
 800a3c8:	42a6      	cmp	r6, r4
 800a3ca:	bf38      	it	cc
 800a3cc:	2304      	movcc	r3, #4
 800a3ce:	441d      	add	r5, r3
 800a3d0:	445b      	add	r3, fp
 800a3d2:	461e      	mov	r6, r3
 800a3d4:	462c      	mov	r4, r5
 800a3d6:	4544      	cmp	r4, r8
 800a3d8:	d30e      	bcc.n	800a3f8 <__mdiff+0xf8>
 800a3da:	f108 0103 	add.w	r1, r8, #3
 800a3de:	1b49      	subs	r1, r1, r5
 800a3e0:	f021 0103 	bic.w	r1, r1, #3
 800a3e4:	3d03      	subs	r5, #3
 800a3e6:	45a8      	cmp	r8, r5
 800a3e8:	bf38      	it	cc
 800a3ea:	2100      	movcc	r1, #0
 800a3ec:	440b      	add	r3, r1
 800a3ee:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800a3f2:	b191      	cbz	r1, 800a41a <__mdiff+0x11a>
 800a3f4:	6117      	str	r7, [r2, #16]
 800a3f6:	e79d      	b.n	800a334 <__mdiff+0x34>
 800a3f8:	f854 1b04 	ldr.w	r1, [r4], #4
 800a3fc:	46e6      	mov	lr, ip
 800a3fe:	0c08      	lsrs	r0, r1, #16
 800a400:	fa1c fc81 	uxtah	ip, ip, r1
 800a404:	4471      	add	r1, lr
 800a406:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800a40a:	b289      	uxth	r1, r1
 800a40c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800a410:	f846 1b04 	str.w	r1, [r6], #4
 800a414:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800a418:	e7dd      	b.n	800a3d6 <__mdiff+0xd6>
 800a41a:	3f01      	subs	r7, #1
 800a41c:	e7e7      	b.n	800a3ee <__mdiff+0xee>
 800a41e:	bf00      	nop
 800a420:	0800aef4 	.word	0x0800aef4
 800a424:	0800af7c 	.word	0x0800af7c

0800a428 <__ulp>:
 800a428:	b082      	sub	sp, #8
 800a42a:	ed8d 0b00 	vstr	d0, [sp]
 800a42e:	9a01      	ldr	r2, [sp, #4]
 800a430:	4b0f      	ldr	r3, [pc, #60]	@ (800a470 <__ulp+0x48>)
 800a432:	4013      	ands	r3, r2
 800a434:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 800a438:	2b00      	cmp	r3, #0
 800a43a:	dc08      	bgt.n	800a44e <__ulp+0x26>
 800a43c:	425b      	negs	r3, r3
 800a43e:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 800a442:	ea4f 5223 	mov.w	r2, r3, asr #20
 800a446:	da04      	bge.n	800a452 <__ulp+0x2a>
 800a448:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800a44c:	4113      	asrs	r3, r2
 800a44e:	2200      	movs	r2, #0
 800a450:	e008      	b.n	800a464 <__ulp+0x3c>
 800a452:	f1a2 0314 	sub.w	r3, r2, #20
 800a456:	2b1e      	cmp	r3, #30
 800a458:	bfda      	itte	le
 800a45a:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 800a45e:	40da      	lsrle	r2, r3
 800a460:	2201      	movgt	r2, #1
 800a462:	2300      	movs	r3, #0
 800a464:	4619      	mov	r1, r3
 800a466:	4610      	mov	r0, r2
 800a468:	ec41 0b10 	vmov	d0, r0, r1
 800a46c:	b002      	add	sp, #8
 800a46e:	4770      	bx	lr
 800a470:	7ff00000 	.word	0x7ff00000

0800a474 <__b2d>:
 800a474:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a478:	6906      	ldr	r6, [r0, #16]
 800a47a:	f100 0814 	add.w	r8, r0, #20
 800a47e:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800a482:	1f37      	subs	r7, r6, #4
 800a484:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800a488:	4610      	mov	r0, r2
 800a48a:	f7ff fd4b 	bl	8009f24 <__hi0bits>
 800a48e:	f1c0 0320 	rsb	r3, r0, #32
 800a492:	280a      	cmp	r0, #10
 800a494:	600b      	str	r3, [r1, #0]
 800a496:	491b      	ldr	r1, [pc, #108]	@ (800a504 <__b2d+0x90>)
 800a498:	dc15      	bgt.n	800a4c6 <__b2d+0x52>
 800a49a:	f1c0 0c0b 	rsb	ip, r0, #11
 800a49e:	fa22 f30c 	lsr.w	r3, r2, ip
 800a4a2:	45b8      	cmp	r8, r7
 800a4a4:	ea43 0501 	orr.w	r5, r3, r1
 800a4a8:	bf34      	ite	cc
 800a4aa:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800a4ae:	2300      	movcs	r3, #0
 800a4b0:	3015      	adds	r0, #21
 800a4b2:	fa02 f000 	lsl.w	r0, r2, r0
 800a4b6:	fa23 f30c 	lsr.w	r3, r3, ip
 800a4ba:	4303      	orrs	r3, r0
 800a4bc:	461c      	mov	r4, r3
 800a4be:	ec45 4b10 	vmov	d0, r4, r5
 800a4c2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a4c6:	45b8      	cmp	r8, r7
 800a4c8:	bf3a      	itte	cc
 800a4ca:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800a4ce:	f1a6 0708 	subcc.w	r7, r6, #8
 800a4d2:	2300      	movcs	r3, #0
 800a4d4:	380b      	subs	r0, #11
 800a4d6:	d012      	beq.n	800a4fe <__b2d+0x8a>
 800a4d8:	f1c0 0120 	rsb	r1, r0, #32
 800a4dc:	fa23 f401 	lsr.w	r4, r3, r1
 800a4e0:	4082      	lsls	r2, r0
 800a4e2:	4322      	orrs	r2, r4
 800a4e4:	4547      	cmp	r7, r8
 800a4e6:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 800a4ea:	bf8c      	ite	hi
 800a4ec:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 800a4f0:	2200      	movls	r2, #0
 800a4f2:	4083      	lsls	r3, r0
 800a4f4:	40ca      	lsrs	r2, r1
 800a4f6:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 800a4fa:	4313      	orrs	r3, r2
 800a4fc:	e7de      	b.n	800a4bc <__b2d+0x48>
 800a4fe:	ea42 0501 	orr.w	r5, r2, r1
 800a502:	e7db      	b.n	800a4bc <__b2d+0x48>
 800a504:	3ff00000 	.word	0x3ff00000

0800a508 <__d2b>:
 800a508:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800a50c:	460f      	mov	r7, r1
 800a50e:	2101      	movs	r1, #1
 800a510:	ec59 8b10 	vmov	r8, r9, d0
 800a514:	4616      	mov	r6, r2
 800a516:	f7ff fc13 	bl	8009d40 <_Balloc>
 800a51a:	4604      	mov	r4, r0
 800a51c:	b930      	cbnz	r0, 800a52c <__d2b+0x24>
 800a51e:	4602      	mov	r2, r0
 800a520:	4b23      	ldr	r3, [pc, #140]	@ (800a5b0 <__d2b+0xa8>)
 800a522:	4824      	ldr	r0, [pc, #144]	@ (800a5b4 <__d2b+0xac>)
 800a524:	f240 310f 	movw	r1, #783	@ 0x30f
 800a528:	f000 f8f8 	bl	800a71c <__assert_func>
 800a52c:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800a530:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800a534:	b10d      	cbz	r5, 800a53a <__d2b+0x32>
 800a536:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800a53a:	9301      	str	r3, [sp, #4]
 800a53c:	f1b8 0300 	subs.w	r3, r8, #0
 800a540:	d023      	beq.n	800a58a <__d2b+0x82>
 800a542:	4668      	mov	r0, sp
 800a544:	9300      	str	r3, [sp, #0]
 800a546:	f7ff fd0c 	bl	8009f62 <__lo0bits>
 800a54a:	e9dd 1200 	ldrd	r1, r2, [sp]
 800a54e:	b1d0      	cbz	r0, 800a586 <__d2b+0x7e>
 800a550:	f1c0 0320 	rsb	r3, r0, #32
 800a554:	fa02 f303 	lsl.w	r3, r2, r3
 800a558:	430b      	orrs	r3, r1
 800a55a:	40c2      	lsrs	r2, r0
 800a55c:	6163      	str	r3, [r4, #20]
 800a55e:	9201      	str	r2, [sp, #4]
 800a560:	9b01      	ldr	r3, [sp, #4]
 800a562:	61a3      	str	r3, [r4, #24]
 800a564:	2b00      	cmp	r3, #0
 800a566:	bf0c      	ite	eq
 800a568:	2201      	moveq	r2, #1
 800a56a:	2202      	movne	r2, #2
 800a56c:	6122      	str	r2, [r4, #16]
 800a56e:	b1a5      	cbz	r5, 800a59a <__d2b+0x92>
 800a570:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800a574:	4405      	add	r5, r0
 800a576:	603d      	str	r5, [r7, #0]
 800a578:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800a57c:	6030      	str	r0, [r6, #0]
 800a57e:	4620      	mov	r0, r4
 800a580:	b003      	add	sp, #12
 800a582:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a586:	6161      	str	r1, [r4, #20]
 800a588:	e7ea      	b.n	800a560 <__d2b+0x58>
 800a58a:	a801      	add	r0, sp, #4
 800a58c:	f7ff fce9 	bl	8009f62 <__lo0bits>
 800a590:	9b01      	ldr	r3, [sp, #4]
 800a592:	6163      	str	r3, [r4, #20]
 800a594:	3020      	adds	r0, #32
 800a596:	2201      	movs	r2, #1
 800a598:	e7e8      	b.n	800a56c <__d2b+0x64>
 800a59a:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800a59e:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800a5a2:	6038      	str	r0, [r7, #0]
 800a5a4:	6918      	ldr	r0, [r3, #16]
 800a5a6:	f7ff fcbd 	bl	8009f24 <__hi0bits>
 800a5aa:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800a5ae:	e7e5      	b.n	800a57c <__d2b+0x74>
 800a5b0:	0800aef4 	.word	0x0800aef4
 800a5b4:	0800af7c 	.word	0x0800af7c

0800a5b8 <__ratio>:
 800a5b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a5bc:	b085      	sub	sp, #20
 800a5be:	e9cd 1000 	strd	r1, r0, [sp]
 800a5c2:	a902      	add	r1, sp, #8
 800a5c4:	f7ff ff56 	bl	800a474 <__b2d>
 800a5c8:	9800      	ldr	r0, [sp, #0]
 800a5ca:	a903      	add	r1, sp, #12
 800a5cc:	ec55 4b10 	vmov	r4, r5, d0
 800a5d0:	f7ff ff50 	bl	800a474 <__b2d>
 800a5d4:	9b01      	ldr	r3, [sp, #4]
 800a5d6:	6919      	ldr	r1, [r3, #16]
 800a5d8:	9b00      	ldr	r3, [sp, #0]
 800a5da:	691b      	ldr	r3, [r3, #16]
 800a5dc:	1ac9      	subs	r1, r1, r3
 800a5de:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800a5e2:	1a9b      	subs	r3, r3, r2
 800a5e4:	ec5b ab10 	vmov	sl, fp, d0
 800a5e8:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 800a5ec:	2b00      	cmp	r3, #0
 800a5ee:	bfce      	itee	gt
 800a5f0:	462a      	movgt	r2, r5
 800a5f2:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800a5f6:	465a      	movle	r2, fp
 800a5f8:	462f      	mov	r7, r5
 800a5fa:	46d9      	mov	r9, fp
 800a5fc:	bfcc      	ite	gt
 800a5fe:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800a602:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 800a606:	464b      	mov	r3, r9
 800a608:	4652      	mov	r2, sl
 800a60a:	4620      	mov	r0, r4
 800a60c:	4639      	mov	r1, r7
 800a60e:	f7f6 f93d 	bl	800088c <__aeabi_ddiv>
 800a612:	ec41 0b10 	vmov	d0, r0, r1
 800a616:	b005      	add	sp, #20
 800a618:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800a61c <__copybits>:
 800a61c:	3901      	subs	r1, #1
 800a61e:	b570      	push	{r4, r5, r6, lr}
 800a620:	1149      	asrs	r1, r1, #5
 800a622:	6914      	ldr	r4, [r2, #16]
 800a624:	3101      	adds	r1, #1
 800a626:	f102 0314 	add.w	r3, r2, #20
 800a62a:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800a62e:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800a632:	1f05      	subs	r5, r0, #4
 800a634:	42a3      	cmp	r3, r4
 800a636:	d30c      	bcc.n	800a652 <__copybits+0x36>
 800a638:	1aa3      	subs	r3, r4, r2
 800a63a:	3b11      	subs	r3, #17
 800a63c:	f023 0303 	bic.w	r3, r3, #3
 800a640:	3211      	adds	r2, #17
 800a642:	42a2      	cmp	r2, r4
 800a644:	bf88      	it	hi
 800a646:	2300      	movhi	r3, #0
 800a648:	4418      	add	r0, r3
 800a64a:	2300      	movs	r3, #0
 800a64c:	4288      	cmp	r0, r1
 800a64e:	d305      	bcc.n	800a65c <__copybits+0x40>
 800a650:	bd70      	pop	{r4, r5, r6, pc}
 800a652:	f853 6b04 	ldr.w	r6, [r3], #4
 800a656:	f845 6f04 	str.w	r6, [r5, #4]!
 800a65a:	e7eb      	b.n	800a634 <__copybits+0x18>
 800a65c:	f840 3b04 	str.w	r3, [r0], #4
 800a660:	e7f4      	b.n	800a64c <__copybits+0x30>

0800a662 <__any_on>:
 800a662:	f100 0214 	add.w	r2, r0, #20
 800a666:	6900      	ldr	r0, [r0, #16]
 800a668:	114b      	asrs	r3, r1, #5
 800a66a:	4298      	cmp	r0, r3
 800a66c:	b510      	push	{r4, lr}
 800a66e:	db11      	blt.n	800a694 <__any_on+0x32>
 800a670:	dd0a      	ble.n	800a688 <__any_on+0x26>
 800a672:	f011 011f 	ands.w	r1, r1, #31
 800a676:	d007      	beq.n	800a688 <__any_on+0x26>
 800a678:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800a67c:	fa24 f001 	lsr.w	r0, r4, r1
 800a680:	fa00 f101 	lsl.w	r1, r0, r1
 800a684:	428c      	cmp	r4, r1
 800a686:	d10b      	bne.n	800a6a0 <__any_on+0x3e>
 800a688:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800a68c:	4293      	cmp	r3, r2
 800a68e:	d803      	bhi.n	800a698 <__any_on+0x36>
 800a690:	2000      	movs	r0, #0
 800a692:	bd10      	pop	{r4, pc}
 800a694:	4603      	mov	r3, r0
 800a696:	e7f7      	b.n	800a688 <__any_on+0x26>
 800a698:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800a69c:	2900      	cmp	r1, #0
 800a69e:	d0f5      	beq.n	800a68c <__any_on+0x2a>
 800a6a0:	2001      	movs	r0, #1
 800a6a2:	e7f6      	b.n	800a692 <__any_on+0x30>

0800a6a4 <_realloc_r>:
 800a6a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a6a8:	4680      	mov	r8, r0
 800a6aa:	4615      	mov	r5, r2
 800a6ac:	460c      	mov	r4, r1
 800a6ae:	b921      	cbnz	r1, 800a6ba <_realloc_r+0x16>
 800a6b0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a6b4:	4611      	mov	r1, r2
 800a6b6:	f7fd bd01 	b.w	80080bc <_malloc_r>
 800a6ba:	b92a      	cbnz	r2, 800a6c8 <_realloc_r+0x24>
 800a6bc:	f7fd fc92 	bl	8007fe4 <_free_r>
 800a6c0:	2400      	movs	r4, #0
 800a6c2:	4620      	mov	r0, r4
 800a6c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a6c8:	f000 f862 	bl	800a790 <_malloc_usable_size_r>
 800a6cc:	4285      	cmp	r5, r0
 800a6ce:	4606      	mov	r6, r0
 800a6d0:	d802      	bhi.n	800a6d8 <_realloc_r+0x34>
 800a6d2:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800a6d6:	d8f4      	bhi.n	800a6c2 <_realloc_r+0x1e>
 800a6d8:	4629      	mov	r1, r5
 800a6da:	4640      	mov	r0, r8
 800a6dc:	f7fd fcee 	bl	80080bc <_malloc_r>
 800a6e0:	4607      	mov	r7, r0
 800a6e2:	2800      	cmp	r0, #0
 800a6e4:	d0ec      	beq.n	800a6c0 <_realloc_r+0x1c>
 800a6e6:	42b5      	cmp	r5, r6
 800a6e8:	462a      	mov	r2, r5
 800a6ea:	4621      	mov	r1, r4
 800a6ec:	bf28      	it	cs
 800a6ee:	4632      	movcs	r2, r6
 800a6f0:	f7fe ffc2 	bl	8009678 <memcpy>
 800a6f4:	4621      	mov	r1, r4
 800a6f6:	4640      	mov	r0, r8
 800a6f8:	f7fd fc74 	bl	8007fe4 <_free_r>
 800a6fc:	463c      	mov	r4, r7
 800a6fe:	e7e0      	b.n	800a6c2 <_realloc_r+0x1e>

0800a700 <__ascii_wctomb>:
 800a700:	4603      	mov	r3, r0
 800a702:	4608      	mov	r0, r1
 800a704:	b141      	cbz	r1, 800a718 <__ascii_wctomb+0x18>
 800a706:	2aff      	cmp	r2, #255	@ 0xff
 800a708:	d904      	bls.n	800a714 <__ascii_wctomb+0x14>
 800a70a:	228a      	movs	r2, #138	@ 0x8a
 800a70c:	601a      	str	r2, [r3, #0]
 800a70e:	f04f 30ff 	mov.w	r0, #4294967295
 800a712:	4770      	bx	lr
 800a714:	700a      	strb	r2, [r1, #0]
 800a716:	2001      	movs	r0, #1
 800a718:	4770      	bx	lr
	...

0800a71c <__assert_func>:
 800a71c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800a71e:	4614      	mov	r4, r2
 800a720:	461a      	mov	r2, r3
 800a722:	4b09      	ldr	r3, [pc, #36]	@ (800a748 <__assert_func+0x2c>)
 800a724:	681b      	ldr	r3, [r3, #0]
 800a726:	4605      	mov	r5, r0
 800a728:	68d8      	ldr	r0, [r3, #12]
 800a72a:	b954      	cbnz	r4, 800a742 <__assert_func+0x26>
 800a72c:	4b07      	ldr	r3, [pc, #28]	@ (800a74c <__assert_func+0x30>)
 800a72e:	461c      	mov	r4, r3
 800a730:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800a734:	9100      	str	r1, [sp, #0]
 800a736:	462b      	mov	r3, r5
 800a738:	4905      	ldr	r1, [pc, #20]	@ (800a750 <__assert_func+0x34>)
 800a73a:	f000 f831 	bl	800a7a0 <fiprintf>
 800a73e:	f000 f841 	bl	800a7c4 <abort>
 800a742:	4b04      	ldr	r3, [pc, #16]	@ (800a754 <__assert_func+0x38>)
 800a744:	e7f4      	b.n	800a730 <__assert_func+0x14>
 800a746:	bf00      	nop
 800a748:	20000018 	.word	0x20000018
 800a74c:	0800b113 	.word	0x0800b113
 800a750:	0800b0e5 	.word	0x0800b0e5
 800a754:	0800b0d8 	.word	0x0800b0d8

0800a758 <_calloc_r>:
 800a758:	b570      	push	{r4, r5, r6, lr}
 800a75a:	fba1 5402 	umull	r5, r4, r1, r2
 800a75e:	b93c      	cbnz	r4, 800a770 <_calloc_r+0x18>
 800a760:	4629      	mov	r1, r5
 800a762:	f7fd fcab 	bl	80080bc <_malloc_r>
 800a766:	4606      	mov	r6, r0
 800a768:	b928      	cbnz	r0, 800a776 <_calloc_r+0x1e>
 800a76a:	2600      	movs	r6, #0
 800a76c:	4630      	mov	r0, r6
 800a76e:	bd70      	pop	{r4, r5, r6, pc}
 800a770:	220c      	movs	r2, #12
 800a772:	6002      	str	r2, [r0, #0]
 800a774:	e7f9      	b.n	800a76a <_calloc_r+0x12>
 800a776:	462a      	mov	r2, r5
 800a778:	4621      	mov	r1, r4
 800a77a:	f7fd fbb0 	bl	8007ede <memset>
 800a77e:	e7f5      	b.n	800a76c <_calloc_r+0x14>

0800a780 <malloc>:
 800a780:	4b02      	ldr	r3, [pc, #8]	@ (800a78c <malloc+0xc>)
 800a782:	4601      	mov	r1, r0
 800a784:	6818      	ldr	r0, [r3, #0]
 800a786:	f7fd bc99 	b.w	80080bc <_malloc_r>
 800a78a:	bf00      	nop
 800a78c:	20000018 	.word	0x20000018

0800a790 <_malloc_usable_size_r>:
 800a790:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a794:	1f18      	subs	r0, r3, #4
 800a796:	2b00      	cmp	r3, #0
 800a798:	bfbc      	itt	lt
 800a79a:	580b      	ldrlt	r3, [r1, r0]
 800a79c:	18c0      	addlt	r0, r0, r3
 800a79e:	4770      	bx	lr

0800a7a0 <fiprintf>:
 800a7a0:	b40e      	push	{r1, r2, r3}
 800a7a2:	b503      	push	{r0, r1, lr}
 800a7a4:	4601      	mov	r1, r0
 800a7a6:	ab03      	add	r3, sp, #12
 800a7a8:	4805      	ldr	r0, [pc, #20]	@ (800a7c0 <fiprintf+0x20>)
 800a7aa:	f853 2b04 	ldr.w	r2, [r3], #4
 800a7ae:	6800      	ldr	r0, [r0, #0]
 800a7b0:	9301      	str	r3, [sp, #4]
 800a7b2:	f000 f837 	bl	800a824 <_vfiprintf_r>
 800a7b6:	b002      	add	sp, #8
 800a7b8:	f85d eb04 	ldr.w	lr, [sp], #4
 800a7bc:	b003      	add	sp, #12
 800a7be:	4770      	bx	lr
 800a7c0:	20000018 	.word	0x20000018

0800a7c4 <abort>:
 800a7c4:	b508      	push	{r3, lr}
 800a7c6:	2006      	movs	r0, #6
 800a7c8:	f000 fa00 	bl	800abcc <raise>
 800a7cc:	2001      	movs	r0, #1
 800a7ce:	f7f7 f9eb 	bl	8001ba8 <_exit>

0800a7d2 <__sfputc_r>:
 800a7d2:	6893      	ldr	r3, [r2, #8]
 800a7d4:	3b01      	subs	r3, #1
 800a7d6:	2b00      	cmp	r3, #0
 800a7d8:	b410      	push	{r4}
 800a7da:	6093      	str	r3, [r2, #8]
 800a7dc:	da08      	bge.n	800a7f0 <__sfputc_r+0x1e>
 800a7de:	6994      	ldr	r4, [r2, #24]
 800a7e0:	42a3      	cmp	r3, r4
 800a7e2:	db01      	blt.n	800a7e8 <__sfputc_r+0x16>
 800a7e4:	290a      	cmp	r1, #10
 800a7e6:	d103      	bne.n	800a7f0 <__sfputc_r+0x1e>
 800a7e8:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a7ec:	f000 b932 	b.w	800aa54 <__swbuf_r>
 800a7f0:	6813      	ldr	r3, [r2, #0]
 800a7f2:	1c58      	adds	r0, r3, #1
 800a7f4:	6010      	str	r0, [r2, #0]
 800a7f6:	7019      	strb	r1, [r3, #0]
 800a7f8:	4608      	mov	r0, r1
 800a7fa:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a7fe:	4770      	bx	lr

0800a800 <__sfputs_r>:
 800a800:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a802:	4606      	mov	r6, r0
 800a804:	460f      	mov	r7, r1
 800a806:	4614      	mov	r4, r2
 800a808:	18d5      	adds	r5, r2, r3
 800a80a:	42ac      	cmp	r4, r5
 800a80c:	d101      	bne.n	800a812 <__sfputs_r+0x12>
 800a80e:	2000      	movs	r0, #0
 800a810:	e007      	b.n	800a822 <__sfputs_r+0x22>
 800a812:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a816:	463a      	mov	r2, r7
 800a818:	4630      	mov	r0, r6
 800a81a:	f7ff ffda 	bl	800a7d2 <__sfputc_r>
 800a81e:	1c43      	adds	r3, r0, #1
 800a820:	d1f3      	bne.n	800a80a <__sfputs_r+0xa>
 800a822:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800a824 <_vfiprintf_r>:
 800a824:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a828:	460d      	mov	r5, r1
 800a82a:	b09d      	sub	sp, #116	@ 0x74
 800a82c:	4614      	mov	r4, r2
 800a82e:	4698      	mov	r8, r3
 800a830:	4606      	mov	r6, r0
 800a832:	b118      	cbz	r0, 800a83c <_vfiprintf_r+0x18>
 800a834:	6a03      	ldr	r3, [r0, #32]
 800a836:	b90b      	cbnz	r3, 800a83c <_vfiprintf_r+0x18>
 800a838:	f7fd fab8 	bl	8007dac <__sinit>
 800a83c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800a83e:	07d9      	lsls	r1, r3, #31
 800a840:	d405      	bmi.n	800a84e <_vfiprintf_r+0x2a>
 800a842:	89ab      	ldrh	r3, [r5, #12]
 800a844:	059a      	lsls	r2, r3, #22
 800a846:	d402      	bmi.n	800a84e <_vfiprintf_r+0x2a>
 800a848:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800a84a:	f7fd fbc2 	bl	8007fd2 <__retarget_lock_acquire_recursive>
 800a84e:	89ab      	ldrh	r3, [r5, #12]
 800a850:	071b      	lsls	r3, r3, #28
 800a852:	d501      	bpl.n	800a858 <_vfiprintf_r+0x34>
 800a854:	692b      	ldr	r3, [r5, #16]
 800a856:	b99b      	cbnz	r3, 800a880 <_vfiprintf_r+0x5c>
 800a858:	4629      	mov	r1, r5
 800a85a:	4630      	mov	r0, r6
 800a85c:	f000 f938 	bl	800aad0 <__swsetup_r>
 800a860:	b170      	cbz	r0, 800a880 <_vfiprintf_r+0x5c>
 800a862:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800a864:	07dc      	lsls	r4, r3, #31
 800a866:	d504      	bpl.n	800a872 <_vfiprintf_r+0x4e>
 800a868:	f04f 30ff 	mov.w	r0, #4294967295
 800a86c:	b01d      	add	sp, #116	@ 0x74
 800a86e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a872:	89ab      	ldrh	r3, [r5, #12]
 800a874:	0598      	lsls	r0, r3, #22
 800a876:	d4f7      	bmi.n	800a868 <_vfiprintf_r+0x44>
 800a878:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800a87a:	f7fd fbab 	bl	8007fd4 <__retarget_lock_release_recursive>
 800a87e:	e7f3      	b.n	800a868 <_vfiprintf_r+0x44>
 800a880:	2300      	movs	r3, #0
 800a882:	9309      	str	r3, [sp, #36]	@ 0x24
 800a884:	2320      	movs	r3, #32
 800a886:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800a88a:	f8cd 800c 	str.w	r8, [sp, #12]
 800a88e:	2330      	movs	r3, #48	@ 0x30
 800a890:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800aa40 <_vfiprintf_r+0x21c>
 800a894:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800a898:	f04f 0901 	mov.w	r9, #1
 800a89c:	4623      	mov	r3, r4
 800a89e:	469a      	mov	sl, r3
 800a8a0:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a8a4:	b10a      	cbz	r2, 800a8aa <_vfiprintf_r+0x86>
 800a8a6:	2a25      	cmp	r2, #37	@ 0x25
 800a8a8:	d1f9      	bne.n	800a89e <_vfiprintf_r+0x7a>
 800a8aa:	ebba 0b04 	subs.w	fp, sl, r4
 800a8ae:	d00b      	beq.n	800a8c8 <_vfiprintf_r+0xa4>
 800a8b0:	465b      	mov	r3, fp
 800a8b2:	4622      	mov	r2, r4
 800a8b4:	4629      	mov	r1, r5
 800a8b6:	4630      	mov	r0, r6
 800a8b8:	f7ff ffa2 	bl	800a800 <__sfputs_r>
 800a8bc:	3001      	adds	r0, #1
 800a8be:	f000 80a7 	beq.w	800aa10 <_vfiprintf_r+0x1ec>
 800a8c2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a8c4:	445a      	add	r2, fp
 800a8c6:	9209      	str	r2, [sp, #36]	@ 0x24
 800a8c8:	f89a 3000 	ldrb.w	r3, [sl]
 800a8cc:	2b00      	cmp	r3, #0
 800a8ce:	f000 809f 	beq.w	800aa10 <_vfiprintf_r+0x1ec>
 800a8d2:	2300      	movs	r3, #0
 800a8d4:	f04f 32ff 	mov.w	r2, #4294967295
 800a8d8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a8dc:	f10a 0a01 	add.w	sl, sl, #1
 800a8e0:	9304      	str	r3, [sp, #16]
 800a8e2:	9307      	str	r3, [sp, #28]
 800a8e4:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800a8e8:	931a      	str	r3, [sp, #104]	@ 0x68
 800a8ea:	4654      	mov	r4, sl
 800a8ec:	2205      	movs	r2, #5
 800a8ee:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a8f2:	4853      	ldr	r0, [pc, #332]	@ (800aa40 <_vfiprintf_r+0x21c>)
 800a8f4:	f7f5 fc94 	bl	8000220 <memchr>
 800a8f8:	9a04      	ldr	r2, [sp, #16]
 800a8fa:	b9d8      	cbnz	r0, 800a934 <_vfiprintf_r+0x110>
 800a8fc:	06d1      	lsls	r1, r2, #27
 800a8fe:	bf44      	itt	mi
 800a900:	2320      	movmi	r3, #32
 800a902:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a906:	0713      	lsls	r3, r2, #28
 800a908:	bf44      	itt	mi
 800a90a:	232b      	movmi	r3, #43	@ 0x2b
 800a90c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a910:	f89a 3000 	ldrb.w	r3, [sl]
 800a914:	2b2a      	cmp	r3, #42	@ 0x2a
 800a916:	d015      	beq.n	800a944 <_vfiprintf_r+0x120>
 800a918:	9a07      	ldr	r2, [sp, #28]
 800a91a:	4654      	mov	r4, sl
 800a91c:	2000      	movs	r0, #0
 800a91e:	f04f 0c0a 	mov.w	ip, #10
 800a922:	4621      	mov	r1, r4
 800a924:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a928:	3b30      	subs	r3, #48	@ 0x30
 800a92a:	2b09      	cmp	r3, #9
 800a92c:	d94b      	bls.n	800a9c6 <_vfiprintf_r+0x1a2>
 800a92e:	b1b0      	cbz	r0, 800a95e <_vfiprintf_r+0x13a>
 800a930:	9207      	str	r2, [sp, #28]
 800a932:	e014      	b.n	800a95e <_vfiprintf_r+0x13a>
 800a934:	eba0 0308 	sub.w	r3, r0, r8
 800a938:	fa09 f303 	lsl.w	r3, r9, r3
 800a93c:	4313      	orrs	r3, r2
 800a93e:	9304      	str	r3, [sp, #16]
 800a940:	46a2      	mov	sl, r4
 800a942:	e7d2      	b.n	800a8ea <_vfiprintf_r+0xc6>
 800a944:	9b03      	ldr	r3, [sp, #12]
 800a946:	1d19      	adds	r1, r3, #4
 800a948:	681b      	ldr	r3, [r3, #0]
 800a94a:	9103      	str	r1, [sp, #12]
 800a94c:	2b00      	cmp	r3, #0
 800a94e:	bfbb      	ittet	lt
 800a950:	425b      	neglt	r3, r3
 800a952:	f042 0202 	orrlt.w	r2, r2, #2
 800a956:	9307      	strge	r3, [sp, #28]
 800a958:	9307      	strlt	r3, [sp, #28]
 800a95a:	bfb8      	it	lt
 800a95c:	9204      	strlt	r2, [sp, #16]
 800a95e:	7823      	ldrb	r3, [r4, #0]
 800a960:	2b2e      	cmp	r3, #46	@ 0x2e
 800a962:	d10a      	bne.n	800a97a <_vfiprintf_r+0x156>
 800a964:	7863      	ldrb	r3, [r4, #1]
 800a966:	2b2a      	cmp	r3, #42	@ 0x2a
 800a968:	d132      	bne.n	800a9d0 <_vfiprintf_r+0x1ac>
 800a96a:	9b03      	ldr	r3, [sp, #12]
 800a96c:	1d1a      	adds	r2, r3, #4
 800a96e:	681b      	ldr	r3, [r3, #0]
 800a970:	9203      	str	r2, [sp, #12]
 800a972:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800a976:	3402      	adds	r4, #2
 800a978:	9305      	str	r3, [sp, #20]
 800a97a:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800aa50 <_vfiprintf_r+0x22c>
 800a97e:	7821      	ldrb	r1, [r4, #0]
 800a980:	2203      	movs	r2, #3
 800a982:	4650      	mov	r0, sl
 800a984:	f7f5 fc4c 	bl	8000220 <memchr>
 800a988:	b138      	cbz	r0, 800a99a <_vfiprintf_r+0x176>
 800a98a:	9b04      	ldr	r3, [sp, #16]
 800a98c:	eba0 000a 	sub.w	r0, r0, sl
 800a990:	2240      	movs	r2, #64	@ 0x40
 800a992:	4082      	lsls	r2, r0
 800a994:	4313      	orrs	r3, r2
 800a996:	3401      	adds	r4, #1
 800a998:	9304      	str	r3, [sp, #16]
 800a99a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a99e:	4829      	ldr	r0, [pc, #164]	@ (800aa44 <_vfiprintf_r+0x220>)
 800a9a0:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800a9a4:	2206      	movs	r2, #6
 800a9a6:	f7f5 fc3b 	bl	8000220 <memchr>
 800a9aa:	2800      	cmp	r0, #0
 800a9ac:	d03f      	beq.n	800aa2e <_vfiprintf_r+0x20a>
 800a9ae:	4b26      	ldr	r3, [pc, #152]	@ (800aa48 <_vfiprintf_r+0x224>)
 800a9b0:	bb1b      	cbnz	r3, 800a9fa <_vfiprintf_r+0x1d6>
 800a9b2:	9b03      	ldr	r3, [sp, #12]
 800a9b4:	3307      	adds	r3, #7
 800a9b6:	f023 0307 	bic.w	r3, r3, #7
 800a9ba:	3308      	adds	r3, #8
 800a9bc:	9303      	str	r3, [sp, #12]
 800a9be:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a9c0:	443b      	add	r3, r7
 800a9c2:	9309      	str	r3, [sp, #36]	@ 0x24
 800a9c4:	e76a      	b.n	800a89c <_vfiprintf_r+0x78>
 800a9c6:	fb0c 3202 	mla	r2, ip, r2, r3
 800a9ca:	460c      	mov	r4, r1
 800a9cc:	2001      	movs	r0, #1
 800a9ce:	e7a8      	b.n	800a922 <_vfiprintf_r+0xfe>
 800a9d0:	2300      	movs	r3, #0
 800a9d2:	3401      	adds	r4, #1
 800a9d4:	9305      	str	r3, [sp, #20]
 800a9d6:	4619      	mov	r1, r3
 800a9d8:	f04f 0c0a 	mov.w	ip, #10
 800a9dc:	4620      	mov	r0, r4
 800a9de:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a9e2:	3a30      	subs	r2, #48	@ 0x30
 800a9e4:	2a09      	cmp	r2, #9
 800a9e6:	d903      	bls.n	800a9f0 <_vfiprintf_r+0x1cc>
 800a9e8:	2b00      	cmp	r3, #0
 800a9ea:	d0c6      	beq.n	800a97a <_vfiprintf_r+0x156>
 800a9ec:	9105      	str	r1, [sp, #20]
 800a9ee:	e7c4      	b.n	800a97a <_vfiprintf_r+0x156>
 800a9f0:	fb0c 2101 	mla	r1, ip, r1, r2
 800a9f4:	4604      	mov	r4, r0
 800a9f6:	2301      	movs	r3, #1
 800a9f8:	e7f0      	b.n	800a9dc <_vfiprintf_r+0x1b8>
 800a9fa:	ab03      	add	r3, sp, #12
 800a9fc:	9300      	str	r3, [sp, #0]
 800a9fe:	462a      	mov	r2, r5
 800aa00:	4b12      	ldr	r3, [pc, #72]	@ (800aa4c <_vfiprintf_r+0x228>)
 800aa02:	a904      	add	r1, sp, #16
 800aa04:	4630      	mov	r0, r6
 800aa06:	f3af 8000 	nop.w
 800aa0a:	4607      	mov	r7, r0
 800aa0c:	1c78      	adds	r0, r7, #1
 800aa0e:	d1d6      	bne.n	800a9be <_vfiprintf_r+0x19a>
 800aa10:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800aa12:	07d9      	lsls	r1, r3, #31
 800aa14:	d405      	bmi.n	800aa22 <_vfiprintf_r+0x1fe>
 800aa16:	89ab      	ldrh	r3, [r5, #12]
 800aa18:	059a      	lsls	r2, r3, #22
 800aa1a:	d402      	bmi.n	800aa22 <_vfiprintf_r+0x1fe>
 800aa1c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800aa1e:	f7fd fad9 	bl	8007fd4 <__retarget_lock_release_recursive>
 800aa22:	89ab      	ldrh	r3, [r5, #12]
 800aa24:	065b      	lsls	r3, r3, #25
 800aa26:	f53f af1f 	bmi.w	800a868 <_vfiprintf_r+0x44>
 800aa2a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800aa2c:	e71e      	b.n	800a86c <_vfiprintf_r+0x48>
 800aa2e:	ab03      	add	r3, sp, #12
 800aa30:	9300      	str	r3, [sp, #0]
 800aa32:	462a      	mov	r2, r5
 800aa34:	4b05      	ldr	r3, [pc, #20]	@ (800aa4c <_vfiprintf_r+0x228>)
 800aa36:	a904      	add	r1, sp, #16
 800aa38:	4630      	mov	r0, r6
 800aa3a:	f7fe fc15 	bl	8009268 <_printf_i>
 800aa3e:	e7e4      	b.n	800aa0a <_vfiprintf_r+0x1e6>
 800aa40:	0800aeb9 	.word	0x0800aeb9
 800aa44:	0800aec3 	.word	0x0800aec3
 800aa48:	00000000 	.word	0x00000000
 800aa4c:	0800a801 	.word	0x0800a801
 800aa50:	0800aebf 	.word	0x0800aebf

0800aa54 <__swbuf_r>:
 800aa54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aa56:	460e      	mov	r6, r1
 800aa58:	4614      	mov	r4, r2
 800aa5a:	4605      	mov	r5, r0
 800aa5c:	b118      	cbz	r0, 800aa66 <__swbuf_r+0x12>
 800aa5e:	6a03      	ldr	r3, [r0, #32]
 800aa60:	b90b      	cbnz	r3, 800aa66 <__swbuf_r+0x12>
 800aa62:	f7fd f9a3 	bl	8007dac <__sinit>
 800aa66:	69a3      	ldr	r3, [r4, #24]
 800aa68:	60a3      	str	r3, [r4, #8]
 800aa6a:	89a3      	ldrh	r3, [r4, #12]
 800aa6c:	071a      	lsls	r2, r3, #28
 800aa6e:	d501      	bpl.n	800aa74 <__swbuf_r+0x20>
 800aa70:	6923      	ldr	r3, [r4, #16]
 800aa72:	b943      	cbnz	r3, 800aa86 <__swbuf_r+0x32>
 800aa74:	4621      	mov	r1, r4
 800aa76:	4628      	mov	r0, r5
 800aa78:	f000 f82a 	bl	800aad0 <__swsetup_r>
 800aa7c:	b118      	cbz	r0, 800aa86 <__swbuf_r+0x32>
 800aa7e:	f04f 37ff 	mov.w	r7, #4294967295
 800aa82:	4638      	mov	r0, r7
 800aa84:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800aa86:	6823      	ldr	r3, [r4, #0]
 800aa88:	6922      	ldr	r2, [r4, #16]
 800aa8a:	1a98      	subs	r0, r3, r2
 800aa8c:	6963      	ldr	r3, [r4, #20]
 800aa8e:	b2f6      	uxtb	r6, r6
 800aa90:	4283      	cmp	r3, r0
 800aa92:	4637      	mov	r7, r6
 800aa94:	dc05      	bgt.n	800aaa2 <__swbuf_r+0x4e>
 800aa96:	4621      	mov	r1, r4
 800aa98:	4628      	mov	r0, r5
 800aa9a:	f7fe fd89 	bl	80095b0 <_fflush_r>
 800aa9e:	2800      	cmp	r0, #0
 800aaa0:	d1ed      	bne.n	800aa7e <__swbuf_r+0x2a>
 800aaa2:	68a3      	ldr	r3, [r4, #8]
 800aaa4:	3b01      	subs	r3, #1
 800aaa6:	60a3      	str	r3, [r4, #8]
 800aaa8:	6823      	ldr	r3, [r4, #0]
 800aaaa:	1c5a      	adds	r2, r3, #1
 800aaac:	6022      	str	r2, [r4, #0]
 800aaae:	701e      	strb	r6, [r3, #0]
 800aab0:	6962      	ldr	r2, [r4, #20]
 800aab2:	1c43      	adds	r3, r0, #1
 800aab4:	429a      	cmp	r2, r3
 800aab6:	d004      	beq.n	800aac2 <__swbuf_r+0x6e>
 800aab8:	89a3      	ldrh	r3, [r4, #12]
 800aaba:	07db      	lsls	r3, r3, #31
 800aabc:	d5e1      	bpl.n	800aa82 <__swbuf_r+0x2e>
 800aabe:	2e0a      	cmp	r6, #10
 800aac0:	d1df      	bne.n	800aa82 <__swbuf_r+0x2e>
 800aac2:	4621      	mov	r1, r4
 800aac4:	4628      	mov	r0, r5
 800aac6:	f7fe fd73 	bl	80095b0 <_fflush_r>
 800aaca:	2800      	cmp	r0, #0
 800aacc:	d0d9      	beq.n	800aa82 <__swbuf_r+0x2e>
 800aace:	e7d6      	b.n	800aa7e <__swbuf_r+0x2a>

0800aad0 <__swsetup_r>:
 800aad0:	b538      	push	{r3, r4, r5, lr}
 800aad2:	4b29      	ldr	r3, [pc, #164]	@ (800ab78 <__swsetup_r+0xa8>)
 800aad4:	4605      	mov	r5, r0
 800aad6:	6818      	ldr	r0, [r3, #0]
 800aad8:	460c      	mov	r4, r1
 800aada:	b118      	cbz	r0, 800aae4 <__swsetup_r+0x14>
 800aadc:	6a03      	ldr	r3, [r0, #32]
 800aade:	b90b      	cbnz	r3, 800aae4 <__swsetup_r+0x14>
 800aae0:	f7fd f964 	bl	8007dac <__sinit>
 800aae4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800aae8:	0719      	lsls	r1, r3, #28
 800aaea:	d422      	bmi.n	800ab32 <__swsetup_r+0x62>
 800aaec:	06da      	lsls	r2, r3, #27
 800aaee:	d407      	bmi.n	800ab00 <__swsetup_r+0x30>
 800aaf0:	2209      	movs	r2, #9
 800aaf2:	602a      	str	r2, [r5, #0]
 800aaf4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800aaf8:	81a3      	strh	r3, [r4, #12]
 800aafa:	f04f 30ff 	mov.w	r0, #4294967295
 800aafe:	e033      	b.n	800ab68 <__swsetup_r+0x98>
 800ab00:	0758      	lsls	r0, r3, #29
 800ab02:	d512      	bpl.n	800ab2a <__swsetup_r+0x5a>
 800ab04:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800ab06:	b141      	cbz	r1, 800ab1a <__swsetup_r+0x4a>
 800ab08:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800ab0c:	4299      	cmp	r1, r3
 800ab0e:	d002      	beq.n	800ab16 <__swsetup_r+0x46>
 800ab10:	4628      	mov	r0, r5
 800ab12:	f7fd fa67 	bl	8007fe4 <_free_r>
 800ab16:	2300      	movs	r3, #0
 800ab18:	6363      	str	r3, [r4, #52]	@ 0x34
 800ab1a:	89a3      	ldrh	r3, [r4, #12]
 800ab1c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800ab20:	81a3      	strh	r3, [r4, #12]
 800ab22:	2300      	movs	r3, #0
 800ab24:	6063      	str	r3, [r4, #4]
 800ab26:	6923      	ldr	r3, [r4, #16]
 800ab28:	6023      	str	r3, [r4, #0]
 800ab2a:	89a3      	ldrh	r3, [r4, #12]
 800ab2c:	f043 0308 	orr.w	r3, r3, #8
 800ab30:	81a3      	strh	r3, [r4, #12]
 800ab32:	6923      	ldr	r3, [r4, #16]
 800ab34:	b94b      	cbnz	r3, 800ab4a <__swsetup_r+0x7a>
 800ab36:	89a3      	ldrh	r3, [r4, #12]
 800ab38:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800ab3c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800ab40:	d003      	beq.n	800ab4a <__swsetup_r+0x7a>
 800ab42:	4621      	mov	r1, r4
 800ab44:	4628      	mov	r0, r5
 800ab46:	f000 f883 	bl	800ac50 <__smakebuf_r>
 800ab4a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ab4e:	f013 0201 	ands.w	r2, r3, #1
 800ab52:	d00a      	beq.n	800ab6a <__swsetup_r+0x9a>
 800ab54:	2200      	movs	r2, #0
 800ab56:	60a2      	str	r2, [r4, #8]
 800ab58:	6962      	ldr	r2, [r4, #20]
 800ab5a:	4252      	negs	r2, r2
 800ab5c:	61a2      	str	r2, [r4, #24]
 800ab5e:	6922      	ldr	r2, [r4, #16]
 800ab60:	b942      	cbnz	r2, 800ab74 <__swsetup_r+0xa4>
 800ab62:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800ab66:	d1c5      	bne.n	800aaf4 <__swsetup_r+0x24>
 800ab68:	bd38      	pop	{r3, r4, r5, pc}
 800ab6a:	0799      	lsls	r1, r3, #30
 800ab6c:	bf58      	it	pl
 800ab6e:	6962      	ldrpl	r2, [r4, #20]
 800ab70:	60a2      	str	r2, [r4, #8]
 800ab72:	e7f4      	b.n	800ab5e <__swsetup_r+0x8e>
 800ab74:	2000      	movs	r0, #0
 800ab76:	e7f7      	b.n	800ab68 <__swsetup_r+0x98>
 800ab78:	20000018 	.word	0x20000018

0800ab7c <_raise_r>:
 800ab7c:	291f      	cmp	r1, #31
 800ab7e:	b538      	push	{r3, r4, r5, lr}
 800ab80:	4605      	mov	r5, r0
 800ab82:	460c      	mov	r4, r1
 800ab84:	d904      	bls.n	800ab90 <_raise_r+0x14>
 800ab86:	2316      	movs	r3, #22
 800ab88:	6003      	str	r3, [r0, #0]
 800ab8a:	f04f 30ff 	mov.w	r0, #4294967295
 800ab8e:	bd38      	pop	{r3, r4, r5, pc}
 800ab90:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800ab92:	b112      	cbz	r2, 800ab9a <_raise_r+0x1e>
 800ab94:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800ab98:	b94b      	cbnz	r3, 800abae <_raise_r+0x32>
 800ab9a:	4628      	mov	r0, r5
 800ab9c:	f000 f830 	bl	800ac00 <_getpid_r>
 800aba0:	4622      	mov	r2, r4
 800aba2:	4601      	mov	r1, r0
 800aba4:	4628      	mov	r0, r5
 800aba6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800abaa:	f000 b817 	b.w	800abdc <_kill_r>
 800abae:	2b01      	cmp	r3, #1
 800abb0:	d00a      	beq.n	800abc8 <_raise_r+0x4c>
 800abb2:	1c59      	adds	r1, r3, #1
 800abb4:	d103      	bne.n	800abbe <_raise_r+0x42>
 800abb6:	2316      	movs	r3, #22
 800abb8:	6003      	str	r3, [r0, #0]
 800abba:	2001      	movs	r0, #1
 800abbc:	e7e7      	b.n	800ab8e <_raise_r+0x12>
 800abbe:	2100      	movs	r1, #0
 800abc0:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800abc4:	4620      	mov	r0, r4
 800abc6:	4798      	blx	r3
 800abc8:	2000      	movs	r0, #0
 800abca:	e7e0      	b.n	800ab8e <_raise_r+0x12>

0800abcc <raise>:
 800abcc:	4b02      	ldr	r3, [pc, #8]	@ (800abd8 <raise+0xc>)
 800abce:	4601      	mov	r1, r0
 800abd0:	6818      	ldr	r0, [r3, #0]
 800abd2:	f7ff bfd3 	b.w	800ab7c <_raise_r>
 800abd6:	bf00      	nop
 800abd8:	20000018 	.word	0x20000018

0800abdc <_kill_r>:
 800abdc:	b538      	push	{r3, r4, r5, lr}
 800abde:	4d07      	ldr	r5, [pc, #28]	@ (800abfc <_kill_r+0x20>)
 800abe0:	2300      	movs	r3, #0
 800abe2:	4604      	mov	r4, r0
 800abe4:	4608      	mov	r0, r1
 800abe6:	4611      	mov	r1, r2
 800abe8:	602b      	str	r3, [r5, #0]
 800abea:	f7f6 ffcd 	bl	8001b88 <_kill>
 800abee:	1c43      	adds	r3, r0, #1
 800abf0:	d102      	bne.n	800abf8 <_kill_r+0x1c>
 800abf2:	682b      	ldr	r3, [r5, #0]
 800abf4:	b103      	cbz	r3, 800abf8 <_kill_r+0x1c>
 800abf6:	6023      	str	r3, [r4, #0]
 800abf8:	bd38      	pop	{r3, r4, r5, pc}
 800abfa:	bf00      	nop
 800abfc:	2000055c 	.word	0x2000055c

0800ac00 <_getpid_r>:
 800ac00:	f7f6 bfba 	b.w	8001b78 <_getpid>

0800ac04 <__swhatbuf_r>:
 800ac04:	b570      	push	{r4, r5, r6, lr}
 800ac06:	460c      	mov	r4, r1
 800ac08:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ac0c:	2900      	cmp	r1, #0
 800ac0e:	b096      	sub	sp, #88	@ 0x58
 800ac10:	4615      	mov	r5, r2
 800ac12:	461e      	mov	r6, r3
 800ac14:	da0d      	bge.n	800ac32 <__swhatbuf_r+0x2e>
 800ac16:	89a3      	ldrh	r3, [r4, #12]
 800ac18:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800ac1c:	f04f 0100 	mov.w	r1, #0
 800ac20:	bf14      	ite	ne
 800ac22:	2340      	movne	r3, #64	@ 0x40
 800ac24:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800ac28:	2000      	movs	r0, #0
 800ac2a:	6031      	str	r1, [r6, #0]
 800ac2c:	602b      	str	r3, [r5, #0]
 800ac2e:	b016      	add	sp, #88	@ 0x58
 800ac30:	bd70      	pop	{r4, r5, r6, pc}
 800ac32:	466a      	mov	r2, sp
 800ac34:	f000 f848 	bl	800acc8 <_fstat_r>
 800ac38:	2800      	cmp	r0, #0
 800ac3a:	dbec      	blt.n	800ac16 <__swhatbuf_r+0x12>
 800ac3c:	9901      	ldr	r1, [sp, #4]
 800ac3e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800ac42:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800ac46:	4259      	negs	r1, r3
 800ac48:	4159      	adcs	r1, r3
 800ac4a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800ac4e:	e7eb      	b.n	800ac28 <__swhatbuf_r+0x24>

0800ac50 <__smakebuf_r>:
 800ac50:	898b      	ldrh	r3, [r1, #12]
 800ac52:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800ac54:	079d      	lsls	r5, r3, #30
 800ac56:	4606      	mov	r6, r0
 800ac58:	460c      	mov	r4, r1
 800ac5a:	d507      	bpl.n	800ac6c <__smakebuf_r+0x1c>
 800ac5c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800ac60:	6023      	str	r3, [r4, #0]
 800ac62:	6123      	str	r3, [r4, #16]
 800ac64:	2301      	movs	r3, #1
 800ac66:	6163      	str	r3, [r4, #20]
 800ac68:	b003      	add	sp, #12
 800ac6a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ac6c:	ab01      	add	r3, sp, #4
 800ac6e:	466a      	mov	r2, sp
 800ac70:	f7ff ffc8 	bl	800ac04 <__swhatbuf_r>
 800ac74:	9f00      	ldr	r7, [sp, #0]
 800ac76:	4605      	mov	r5, r0
 800ac78:	4639      	mov	r1, r7
 800ac7a:	4630      	mov	r0, r6
 800ac7c:	f7fd fa1e 	bl	80080bc <_malloc_r>
 800ac80:	b948      	cbnz	r0, 800ac96 <__smakebuf_r+0x46>
 800ac82:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ac86:	059a      	lsls	r2, r3, #22
 800ac88:	d4ee      	bmi.n	800ac68 <__smakebuf_r+0x18>
 800ac8a:	f023 0303 	bic.w	r3, r3, #3
 800ac8e:	f043 0302 	orr.w	r3, r3, #2
 800ac92:	81a3      	strh	r3, [r4, #12]
 800ac94:	e7e2      	b.n	800ac5c <__smakebuf_r+0xc>
 800ac96:	89a3      	ldrh	r3, [r4, #12]
 800ac98:	6020      	str	r0, [r4, #0]
 800ac9a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ac9e:	81a3      	strh	r3, [r4, #12]
 800aca0:	9b01      	ldr	r3, [sp, #4]
 800aca2:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800aca6:	b15b      	cbz	r3, 800acc0 <__smakebuf_r+0x70>
 800aca8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800acac:	4630      	mov	r0, r6
 800acae:	f000 f81d 	bl	800acec <_isatty_r>
 800acb2:	b128      	cbz	r0, 800acc0 <__smakebuf_r+0x70>
 800acb4:	89a3      	ldrh	r3, [r4, #12]
 800acb6:	f023 0303 	bic.w	r3, r3, #3
 800acba:	f043 0301 	orr.w	r3, r3, #1
 800acbe:	81a3      	strh	r3, [r4, #12]
 800acc0:	89a3      	ldrh	r3, [r4, #12]
 800acc2:	431d      	orrs	r5, r3
 800acc4:	81a5      	strh	r5, [r4, #12]
 800acc6:	e7cf      	b.n	800ac68 <__smakebuf_r+0x18>

0800acc8 <_fstat_r>:
 800acc8:	b538      	push	{r3, r4, r5, lr}
 800acca:	4d07      	ldr	r5, [pc, #28]	@ (800ace8 <_fstat_r+0x20>)
 800accc:	2300      	movs	r3, #0
 800acce:	4604      	mov	r4, r0
 800acd0:	4608      	mov	r0, r1
 800acd2:	4611      	mov	r1, r2
 800acd4:	602b      	str	r3, [r5, #0]
 800acd6:	f7f6 ffb7 	bl	8001c48 <_fstat>
 800acda:	1c43      	adds	r3, r0, #1
 800acdc:	d102      	bne.n	800ace4 <_fstat_r+0x1c>
 800acde:	682b      	ldr	r3, [r5, #0]
 800ace0:	b103      	cbz	r3, 800ace4 <_fstat_r+0x1c>
 800ace2:	6023      	str	r3, [r4, #0]
 800ace4:	bd38      	pop	{r3, r4, r5, pc}
 800ace6:	bf00      	nop
 800ace8:	2000055c 	.word	0x2000055c

0800acec <_isatty_r>:
 800acec:	b538      	push	{r3, r4, r5, lr}
 800acee:	4d06      	ldr	r5, [pc, #24]	@ (800ad08 <_isatty_r+0x1c>)
 800acf0:	2300      	movs	r3, #0
 800acf2:	4604      	mov	r4, r0
 800acf4:	4608      	mov	r0, r1
 800acf6:	602b      	str	r3, [r5, #0]
 800acf8:	f7f6 ffb6 	bl	8001c68 <_isatty>
 800acfc:	1c43      	adds	r3, r0, #1
 800acfe:	d102      	bne.n	800ad06 <_isatty_r+0x1a>
 800ad00:	682b      	ldr	r3, [r5, #0]
 800ad02:	b103      	cbz	r3, 800ad06 <_isatty_r+0x1a>
 800ad04:	6023      	str	r3, [r4, #0]
 800ad06:	bd38      	pop	{r3, r4, r5, pc}
 800ad08:	2000055c 	.word	0x2000055c

0800ad0c <_init>:
 800ad0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ad0e:	bf00      	nop
 800ad10:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ad12:	bc08      	pop	{r3}
 800ad14:	469e      	mov	lr, r3
 800ad16:	4770      	bx	lr

0800ad18 <_fini>:
 800ad18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ad1a:	bf00      	nop
 800ad1c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ad1e:	bc08      	pop	{r3}
 800ad20:	469e      	mov	lr, r3
 800ad22:	4770      	bx	lr
